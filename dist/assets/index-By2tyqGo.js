const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/browser-ponyfill-j5TnoA9K.js","assets/vendor-CAR64sj_.js","assets/database-x2YvVIBQ.js"])))=>i.map(i=>d[i]);
import { u as useTheme, j as jsxRuntimeExports, B as Box, a as Button, b as alpha$1, L as LanguageIcon, M as Menu, c as MenuItem, d as ListItemIcon, C as CheckIcon, e as ListItemText, F as FormControlLabel, S as Switch, T as Tooltip$1, I as IconButton, f as ContrastIcon, g as useMediaQuery, A as AppBar, h as Toolbar, i as Typography, k as MenuIcon, D as Drawer, l as CloseIcon, m as Divider, n as List, o as ListItem, H as HomeIcon, p as ArchitectureIcon, P as PeopleIcon, q as MapIcon, r as Analytics, s as DashboardIcon, t as Container, G as Grid, v as Skeleton, w as Card$1, x as CardContent$1, y as Fade, z as Stack, E as Chip, J as TextField, K as Search, N as Paper, O as CircularProgress, Q as LinearProgress, R as TrendingUp, U as Refresh, V as Alert, W as CardActionArea, Z as Zoom, X as Fab, Y as ZoomIn, _ as ZoomOut, $ as MyLocation, a0 as Fullscreen, a1 as LocationOn, a2 as InputAdornment, a3 as Clear, a4 as MicIcon, a5 as CameraIcon, a6 as ExploreIcon, a7 as ToggleButtonGroup, a8 as ToggleButton, a9 as GridViewIcon, aa as ViewListIcon, ab as FormControl, ac as InputLabel, ad as Select, ae as SortIcon, af as FilterListIcon, ag as Person, ah as CalendarTodayIcon, ai as Category, aj as EmojiEvents, ak as Pagination, al as InsightsIcon, am as ArrowBackIcon, an as ImageSearchIcon, ao as WikipediaIcon$1, ap as CloudOffIcon, aq as CakeIcon, ar as PublicIcon, as as School, at as Work, au as EventIcon, av as PersonOffIcon, aw as Business, ax as LinkIcon, ay as TableContainer, az as Table, aA as TableBody, aB as TableRow, aC as TableCell, aD as Link$1, aE as reactIsExports, aF as clsx, aG as Download, aH as Speed, aI as Memory, aJ as PieChart$1, aK as Accordion, aL as AccordionSummary, aM as ExpandMore, aN as AccordionDetails, aO as SkipPrevious, aP as Pause, aQ as PlayArrow, aR as Stop, aS as SkipNext, aT as Slider, aU as Avatar, aV as Dialog, aW as DialogTitle, aX as DialogContent, aY as DialogActions, aZ as Favorite, a_ as FavoriteBorder, a$ as DateRange, b0 as Timeline, b1 as Share, b2 as Tabs$1, b3 as Tab, b4 as CardMedia, b5 as ListItemAvatar, b6 as FilterAlt, b7 as Badge$1, b8 as Visibility, b9 as Star, ba as Checkbox, bb as Autocomplete, bc as Error$1, bd as FormGroup, be as Storage, bf as Description, bg as Schedule, bh as CheckCircle, bi as GetApp, bj as TableChart, bk as PictureAsPdf, bl as Image, bm as Snackbar, bn as styled, bo as createTheme, bp as ThemeProvider, bq as CssBaseline } from './ui-BK1YqlDN.js';
import { d as reactDomExports, g as getDefaultExportFromCjs, r as reactExports, a as React$3, u as useLocation, L as Link, c as commonjsGlobal, f as useNavigate, h as useParams, H as HashRouter, i as Routes, j as Route } from './vendor-CAR64sj_.js';
import { L as L$1 } from './map-Dh--_t80.js';
import { d as distExports } from './database-x2YvVIBQ.js';

true&&(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node of mutation.addedNodes) {
        if (node.tagName === "LINK" && node.rel === "modulepreload")
          processPreload(node);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(link) {
    const fetchOpts = {};
    if (link.integrity) fetchOpts.integrity = link.integrity;
    if (link.referrerPolicy) fetchOpts.referrerPolicy = link.referrerPolicy;
    if (link.crossOrigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (link.crossOrigin === "anonymous") fetchOpts.credentials = "omit";
    else fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
}());

var createRoot;
var m = reactDomExports;
{
  createRoot = m.createRoot;
  m.hydrateRoot;
}

/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */

var hasElementType = typeof Element !== 'undefined';
var hasMap = typeof Map === 'function';
var hasSet = typeof Set === 'function';
var hasArrayBuffer = typeof ArrayBuffer === 'function' && !!ArrayBuffer.isView;

// Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js

function equal(a, b) {
  // START: fast-deep-equal es6/index.js 3.1.3
  if (a === b) return true;

  if (a && b && typeof a == 'object' && typeof b == 'object') {
    if (a.constructor !== b.constructor) return false;

    var length, i, keys;
    if (Array.isArray(a)) {
      length = a.length;
      if (length != b.length) return false;
      for (i = length; i-- !== 0;)
        if (!equal(a[i], b[i])) return false;
      return true;
    }

    // START: Modifications:
    // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code
    //    to co-exist with es5.
    // 2. Replace `for of` with es5 compliant iteration using `for`.
    //    Basically, take:
    //
    //    ```js
    //    for (i of a.entries())
    //      if (!b.has(i[0])) return false;
    //    ```
    //
    //    ... and convert to:
    //
    //    ```js
    //    it = a.entries();
    //    while (!(i = it.next()).done)
    //      if (!b.has(i.value[0])) return false;
    //    ```
    //
    //    **Note**: `i` access switches to `i.value`.
    var it;
    if (hasMap && (a instanceof Map) && (b instanceof Map)) {
      if (a.size !== b.size) return false;
      it = a.entries();
      while (!(i = it.next()).done)
        if (!b.has(i.value[0])) return false;
      it = a.entries();
      while (!(i = it.next()).done)
        if (!equal(i.value[1], b.get(i.value[0]))) return false;
      return true;
    }

    if (hasSet && (a instanceof Set) && (b instanceof Set)) {
      if (a.size !== b.size) return false;
      it = a.entries();
      while (!(i = it.next()).done)
        if (!b.has(i.value[0])) return false;
      return true;
    }
    // END: Modifications

    if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
      length = a.length;
      if (length != b.length) return false;
      for (i = length; i-- !== 0;)
        if (a[i] !== b[i]) return false;
      return true;
    }

    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
    // START: Modifications:
    // Apply guards for `Object.create(null)` handling. See:
    // - https://github.com/FormidableLabs/react-fast-compare/issues/64
    // - https://github.com/epoberezkin/fast-deep-equal/issues/49
    if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === 'function' && typeof b.valueOf === 'function') return a.valueOf() === b.valueOf();
    if (a.toString !== Object.prototype.toString && typeof a.toString === 'function' && typeof b.toString === 'function') return a.toString() === b.toString();
    // END: Modifications

    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) return false;

    for (i = length; i-- !== 0;)
      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
    // END: fast-deep-equal

    // START: react-fast-compare
    // custom handling for DOM elements
    if (hasElementType && a instanceof Element) return false;

    // custom handling for React/Preact
    for (i = length; i-- !== 0;) {
      if ((keys[i] === '_owner' || keys[i] === '__v' || keys[i] === '__o') && a.$$typeof) {
        // React-specific: avoid traversing React elements' _owner
        // Preact-specific: avoid traversing Preact elements' __v and __o
        //    __v = $_original / $_vnode
        //    __o = $_owner
        // These properties contain circular references and are not needed when
        // comparing the actual elements (and not their owners)
        // .$$typeof and ._store on just reasonable markers of elements

        continue;
      }

      // all other properties should be traversed as usual
      if (!equal(a[keys[i]], b[keys[i]])) return false;
    }
    // END: react-fast-compare

    // START: fast-deep-equal
    return true;
  }

  return a !== a && b !== b;
}
// end fast-deep-equal

var reactFastCompare = function isEqual(a, b) {
  try {
    return equal(a, b);
  } catch (error) {
    if (((error.message || '').match(/stack|recursion/i))) {
      // warn on circular references, don't crash
      // browsers give this different errors name and messages:
      // chrome/safari: "RangeError", "Maximum call stack size exceeded"
      // firefox: "InternalError", too much recursion"
      // edge: "Error", "Out of stack space"
      console.warn('react-fast-compare cannot handle circular refs');
      return false;
    }
    // some other error. we should definitely know about these
    throw error;
  }
};

const fastCompare = /*@__PURE__*/getDefaultExportFromCjs(reactFastCompare);

var invariant$1 = function(condition, format, a, b, c, d, e, f) {
  if (!condition) {
    var error;
    if (format === void 0) {
      error = new Error(
        "Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings."
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        format.replace(/%s/g, function() {
          return args[argIndex++];
        })
      );
      error.name = "Invariant Violation";
    }
    error.framesToPop = 1;
    throw error;
  }
};
var browser = invariant$1;

const invariant$2 = /*@__PURE__*/getDefaultExportFromCjs(browser);

//

var shallowequal = function shallowEqual(objA, objB, compare, compareContext) {
  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;

  if (ret !== void 0) {
    return !!ret;
  }

  if (objA === objB) {
    return true;
  }

  if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);

  // Test for A's keys different from B.
  for (var idx = 0; idx < keysA.length; idx++) {
    var key = keysA[idx];

    if (!bHasOwnProperty(key)) {
      return false;
    }

    var valueA = objA[key];
    var valueB = objB[key];

    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;

    if (ret === false || (ret === void 0 && valueA !== valueB)) {
      return false;
    }
  }

  return true;
};

const shallowEqual$1 = /*@__PURE__*/getDefaultExportFromCjs(shallowequal);

// src/index.tsx

// src/constants.ts
var TAG_NAMES = /* @__PURE__ */ ((TAG_NAMES2) => {
  TAG_NAMES2["BASE"] = "base";
  TAG_NAMES2["BODY"] = "body";
  TAG_NAMES2["HEAD"] = "head";
  TAG_NAMES2["HTML"] = "html";
  TAG_NAMES2["LINK"] = "link";
  TAG_NAMES2["META"] = "meta";
  TAG_NAMES2["NOSCRIPT"] = "noscript";
  TAG_NAMES2["SCRIPT"] = "script";
  TAG_NAMES2["STYLE"] = "style";
  TAG_NAMES2["TITLE"] = "title";
  TAG_NAMES2["FRAGMENT"] = "Symbol(react.fragment)";
  return TAG_NAMES2;
})(TAG_NAMES || {});
var SEO_PRIORITY_TAGS = {
  link: { rel: ["amphtml", "canonical", "alternate"] },
  script: { type: ["application/ld+json"] },
  meta: {
    charset: "",
    name: ["generator", "robots", "description"],
    property: [
      "og:type",
      "og:title",
      "og:url",
      "og:image",
      "og:image:alt",
      "og:description",
      "twitter:url",
      "twitter:title",
      "twitter:description",
      "twitter:image",
      "twitter:image:alt",
      "twitter:card",
      "twitter:site"
    ]
  }
};
var VALID_TAG_NAMES = Object.values(TAG_NAMES);
var REACT_TAG_MAP = {
  accesskey: "accessKey",
  charset: "charSet",
  class: "className",
  contenteditable: "contentEditable",
  contextmenu: "contextMenu",
  "http-equiv": "httpEquiv",
  itemprop: "itemProp",
  tabindex: "tabIndex"
};
var HTML_TAG_MAP = Object.entries(REACT_TAG_MAP).reduce(
  (carry, [key, value]) => {
    carry[value] = key;
    return carry;
  },
  {}
);
var HELMET_ATTRIBUTE = "data-rh";

// src/utils.ts
var HELMET_PROPS = {
  DEFAULT_TITLE: "defaultTitle",
  DEFER: "defer",
  ENCODE_SPECIAL_CHARACTERS: "encodeSpecialCharacters",
  ON_CHANGE_CLIENT_STATE: "onChangeClientState",
  TITLE_TEMPLATE: "titleTemplate",
  PRIORITIZE_SEO_TAGS: "prioritizeSeoTags"
};
var getInnermostProperty = (propsList, property) => {
  for (let i = propsList.length - 1; i >= 0; i -= 1) {
    const props = propsList[i];
    if (Object.prototype.hasOwnProperty.call(props, property)) {
      return props[property];
    }
  }
  return null;
};
var getTitleFromPropsList = (propsList) => {
  let innermostTitle = getInnermostProperty(propsList, "title" /* TITLE */);
  const innermostTemplate = getInnermostProperty(propsList, HELMET_PROPS.TITLE_TEMPLATE);
  if (Array.isArray(innermostTitle)) {
    innermostTitle = innermostTitle.join("");
  }
  if (innermostTemplate && innermostTitle) {
    return innermostTemplate.replace(/%s/g, () => innermostTitle);
  }
  const innermostDefaultTitle = getInnermostProperty(propsList, HELMET_PROPS.DEFAULT_TITLE);
  return innermostTitle || innermostDefaultTitle || void 0;
};
var getOnChangeClientState = (propsList) => getInnermostProperty(propsList, HELMET_PROPS.ON_CHANGE_CLIENT_STATE) || (() => {
});
var getAttributesFromPropsList = (tagType, propsList) => propsList.filter((props) => typeof props[tagType] !== "undefined").map((props) => props[tagType]).reduce((tagAttrs, current) => ({ ...tagAttrs, ...current }), {});
var getBaseTagFromPropsList = (primaryAttributes, propsList) => propsList.filter((props) => typeof props["base" /* BASE */] !== "undefined").map((props) => props["base" /* BASE */]).reverse().reduce((innermostBaseTag, tag) => {
  if (!innermostBaseTag.length) {
    const keys = Object.keys(tag);
    for (let i = 0; i < keys.length; i += 1) {
      const attributeKey = keys[i];
      const lowerCaseAttributeKey = attributeKey.toLowerCase();
      if (primaryAttributes.indexOf(lowerCaseAttributeKey) !== -1 && tag[lowerCaseAttributeKey]) {
        return innermostBaseTag.concat(tag);
      }
    }
  }
  return innermostBaseTag;
}, []);
var warn$2 = (msg) => console && typeof console.warn === "function" && console.warn(msg);
var getTagsFromPropsList = (tagName, primaryAttributes, propsList) => {
  const approvedSeenTags = {};
  return propsList.filter((props) => {
    if (Array.isArray(props[tagName])) {
      return true;
    }
    if (typeof props[tagName] !== "undefined") {
      warn$2(
        `Helmet: ${tagName} should be of type "Array". Instead found type "${typeof props[tagName]}"`
      );
    }
    return false;
  }).map((props) => props[tagName]).reverse().reduce((approvedTags, instanceTags) => {
    const instanceSeenTags = {};
    instanceTags.filter((tag) => {
      let primaryAttributeKey;
      const keys2 = Object.keys(tag);
      for (let i = 0; i < keys2.length; i += 1) {
        const attributeKey = keys2[i];
        const lowerCaseAttributeKey = attributeKey.toLowerCase();
        if (primaryAttributes.indexOf(lowerCaseAttributeKey) !== -1 && !(primaryAttributeKey === "rel" /* REL */ && tag[primaryAttributeKey].toLowerCase() === "canonical") && !(lowerCaseAttributeKey === "rel" /* REL */ && tag[lowerCaseAttributeKey].toLowerCase() === "stylesheet")) {
          primaryAttributeKey = lowerCaseAttributeKey;
        }
        if (primaryAttributes.indexOf(attributeKey) !== -1 && (attributeKey === "innerHTML" /* INNER_HTML */ || attributeKey === "cssText" /* CSS_TEXT */ || attributeKey === "itemprop" /* ITEM_PROP */)) {
          primaryAttributeKey = attributeKey;
        }
      }
      if (!primaryAttributeKey || !tag[primaryAttributeKey]) {
        return false;
      }
      const value = tag[primaryAttributeKey].toLowerCase();
      if (!approvedSeenTags[primaryAttributeKey]) {
        approvedSeenTags[primaryAttributeKey] = {};
      }
      if (!instanceSeenTags[primaryAttributeKey]) {
        instanceSeenTags[primaryAttributeKey] = {};
      }
      if (!approvedSeenTags[primaryAttributeKey][value]) {
        instanceSeenTags[primaryAttributeKey][value] = true;
        return true;
      }
      return false;
    }).reverse().forEach((tag) => approvedTags.push(tag));
    const keys = Object.keys(instanceSeenTags);
    for (let i = 0; i < keys.length; i += 1) {
      const attributeKey = keys[i];
      const tagUnion = {
        ...approvedSeenTags[attributeKey],
        ...instanceSeenTags[attributeKey]
      };
      approvedSeenTags[attributeKey] = tagUnion;
    }
    return approvedTags;
  }, []).reverse();
};
var getAnyTrueFromPropsList = (propsList, checkedTag) => {
  if (Array.isArray(propsList) && propsList.length) {
    for (let index = 0; index < propsList.length; index += 1) {
      const prop = propsList[index];
      if (prop[checkedTag]) {
        return true;
      }
    }
  }
  return false;
};
var reducePropsToState = (propsList) => ({
  baseTag: getBaseTagFromPropsList(["href" /* HREF */], propsList),
  bodyAttributes: getAttributesFromPropsList("bodyAttributes" /* BODY */, propsList),
  defer: getInnermostProperty(propsList, HELMET_PROPS.DEFER),
  encode: getInnermostProperty(propsList, HELMET_PROPS.ENCODE_SPECIAL_CHARACTERS),
  htmlAttributes: getAttributesFromPropsList("htmlAttributes" /* HTML */, propsList),
  linkTags: getTagsFromPropsList(
    "link" /* LINK */,
    ["rel" /* REL */, "href" /* HREF */],
    propsList
  ),
  metaTags: getTagsFromPropsList(
    "meta" /* META */,
    [
      "name" /* NAME */,
      "charset" /* CHARSET */,
      "http-equiv" /* HTTPEQUIV */,
      "property" /* PROPERTY */,
      "itemprop" /* ITEM_PROP */
    ],
    propsList
  ),
  noscriptTags: getTagsFromPropsList("noscript" /* NOSCRIPT */, ["innerHTML" /* INNER_HTML */], propsList),
  onChangeClientState: getOnChangeClientState(propsList),
  scriptTags: getTagsFromPropsList(
    "script" /* SCRIPT */,
    ["src" /* SRC */, "innerHTML" /* INNER_HTML */],
    propsList
  ),
  styleTags: getTagsFromPropsList("style" /* STYLE */, ["cssText" /* CSS_TEXT */], propsList),
  title: getTitleFromPropsList(propsList),
  titleAttributes: getAttributesFromPropsList("titleAttributes" /* TITLE */, propsList),
  prioritizeSeoTags: getAnyTrueFromPropsList(propsList, HELMET_PROPS.PRIORITIZE_SEO_TAGS)
});
var flattenArray = (possibleArray) => Array.isArray(possibleArray) ? possibleArray.join("") : possibleArray;
var checkIfPropsMatch = (props, toMatch) => {
  const keys = Object.keys(props);
  for (let i = 0; i < keys.length; i += 1) {
    if (toMatch[keys[i]] && toMatch[keys[i]].includes(props[keys[i]])) {
      return true;
    }
  }
  return false;
};
var prioritizer = (elementsList, propsToMatch) => {
  if (Array.isArray(elementsList)) {
    return elementsList.reduce(
      (acc, elementAttrs) => {
        if (checkIfPropsMatch(elementAttrs, propsToMatch)) {
          acc.priority.push(elementAttrs);
        } else {
          acc.default.push(elementAttrs);
        }
        return acc;
      },
      { priority: [], default: [] }
    );
  }
  return { default: elementsList, priority: [] };
};
var without = (obj, key) => {
  return {
    ...obj,
    [key]: void 0
  };
};

// src/server.ts
var SELF_CLOSING_TAGS = ["noscript" /* NOSCRIPT */, "script" /* SCRIPT */, "style" /* STYLE */];
var encodeSpecialCharacters = (str, encode = true) => {
  if (encode === false) {
    return String(str);
  }
  return String(str).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;");
};
var generateElementAttributesAsString = (attributes) => Object.keys(attributes).reduce((str, key) => {
  const attr = typeof attributes[key] !== "undefined" ? `${key}="${attributes[key]}"` : `${key}`;
  return str ? `${str} ${attr}` : attr;
}, "");
var generateTitleAsString = (type, title, attributes, encode) => {
  const attributeString = generateElementAttributesAsString(attributes);
  const flattenedTitle = flattenArray(title);
  return attributeString ? `<${type} ${HELMET_ATTRIBUTE}="true" ${attributeString}>${encodeSpecialCharacters(
    flattenedTitle,
    encode
  )}</${type}>` : `<${type} ${HELMET_ATTRIBUTE}="true">${encodeSpecialCharacters(
    flattenedTitle,
    encode
  )}</${type}>`;
};
var generateTagsAsString = (type, tags, encode = true) => tags.reduce((str, t) => {
  const tag = t;
  const attributeHtml = Object.keys(tag).filter(
    (attribute) => !(attribute === "innerHTML" /* INNER_HTML */ || attribute === "cssText" /* CSS_TEXT */)
  ).reduce((string, attribute) => {
    const attr = typeof tag[attribute] === "undefined" ? attribute : `${attribute}="${encodeSpecialCharacters(tag[attribute], encode)}"`;
    return string ? `${string} ${attr}` : attr;
  }, "");
  const tagContent = tag.innerHTML || tag.cssText || "";
  const isSelfClosing = SELF_CLOSING_TAGS.indexOf(type) === -1;
  return `${str}<${type} ${HELMET_ATTRIBUTE}="true" ${attributeHtml}${isSelfClosing ? `/>` : `>${tagContent}</${type}>`}`;
}, "");
var convertElementAttributesToReactProps = (attributes, initProps = {}) => Object.keys(attributes).reduce((obj, key) => {
  const mapped = REACT_TAG_MAP[key];
  obj[mapped || key] = attributes[key];
  return obj;
}, initProps);
var generateTitleAsReactComponent = (_type, title, attributes) => {
  const initProps = {
    key: title,
    [HELMET_ATTRIBUTE]: true
  };
  const props = convertElementAttributesToReactProps(attributes, initProps);
  return [React$3.createElement("title" /* TITLE */, props, title)];
};
var generateTagsAsReactComponent = (type, tags) => tags.map((tag, i) => {
  const mappedTag = {
    key: i,
    [HELMET_ATTRIBUTE]: true
  };
  Object.keys(tag).forEach((attribute) => {
    const mapped = REACT_TAG_MAP[attribute];
    const mappedAttribute = mapped || attribute;
    if (mappedAttribute === "innerHTML" /* INNER_HTML */ || mappedAttribute === "cssText" /* CSS_TEXT */) {
      const content = tag.innerHTML || tag.cssText;
      mappedTag.dangerouslySetInnerHTML = { __html: content };
    } else {
      mappedTag[mappedAttribute] = tag[attribute];
    }
  });
  return React$3.createElement(type, mappedTag);
});
var getMethodsForTag = (type, tags, encode = true) => {
  switch (type) {
    case "title" /* TITLE */:
      return {
        toComponent: () => generateTitleAsReactComponent(type, tags.title, tags.titleAttributes),
        toString: () => generateTitleAsString(type, tags.title, tags.titleAttributes, encode)
      };
    case "bodyAttributes" /* BODY */:
    case "htmlAttributes" /* HTML */:
      return {
        toComponent: () => convertElementAttributesToReactProps(tags),
        toString: () => generateElementAttributesAsString(tags)
      };
    default:
      return {
        toComponent: () => generateTagsAsReactComponent(type, tags),
        toString: () => generateTagsAsString(type, tags, encode)
      };
  }
};
var getPriorityMethods = ({ metaTags, linkTags, scriptTags, encode }) => {
  const meta = prioritizer(metaTags, SEO_PRIORITY_TAGS.meta);
  const link = prioritizer(linkTags, SEO_PRIORITY_TAGS.link);
  const script = prioritizer(scriptTags, SEO_PRIORITY_TAGS.script);
  const priorityMethods = {
    toComponent: () => [
      ...generateTagsAsReactComponent("meta" /* META */, meta.priority),
      ...generateTagsAsReactComponent("link" /* LINK */, link.priority),
      ...generateTagsAsReactComponent("script" /* SCRIPT */, script.priority)
    ],
    toString: () => (
      // generate all the tags as strings and concatenate them
      `${getMethodsForTag("meta" /* META */, meta.priority, encode)} ${getMethodsForTag(
        "link" /* LINK */,
        link.priority,
        encode
      )} ${getMethodsForTag("script" /* SCRIPT */, script.priority, encode)}`
    )
  };
  return {
    priorityMethods,
    metaTags: meta.default,
    linkTags: link.default,
    scriptTags: script.default
  };
};
var mapStateOnServer = (props) => {
  const {
    baseTag,
    bodyAttributes,
    encode = true,
    htmlAttributes,
    noscriptTags,
    styleTags,
    title = "",
    titleAttributes,
    prioritizeSeoTags
  } = props;
  let { linkTags, metaTags, scriptTags } = props;
  let priorityMethods = {
    toComponent: () => {
    },
    toString: () => ""
  };
  if (prioritizeSeoTags) {
    ({ priorityMethods, linkTags, metaTags, scriptTags } = getPriorityMethods(props));
  }
  return {
    priority: priorityMethods,
    base: getMethodsForTag("base" /* BASE */, baseTag, encode),
    bodyAttributes: getMethodsForTag("bodyAttributes" /* BODY */, bodyAttributes, encode),
    htmlAttributes: getMethodsForTag("htmlAttributes" /* HTML */, htmlAttributes, encode),
    link: getMethodsForTag("link" /* LINK */, linkTags, encode),
    meta: getMethodsForTag("meta" /* META */, metaTags, encode),
    noscript: getMethodsForTag("noscript" /* NOSCRIPT */, noscriptTags, encode),
    script: getMethodsForTag("script" /* SCRIPT */, scriptTags, encode),
    style: getMethodsForTag("style" /* STYLE */, styleTags, encode),
    title: getMethodsForTag("title" /* TITLE */, { title, titleAttributes }, encode)
  };
};
var server_default = mapStateOnServer;

// src/HelmetData.ts
var instances = [];
var isDocument = !!(typeof window !== "undefined" && window.document && window.document.createElement);
var HelmetData = class {
  instances = [];
  canUseDOM = isDocument;
  context;
  value = {
    setHelmet: (serverState) => {
      this.context.helmet = serverState;
    },
    helmetInstances: {
      get: () => this.canUseDOM ? instances : this.instances,
      add: (instance) => {
        (this.canUseDOM ? instances : this.instances).push(instance);
      },
      remove: (instance) => {
        const index = (this.canUseDOM ? instances : this.instances).indexOf(instance);
        (this.canUseDOM ? instances : this.instances).splice(index, 1);
      }
    }
  };
  constructor(context, canUseDOM) {
    this.context = context;
    this.canUseDOM = canUseDOM || false;
    if (!canUseDOM) {
      context.helmet = server_default({
        baseTag: [],
        bodyAttributes: {},
        htmlAttributes: {},
        linkTags: [],
        metaTags: [],
        noscriptTags: [],
        scriptTags: [],
        styleTags: [],
        title: "",
        titleAttributes: {}
      });
    }
  }
};

// src/Provider.tsx
var defaultValue = {};
var Context = React$3.createContext(defaultValue);
var HelmetProvider = class _HelmetProvider extends reactExports.Component {
  static canUseDOM = isDocument;
  helmetData;
  constructor(props) {
    super(props);
    this.helmetData = new HelmetData(this.props.context || {}, _HelmetProvider.canUseDOM);
  }
  render() {
    return /* @__PURE__ */ React$3.createElement(Context.Provider, { value: this.helmetData.value }, this.props.children);
  }
};

// src/client.ts
var updateTags = (type, tags) => {
  const headElement = document.head || document.querySelector("head" /* HEAD */);
  const tagNodes = headElement.querySelectorAll(`${type}[${HELMET_ATTRIBUTE}]`);
  const oldTags = [].slice.call(tagNodes);
  const newTags = [];
  let indexToDelete;
  if (tags && tags.length) {
    tags.forEach((tag) => {
      const newElement = document.createElement(type);
      for (const attribute in tag) {
        if (Object.prototype.hasOwnProperty.call(tag, attribute)) {
          if (attribute === "innerHTML" /* INNER_HTML */) {
            newElement.innerHTML = tag.innerHTML;
          } else if (attribute === "cssText" /* CSS_TEXT */) {
            if (newElement.styleSheet) {
              newElement.styleSheet.cssText = tag.cssText;
            } else {
              newElement.appendChild(document.createTextNode(tag.cssText));
            }
          } else {
            const attr = attribute;
            const value = typeof tag[attr] === "undefined" ? "" : tag[attr];
            newElement.setAttribute(attribute, value);
          }
        }
      }
      newElement.setAttribute(HELMET_ATTRIBUTE, "true");
      if (oldTags.some((existingTag, index) => {
        indexToDelete = index;
        return newElement.isEqualNode(existingTag);
      })) {
        oldTags.splice(indexToDelete, 1);
      } else {
        newTags.push(newElement);
      }
    });
  }
  oldTags.forEach((tag) => tag.parentNode?.removeChild(tag));
  newTags.forEach((tag) => headElement.appendChild(tag));
  return {
    oldTags,
    newTags
  };
};
var updateAttributes = (tagName, attributes) => {
  const elementTag = document.getElementsByTagName(tagName)[0];
  if (!elementTag) {
    return;
  }
  const helmetAttributeString = elementTag.getAttribute(HELMET_ATTRIBUTE);
  const helmetAttributes = helmetAttributeString ? helmetAttributeString.split(",") : [];
  const attributesToRemove = [...helmetAttributes];
  const attributeKeys = Object.keys(attributes);
  for (const attribute of attributeKeys) {
    const value = attributes[attribute] || "";
    if (elementTag.getAttribute(attribute) !== value) {
      elementTag.setAttribute(attribute, value);
    }
    if (helmetAttributes.indexOf(attribute) === -1) {
      helmetAttributes.push(attribute);
    }
    const indexToSave = attributesToRemove.indexOf(attribute);
    if (indexToSave !== -1) {
      attributesToRemove.splice(indexToSave, 1);
    }
  }
  for (let i = attributesToRemove.length - 1; i >= 0; i -= 1) {
    elementTag.removeAttribute(attributesToRemove[i]);
  }
  if (helmetAttributes.length === attributesToRemove.length) {
    elementTag.removeAttribute(HELMET_ATTRIBUTE);
  } else if (elementTag.getAttribute(HELMET_ATTRIBUTE) !== attributeKeys.join(",")) {
    elementTag.setAttribute(HELMET_ATTRIBUTE, attributeKeys.join(","));
  }
};
var updateTitle = (title, attributes) => {
  if (typeof title !== "undefined" && document.title !== title) {
    document.title = flattenArray(title);
  }
  updateAttributes("title" /* TITLE */, attributes);
};
var commitTagChanges = (newState, cb) => {
  const {
    baseTag,
    bodyAttributes,
    htmlAttributes,
    linkTags,
    metaTags,
    noscriptTags,
    onChangeClientState,
    scriptTags,
    styleTags,
    title,
    titleAttributes
  } = newState;
  updateAttributes("body" /* BODY */, bodyAttributes);
  updateAttributes("html" /* HTML */, htmlAttributes);
  updateTitle(title, titleAttributes);
  const tagUpdates = {
    baseTag: updateTags("base" /* BASE */, baseTag),
    linkTags: updateTags("link" /* LINK */, linkTags),
    metaTags: updateTags("meta" /* META */, metaTags),
    noscriptTags: updateTags("noscript" /* NOSCRIPT */, noscriptTags),
    scriptTags: updateTags("script" /* SCRIPT */, scriptTags),
    styleTags: updateTags("style" /* STYLE */, styleTags)
  };
  const addedTags = {};
  const removedTags = {};
  Object.keys(tagUpdates).forEach((tagType) => {
    const { newTags, oldTags } = tagUpdates[tagType];
    if (newTags.length) {
      addedTags[tagType] = newTags;
    }
    if (oldTags.length) {
      removedTags[tagType] = tagUpdates[tagType].oldTags;
    }
  });
  if (cb) {
    cb();
  }
  onChangeClientState(newState, addedTags, removedTags);
};
var _helmetCallback = null;
var handleStateChangeOnClient = (newState) => {
  if (_helmetCallback) {
    cancelAnimationFrame(_helmetCallback);
  }
  if (newState.defer) {
    _helmetCallback = requestAnimationFrame(() => {
      commitTagChanges(newState, () => {
        _helmetCallback = null;
      });
    });
  } else {
    commitTagChanges(newState);
    _helmetCallback = null;
  }
};
var client_default = handleStateChangeOnClient;

// src/Dispatcher.tsx
var HelmetDispatcher = class extends reactExports.Component {
  rendered = false;
  shouldComponentUpdate(nextProps) {
    return !shallowEqual$1(nextProps, this.props);
  }
  componentDidUpdate() {
    this.emitChange();
  }
  componentWillUnmount() {
    const { helmetInstances } = this.props.context;
    helmetInstances.remove(this);
    this.emitChange();
  }
  emitChange() {
    const { helmetInstances, setHelmet } = this.props.context;
    let serverState = null;
    const state = reducePropsToState(
      helmetInstances.get().map((instance) => {
        const props = { ...instance.props };
        delete props.context;
        return props;
      })
    );
    if (HelmetProvider.canUseDOM) {
      client_default(state);
    } else if (server_default) {
      serverState = server_default(state);
    }
    setHelmet(serverState);
  }
  // componentWillMount will be deprecated
  // for SSR, initialize on first render
  // constructor is also unsafe in StrictMode
  init() {
    if (this.rendered) {
      return;
    }
    this.rendered = true;
    const { helmetInstances } = this.props.context;
    helmetInstances.add(this);
    this.emitChange();
  }
  render() {
    this.init();
    return null;
  }
};

// src/index.tsx
var Helmet = class extends reactExports.Component {
  static defaultProps = {
    defer: true,
    encodeSpecialCharacters: true,
    prioritizeSeoTags: false
  };
  shouldComponentUpdate(nextProps) {
    return !fastCompare(without(this.props, "helmetData"), without(nextProps, "helmetData"));
  }
  mapNestedChildrenToProps(child, nestedChildren) {
    if (!nestedChildren) {
      return null;
    }
    switch (child.type) {
      case "script" /* SCRIPT */:
      case "noscript" /* NOSCRIPT */:
        return {
          innerHTML: nestedChildren
        };
      case "style" /* STYLE */:
        return {
          cssText: nestedChildren
        };
      default:
        throw new Error(
          `<${child.type} /> elements are self-closing and can not contain children. Refer to our API for more information.`
        );
    }
  }
  flattenArrayTypeChildren(child, arrayTypeChildren, newChildProps, nestedChildren) {
    return {
      ...arrayTypeChildren,
      [child.type]: [
        ...arrayTypeChildren[child.type] || [],
        {
          ...newChildProps,
          ...this.mapNestedChildrenToProps(child, nestedChildren)
        }
      ]
    };
  }
  mapObjectTypeChildren(child, newProps, newChildProps, nestedChildren) {
    switch (child.type) {
      case "title" /* TITLE */:
        return {
          ...newProps,
          [child.type]: nestedChildren,
          titleAttributes: { ...newChildProps }
        };
      case "body" /* BODY */:
        return {
          ...newProps,
          bodyAttributes: { ...newChildProps }
        };
      case "html" /* HTML */:
        return {
          ...newProps,
          htmlAttributes: { ...newChildProps }
        };
      default:
        return {
          ...newProps,
          [child.type]: { ...newChildProps }
        };
    }
  }
  mapArrayTypeChildrenToProps(arrayTypeChildren, newProps) {
    let newFlattenedProps = { ...newProps };
    Object.keys(arrayTypeChildren).forEach((arrayChildName) => {
      newFlattenedProps = {
        ...newFlattenedProps,
        [arrayChildName]: arrayTypeChildren[arrayChildName]
      };
    });
    return newFlattenedProps;
  }
  warnOnInvalidChildren(child, nestedChildren) {
    invariant$2(
      VALID_TAG_NAMES.some((name) => child.type === name),
      typeof child.type === "function" ? `You may be attempting to nest <Helmet> components within each other, which is not allowed. Refer to our API for more information.` : `Only elements types ${VALID_TAG_NAMES.join(
        ", "
      )} are allowed. Helmet does not support rendering <${child.type}> elements. Refer to our API for more information.`
    );
    invariant$2(
      !nestedChildren || typeof nestedChildren === "string" || Array.isArray(nestedChildren) && !nestedChildren.some((nestedChild) => typeof nestedChild !== "string"),
      `Helmet expects a string as a child of <${child.type}>. Did you forget to wrap your children in braces? ( <${child.type}>{\`\`}</${child.type}> ) Refer to our API for more information.`
    );
    return true;
  }
  mapChildrenToProps(children, newProps) {
    let arrayTypeChildren = {};
    React$3.Children.forEach(children, (child) => {
      if (!child || !child.props) {
        return;
      }
      const { children: nestedChildren, ...childProps } = child.props;
      const newChildProps = Object.keys(childProps).reduce((obj, key) => {
        obj[HTML_TAG_MAP[key] || key] = childProps[key];
        return obj;
      }, {});
      let { type } = child;
      if (typeof type === "symbol") {
        type = type.toString();
      } else {
        this.warnOnInvalidChildren(child, nestedChildren);
      }
      switch (type) {
        case "Symbol(react.fragment)" /* FRAGMENT */:
          newProps = this.mapChildrenToProps(nestedChildren, newProps);
          break;
        case "link" /* LINK */:
        case "meta" /* META */:
        case "noscript" /* NOSCRIPT */:
        case "script" /* SCRIPT */:
        case "style" /* STYLE */:
          arrayTypeChildren = this.flattenArrayTypeChildren(
            child,
            arrayTypeChildren,
            newChildProps,
            nestedChildren
          );
          break;
        default:
          newProps = this.mapObjectTypeChildren(child, newProps, newChildProps, nestedChildren);
          break;
      }
    });
    return this.mapArrayTypeChildrenToProps(arrayTypeChildren, newProps);
  }
  render() {
    const { children, ...props } = this.props;
    let newProps = { ...props };
    let { helmetData } = props;
    if (children) {
      newProps = this.mapChildrenToProps(children, newProps);
    }
    if (helmetData && !(helmetData instanceof HelmetData)) {
      const data = helmetData;
      helmetData = new HelmetData(data.context, true);
      delete newProps.helmetData;
    }
    return helmetData ? /* @__PURE__ */ React$3.createElement(HelmetDispatcher, { ...newProps, context: helmetData.value }) : /* @__PURE__ */ React$3.createElement(Context.Consumer, null, (context) => /* @__PURE__ */ React$3.createElement(HelmetDispatcher, { ...newProps, context }));
  }
};

const isString$1 = obj => typeof obj === 'string';
const defer = () => {
  let res;
  let rej;
  const promise = new Promise((resolve, reject) => {
    res = resolve;
    rej = reject;
  });
  promise.resolve = res;
  promise.reject = rej;
  return promise;
};
const makeString = object => {
  if (object == null) return '';
  return '' + object;
};
const copy$2 = (a, s, t) => {
  a.forEach(m => {
    if (s[m]) t[m] = s[m];
  });
};
const lastOfPathSeparatorRegExp = /###/g;
const cleanKey = key => key && key.indexOf('###') > -1 ? key.replace(lastOfPathSeparatorRegExp, '.') : key;
const canNotTraverseDeeper = object => !object || isString$1(object);
const getLastOfPath = (object, path, Empty) => {
  const stack = !isString$1(path) ? path : path.split('.');
  let stackIndex = 0;
  while (stackIndex < stack.length - 1) {
    if (canNotTraverseDeeper(object)) return {};
    const key = cleanKey(stack[stackIndex]);
    if (!object[key] && Empty) object[key] = new Empty();
    if (Object.prototype.hasOwnProperty.call(object, key)) {
      object = object[key];
    } else {
      object = {};
    }
    ++stackIndex;
  }
  if (canNotTraverseDeeper(object)) return {};
  return {
    obj: object,
    k: cleanKey(stack[stackIndex])
  };
};
const setPath = (object, path, newValue) => {
  const {
    obj,
    k
  } = getLastOfPath(object, path, Object);
  if (obj !== undefined || path.length === 1) {
    obj[k] = newValue;
    return;
  }
  let e = path[path.length - 1];
  let p = path.slice(0, path.length - 1);
  let last = getLastOfPath(object, p, Object);
  while (last.obj === undefined && p.length) {
    e = `${p[p.length - 1]}.${e}`;
    p = p.slice(0, p.length - 1);
    last = getLastOfPath(object, p, Object);
    if (last?.obj && typeof last.obj[`${last.k}.${e}`] !== 'undefined') {
      last.obj = undefined;
    }
  }
  last.obj[`${last.k}.${e}`] = newValue;
};
const pushPath = (object, path, newValue, concat) => {
  const {
    obj,
    k
  } = getLastOfPath(object, path, Object);
  obj[k] = obj[k] || [];
  obj[k].push(newValue);
};
const getPath$2 = (object, path) => {
  const {
    obj,
    k
  } = getLastOfPath(object, path);
  if (!obj) return undefined;
  if (!Object.prototype.hasOwnProperty.call(obj, k)) return undefined;
  return obj[k];
};
const getPathWithDefaults = (data, defaultData, key) => {
  const value = getPath$2(data, key);
  if (value !== undefined) {
    return value;
  }
  return getPath$2(defaultData, key);
};
const deepExtend = (target, source, overwrite) => {
  for (const prop in source) {
    if (prop !== '__proto__' && prop !== 'constructor') {
      if (prop in target) {
        if (isString$1(target[prop]) || target[prop] instanceof String || isString$1(source[prop]) || source[prop] instanceof String) {
          if (overwrite) target[prop] = source[prop];
        } else {
          deepExtend(target[prop], source[prop], overwrite);
        }
      } else {
        target[prop] = source[prop];
      }
    }
  }
  return target;
};
const regexEscape = str => str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
var _entityMap = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;',
  '/': '&#x2F;'
};
const escape = data => {
  if (isString$1(data)) {
    return data.replace(/[&<>"'\/]/g, s => _entityMap[s]);
  }
  return data;
};
class RegExpCache {
  constructor(capacity) {
    this.capacity = capacity;
    this.regExpMap = new Map();
    this.regExpQueue = [];
  }
  getRegExp(pattern) {
    const regExpFromCache = this.regExpMap.get(pattern);
    if (regExpFromCache !== undefined) {
      return regExpFromCache;
    }
    const regExpNew = new RegExp(pattern);
    if (this.regExpQueue.length === this.capacity) {
      this.regExpMap.delete(this.regExpQueue.shift());
    }
    this.regExpMap.set(pattern, regExpNew);
    this.regExpQueue.push(pattern);
    return regExpNew;
  }
}
const chars = [' ', ',', '?', '!', ';'];
const looksLikeObjectPathRegExpCache = new RegExpCache(20);
const looksLikeObjectPath = (key, nsSeparator, keySeparator) => {
  nsSeparator = nsSeparator || '';
  keySeparator = keySeparator || '';
  const possibleChars = chars.filter(c => nsSeparator.indexOf(c) < 0 && keySeparator.indexOf(c) < 0);
  if (possibleChars.length === 0) return true;
  const r = looksLikeObjectPathRegExpCache.getRegExp(`(${possibleChars.map(c => c === '?' ? '\\?' : c).join('|')})`);
  let matched = !r.test(key);
  if (!matched) {
    const ki = key.indexOf(keySeparator);
    if (ki > 0 && !r.test(key.substring(0, ki))) {
      matched = true;
    }
  }
  return matched;
};
const deepFind = (obj, path, keySeparator = '.') => {
  if (!obj) return undefined;
  if (obj[path]) {
    if (!Object.prototype.hasOwnProperty.call(obj, path)) return undefined;
    return obj[path];
  }
  const tokens = path.split(keySeparator);
  let current = obj;
  for (let i = 0; i < tokens.length;) {
    if (!current || typeof current !== 'object') {
      return undefined;
    }
    let next;
    let nextPath = '';
    for (let j = i; j < tokens.length; ++j) {
      if (j !== i) {
        nextPath += keySeparator;
      }
      nextPath += tokens[j];
      next = current[nextPath];
      if (next !== undefined) {
        if (['string', 'number', 'boolean'].indexOf(typeof next) > -1 && j < tokens.length - 1) {
          continue;
        }
        i += j - i + 1;
        break;
      }
    }
    current = next;
  }
  return current;
};
const getCleanedCode = code => code?.replace('_', '-');

const consoleLogger = {
  type: 'logger',
  log(args) {
    this.output('log', args);
  },
  warn(args) {
    this.output('warn', args);
  },
  error(args) {
    this.output('error', args);
  },
  output(type, args) {
    console?.[type]?.apply?.(console, args);
  }
};
class Logger {
  constructor(concreteLogger, options = {}) {
    this.init(concreteLogger, options);
  }
  init(concreteLogger, options = {}) {
    this.prefix = options.prefix || 'i18next:';
    this.logger = concreteLogger || consoleLogger;
    this.options = options;
    this.debug = options.debug;
  }
  log(...args) {
    return this.forward(args, 'log', '', true);
  }
  warn(...args) {
    return this.forward(args, 'warn', '', true);
  }
  error(...args) {
    return this.forward(args, 'error', '');
  }
  deprecate(...args) {
    return this.forward(args, 'warn', 'WARNING DEPRECATED: ', true);
  }
  forward(args, lvl, prefix, debugOnly) {
    if (debugOnly && !this.debug) return null;
    if (isString$1(args[0])) args[0] = `${prefix}${this.prefix} ${args[0]}`;
    return this.logger[lvl](args);
  }
  create(moduleName) {
    return new Logger(this.logger, {
      ...{
        prefix: `${this.prefix}:${moduleName}:`
      },
      ...this.options
    });
  }
  clone(options) {
    options = options || this.options;
    options.prefix = options.prefix || this.prefix;
    return new Logger(this.logger, options);
  }
}
var baseLogger = new Logger();

let EventEmitter$1 = class EventEmitter {
  constructor() {
    this.observers = {};
  }
  on(events, listener) {
    events.split(' ').forEach(event => {
      if (!this.observers[event]) this.observers[event] = new Map();
      const numListeners = this.observers[event].get(listener) || 0;
      this.observers[event].set(listener, numListeners + 1);
    });
    return this;
  }
  off(event, listener) {
    if (!this.observers[event]) return;
    if (!listener) {
      delete this.observers[event];
      return;
    }
    this.observers[event].delete(listener);
  }
  emit(event, ...args) {
    if (this.observers[event]) {
      const cloned = Array.from(this.observers[event].entries());
      cloned.forEach(([observer, numTimesAdded]) => {
        for (let i = 0; i < numTimesAdded; i++) {
          observer(...args);
        }
      });
    }
    if (this.observers['*']) {
      const cloned = Array.from(this.observers['*'].entries());
      cloned.forEach(([observer, numTimesAdded]) => {
        for (let i = 0; i < numTimesAdded; i++) {
          observer.apply(observer, [event, ...args]);
        }
      });
    }
  }
};

class ResourceStore extends EventEmitter$1 {
  constructor(data, options = {
    ns: ['translation'],
    defaultNS: 'translation'
  }) {
    super();
    this.data = data || {};
    this.options = options;
    if (this.options.keySeparator === undefined) {
      this.options.keySeparator = '.';
    }
    if (this.options.ignoreJSONStructure === undefined) {
      this.options.ignoreJSONStructure = true;
    }
  }
  addNamespaces(ns) {
    if (this.options.ns.indexOf(ns) < 0) {
      this.options.ns.push(ns);
    }
  }
  removeNamespaces(ns) {
    const index = this.options.ns.indexOf(ns);
    if (index > -1) {
      this.options.ns.splice(index, 1);
    }
  }
  getResource(lng, ns, key, options = {}) {
    const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
    const ignoreJSONStructure = options.ignoreJSONStructure !== undefined ? options.ignoreJSONStructure : this.options.ignoreJSONStructure;
    let path;
    if (lng.indexOf('.') > -1) {
      path = lng.split('.');
    } else {
      path = [lng, ns];
      if (key) {
        if (Array.isArray(key)) {
          path.push(...key);
        } else if (isString$1(key) && keySeparator) {
          path.push(...key.split(keySeparator));
        } else {
          path.push(key);
        }
      }
    }
    const result = getPath$2(this.data, path);
    if (!result && !ns && !key && lng.indexOf('.') > -1) {
      lng = path[0];
      ns = path[1];
      key = path.slice(2).join('.');
    }
    if (result || !ignoreJSONStructure || !isString$1(key)) return result;
    return deepFind(this.data?.[lng]?.[ns], key, keySeparator);
  }
  addResource(lng, ns, key, value, options = {
    silent: false
  }) {
    const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
    let path = [lng, ns];
    if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);
    if (lng.indexOf('.') > -1) {
      path = lng.split('.');
      value = ns;
      ns = path[1];
    }
    this.addNamespaces(ns);
    setPath(this.data, path, value);
    if (!options.silent) this.emit('added', lng, ns, key, value);
  }
  addResources(lng, ns, resources, options = {
    silent: false
  }) {
    for (const m in resources) {
      if (isString$1(resources[m]) || Array.isArray(resources[m])) this.addResource(lng, ns, m, resources[m], {
        silent: true
      });
    }
    if (!options.silent) this.emit('added', lng, ns, resources);
  }
  addResourceBundle(lng, ns, resources, deep, overwrite, options = {
    silent: false,
    skipCopy: false
  }) {
    let path = [lng, ns];
    if (lng.indexOf('.') > -1) {
      path = lng.split('.');
      deep = resources;
      resources = ns;
      ns = path[1];
    }
    this.addNamespaces(ns);
    let pack = getPath$2(this.data, path) || {};
    if (!options.skipCopy) resources = JSON.parse(JSON.stringify(resources));
    if (deep) {
      deepExtend(pack, resources, overwrite);
    } else {
      pack = {
        ...pack,
        ...resources
      };
    }
    setPath(this.data, path, pack);
    if (!options.silent) this.emit('added', lng, ns, resources);
  }
  removeResourceBundle(lng, ns) {
    if (this.hasResourceBundle(lng, ns)) {
      delete this.data[lng][ns];
    }
    this.removeNamespaces(ns);
    this.emit('removed', lng, ns);
  }
  hasResourceBundle(lng, ns) {
    return this.getResource(lng, ns) !== undefined;
  }
  getResourceBundle(lng, ns) {
    if (!ns) ns = this.options.defaultNS;
    return this.getResource(lng, ns);
  }
  getDataByLanguage(lng) {
    return this.data[lng];
  }
  hasLanguageSomeTranslations(lng) {
    const data = this.getDataByLanguage(lng);
    const n = data && Object.keys(data) || [];
    return !!n.find(v => data[v] && Object.keys(data[v]).length > 0);
  }
  toJSON() {
    return this.data;
  }
}

var postProcessor = {
  processors: {},
  addPostProcessor(module) {
    this.processors[module.name] = module;
  },
  handle(processors, value, key, options, translator) {
    processors.forEach(processor => {
      value = this.processors[processor]?.process(value, key, options, translator) ?? value;
    });
    return value;
  }
};

const checkedLoadedFor = {};
const shouldHandleAsObject = res => !isString$1(res) && typeof res !== 'boolean' && typeof res !== 'number';
class Translator extends EventEmitter$1 {
  constructor(services, options = {}) {
    super();
    copy$2(['resourceStore', 'languageUtils', 'pluralResolver', 'interpolator', 'backendConnector', 'i18nFormat', 'utils'], services, this);
    this.options = options;
    if (this.options.keySeparator === undefined) {
      this.options.keySeparator = '.';
    }
    this.logger = baseLogger.create('translator');
  }
  changeLanguage(lng) {
    if (lng) this.language = lng;
  }
  exists(key, o = {
    interpolation: {}
  }) {
    const opt = {
      ...o
    };
    if (key == null) return false;
    const resolved = this.resolve(key, opt);
    return resolved?.res !== undefined;
  }
  extractFromKey(key, opt) {
    let nsSeparator = opt.nsSeparator !== undefined ? opt.nsSeparator : this.options.nsSeparator;
    if (nsSeparator === undefined) nsSeparator = ':';
    const keySeparator = opt.keySeparator !== undefined ? opt.keySeparator : this.options.keySeparator;
    let namespaces = opt.ns || this.options.defaultNS || [];
    const wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
    const seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !opt.keySeparator && !this.options.userDefinedNsSeparator && !opt.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);
    if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
      const m = key.match(this.interpolator.nestingRegexp);
      if (m && m.length > 0) {
        return {
          key,
          namespaces: isString$1(namespaces) ? [namespaces] : namespaces
        };
      }
      const parts = key.split(nsSeparator);
      if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
      key = parts.join(keySeparator);
    }
    return {
      key,
      namespaces: isString$1(namespaces) ? [namespaces] : namespaces
    };
  }
  translate(keys, o, lastKey) {
    let opt = typeof o === 'object' ? {
      ...o
    } : o;
    if (typeof opt !== 'object' && this.options.overloadTranslationOptionHandler) {
      opt = this.options.overloadTranslationOptionHandler(arguments);
    }
    if (typeof options === 'object') opt = {
      ...opt
    };
    if (!opt) opt = {};
    if (keys == null) return '';
    if (!Array.isArray(keys)) keys = [String(keys)];
    const returnDetails = opt.returnDetails !== undefined ? opt.returnDetails : this.options.returnDetails;
    const keySeparator = opt.keySeparator !== undefined ? opt.keySeparator : this.options.keySeparator;
    const {
      key,
      namespaces
    } = this.extractFromKey(keys[keys.length - 1], opt);
    const namespace = namespaces[namespaces.length - 1];
    let nsSeparator = opt.nsSeparator !== undefined ? opt.nsSeparator : this.options.nsSeparator;
    if (nsSeparator === undefined) nsSeparator = ':';
    const lng = opt.lng || this.language;
    const appendNamespaceToCIMode = opt.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
    if (lng?.toLowerCase() === 'cimode') {
      if (appendNamespaceToCIMode) {
        if (returnDetails) {
          return {
            res: `${namespace}${nsSeparator}${key}`,
            usedKey: key,
            exactUsedKey: key,
            usedLng: lng,
            usedNS: namespace,
            usedParams: this.getUsedParamsDetails(opt)
          };
        }
        return `${namespace}${nsSeparator}${key}`;
      }
      if (returnDetails) {
        return {
          res: key,
          usedKey: key,
          exactUsedKey: key,
          usedLng: lng,
          usedNS: namespace,
          usedParams: this.getUsedParamsDetails(opt)
        };
      }
      return key;
    }
    const resolved = this.resolve(keys, opt);
    let res = resolved?.res;
    const resUsedKey = resolved?.usedKey || key;
    const resExactUsedKey = resolved?.exactUsedKey || key;
    const noObject = ['[object Number]', '[object Function]', '[object RegExp]'];
    const joinArrays = opt.joinArrays !== undefined ? opt.joinArrays : this.options.joinArrays;
    const handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
    const needsPluralHandling = opt.count !== undefined && !isString$1(opt.count);
    const hasDefaultValue = Translator.hasDefaultValue(opt);
    const defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, opt.count, opt) : '';
    const defaultValueSuffixOrdinalFallback = opt.ordinal && needsPluralHandling ? this.pluralResolver.getSuffix(lng, opt.count, {
      ordinal: false
    }) : '';
    const needsZeroSuffixLookup = needsPluralHandling && !opt.ordinal && opt.count === 0;
    const defaultValue = needsZeroSuffixLookup && opt[`defaultValue${this.options.pluralSeparator}zero`] || opt[`defaultValue${defaultValueSuffix}`] || opt[`defaultValue${defaultValueSuffixOrdinalFallback}`] || opt.defaultValue;
    let resForObjHndl = res;
    if (handleAsObjectInI18nFormat && !res && hasDefaultValue) {
      resForObjHndl = defaultValue;
    }
    const handleAsObject = shouldHandleAsObject(resForObjHndl);
    const resType = Object.prototype.toString.apply(resForObjHndl);
    if (handleAsObjectInI18nFormat && resForObjHndl && handleAsObject && noObject.indexOf(resType) < 0 && !(isString$1(joinArrays) && Array.isArray(resForObjHndl))) {
      if (!opt.returnObjects && !this.options.returnObjects) {
        if (!this.options.returnedObjectHandler) {
          this.logger.warn('accessing an object - but returnObjects options is not enabled!');
        }
        const r = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, resForObjHndl, {
          ...opt,
          ns: namespaces
        }) : `key '${key} (${this.language})' returned an object instead of string.`;
        if (returnDetails) {
          resolved.res = r;
          resolved.usedParams = this.getUsedParamsDetails(opt);
          return resolved;
        }
        return r;
      }
      if (keySeparator) {
        const resTypeIsArray = Array.isArray(resForObjHndl);
        const copy = resTypeIsArray ? [] : {};
        const newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
        for (const m in resForObjHndl) {
          if (Object.prototype.hasOwnProperty.call(resForObjHndl, m)) {
            const deepKey = `${newKeyToUse}${keySeparator}${m}`;
            if (hasDefaultValue && !res) {
              copy[m] = this.translate(deepKey, {
                ...opt,
                defaultValue: shouldHandleAsObject(defaultValue) ? defaultValue[m] : undefined,
                ...{
                  joinArrays: false,
                  ns: namespaces
                }
              });
            } else {
              copy[m] = this.translate(deepKey, {
                ...opt,
                ...{
                  joinArrays: false,
                  ns: namespaces
                }
              });
            }
            if (copy[m] === deepKey) copy[m] = resForObjHndl[m];
          }
        }
        res = copy;
      }
    } else if (handleAsObjectInI18nFormat && isString$1(joinArrays) && Array.isArray(res)) {
      res = res.join(joinArrays);
      if (res) res = this.extendTranslation(res, keys, opt, lastKey);
    } else {
      let usedDefault = false;
      let usedKey = false;
      if (!this.isValidLookup(res) && hasDefaultValue) {
        usedDefault = true;
        res = defaultValue;
      }
      if (!this.isValidLookup(res)) {
        usedKey = true;
        res = key;
      }
      const missingKeyNoValueFallbackToKey = opt.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
      const resForMissing = missingKeyNoValueFallbackToKey && usedKey ? undefined : res;
      const updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;
      if (usedKey || usedDefault || updateMissing) {
        this.logger.log(updateMissing ? 'updateKey' : 'missingKey', lng, namespace, key, updateMissing ? defaultValue : res);
        if (keySeparator) {
          const fk = this.resolve(key, {
            ...opt,
            keySeparator: false
          });
          if (fk && fk.res) this.logger.warn('Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.');
        }
        let lngs = [];
        const fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, opt.lng || this.language);
        if (this.options.saveMissingTo === 'fallback' && fallbackLngs && fallbackLngs[0]) {
          for (let i = 0; i < fallbackLngs.length; i++) {
            lngs.push(fallbackLngs[i]);
          }
        } else if (this.options.saveMissingTo === 'all') {
          lngs = this.languageUtils.toResolveHierarchy(opt.lng || this.language);
        } else {
          lngs.push(opt.lng || this.language);
        }
        const send = (l, k, specificDefaultValue) => {
          const defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;
          if (this.options.missingKeyHandler) {
            this.options.missingKeyHandler(l, namespace, k, defaultForMissing, updateMissing, opt);
          } else if (this.backendConnector?.saveMissing) {
            this.backendConnector.saveMissing(l, namespace, k, defaultForMissing, updateMissing, opt);
          }
          this.emit('missingKey', l, namespace, k, res);
        };
        if (this.options.saveMissing) {
          if (this.options.saveMissingPlurals && needsPluralHandling) {
            lngs.forEach(language => {
              const suffixes = this.pluralResolver.getSuffixes(language, opt);
              if (needsZeroSuffixLookup && opt[`defaultValue${this.options.pluralSeparator}zero`] && suffixes.indexOf(`${this.options.pluralSeparator}zero`) < 0) {
                suffixes.push(`${this.options.pluralSeparator}zero`);
              }
              suffixes.forEach(suffix => {
                send([language], key + suffix, opt[`defaultValue${suffix}`] || defaultValue);
              });
            });
          } else {
            send(lngs, key, defaultValue);
          }
        }
      }
      res = this.extendTranslation(res, keys, opt, resolved, lastKey);
      if (usedKey && res === key && this.options.appendNamespaceToMissingKey) {
        res = `${namespace}${nsSeparator}${key}`;
      }
      if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {
        res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? `${namespace}${nsSeparator}${key}` : key, usedDefault ? res : undefined, opt);
      }
    }
    if (returnDetails) {
      resolved.res = res;
      resolved.usedParams = this.getUsedParamsDetails(opt);
      return resolved;
    }
    return res;
  }
  extendTranslation(res, key, opt, resolved, lastKey) {
    if (this.i18nFormat?.parse) {
      res = this.i18nFormat.parse(res, {
        ...this.options.interpolation.defaultVariables,
        ...opt
      }, opt.lng || this.language || resolved.usedLng, resolved.usedNS, resolved.usedKey, {
        resolved
      });
    } else if (!opt.skipInterpolation) {
      if (opt.interpolation) this.interpolator.init({
        ...opt,
        ...{
          interpolation: {
            ...this.options.interpolation,
            ...opt.interpolation
          }
        }
      });
      const skipOnVariables = isString$1(res) && (opt?.interpolation?.skipOnVariables !== undefined ? opt.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
      let nestBef;
      if (skipOnVariables) {
        const nb = res.match(this.interpolator.nestingRegexp);
        nestBef = nb && nb.length;
      }
      let data = opt.replace && !isString$1(opt.replace) ? opt.replace : opt;
      if (this.options.interpolation.defaultVariables) data = {
        ...this.options.interpolation.defaultVariables,
        ...data
      };
      res = this.interpolator.interpolate(res, data, opt.lng || this.language || resolved.usedLng, opt);
      if (skipOnVariables) {
        const na = res.match(this.interpolator.nestingRegexp);
        const nestAft = na && na.length;
        if (nestBef < nestAft) opt.nest = false;
      }
      if (!opt.lng && resolved && resolved.res) opt.lng = this.language || resolved.usedLng;
      if (opt.nest !== false) res = this.interpolator.nest(res, (...args) => {
        if (lastKey?.[0] === args[0] && !opt.context) {
          this.logger.warn(`It seems you are nesting recursively key: ${args[0]} in key: ${key[0]}`);
          return null;
        }
        return this.translate(...args, key);
      }, opt);
      if (opt.interpolation) this.interpolator.reset();
    }
    const postProcess = opt.postProcess || this.options.postProcess;
    const postProcessorNames = isString$1(postProcess) ? [postProcess] : postProcess;
    if (res != null && postProcessorNames?.length && opt.applyPostProcessor !== false) {
      res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? {
        i18nResolved: {
          ...resolved,
          usedParams: this.getUsedParamsDetails(opt)
        },
        ...opt
      } : opt, this);
    }
    return res;
  }
  resolve(keys, opt = {}) {
    let found;
    let usedKey;
    let exactUsedKey;
    let usedLng;
    let usedNS;
    if (isString$1(keys)) keys = [keys];
    keys.forEach(k => {
      if (this.isValidLookup(found)) return;
      const extracted = this.extractFromKey(k, opt);
      const key = extracted.key;
      usedKey = key;
      let namespaces = extracted.namespaces;
      if (this.options.fallbackNS) namespaces = namespaces.concat(this.options.fallbackNS);
      const needsPluralHandling = opt.count !== undefined && !isString$1(opt.count);
      const needsZeroSuffixLookup = needsPluralHandling && !opt.ordinal && opt.count === 0;
      const needsContextHandling = opt.context !== undefined && (isString$1(opt.context) || typeof opt.context === 'number') && opt.context !== '';
      const codes = opt.lngs ? opt.lngs : this.languageUtils.toResolveHierarchy(opt.lng || this.language, opt.fallbackLng);
      namespaces.forEach(ns => {
        if (this.isValidLookup(found)) return;
        usedNS = ns;
        if (!checkedLoadedFor[`${codes[0]}-${ns}`] && this.utils?.hasLoadedNamespace && !this.utils?.hasLoadedNamespace(usedNS)) {
          checkedLoadedFor[`${codes[0]}-${ns}`] = true;
          this.logger.warn(`key "${usedKey}" for languages "${codes.join(', ')}" won't get resolved as namespace "${usedNS}" was not yet loaded`, 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
        }
        codes.forEach(code => {
          if (this.isValidLookup(found)) return;
          usedLng = code;
          const finalKeys = [key];
          if (this.i18nFormat?.addLookupKeys) {
            this.i18nFormat.addLookupKeys(finalKeys, key, code, ns, opt);
          } else {
            let pluralSuffix;
            if (needsPluralHandling) pluralSuffix = this.pluralResolver.getSuffix(code, opt.count, opt);
            const zeroSuffix = `${this.options.pluralSeparator}zero`;
            const ordinalPrefix = `${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;
            if (needsPluralHandling) {
              finalKeys.push(key + pluralSuffix);
              if (opt.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {
                finalKeys.push(key + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));
              }
              if (needsZeroSuffixLookup) {
                finalKeys.push(key + zeroSuffix);
              }
            }
            if (needsContextHandling) {
              const contextKey = `${key}${this.options.contextSeparator}${opt.context}`;
              finalKeys.push(contextKey);
              if (needsPluralHandling) {
                finalKeys.push(contextKey + pluralSuffix);
                if (opt.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {
                  finalKeys.push(contextKey + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));
                }
                if (needsZeroSuffixLookup) {
                  finalKeys.push(contextKey + zeroSuffix);
                }
              }
            }
          }
          let possibleKey;
          while (possibleKey = finalKeys.pop()) {
            if (!this.isValidLookup(found)) {
              exactUsedKey = possibleKey;
              found = this.getResource(code, ns, possibleKey, opt);
            }
          }
        });
      });
    });
    return {
      res: found,
      usedKey,
      exactUsedKey,
      usedLng,
      usedNS
    };
  }
  isValidLookup(res) {
    return res !== undefined && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === '');
  }
  getResource(code, ns, key, options = {}) {
    if (this.i18nFormat?.getResource) return this.i18nFormat.getResource(code, ns, key, options);
    return this.resourceStore.getResource(code, ns, key, options);
  }
  getUsedParamsDetails(options = {}) {
    const optionsKeys = ['defaultValue', 'ordinal', 'context', 'replace', 'lng', 'lngs', 'fallbackLng', 'ns', 'keySeparator', 'nsSeparator', 'returnObjects', 'returnDetails', 'joinArrays', 'postProcess', 'interpolation'];
    const useOptionsReplaceForData = options.replace && !isString$1(options.replace);
    let data = useOptionsReplaceForData ? options.replace : options;
    if (useOptionsReplaceForData && typeof options.count !== 'undefined') {
      data.count = options.count;
    }
    if (this.options.interpolation.defaultVariables) {
      data = {
        ...this.options.interpolation.defaultVariables,
        ...data
      };
    }
    if (!useOptionsReplaceForData) {
      data = {
        ...data
      };
      for (const key of optionsKeys) {
        delete data[key];
      }
    }
    return data;
  }
  static hasDefaultValue(options) {
    const prefix = 'defaultValue';
    for (const option in options) {
      if (Object.prototype.hasOwnProperty.call(options, option) && prefix === option.substring(0, prefix.length) && undefined !== options[option]) {
        return true;
      }
    }
    return false;
  }
}

class LanguageUtil {
  constructor(options) {
    this.options = options;
    this.supportedLngs = this.options.supportedLngs || false;
    this.logger = baseLogger.create('languageUtils');
  }
  getScriptPartFromCode(code) {
    code = getCleanedCode(code);
    if (!code || code.indexOf('-') < 0) return null;
    const p = code.split('-');
    if (p.length === 2) return null;
    p.pop();
    if (p[p.length - 1].toLowerCase() === 'x') return null;
    return this.formatLanguageCode(p.join('-'));
  }
  getLanguagePartFromCode(code) {
    code = getCleanedCode(code);
    if (!code || code.indexOf('-') < 0) return code;
    const p = code.split('-');
    return this.formatLanguageCode(p[0]);
  }
  formatLanguageCode(code) {
    if (isString$1(code) && code.indexOf('-') > -1) {
      let formattedCode;
      try {
        formattedCode = Intl.getCanonicalLocales(code)[0];
      } catch (e) {}
      if (formattedCode && this.options.lowerCaseLng) {
        formattedCode = formattedCode.toLowerCase();
      }
      if (formattedCode) return formattedCode;
      if (this.options.lowerCaseLng) {
        return code.toLowerCase();
      }
      return code;
    }
    return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
  }
  isSupportedCode(code) {
    if (this.options.load === 'languageOnly' || this.options.nonExplicitSupportedLngs) {
      code = this.getLanguagePartFromCode(code);
    }
    return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
  }
  getBestMatchFromCodes(codes) {
    if (!codes) return null;
    let found;
    codes.forEach(code => {
      if (found) return;
      const cleanedLng = this.formatLanguageCode(code);
      if (!this.options.supportedLngs || this.isSupportedCode(cleanedLng)) found = cleanedLng;
    });
    if (!found && this.options.supportedLngs) {
      codes.forEach(code => {
        if (found) return;
        const lngScOnly = this.getScriptPartFromCode(code);
        if (this.isSupportedCode(lngScOnly)) return found = lngScOnly;
        const lngOnly = this.getLanguagePartFromCode(code);
        if (this.isSupportedCode(lngOnly)) return found = lngOnly;
        found = this.options.supportedLngs.find(supportedLng => {
          if (supportedLng === lngOnly) return supportedLng;
          if (supportedLng.indexOf('-') < 0 && lngOnly.indexOf('-') < 0) return;
          if (supportedLng.indexOf('-') > 0 && lngOnly.indexOf('-') < 0 && supportedLng.substring(0, supportedLng.indexOf('-')) === lngOnly) return supportedLng;
          if (supportedLng.indexOf(lngOnly) === 0 && lngOnly.length > 1) return supportedLng;
        });
      });
    }
    if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
    return found;
  }
  getFallbackCodes(fallbacks, code) {
    if (!fallbacks) return [];
    if (typeof fallbacks === 'function') fallbacks = fallbacks(code);
    if (isString$1(fallbacks)) fallbacks = [fallbacks];
    if (Array.isArray(fallbacks)) return fallbacks;
    if (!code) return fallbacks.default || [];
    let found = fallbacks[code];
    if (!found) found = fallbacks[this.getScriptPartFromCode(code)];
    if (!found) found = fallbacks[this.formatLanguageCode(code)];
    if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];
    if (!found) found = fallbacks.default;
    return found || [];
  }
  toResolveHierarchy(code, fallbackCode) {
    const fallbackCodes = this.getFallbackCodes((fallbackCode === false ? [] : fallbackCode) || this.options.fallbackLng || [], code);
    const codes = [];
    const addCode = c => {
      if (!c) return;
      if (this.isSupportedCode(c)) {
        codes.push(c);
      } else {
        this.logger.warn(`rejecting language code not found in supportedLngs: ${c}`);
      }
    };
    if (isString$1(code) && (code.indexOf('-') > -1 || code.indexOf('_') > -1)) {
      if (this.options.load !== 'languageOnly') addCode(this.formatLanguageCode(code));
      if (this.options.load !== 'languageOnly' && this.options.load !== 'currentOnly') addCode(this.getScriptPartFromCode(code));
      if (this.options.load !== 'currentOnly') addCode(this.getLanguagePartFromCode(code));
    } else if (isString$1(code)) {
      addCode(this.formatLanguageCode(code));
    }
    fallbackCodes.forEach(fc => {
      if (codes.indexOf(fc) < 0) addCode(this.formatLanguageCode(fc));
    });
    return codes;
  }
}

const suffixesOrder = {
  zero: 0,
  one: 1,
  two: 2,
  few: 3,
  many: 4,
  other: 5
};
const dummyRule = {
  select: count => count === 1 ? 'one' : 'other',
  resolvedOptions: () => ({
    pluralCategories: ['one', 'other']
  })
};
class PluralResolver {
  constructor(languageUtils, options = {}) {
    this.languageUtils = languageUtils;
    this.options = options;
    this.logger = baseLogger.create('pluralResolver');
    this.pluralRulesCache = {};
  }
  addRule(lng, obj) {
    this.rules[lng] = obj;
  }
  clearCache() {
    this.pluralRulesCache = {};
  }
  getRule(code, options = {}) {
    const cleanedCode = getCleanedCode(code === 'dev' ? 'en' : code);
    const type = options.ordinal ? 'ordinal' : 'cardinal';
    const cacheKey = JSON.stringify({
      cleanedCode,
      type
    });
    if (cacheKey in this.pluralRulesCache) {
      return this.pluralRulesCache[cacheKey];
    }
    let rule;
    try {
      rule = new Intl.PluralRules(cleanedCode, {
        type
      });
    } catch (err) {
      if (!Intl) {
        this.logger.error('No Intl support, please use an Intl polyfill!');
        return dummyRule;
      }
      if (!code.match(/-|_/)) return dummyRule;
      const lngPart = this.languageUtils.getLanguagePartFromCode(code);
      rule = this.getRule(lngPart, options);
    }
    this.pluralRulesCache[cacheKey] = rule;
    return rule;
  }
  needsPlural(code, options = {}) {
    let rule = this.getRule(code, options);
    if (!rule) rule = this.getRule('dev', options);
    return rule?.resolvedOptions().pluralCategories.length > 1;
  }
  getPluralFormsOfKey(code, key, options = {}) {
    return this.getSuffixes(code, options).map(suffix => `${key}${suffix}`);
  }
  getSuffixes(code, options = {}) {
    let rule = this.getRule(code, options);
    if (!rule) rule = this.getRule('dev', options);
    if (!rule) return [];
    return rule.resolvedOptions().pluralCategories.sort((pluralCategory1, pluralCategory2) => suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2]).map(pluralCategory => `${this.options.prepend}${options.ordinal ? `ordinal${this.options.prepend}` : ''}${pluralCategory}`);
  }
  getSuffix(code, count, options = {}) {
    const rule = this.getRule(code, options);
    if (rule) {
      return `${this.options.prepend}${options.ordinal ? `ordinal${this.options.prepend}` : ''}${rule.select(count)}`;
    }
    this.logger.warn(`no plural rule found for: ${code}`);
    return this.getSuffix('dev', count, options);
  }
}

const deepFindWithDefaults = (data, defaultData, key, keySeparator = '.', ignoreJSONStructure = true) => {
  let path = getPathWithDefaults(data, defaultData, key);
  if (!path && ignoreJSONStructure && isString$1(key)) {
    path = deepFind(data, key, keySeparator);
    if (path === undefined) path = deepFind(defaultData, key, keySeparator);
  }
  return path;
};
const regexSafe = val => val.replace(/\$/g, '$$$$');
class Interpolator {
  constructor(options = {}) {
    this.logger = baseLogger.create('interpolator');
    this.options = options;
    this.format = options?.interpolation?.format || (value => value);
    this.init(options);
  }
  init(options = {}) {
    if (!options.interpolation) options.interpolation = {
      escapeValue: true
    };
    const {
      escape: escape$1,
      escapeValue,
      useRawValueToEscape,
      prefix,
      prefixEscaped,
      suffix,
      suffixEscaped,
      formatSeparator,
      unescapeSuffix,
      unescapePrefix,
      nestingPrefix,
      nestingPrefixEscaped,
      nestingSuffix,
      nestingSuffixEscaped,
      nestingOptionsSeparator,
      maxReplaces,
      alwaysFormat
    } = options.interpolation;
    this.escape = escape$1 !== undefined ? escape$1 : escape;
    this.escapeValue = escapeValue !== undefined ? escapeValue : true;
    this.useRawValueToEscape = useRawValueToEscape !== undefined ? useRawValueToEscape : false;
    this.prefix = prefix ? regexEscape(prefix) : prefixEscaped || '{{';
    this.suffix = suffix ? regexEscape(suffix) : suffixEscaped || '}}';
    this.formatSeparator = formatSeparator || ',';
    this.unescapePrefix = unescapeSuffix ? '' : unescapePrefix || '-';
    this.unescapeSuffix = this.unescapePrefix ? '' : unescapeSuffix || '';
    this.nestingPrefix = nestingPrefix ? regexEscape(nestingPrefix) : nestingPrefixEscaped || regexEscape('$t(');
    this.nestingSuffix = nestingSuffix ? regexEscape(nestingSuffix) : nestingSuffixEscaped || regexEscape(')');
    this.nestingOptionsSeparator = nestingOptionsSeparator || ',';
    this.maxReplaces = maxReplaces || 1000;
    this.alwaysFormat = alwaysFormat !== undefined ? alwaysFormat : false;
    this.resetRegExp();
  }
  reset() {
    if (this.options) this.init(this.options);
  }
  resetRegExp() {
    const getOrResetRegExp = (existingRegExp, pattern) => {
      if (existingRegExp?.source === pattern) {
        existingRegExp.lastIndex = 0;
        return existingRegExp;
      }
      return new RegExp(pattern, 'g');
    };
    this.regexp = getOrResetRegExp(this.regexp, `${this.prefix}(.+?)${this.suffix}`);
    this.regexpUnescape = getOrResetRegExp(this.regexpUnescape, `${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`);
    this.nestingRegexp = getOrResetRegExp(this.nestingRegexp, `${this.nestingPrefix}(.+?)${this.nestingSuffix}`);
  }
  interpolate(str, data, lng, options) {
    let match;
    let value;
    let replaces;
    const defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
    const handleFormat = key => {
      if (key.indexOf(this.formatSeparator) < 0) {
        const path = deepFindWithDefaults(data, defaultData, key, this.options.keySeparator, this.options.ignoreJSONStructure);
        return this.alwaysFormat ? this.format(path, undefined, lng, {
          ...options,
          ...data,
          interpolationkey: key
        }) : path;
      }
      const p = key.split(this.formatSeparator);
      const k = p.shift().trim();
      const f = p.join(this.formatSeparator).trim();
      return this.format(deepFindWithDefaults(data, defaultData, k, this.options.keySeparator, this.options.ignoreJSONStructure), f, lng, {
        ...options,
        ...data,
        interpolationkey: k
      });
    };
    this.resetRegExp();
    const missingInterpolationHandler = options?.missingInterpolationHandler || this.options.missingInterpolationHandler;
    const skipOnVariables = options?.interpolation?.skipOnVariables !== undefined ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
    const todos = [{
      regex: this.regexpUnescape,
      safeValue: val => regexSafe(val)
    }, {
      regex: this.regexp,
      safeValue: val => this.escapeValue ? regexSafe(this.escape(val)) : regexSafe(val)
    }];
    todos.forEach(todo => {
      replaces = 0;
      while (match = todo.regex.exec(str)) {
        const matchedVar = match[1].trim();
        value = handleFormat(matchedVar);
        if (value === undefined) {
          if (typeof missingInterpolationHandler === 'function') {
            const temp = missingInterpolationHandler(str, match, options);
            value = isString$1(temp) ? temp : '';
          } else if (options && Object.prototype.hasOwnProperty.call(options, matchedVar)) {
            value = '';
          } else if (skipOnVariables) {
            value = match[0];
            continue;
          } else {
            this.logger.warn(`missed to pass in variable ${matchedVar} for interpolating ${str}`);
            value = '';
          }
        } else if (!isString$1(value) && !this.useRawValueToEscape) {
          value = makeString(value);
        }
        const safeValue = todo.safeValue(value);
        str = str.replace(match[0], safeValue);
        if (skipOnVariables) {
          todo.regex.lastIndex += value.length;
          todo.regex.lastIndex -= match[0].length;
        } else {
          todo.regex.lastIndex = 0;
        }
        replaces++;
        if (replaces >= this.maxReplaces) {
          break;
        }
      }
    });
    return str;
  }
  nest(str, fc, options = {}) {
    let match;
    let value;
    let clonedOptions;
    const handleHasOptions = (key, inheritedOptions) => {
      const sep = this.nestingOptionsSeparator;
      if (key.indexOf(sep) < 0) return key;
      const c = key.split(new RegExp(`${sep}[ ]*{`));
      let optionsString = `{${c[1]}`;
      key = c[0];
      optionsString = this.interpolate(optionsString, clonedOptions);
      const matchedSingleQuotes = optionsString.match(/'/g);
      const matchedDoubleQuotes = optionsString.match(/"/g);
      if ((matchedSingleQuotes?.length ?? 0) % 2 === 0 && !matchedDoubleQuotes || matchedDoubleQuotes.length % 2 !== 0) {
        optionsString = optionsString.replace(/'/g, '"');
      }
      try {
        clonedOptions = JSON.parse(optionsString);
        if (inheritedOptions) clonedOptions = {
          ...inheritedOptions,
          ...clonedOptions
        };
      } catch (e) {
        this.logger.warn(`failed parsing options string in nesting for key ${key}`, e);
        return `${key}${sep}${optionsString}`;
      }
      if (clonedOptions.defaultValue && clonedOptions.defaultValue.indexOf(this.prefix) > -1) delete clonedOptions.defaultValue;
      return key;
    };
    while (match = this.nestingRegexp.exec(str)) {
      let formatters = [];
      clonedOptions = {
        ...options
      };
      clonedOptions = clonedOptions.replace && !isString$1(clonedOptions.replace) ? clonedOptions.replace : clonedOptions;
      clonedOptions.applyPostProcessor = false;
      delete clonedOptions.defaultValue;
      const keyEndIndex = /{.*}/.test(match[1]) ? match[1].lastIndexOf('}') + 1 : match[1].indexOf(this.formatSeparator);
      if (keyEndIndex !== -1) {
        formatters = match[1].slice(keyEndIndex).split(this.formatSeparator).map(elem => elem.trim()).filter(Boolean);
        match[1] = match[1].slice(0, keyEndIndex);
      }
      value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
      if (value && match[0] === str && !isString$1(value)) return value;
      if (!isString$1(value)) value = makeString(value);
      if (!value) {
        this.logger.warn(`missed to resolve ${match[1]} for nesting ${str}`);
        value = '';
      }
      if (formatters.length) {
        value = formatters.reduce((v, f) => this.format(v, f, options.lng, {
          ...options,
          interpolationkey: match[1].trim()
        }), value.trim());
      }
      str = str.replace(match[0], value);
      this.regexp.lastIndex = 0;
    }
    return str;
  }
}

const parseFormatStr = formatStr => {
  let formatName = formatStr.toLowerCase().trim();
  const formatOptions = {};
  if (formatStr.indexOf('(') > -1) {
    const p = formatStr.split('(');
    formatName = p[0].toLowerCase().trim();
    const optStr = p[1].substring(0, p[1].length - 1);
    if (formatName === 'currency' && optStr.indexOf(':') < 0) {
      if (!formatOptions.currency) formatOptions.currency = optStr.trim();
    } else if (formatName === 'relativetime' && optStr.indexOf(':') < 0) {
      if (!formatOptions.range) formatOptions.range = optStr.trim();
    } else {
      const opts = optStr.split(';');
      opts.forEach(opt => {
        if (opt) {
          const [key, ...rest] = opt.split(':');
          const val = rest.join(':').trim().replace(/^'+|'+$/g, '');
          const trimmedKey = key.trim();
          if (!formatOptions[trimmedKey]) formatOptions[trimmedKey] = val;
          if (val === 'false') formatOptions[trimmedKey] = false;
          if (val === 'true') formatOptions[trimmedKey] = true;
          if (!isNaN(val)) formatOptions[trimmedKey] = parseInt(val, 10);
        }
      });
    }
  }
  return {
    formatName,
    formatOptions
  };
};
const createCachedFormatter = fn => {
  const cache = {};
  return (v, l, o) => {
    let optForCache = o;
    if (o && o.interpolationkey && o.formatParams && o.formatParams[o.interpolationkey] && o[o.interpolationkey]) {
      optForCache = {
        ...optForCache,
        [o.interpolationkey]: undefined
      };
    }
    const key = l + JSON.stringify(optForCache);
    let frm = cache[key];
    if (!frm) {
      frm = fn(getCleanedCode(l), o);
      cache[key] = frm;
    }
    return frm(v);
  };
};
const createNonCachedFormatter = fn => (v, l, o) => fn(getCleanedCode(l), o)(v);
class Formatter {
  constructor(options = {}) {
    this.logger = baseLogger.create('formatter');
    this.options = options;
    this.init(options);
  }
  init(services, options = {
    interpolation: {}
  }) {
    this.formatSeparator = options.interpolation.formatSeparator || ',';
    const cf = options.cacheInBuiltFormats ? createCachedFormatter : createNonCachedFormatter;
    this.formats = {
      number: cf((lng, opt) => {
        const formatter = new Intl.NumberFormat(lng, {
          ...opt
        });
        return val => formatter.format(val);
      }),
      currency: cf((lng, opt) => {
        const formatter = new Intl.NumberFormat(lng, {
          ...opt,
          style: 'currency'
        });
        return val => formatter.format(val);
      }),
      datetime: cf((lng, opt) => {
        const formatter = new Intl.DateTimeFormat(lng, {
          ...opt
        });
        return val => formatter.format(val);
      }),
      relativetime: cf((lng, opt) => {
        const formatter = new Intl.RelativeTimeFormat(lng, {
          ...opt
        });
        return val => formatter.format(val, opt.range || 'day');
      }),
      list: cf((lng, opt) => {
        const formatter = new Intl.ListFormat(lng, {
          ...opt
        });
        return val => formatter.format(val);
      })
    };
  }
  add(name, fc) {
    this.formats[name.toLowerCase().trim()] = fc;
  }
  addCached(name, fc) {
    this.formats[name.toLowerCase().trim()] = createCachedFormatter(fc);
  }
  format(value, format, lng, options = {}) {
    const formats = format.split(this.formatSeparator);
    if (formats.length > 1 && formats[0].indexOf('(') > 1 && formats[0].indexOf(')') < 0 && formats.find(f => f.indexOf(')') > -1)) {
      const lastIndex = formats.findIndex(f => f.indexOf(')') > -1);
      formats[0] = [formats[0], ...formats.splice(1, lastIndex)].join(this.formatSeparator);
    }
    const result = formats.reduce((mem, f) => {
      const {
        formatName,
        formatOptions
      } = parseFormatStr(f);
      if (this.formats[formatName]) {
        let formatted = mem;
        try {
          const valOptions = options?.formatParams?.[options.interpolationkey] || {};
          const l = valOptions.locale || valOptions.lng || options.locale || options.lng || lng;
          formatted = this.formats[formatName](mem, l, {
            ...formatOptions,
            ...options,
            ...valOptions
          });
        } catch (error) {
          this.logger.warn(error);
        }
        return formatted;
      } else {
        this.logger.warn(`there was no format function for ${formatName}`);
      }
      return mem;
    }, value);
    return result;
  }
}

const removePending = (q, name) => {
  if (q.pending[name] !== undefined) {
    delete q.pending[name];
    q.pendingCount--;
  }
};
class Connector extends EventEmitter$1 {
  constructor(backend, store, services, options = {}) {
    super();
    this.backend = backend;
    this.store = store;
    this.services = services;
    this.languageUtils = services.languageUtils;
    this.options = options;
    this.logger = baseLogger.create('backendConnector');
    this.waitingReads = [];
    this.maxParallelReads = options.maxParallelReads || 10;
    this.readingCalls = 0;
    this.maxRetries = options.maxRetries >= 0 ? options.maxRetries : 5;
    this.retryTimeout = options.retryTimeout >= 1 ? options.retryTimeout : 350;
    this.state = {};
    this.queue = [];
    this.backend?.init?.(services, options.backend, options);
  }
  queueLoad(languages, namespaces, options, callback) {
    const toLoad = {};
    const pending = {};
    const toLoadLanguages = {};
    const toLoadNamespaces = {};
    languages.forEach(lng => {
      let hasAllNamespaces = true;
      namespaces.forEach(ns => {
        const name = `${lng}|${ns}`;
        if (!options.reload && this.store.hasResourceBundle(lng, ns)) {
          this.state[name] = 2;
        } else if (this.state[name] < 0) ; else if (this.state[name] === 1) {
          if (pending[name] === undefined) pending[name] = true;
        } else {
          this.state[name] = 1;
          hasAllNamespaces = false;
          if (pending[name] === undefined) pending[name] = true;
          if (toLoad[name] === undefined) toLoad[name] = true;
          if (toLoadNamespaces[ns] === undefined) toLoadNamespaces[ns] = true;
        }
      });
      if (!hasAllNamespaces) toLoadLanguages[lng] = true;
    });
    if (Object.keys(toLoad).length || Object.keys(pending).length) {
      this.queue.push({
        pending,
        pendingCount: Object.keys(pending).length,
        loaded: {},
        errors: [],
        callback
      });
    }
    return {
      toLoad: Object.keys(toLoad),
      pending: Object.keys(pending),
      toLoadLanguages: Object.keys(toLoadLanguages),
      toLoadNamespaces: Object.keys(toLoadNamespaces)
    };
  }
  loaded(name, err, data) {
    const s = name.split('|');
    const lng = s[0];
    const ns = s[1];
    if (err) this.emit('failedLoading', lng, ns, err);
    if (!err && data) {
      this.store.addResourceBundle(lng, ns, data, undefined, undefined, {
        skipCopy: true
      });
    }
    this.state[name] = err ? -1 : 2;
    if (err && data) this.state[name] = 0;
    const loaded = {};
    this.queue.forEach(q => {
      pushPath(q.loaded, [lng], ns);
      removePending(q, name);
      if (err) q.errors.push(err);
      if (q.pendingCount === 0 && !q.done) {
        Object.keys(q.loaded).forEach(l => {
          if (!loaded[l]) loaded[l] = {};
          const loadedKeys = q.loaded[l];
          if (loadedKeys.length) {
            loadedKeys.forEach(n => {
              if (loaded[l][n] === undefined) loaded[l][n] = true;
            });
          }
        });
        q.done = true;
        if (q.errors.length) {
          q.callback(q.errors);
        } else {
          q.callback();
        }
      }
    });
    this.emit('loaded', loaded);
    this.queue = this.queue.filter(q => !q.done);
  }
  read(lng, ns, fcName, tried = 0, wait = this.retryTimeout, callback) {
    if (!lng.length) return callback(null, {});
    if (this.readingCalls >= this.maxParallelReads) {
      this.waitingReads.push({
        lng,
        ns,
        fcName,
        tried,
        wait,
        callback
      });
      return;
    }
    this.readingCalls++;
    const resolver = (err, data) => {
      this.readingCalls--;
      if (this.waitingReads.length > 0) {
        const next = this.waitingReads.shift();
        this.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);
      }
      if (err && data && tried < this.maxRetries) {
        setTimeout(() => {
          this.read.call(this, lng, ns, fcName, tried + 1, wait * 2, callback);
        }, wait);
        return;
      }
      callback(err, data);
    };
    const fc = this.backend[fcName].bind(this.backend);
    if (fc.length === 2) {
      try {
        const r = fc(lng, ns);
        if (r && typeof r.then === 'function') {
          r.then(data => resolver(null, data)).catch(resolver);
        } else {
          resolver(null, r);
        }
      } catch (err) {
        resolver(err);
      }
      return;
    }
    return fc(lng, ns, resolver);
  }
  prepareLoading(languages, namespaces, options = {}, callback) {
    if (!this.backend) {
      this.logger.warn('No backend was added via i18next.use. Will not load resources.');
      return callback && callback();
    }
    if (isString$1(languages)) languages = this.languageUtils.toResolveHierarchy(languages);
    if (isString$1(namespaces)) namespaces = [namespaces];
    const toLoad = this.queueLoad(languages, namespaces, options, callback);
    if (!toLoad.toLoad.length) {
      if (!toLoad.pending.length) callback();
      return null;
    }
    toLoad.toLoad.forEach(name => {
      this.loadOne(name);
    });
  }
  load(languages, namespaces, callback) {
    this.prepareLoading(languages, namespaces, {}, callback);
  }
  reload(languages, namespaces, callback) {
    this.prepareLoading(languages, namespaces, {
      reload: true
    }, callback);
  }
  loadOne(name, prefix = '') {
    const s = name.split('|');
    const lng = s[0];
    const ns = s[1];
    this.read(lng, ns, 'read', undefined, undefined, (err, data) => {
      if (err) this.logger.warn(`${prefix}loading namespace ${ns} for language ${lng} failed`, err);
      if (!err && data) this.logger.log(`${prefix}loaded namespace ${ns} for language ${lng}`, data);
      this.loaded(name, err, data);
    });
  }
  saveMissing(languages, namespace, key, fallbackValue, isUpdate, options = {}, clb = () => {}) {
    if (this.services?.utils?.hasLoadedNamespace && !this.services?.utils?.hasLoadedNamespace(namespace)) {
      this.logger.warn(`did not save key "${key}" as the namespace "${namespace}" was not yet loaded`, 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
      return;
    }
    if (key === undefined || key === null || key === '') return;
    if (this.backend?.create) {
      const opts = {
        ...options,
        isUpdate
      };
      const fc = this.backend.create.bind(this.backend);
      if (fc.length < 6) {
        try {
          let r;
          if (fc.length === 5) {
            r = fc(languages, namespace, key, fallbackValue, opts);
          } else {
            r = fc(languages, namespace, key, fallbackValue);
          }
          if (r && typeof r.then === 'function') {
            r.then(data => clb(null, data)).catch(clb);
          } else {
            clb(null, r);
          }
        } catch (err) {
          clb(err);
        }
      } else {
        fc(languages, namespace, key, fallbackValue, clb, opts);
      }
    }
    if (!languages || !languages[0]) return;
    this.store.addResource(languages[0], namespace, key, fallbackValue);
  }
}

const get$3 = () => ({
  debug: false,
  initAsync: true,
  ns: ['translation'],
  defaultNS: ['translation'],
  fallbackLng: ['dev'],
  fallbackNS: false,
  supportedLngs: false,
  nonExplicitSupportedLngs: false,
  load: 'all',
  preload: false,
  simplifyPluralSuffix: true,
  keySeparator: '.',
  nsSeparator: ':',
  pluralSeparator: '_',
  contextSeparator: '_',
  partialBundledLanguages: false,
  saveMissing: false,
  updateMissing: false,
  saveMissingTo: 'fallback',
  saveMissingPlurals: true,
  missingKeyHandler: false,
  missingInterpolationHandler: false,
  postProcess: false,
  postProcessPassResolved: false,
  returnNull: false,
  returnEmptyString: true,
  returnObjects: false,
  joinArrays: false,
  returnedObjectHandler: false,
  parseMissingKeyHandler: false,
  appendNamespaceToMissingKey: false,
  appendNamespaceToCIMode: false,
  overloadTranslationOptionHandler: args => {
    let ret = {};
    if (typeof args[1] === 'object') ret = args[1];
    if (isString$1(args[1])) ret.defaultValue = args[1];
    if (isString$1(args[2])) ret.tDescription = args[2];
    if (typeof args[2] === 'object' || typeof args[3] === 'object') {
      const options = args[3] || args[2];
      Object.keys(options).forEach(key => {
        ret[key] = options[key];
      });
    }
    return ret;
  },
  interpolation: {
    escapeValue: true,
    format: value => value,
    prefix: '{{',
    suffix: '}}',
    formatSeparator: ',',
    unescapePrefix: '-',
    nestingPrefix: '$t(',
    nestingSuffix: ')',
    nestingOptionsSeparator: ',',
    maxReplaces: 1000,
    skipOnVariables: true
  },
  cacheInBuiltFormats: true
});
const transformOptions = options => {
  if (isString$1(options.ns)) options.ns = [options.ns];
  if (isString$1(options.fallbackLng)) options.fallbackLng = [options.fallbackLng];
  if (isString$1(options.fallbackNS)) options.fallbackNS = [options.fallbackNS];
  if (options.supportedLngs?.indexOf?.('cimode') < 0) {
    options.supportedLngs = options.supportedLngs.concat(['cimode']);
  }
  if (typeof options.initImmediate === 'boolean') options.initAsync = options.initImmediate;
  return options;
};

const noop$7 = () => {};
const bindMemberFunctions = inst => {
  const mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));
  mems.forEach(mem => {
    if (typeof inst[mem] === 'function') {
      inst[mem] = inst[mem].bind(inst);
    }
  });
};
class I18n extends EventEmitter$1 {
  constructor(options = {}, callback) {
    super();
    this.options = transformOptions(options);
    this.services = {};
    this.logger = baseLogger;
    this.modules = {
      external: []
    };
    bindMemberFunctions(this);
    if (callback && !this.isInitialized && !options.isClone) {
      if (!this.options.initAsync) {
        this.init(options, callback);
        return this;
      }
      setTimeout(() => {
        this.init(options, callback);
      }, 0);
    }
  }
  init(options = {}, callback) {
    this.isInitializing = true;
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    if (options.defaultNS == null && options.ns) {
      if (isString$1(options.ns)) {
        options.defaultNS = options.ns;
      } else if (options.ns.indexOf('translation') < 0) {
        options.defaultNS = options.ns[0];
      }
    }
    const defOpts = get$3();
    this.options = {
      ...defOpts,
      ...this.options,
      ...transformOptions(options)
    };
    this.options.interpolation = {
      ...defOpts.interpolation,
      ...this.options.interpolation
    };
    if (options.keySeparator !== undefined) {
      this.options.userDefinedKeySeparator = options.keySeparator;
    }
    if (options.nsSeparator !== undefined) {
      this.options.userDefinedNsSeparator = options.nsSeparator;
    }
    const createClassOnDemand = ClassOrObject => {
      if (!ClassOrObject) return null;
      if (typeof ClassOrObject === 'function') return new ClassOrObject();
      return ClassOrObject;
    };
    if (!this.options.isClone) {
      if (this.modules.logger) {
        baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
      } else {
        baseLogger.init(null, this.options);
      }
      let formatter;
      if (this.modules.formatter) {
        formatter = this.modules.formatter;
      } else {
        formatter = Formatter;
      }
      const lu = new LanguageUtil(this.options);
      this.store = new ResourceStore(this.options.resources, this.options);
      const s = this.services;
      s.logger = baseLogger;
      s.resourceStore = this.store;
      s.languageUtils = lu;
      s.pluralResolver = new PluralResolver(lu, {
        prepend: this.options.pluralSeparator,
        simplifyPluralSuffix: this.options.simplifyPluralSuffix
      });
      const usingLegacyFormatFunction = this.options.interpolation.format && this.options.interpolation.format !== defOpts.interpolation.format;
      if (usingLegacyFormatFunction) {
        this.logger.warn(`init: you are still using the legacy format function, please use the new approach: https://www.i18next.com/translation-function/formatting`);
      }
      if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {
        s.formatter = createClassOnDemand(formatter);
        if (s.formatter.init) s.formatter.init(s, this.options);
        this.options.interpolation.format = s.formatter.format.bind(s.formatter);
      }
      s.interpolator = new Interpolator(this.options);
      s.utils = {
        hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
      };
      s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
      s.backendConnector.on('*', (event, ...args) => {
        this.emit(event, ...args);
      });
      if (this.modules.languageDetector) {
        s.languageDetector = createClassOnDemand(this.modules.languageDetector);
        if (s.languageDetector.init) s.languageDetector.init(s, this.options.detection, this.options);
      }
      if (this.modules.i18nFormat) {
        s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
        if (s.i18nFormat.init) s.i18nFormat.init(this);
      }
      this.translator = new Translator(this.services, this.options);
      this.translator.on('*', (event, ...args) => {
        this.emit(event, ...args);
      });
      this.modules.external.forEach(m => {
        if (m.init) m.init(this);
      });
    }
    this.format = this.options.interpolation.format;
    if (!callback) callback = noop$7;
    if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
      const codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
      if (codes.length > 0 && codes[0] !== 'dev') this.options.lng = codes[0];
    }
    if (!this.services.languageDetector && !this.options.lng) {
      this.logger.warn('init: no languageDetector is used and no lng is defined');
    }
    const storeApi = ['getResource', 'hasResourceBundle', 'getResourceBundle', 'getDataByLanguage'];
    storeApi.forEach(fcName => {
      this[fcName] = (...args) => this.store[fcName](...args);
    });
    const storeApiChained = ['addResource', 'addResources', 'addResourceBundle', 'removeResourceBundle'];
    storeApiChained.forEach(fcName => {
      this[fcName] = (...args) => {
        this.store[fcName](...args);
        return this;
      };
    });
    const deferred = defer();
    const load = () => {
      const finish = (err, t) => {
        this.isInitializing = false;
        if (this.isInitialized && !this.initializedStoreOnce) this.logger.warn('init: i18next is already initialized. You should call init just once!');
        this.isInitialized = true;
        if (!this.options.isClone) this.logger.log('initialized', this.options);
        this.emit('initialized', this.options);
        deferred.resolve(t);
        callback(err, t);
      };
      if (this.languages && !this.isInitialized) return finish(null, this.t.bind(this));
      this.changeLanguage(this.options.lng, finish);
    };
    if (this.options.resources || !this.options.initAsync) {
      load();
    } else {
      setTimeout(load, 0);
    }
    return deferred;
  }
  loadResources(language, callback = noop$7) {
    let usedCallback = callback;
    const usedLng = isString$1(language) ? language : this.language;
    if (typeof language === 'function') usedCallback = language;
    if (!this.options.resources || this.options.partialBundledLanguages) {
      if (usedLng?.toLowerCase() === 'cimode' && (!this.options.preload || this.options.preload.length === 0)) return usedCallback();
      const toLoad = [];
      const append = lng => {
        if (!lng) return;
        if (lng === 'cimode') return;
        const lngs = this.services.languageUtils.toResolveHierarchy(lng);
        lngs.forEach(l => {
          if (l === 'cimode') return;
          if (toLoad.indexOf(l) < 0) toLoad.push(l);
        });
      };
      if (!usedLng) {
        const fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
        fallbacks.forEach(l => append(l));
      } else {
        append(usedLng);
      }
      this.options.preload?.forEach?.(l => append(l));
      this.services.backendConnector.load(toLoad, this.options.ns, e => {
        if (!e && !this.resolvedLanguage && this.language) this.setResolvedLanguage(this.language);
        usedCallback(e);
      });
    } else {
      usedCallback(null);
    }
  }
  reloadResources(lngs, ns, callback) {
    const deferred = defer();
    if (typeof lngs === 'function') {
      callback = lngs;
      lngs = undefined;
    }
    if (typeof ns === 'function') {
      callback = ns;
      ns = undefined;
    }
    if (!lngs) lngs = this.languages;
    if (!ns) ns = this.options.ns;
    if (!callback) callback = noop$7;
    this.services.backendConnector.reload(lngs, ns, err => {
      deferred.resolve();
      callback(err);
    });
    return deferred;
  }
  use(module) {
    if (!module) throw new Error('You are passing an undefined module! Please check the object you are passing to i18next.use()');
    if (!module.type) throw new Error('You are passing a wrong module! Please check the object you are passing to i18next.use()');
    if (module.type === 'backend') {
      this.modules.backend = module;
    }
    if (module.type === 'logger' || module.log && module.warn && module.error) {
      this.modules.logger = module;
    }
    if (module.type === 'languageDetector') {
      this.modules.languageDetector = module;
    }
    if (module.type === 'i18nFormat') {
      this.modules.i18nFormat = module;
    }
    if (module.type === 'postProcessor') {
      postProcessor.addPostProcessor(module);
    }
    if (module.type === 'formatter') {
      this.modules.formatter = module;
    }
    if (module.type === '3rdParty') {
      this.modules.external.push(module);
    }
    return this;
  }
  setResolvedLanguage(l) {
    if (!l || !this.languages) return;
    if (['cimode', 'dev'].indexOf(l) > -1) return;
    for (let li = 0; li < this.languages.length; li++) {
      const lngInLngs = this.languages[li];
      if (['cimode', 'dev'].indexOf(lngInLngs) > -1) continue;
      if (this.store.hasLanguageSomeTranslations(lngInLngs)) {
        this.resolvedLanguage = lngInLngs;
        break;
      }
    }
    if (!this.resolvedLanguage && this.languages.indexOf(l) < 0 && this.store.hasLanguageSomeTranslations(l)) {
      this.resolvedLanguage = l;
      this.languages.unshift(l);
    }
  }
  changeLanguage(lng, callback) {
    this.isLanguageChangingTo = lng;
    const deferred = defer();
    this.emit('languageChanging', lng);
    const setLngProps = l => {
      this.language = l;
      this.languages = this.services.languageUtils.toResolveHierarchy(l);
      this.resolvedLanguage = undefined;
      this.setResolvedLanguage(l);
    };
    const done = (err, l) => {
      if (l) {
        if (this.isLanguageChangingTo === lng) {
          setLngProps(l);
          this.translator.changeLanguage(l);
          this.isLanguageChangingTo = undefined;
          this.emit('languageChanged', l);
          this.logger.log('languageChanged', l);
        }
      } else {
        this.isLanguageChangingTo = undefined;
      }
      deferred.resolve((...args) => this.t(...args));
      if (callback) callback(err, (...args) => this.t(...args));
    };
    const setLng = lngs => {
      if (!lng && !lngs && this.services.languageDetector) lngs = [];
      const fl = isString$1(lngs) ? lngs : lngs && lngs[0];
      const l = this.store.hasLanguageSomeTranslations(fl) ? fl : this.services.languageUtils.getBestMatchFromCodes(isString$1(lngs) ? [lngs] : lngs);
      if (l) {
        if (!this.language) {
          setLngProps(l);
        }
        if (!this.translator.language) this.translator.changeLanguage(l);
        this.services.languageDetector?.cacheUserLanguage?.(l);
      }
      this.loadResources(l, err => {
        done(err, l);
      });
    };
    if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
      setLng(this.services.languageDetector.detect());
    } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
      if (this.services.languageDetector.detect.length === 0) {
        this.services.languageDetector.detect().then(setLng);
      } else {
        this.services.languageDetector.detect(setLng);
      }
    } else {
      setLng(lng);
    }
    return deferred;
  }
  getFixedT(lng, ns, keyPrefix) {
    const fixedT = (key, opts, ...rest) => {
      let o;
      if (typeof opts !== 'object') {
        o = this.options.overloadTranslationOptionHandler([key, opts].concat(rest));
      } else {
        o = {
          ...opts
        };
      }
      o.lng = o.lng || fixedT.lng;
      o.lngs = o.lngs || fixedT.lngs;
      o.ns = o.ns || fixedT.ns;
      if (o.keyPrefix !== '') o.keyPrefix = o.keyPrefix || keyPrefix || fixedT.keyPrefix;
      const keySeparator = this.options.keySeparator || '.';
      let resultKey;
      if (o.keyPrefix && Array.isArray(key)) {
        resultKey = key.map(k => `${o.keyPrefix}${keySeparator}${k}`);
      } else {
        resultKey = o.keyPrefix ? `${o.keyPrefix}${keySeparator}${key}` : key;
      }
      return this.t(resultKey, o);
    };
    if (isString$1(lng)) {
      fixedT.lng = lng;
    } else {
      fixedT.lngs = lng;
    }
    fixedT.ns = ns;
    fixedT.keyPrefix = keyPrefix;
    return fixedT;
  }
  t(...args) {
    return this.translator?.translate(...args);
  }
  exists(...args) {
    return this.translator?.exists(...args);
  }
  setDefaultNamespace(ns) {
    this.options.defaultNS = ns;
  }
  hasLoadedNamespace(ns, options = {}) {
    if (!this.isInitialized) {
      this.logger.warn('hasLoadedNamespace: i18next was not initialized', this.languages);
      return false;
    }
    if (!this.languages || !this.languages.length) {
      this.logger.warn('hasLoadedNamespace: i18n.languages were undefined or empty', this.languages);
      return false;
    }
    const lng = options.lng || this.resolvedLanguage || this.languages[0];
    const fallbackLng = this.options ? this.options.fallbackLng : false;
    const lastLng = this.languages[this.languages.length - 1];
    if (lng.toLowerCase() === 'cimode') return true;
    const loadNotPending = (l, n) => {
      const loadState = this.services.backendConnector.state[`${l}|${n}`];
      return loadState === -1 || loadState === 0 || loadState === 2;
    };
    if (options.precheck) {
      const preResult = options.precheck(this, loadNotPending);
      if (preResult !== undefined) return preResult;
    }
    if (this.hasResourceBundle(lng, ns)) return true;
    if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages) return true;
    if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
    return false;
  }
  loadNamespaces(ns, callback) {
    const deferred = defer();
    if (!this.options.ns) {
      if (callback) callback();
      return Promise.resolve();
    }
    if (isString$1(ns)) ns = [ns];
    ns.forEach(n => {
      if (this.options.ns.indexOf(n) < 0) this.options.ns.push(n);
    });
    this.loadResources(err => {
      deferred.resolve();
      if (callback) callback(err);
    });
    return deferred;
  }
  loadLanguages(lngs, callback) {
    const deferred = defer();
    if (isString$1(lngs)) lngs = [lngs];
    const preloaded = this.options.preload || [];
    const newLngs = lngs.filter(lng => preloaded.indexOf(lng) < 0 && this.services.languageUtils.isSupportedCode(lng));
    if (!newLngs.length) {
      if (callback) callback();
      return Promise.resolve();
    }
    this.options.preload = preloaded.concat(newLngs);
    this.loadResources(err => {
      deferred.resolve();
      if (callback) callback(err);
    });
    return deferred;
  }
  dir(lng) {
    if (!lng) lng = this.resolvedLanguage || (this.languages?.length > 0 ? this.languages[0] : this.language);
    if (!lng) return 'rtl';
    try {
      const l = new Intl.Locale(lng);
      if (l && l.getTextInfo) {
        const ti = l.getTextInfo();
        if (ti && ti.direction) return ti.direction;
      }
    } catch (e) {}
    const rtlLngs = ['ar', 'shu', 'sqr', 'ssh', 'xaa', 'yhd', 'yud', 'aao', 'abh', 'abv', 'acm', 'acq', 'acw', 'acx', 'acy', 'adf', 'ads', 'aeb', 'aec', 'afb', 'ajp', 'apc', 'apd', 'arb', 'arq', 'ars', 'ary', 'arz', 'auz', 'avl', 'ayh', 'ayl', 'ayn', 'ayp', 'bbz', 'pga', 'he', 'iw', 'ps', 'pbt', 'pbu', 'pst', 'prp', 'prd', 'ug', 'ur', 'ydd', 'yds', 'yih', 'ji', 'yi', 'hbo', 'men', 'xmn', 'fa', 'jpr', 'peo', 'pes', 'prs', 'dv', 'sam', 'ckb'];
    const languageUtils = this.services?.languageUtils || new LanguageUtil(get$3());
    if (lng.toLowerCase().indexOf('-latn') > 1) return 'ltr';
    return rtlLngs.indexOf(languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf('-arab') > 1 ? 'rtl' : 'ltr';
  }
  static createInstance(options = {}, callback) {
    return new I18n(options, callback);
  }
  cloneInstance(options = {}, callback = noop$7) {
    const forkResourceStore = options.forkResourceStore;
    if (forkResourceStore) delete options.forkResourceStore;
    const mergedOptions = {
      ...this.options,
      ...options,
      ...{
        isClone: true
      }
    };
    const clone = new I18n(mergedOptions);
    if (options.debug !== undefined || options.prefix !== undefined) {
      clone.logger = clone.logger.clone(options);
    }
    const membersToCopy = ['store', 'services', 'language'];
    membersToCopy.forEach(m => {
      clone[m] = this[m];
    });
    clone.services = {
      ...this.services
    };
    clone.services.utils = {
      hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
    };
    if (forkResourceStore) {
      const clonedData = Object.keys(this.store.data).reduce((prev, l) => {
        prev[l] = {
          ...this.store.data[l]
        };
        prev[l] = Object.keys(prev[l]).reduce((acc, n) => {
          acc[n] = {
            ...prev[l][n]
          };
          return acc;
        }, prev[l]);
        return prev;
      }, {});
      clone.store = new ResourceStore(clonedData, mergedOptions);
      clone.services.resourceStore = clone.store;
    }
    clone.translator = new Translator(clone.services, mergedOptions);
    clone.translator.on('*', (event, ...args) => {
      clone.emit(event, ...args);
    });
    clone.init(mergedOptions, callback);
    clone.translator.options = mergedOptions;
    clone.translator.backendConnector.services.utils = {
      hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
    };
    return clone;
  }
  toJSON() {
    return {
      options: this.options,
      store: this.store,
      language: this.language,
      languages: this.languages,
      resolvedLanguage: this.resolvedLanguage
    };
  }
}
const instance = I18n.createInstance();
instance.createInstance = I18n.createInstance;

instance.createInstance;
instance.dir;
instance.init;
instance.loadResources;
instance.reloadResources;
instance.use;
instance.changeLanguage;
instance.getFixedT;
instance.t;
instance.exists;
instance.setDefaultNamespace;
instance.hasLoadedNamespace;
instance.loadNamespaces;
instance.loadLanguages;

const warn$1 = (i18n, code, msg, rest) => {
  const args = [msg, {
    code,
    ...(rest || {})
  }];
  if (i18n?.services?.logger?.forward) {
    return i18n.services.logger.forward(args, 'warn', 'react-i18next::', true);
  }
  if (isString(args[0])) args[0] = `react-i18next:: ${args[0]}`;
  if (i18n?.services?.logger?.warn) {
    i18n.services.logger.warn(...args);
  } else if (console?.warn) {
    console.warn(...args);
  }
};
const alreadyWarned = {};
const warnOnce = (i18n, code, msg, rest) => {
  if (isString(msg) && alreadyWarned[msg]) return;
  if (isString(msg)) alreadyWarned[msg] = new Date();
  warn$1(i18n, code, msg, rest);
};
const loadedClb = (i18n, cb) => () => {
  if (i18n.isInitialized) {
    cb();
  } else {
    const initialized = () => {
      setTimeout(() => {
        i18n.off('initialized', initialized);
      }, 0);
      cb();
    };
    i18n.on('initialized', initialized);
  }
};
const loadNamespaces = (i18n, ns, cb) => {
  i18n.loadNamespaces(ns, loadedClb(i18n, cb));
};
const loadLanguages = (i18n, lng, ns, cb) => {
  if (isString(ns)) ns = [ns];
  if (i18n.options.preload && i18n.options.preload.indexOf(lng) > -1) return loadNamespaces(i18n, ns, cb);
  ns.forEach(n => {
    if (i18n.options.ns.indexOf(n) < 0) i18n.options.ns.push(n);
  });
  i18n.loadLanguages(lng, loadedClb(i18n, cb));
};
const hasLoadedNamespace = (ns, i18n, options = {}) => {
  if (!i18n.languages || !i18n.languages.length) {
    warnOnce(i18n, 'NO_LANGUAGES', 'i18n.languages were undefined or empty', {
      languages: i18n.languages
    });
    return true;
  }
  return i18n.hasLoadedNamespace(ns, {
    lng: options.lng,
    precheck: (i18nInstance, loadNotPending) => {
      if (options.bindI18n?.indexOf('languageChanging') > -1 && i18nInstance.services.backendConnector.backend && i18nInstance.isLanguageChangingTo && !loadNotPending(i18nInstance.isLanguageChangingTo, ns)) return false;
    }
  });
};
const isString = obj => typeof obj === 'string';
const isObject$1 = obj => typeof obj === 'object' && obj !== null;

const matchHtmlEntity = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34|nbsp|#160|copy|#169|reg|#174|hellip|#8230|#x2F|#47);/g;
const htmlEntities = {
  '&amp;': '&',
  '&#38;': '&',
  '&lt;': '<',
  '&#60;': '<',
  '&gt;': '>',
  '&#62;': '>',
  '&apos;': "'",
  '&#39;': "'",
  '&quot;': '"',
  '&#34;': '"',
  '&nbsp;': ' ',
  '&#160;': ' ',
  '&copy;': '©',
  '&#169;': '©',
  '&reg;': '®',
  '&#174;': '®',
  '&hellip;': '…',
  '&#8230;': '…',
  '&#x2F;': '/',
  '&#47;': '/'
};
const unescapeHtmlEntity = m => htmlEntities[m];
const unescape = text => text.replace(matchHtmlEntity, unescapeHtmlEntity);

let defaultOptions$1 = {
  bindI18n: 'languageChanged',
  bindI18nStore: '',
  transEmptyNodeValue: '',
  transSupportBasicHtmlNodes: true,
  transWrapTextNodes: '',
  transKeepBasicHtmlNodesFor: ['br', 'strong', 'i', 'p'],
  useSuspense: true,
  unescape
};
const setDefaults = (options = {}) => {
  defaultOptions$1 = {
    ...defaultOptions$1,
    ...options
  };
};
const getDefaults$2 = () => defaultOptions$1;

let i18nInstance;
const setI18n = instance => {
  i18nInstance = instance;
};
const getI18n = () => i18nInstance;

const initReactI18next = {
  type: '3rdParty',
  init(instance) {
    setDefaults(instance.options.react);
    setI18n(instance);
  }
};

const I18nContext = reactExports.createContext();
class ReportNamespaces {
  constructor() {
    this.usedNamespaces = {};
  }
  addUsedNamespaces(namespaces) {
    namespaces.forEach(ns => {
      if (!this.usedNamespaces[ns]) this.usedNamespaces[ns] = true;
    });
  }
  getUsedNamespaces() {
    return Object.keys(this.usedNamespaces);
  }
}

const usePrevious = (value, ignore) => {
  const ref = reactExports.useRef();
  reactExports.useEffect(() => {
    ref.current = value;
  }, [value, ignore]);
  return ref.current;
};
const alwaysNewT = (i18n, language, namespace, keyPrefix) => i18n.getFixedT(language, namespace, keyPrefix);
const useMemoizedT = (i18n, language, namespace, keyPrefix) => reactExports.useCallback(alwaysNewT(i18n, language, namespace, keyPrefix), [i18n, language, namespace, keyPrefix]);
const useTranslation = (ns, props = {}) => {
  const {
    i18n: i18nFromProps
  } = props;
  const {
    i18n: i18nFromContext,
    defaultNS: defaultNSFromContext
  } = reactExports.useContext(I18nContext) || {};
  const i18n = i18nFromProps || i18nFromContext || getI18n();
  if (i18n && !i18n.reportNamespaces) i18n.reportNamespaces = new ReportNamespaces();
  if (!i18n) {
    warnOnce(i18n, 'NO_I18NEXT_INSTANCE', 'useTranslation: You will need to pass in an i18next instance by using initReactI18next');
    const notReadyT = (k, optsOrDefaultValue) => {
      if (isString(optsOrDefaultValue)) return optsOrDefaultValue;
      if (isObject$1(optsOrDefaultValue) && isString(optsOrDefaultValue.defaultValue)) return optsOrDefaultValue.defaultValue;
      return Array.isArray(k) ? k[k.length - 1] : k;
    };
    const retNotReady = [notReadyT, {}, false];
    retNotReady.t = notReadyT;
    retNotReady.i18n = {};
    retNotReady.ready = false;
    return retNotReady;
  }
  if (i18n.options.react?.wait) warnOnce(i18n, 'DEPRECATED_OPTION', 'useTranslation: It seems you are still using the old wait option, you may migrate to the new useSuspense behaviour.');
  const i18nOptions = {
    ...getDefaults$2(),
    ...i18n.options.react,
    ...props
  };
  const {
    useSuspense,
    keyPrefix
  } = i18nOptions;
  let namespaces = ns;
  namespaces = isString(namespaces) ? [namespaces] : namespaces || ['translation'];
  i18n.reportNamespaces.addUsedNamespaces?.(namespaces);
  const ready = (i18n.isInitialized || i18n.initializedStoreOnce) && namespaces.every(n => hasLoadedNamespace(n, i18n, i18nOptions));
  const memoGetT = useMemoizedT(i18n, props.lng || null, i18nOptions.nsMode === 'fallback' ? namespaces : namespaces[0], keyPrefix);
  const getT = () => memoGetT;
  const getNewT = () => alwaysNewT(i18n, props.lng || null, i18nOptions.nsMode === 'fallback' ? namespaces : namespaces[0], keyPrefix);
  const [t, setT] = reactExports.useState(getT);
  let joinedNS = namespaces.join();
  if (props.lng) joinedNS = `${props.lng}${joinedNS}`;
  const previousJoinedNS = usePrevious(joinedNS);
  const isMounted = reactExports.useRef(true);
  reactExports.useEffect(() => {
    const {
      bindI18n,
      bindI18nStore
    } = i18nOptions;
    isMounted.current = true;
    if (!ready && !useSuspense) {
      if (props.lng) {
        loadLanguages(i18n, props.lng, namespaces, () => {
          if (isMounted.current) setT(getNewT);
        });
      } else {
        loadNamespaces(i18n, namespaces, () => {
          if (isMounted.current) setT(getNewT);
        });
      }
    }
    if (ready && previousJoinedNS && previousJoinedNS !== joinedNS && isMounted.current) {
      setT(getNewT);
    }
    const boundReset = () => {
      if (isMounted.current) setT(getNewT);
    };
    if (bindI18n) i18n?.on(bindI18n, boundReset);
    if (bindI18nStore) i18n?.store.on(bindI18nStore, boundReset);
    return () => {
      isMounted.current = false;
      if (i18n) bindI18n?.split(' ').forEach(e => i18n.off(e, boundReset));
      if (bindI18nStore && i18n) bindI18nStore.split(' ').forEach(e => i18n.store.off(e, boundReset));
    };
  }, [i18n, joinedNS]);
  reactExports.useEffect(() => {
    if (isMounted.current && ready) {
      setT(getT);
    }
  }, [i18n, keyPrefix, ready]);
  const ret = [t, i18n, ready];
  ret.t = t;
  ret.i18n = i18n;
  ret.ready = ready;
  if (ready) return ret;
  if (!ready && !useSuspense) return ret;
  throw new Promise(resolve => {
    if (props.lng) {
      loadLanguages(i18n, props.lng, namespaces, () => resolve());
    } else {
      loadNamespaces(i18n, namespaces, () => resolve());
    }
  });
};

const {
  slice,
  forEach
} = [];
function defaults$1(obj) {
  forEach.call(slice.call(arguments, 1), source => {
    if (source) {
      for (const prop in source) {
        if (obj[prop] === undefined) obj[prop] = source[prop];
      }
    }
  });
  return obj;
}
function hasXSS(input) {
  if (typeof input !== 'string') return false;

  // Common XSS attack patterns
  const xssPatterns = [/<\s*script.*?>/i, /<\s*\/\s*script\s*>/i, /<\s*img.*?on\w+\s*=/i, /<\s*\w+\s*on\w+\s*=.*?>/i, /javascript\s*:/i, /vbscript\s*:/i, /expression\s*\(/i, /eval\s*\(/i, /alert\s*\(/i, /document\.cookie/i, /document\.write\s*\(/i, /window\.location/i, /innerHTML/i];
  return xssPatterns.some(pattern => pattern.test(input));
}

// eslint-disable-next-line no-control-regex
const fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
const serializeCookie = function (name, val) {
  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
    path: '/'
  };
  const opt = options;
  const value = encodeURIComponent(val);
  let str = `${name}=${value}`;
  if (opt.maxAge > 0) {
    const maxAge = opt.maxAge - 0;
    if (Number.isNaN(maxAge)) throw new Error('maxAge should be a Number');
    str += `; Max-Age=${Math.floor(maxAge)}`;
  }
  if (opt.domain) {
    if (!fieldContentRegExp.test(opt.domain)) {
      throw new TypeError('option domain is invalid');
    }
    str += `; Domain=${opt.domain}`;
  }
  if (opt.path) {
    if (!fieldContentRegExp.test(opt.path)) {
      throw new TypeError('option path is invalid');
    }
    str += `; Path=${opt.path}`;
  }
  if (opt.expires) {
    if (typeof opt.expires.toUTCString !== 'function') {
      throw new TypeError('option expires is invalid');
    }
    str += `; Expires=${opt.expires.toUTCString()}`;
  }
  if (opt.httpOnly) str += '; HttpOnly';
  if (opt.secure) str += '; Secure';
  if (opt.sameSite) {
    const sameSite = typeof opt.sameSite === 'string' ? opt.sameSite.toLowerCase() : opt.sameSite;
    switch (sameSite) {
      case true:
        str += '; SameSite=Strict';
        break;
      case 'lax':
        str += '; SameSite=Lax';
        break;
      case 'strict':
        str += '; SameSite=Strict';
        break;
      case 'none':
        str += '; SameSite=None';
        break;
      default:
        throw new TypeError('option sameSite is invalid');
    }
  }
  if (opt.partitioned) str += '; Partitioned';
  return str;
};
const cookie = {
  create(name, value, minutes, domain) {
    let cookieOptions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
      path: '/',
      sameSite: 'strict'
    };
    if (minutes) {
      cookieOptions.expires = new Date();
      cookieOptions.expires.setTime(cookieOptions.expires.getTime() + minutes * 60 * 1000);
    }
    if (domain) cookieOptions.domain = domain;
    document.cookie = serializeCookie(name, value, cookieOptions);
  },
  read(name) {
    const nameEQ = `${name}=`;
    const ca = document.cookie.split(';');
    for (let i = 0; i < ca.length; i++) {
      let c = ca[i];
      while (c.charAt(0) === ' ') c = c.substring(1, c.length);
      if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
  },
  remove(name, domain) {
    this.create(name, '', -1, domain);
  }
};
var cookie$1 = {
  name: 'cookie',
  // Deconstruct the options object and extract the lookupCookie property
  lookup(_ref) {
    let {
      lookupCookie
    } = _ref;
    if (lookupCookie && typeof document !== 'undefined') {
      return cookie.read(lookupCookie) || undefined;
    }
    return undefined;
  },
  // Deconstruct the options object and extract the lookupCookie, cookieMinutes, cookieDomain, and cookieOptions properties
  cacheUserLanguage(lng, _ref2) {
    let {
      lookupCookie,
      cookieMinutes,
      cookieDomain,
      cookieOptions
    } = _ref2;
    if (lookupCookie && typeof document !== 'undefined') {
      cookie.create(lookupCookie, lng, cookieMinutes, cookieDomain, cookieOptions);
    }
  }
};

var querystring = {
  name: 'querystring',
  // Deconstruct the options object and extract the lookupQuerystring property
  lookup(_ref) {
    let {
      lookupQuerystring
    } = _ref;
    let found;
    if (typeof window !== 'undefined') {
      let {
        search
      } = window.location;
      if (!window.location.search && window.location.hash?.indexOf('?') > -1) {
        search = window.location.hash.substring(window.location.hash.indexOf('?'));
      }
      const query = search.substring(1);
      const params = query.split('&');
      for (let i = 0; i < params.length; i++) {
        const pos = params[i].indexOf('=');
        if (pos > 0) {
          const key = params[i].substring(0, pos);
          if (key === lookupQuerystring) {
            found = params[i].substring(pos + 1);
          }
        }
      }
    }
    return found;
  }
};

var hash = {
  name: 'hash',
  // Deconstruct the options object and extract the lookupHash property and the lookupFromHashIndex property
  lookup(_ref) {
    let {
      lookupHash,
      lookupFromHashIndex
    } = _ref;
    let found;
    if (typeof window !== 'undefined') {
      const {
        hash
      } = window.location;
      if (hash && hash.length > 2) {
        const query = hash.substring(1);
        if (lookupHash) {
          const params = query.split('&');
          for (let i = 0; i < params.length; i++) {
            const pos = params[i].indexOf('=');
            if (pos > 0) {
              const key = params[i].substring(0, pos);
              if (key === lookupHash) {
                found = params[i].substring(pos + 1);
              }
            }
          }
        }
        if (found) return found;
        if (!found && lookupFromHashIndex > -1) {
          const language = hash.match(/\/([a-zA-Z-]*)/g);
          if (!Array.isArray(language)) return undefined;
          const index = typeof lookupFromHashIndex === 'number' ? lookupFromHashIndex : 0;
          return language[index]?.replace('/', '');
        }
      }
    }
    return found;
  }
};

let hasLocalStorageSupport = null;
const localStorageAvailable = () => {
  if (hasLocalStorageSupport !== null) return hasLocalStorageSupport;
  try {
    hasLocalStorageSupport = typeof window !== 'undefined' && window.localStorage !== null;
    if (!hasLocalStorageSupport) {
      return false;
    }
    const testKey = 'i18next.translate.boo';
    window.localStorage.setItem(testKey, 'foo');
    window.localStorage.removeItem(testKey);
  } catch (e) {
    hasLocalStorageSupport = false;
  }
  return hasLocalStorageSupport;
};
var localStorage$1 = {
  name: 'localStorage',
  // Deconstruct the options object and extract the lookupLocalStorage property
  lookup(_ref) {
    let {
      lookupLocalStorage
    } = _ref;
    if (lookupLocalStorage && localStorageAvailable()) {
      return window.localStorage.getItem(lookupLocalStorage) || undefined; // Undefined ensures type consistency with the previous version of this function
    }
    return undefined;
  },
  // Deconstruct the options object and extract the lookupLocalStorage property
  cacheUserLanguage(lng, _ref2) {
    let {
      lookupLocalStorage
    } = _ref2;
    if (lookupLocalStorage && localStorageAvailable()) {
      window.localStorage.setItem(lookupLocalStorage, lng);
    }
  }
};

let hasSessionStorageSupport = null;
const sessionStorageAvailable = () => {
  if (hasSessionStorageSupport !== null) return hasSessionStorageSupport;
  try {
    hasSessionStorageSupport = typeof window !== 'undefined' && window.sessionStorage !== null;
    if (!hasSessionStorageSupport) {
      return false;
    }
    const testKey = 'i18next.translate.boo';
    window.sessionStorage.setItem(testKey, 'foo');
    window.sessionStorage.removeItem(testKey);
  } catch (e) {
    hasSessionStorageSupport = false;
  }
  return hasSessionStorageSupport;
};
var sessionStorage = {
  name: 'sessionStorage',
  lookup(_ref) {
    let {
      lookupSessionStorage
    } = _ref;
    if (lookupSessionStorage && sessionStorageAvailable()) {
      return window.sessionStorage.getItem(lookupSessionStorage) || undefined;
    }
    return undefined;
  },
  cacheUserLanguage(lng, _ref2) {
    let {
      lookupSessionStorage
    } = _ref2;
    if (lookupSessionStorage && sessionStorageAvailable()) {
      window.sessionStorage.setItem(lookupSessionStorage, lng);
    }
  }
};

var navigator$1 = {
  name: 'navigator',
  lookup(options) {
    const found = [];
    if (typeof navigator !== 'undefined') {
      const {
        languages,
        userLanguage,
        language
      } = navigator;
      if (languages) {
        // chrome only; not an array, so can't use .push.apply instead of iterating
        for (let i = 0; i < languages.length; i++) {
          found.push(languages[i]);
        }
      }
      if (userLanguage) {
        found.push(userLanguage);
      }
      if (language) {
        found.push(language);
      }
    }
    return found.length > 0 ? found : undefined;
  }
};

var htmlTag = {
  name: 'htmlTag',
  // Deconstruct the options object and extract the htmlTag property
  lookup(_ref) {
    let {
      htmlTag
    } = _ref;
    let found;
    const internalHtmlTag = htmlTag || (typeof document !== 'undefined' ? document.documentElement : null);
    if (internalHtmlTag && typeof internalHtmlTag.getAttribute === 'function') {
      found = internalHtmlTag.getAttribute('lang');
    }
    return found;
  }
};

var path = {
  name: 'path',
  // Deconstruct the options object and extract the lookupFromPathIndex property
  lookup(_ref) {
    let {
      lookupFromPathIndex
    } = _ref;
    if (typeof window === 'undefined') return undefined;
    const language = window.location.pathname.match(/\/([a-zA-Z-]*)/g);
    if (!Array.isArray(language)) return undefined;
    const index = typeof lookupFromPathIndex === 'number' ? lookupFromPathIndex : 0;
    return language[index]?.replace('/', '');
  }
};

var subdomain = {
  name: 'subdomain',
  lookup(_ref) {
    let {
      lookupFromSubdomainIndex
    } = _ref;
    // If given get the subdomain index else 1
    const internalLookupFromSubdomainIndex = typeof lookupFromSubdomainIndex === 'number' ? lookupFromSubdomainIndex + 1 : 1;
    // get all matches if window.location. is existing
    // first item of match is the match itself and the second is the first group match which should be the first subdomain match
    // is the hostname no public domain get the or option of localhost
    const language = typeof window !== 'undefined' && window.location?.hostname?.match(/^(\w{2,5})\.(([a-z0-9-]{1,63}\.[a-z]{2,6})|localhost)/i);

    // if there is no match (null) return undefined
    if (!language) return undefined;
    // return the given group match
    return language[internalLookupFromSubdomainIndex];
  }
};

// some environments, throws when accessing document.cookie
let canCookies = false;
try {
  // eslint-disable-next-line no-unused-expressions
  document.cookie;
  canCookies = true;
  // eslint-disable-next-line no-empty
} catch (e) {}
const order = ['querystring', 'cookie', 'localStorage', 'sessionStorage', 'navigator', 'htmlTag'];
if (!canCookies) order.splice(1, 1);
const getDefaults$1 = () => ({
  order,
  lookupQuerystring: 'lng',
  lookupCookie: 'i18next',
  lookupLocalStorage: 'i18nextLng',
  lookupSessionStorage: 'i18nextLng',
  // cache user language
  caches: ['localStorage'],
  excludeCacheFor: ['cimode'],
  // cookieMinutes: 10,
  // cookieDomain: 'myDomain'

  convertDetectedLanguage: l => l
});
class Browser {
  constructor(services) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.type = 'languageDetector';
    this.detectors = {};
    this.init(services, options);
  }
  init() {
    let services = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      languageUtils: {}
    };
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let i18nOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    this.services = services;
    this.options = defaults$1(options, this.options || {}, getDefaults$1());
    if (typeof this.options.convertDetectedLanguage === 'string' && this.options.convertDetectedLanguage.indexOf('15897') > -1) {
      this.options.convertDetectedLanguage = l => l.replace('-', '_');
    }

    // backwards compatibility
    if (this.options.lookupFromUrlIndex) this.options.lookupFromPathIndex = this.options.lookupFromUrlIndex;
    this.i18nOptions = i18nOptions;
    this.addDetector(cookie$1);
    this.addDetector(querystring);
    this.addDetector(localStorage$1);
    this.addDetector(sessionStorage);
    this.addDetector(navigator$1);
    this.addDetector(htmlTag);
    this.addDetector(path);
    this.addDetector(subdomain);
    this.addDetector(hash);
  }
  addDetector(detector) {
    this.detectors[detector.name] = detector;
    return this;
  }
  detect() {
    let detectionOrder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.order;
    let detected = [];
    detectionOrder.forEach(detectorName => {
      if (this.detectors[detectorName]) {
        let lookup = this.detectors[detectorName].lookup(this.options);
        if (lookup && typeof lookup === 'string') lookup = [lookup];
        if (lookup) detected = detected.concat(lookup);
      }
    });
    detected = detected.filter(d => d !== undefined && d !== null && !hasXSS(d)).map(d => this.options.convertDetectedLanguage(d));
    if (this.services && this.services.languageUtils && this.services.languageUtils.getBestMatchFromCodes) return detected; // new i18next v19.5.0
    return detected.length > 0 ? detected[0] : null; // a little backward compatibility
  }
  cacheUserLanguage(lng) {
    let caches = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.options.caches;
    if (!caches) return;
    if (this.options.excludeCacheFor && this.options.excludeCacheFor.indexOf(lng) > -1) return;
    caches.forEach(cacheName => {
      if (this.detectors[cacheName]) this.detectors[cacheName].cacheUserLanguage(lng, this.options);
    });
  }
}
Browser.type = 'languageDetector';

function _typeof$2(o) { "@babel/helpers - typeof"; return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof$2(o); }
function hasXMLHttpRequest() {
  return typeof XMLHttpRequest === 'function' || (typeof XMLHttpRequest === "undefined" ? "undefined" : _typeof$2(XMLHttpRequest)) === 'object';
}
function isPromise(maybePromise) {
  return !!maybePromise && typeof maybePromise.then === 'function';
}
function makePromise(maybePromise) {
  if (isPromise(maybePromise)) {
    return maybePromise;
  }
  return Promise.resolve(maybePromise);
}

const scriptRel = 'modulepreload';const assetsURL = function(dep) { return "/archi-site/"+dep };const seen = {};const __vitePreload = function preload(baseModule, deps, importerUrl) {
  let promise = Promise.resolve();
  if (true && deps && deps.length > 0) {
    document.getElementsByTagName("link");
    const cspNonceMeta = document.querySelector(
      "meta[property=csp-nonce]"
    );
    const cspNonce = cspNonceMeta?.nonce || cspNonceMeta?.getAttribute("nonce");
    promise = Promise.allSettled(
      deps.map((dep) => {
        dep = assetsURL(dep);
        if (dep in seen) return;
        seen[dep] = true;
        const isCss = dep.endsWith(".css");
        const cssSelector = isCss ? '[rel="stylesheet"]' : "";
        if (document.querySelector(`link[href="${dep}"]${cssSelector}`)) {
          return;
        }
        const link = document.createElement("link");
        link.rel = isCss ? "stylesheet" : scriptRel;
        if (!isCss) {
          link.as = "script";
        }
        link.crossOrigin = "";
        link.href = dep;
        if (cspNonce) {
          link.setAttribute("nonce", cspNonce);
        }
        document.head.appendChild(link);
        if (isCss) {
          return new Promise((res, rej) => {
            link.addEventListener("load", res);
            link.addEventListener(
              "error",
              () => rej(new Error(`Unable to preload CSS for ${dep}`))
            );
          });
        }
      })
    );
  }
  function handlePreloadError(err) {
    const e = new Event("vite:preloadError", {
      cancelable: true
    });
    e.payload = err;
    window.dispatchEvent(e);
    if (!e.defaultPrevented) {
      throw err;
    }
  }
  return promise.then((res) => {
    for (const item of res || []) {
      if (item.status !== "rejected") continue;
      handlePreloadError(item.reason);
    }
    return baseModule().catch(handlePreloadError);
  });
};

function ownKeys$J(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$J(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$J(Object(t), true).forEach(function (r) { _defineProperty$N(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$J(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$N(e, r, t) { return (r = _toPropertyKey$N(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$N(t) { var i = _toPrimitive$N(t, "string"); return "symbol" == _typeof$1(i) ? i : i + ""; }
function _toPrimitive$N(t, r) { if ("object" != _typeof$1(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != _typeof$1(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _typeof$1(o) { "@babel/helpers - typeof"; return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof$1(o); }
var fetchApi = typeof fetch === 'function' ? fetch : undefined;
if (typeof global !== 'undefined' && global.fetch) {
  fetchApi = global.fetch;
} else if (typeof window !== 'undefined' && window.fetch) {
  fetchApi = window.fetch;
}
var XmlHttpRequestApi;
if (hasXMLHttpRequest()) {
  if (typeof global !== 'undefined' && global.XMLHttpRequest) {
    XmlHttpRequestApi = global.XMLHttpRequest;
  } else if (typeof window !== 'undefined' && window.XMLHttpRequest) {
    XmlHttpRequestApi = window.XMLHttpRequest;
  }
}
var ActiveXObjectApi;
if (typeof ActiveXObject === 'function') {
  if (typeof global !== 'undefined' && global.ActiveXObject) {
    ActiveXObjectApi = global.ActiveXObject;
  } else if (typeof window !== 'undefined' && window.ActiveXObject) {
    ActiveXObjectApi = window.ActiveXObject;
  }
}
if (typeof fetchApi !== 'function') fetchApi = undefined;
if (!fetchApi && !XmlHttpRequestApi && !ActiveXObjectApi) {
  try {
    __vitePreload(() => import('./browser-ponyfill-j5TnoA9K.js').then(n => n.b),true?__vite__mapDeps([0,1]):void 0).then(function (mod) {
      fetchApi = mod.default;
    }).catch(function () {});
  } catch (e) {}
}
var addQueryString = function addQueryString(url, params) {
  if (params && _typeof$1(params) === 'object') {
    var queryString = '';
    for (var paramName in params) {
      queryString += '&' + encodeURIComponent(paramName) + '=' + encodeURIComponent(params[paramName]);
    }
    if (!queryString) return url;
    url = url + (url.indexOf('?') !== -1 ? '&' : '?') + queryString.slice(1);
  }
  return url;
};
var fetchIt = function fetchIt(url, fetchOptions, callback, altFetch) {
  var resolver = function resolver(response) {
    if (!response.ok) return callback(response.statusText || 'Error', {
      status: response.status
    });
    response.text().then(function (data) {
      callback(null, {
        status: response.status,
        data: data
      });
    }).catch(callback);
  };
  if (altFetch) {
    var altResponse = altFetch(url, fetchOptions);
    if (altResponse instanceof Promise) {
      altResponse.then(resolver).catch(callback);
      return;
    }
  }
  if (typeof fetch === 'function') {
    fetch(url, fetchOptions).then(resolver).catch(callback);
  } else {
    fetchApi(url, fetchOptions).then(resolver).catch(callback);
  }
};
var omitFetchOptions = false;
var requestWithFetch = function requestWithFetch(options, url, payload, callback) {
  if (options.queryStringParams) {
    url = addQueryString(url, options.queryStringParams);
  }
  var headers = _objectSpread$J({}, typeof options.customHeaders === 'function' ? options.customHeaders() : options.customHeaders);
  if (typeof window === 'undefined' && typeof global !== 'undefined' && typeof global.process !== 'undefined' && global.process.versions && global.process.versions.node) {
    headers['User-Agent'] = "i18next-http-backend (node/".concat(global.process.version, "; ").concat(global.process.platform, " ").concat(global.process.arch, ")");
  }
  if (payload) headers['Content-Type'] = 'application/json';
  var reqOptions = typeof options.requestOptions === 'function' ? options.requestOptions(payload) : options.requestOptions;
  var fetchOptions = _objectSpread$J({
    method: payload ? 'POST' : 'GET',
    body: payload ? options.stringify(payload) : undefined,
    headers: headers
  }, omitFetchOptions ? {} : reqOptions);
  var altFetch = typeof options.alternateFetch === 'function' && options.alternateFetch.length >= 1 ? options.alternateFetch : undefined;
  try {
    fetchIt(url, fetchOptions, callback, altFetch);
  } catch (e) {
    if (!reqOptions || Object.keys(reqOptions).length === 0 || !e.message || e.message.indexOf('not implemented') < 0) {
      return callback(e);
    }
    try {
      Object.keys(reqOptions).forEach(function (opt) {
        delete fetchOptions[opt];
      });
      fetchIt(url, fetchOptions, callback, altFetch);
      omitFetchOptions = true;
    } catch (err) {
      callback(err);
    }
  }
};
var requestWithXmlHttpRequest = function requestWithXmlHttpRequest(options, url, payload, callback) {
  if (payload && _typeof$1(payload) === 'object') {
    payload = addQueryString('', payload).slice(1);
  }
  if (options.queryStringParams) {
    url = addQueryString(url, options.queryStringParams);
  }
  try {
    var x = XmlHttpRequestApi ? new XmlHttpRequestApi() : new ActiveXObjectApi('MSXML2.XMLHTTP.3.0');
    x.open(payload ? 'POST' : 'GET', url, 1);
    if (!options.crossDomain) {
      x.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
    }
    x.withCredentials = !!options.withCredentials;
    if (payload) {
      x.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    }
    if (x.overrideMimeType) {
      x.overrideMimeType('application/json');
    }
    var h = options.customHeaders;
    h = typeof h === 'function' ? h() : h;
    if (h) {
      for (var i in h) {
        x.setRequestHeader(i, h[i]);
      }
    }
    x.onreadystatechange = function () {
      x.readyState > 3 && callback(x.status >= 400 ? x.statusText : null, {
        status: x.status,
        data: x.responseText
      });
    };
    x.send(payload);
  } catch (e) {
    console && console.log(e);
  }
};
var request = function request(options, url, payload, callback) {
  if (typeof payload === 'function') {
    callback = payload;
    payload = undefined;
  }
  callback = callback || function () {};
  if (fetchApi && url.indexOf('file:') !== 0) {
    return requestWithFetch(options, url, payload, callback);
  }
  if (hasXMLHttpRequest() || typeof ActiveXObject === 'function') {
    return requestWithXmlHttpRequest(options, url, payload, callback);
  }
  callback(new Error('No fetch and no xhr implementation found!'));
};

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys$I(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$I(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$I(Object(t), true).forEach(function (r) { _defineProperty$M(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$I(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey$M(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), Object.defineProperty(e, "prototype", { writable: false }), e; }
function _defineProperty$M(e, r, t) { return (r = _toPropertyKey$M(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$M(t) { var i = _toPrimitive$M(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive$M(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return (String )(t); }
var getDefaults = function getDefaults() {
  return {
    loadPath: '/locales/{{lng}}/{{ns}}.json',
    addPath: '/locales/add/{{lng}}/{{ns}}',
    parse: function parse(data) {
      return JSON.parse(data);
    },
    stringify: JSON.stringify,
    parsePayload: function parsePayload(namespace, key, fallbackValue) {
      return _defineProperty$M({}, key, fallbackValue || '');
    },
    parseLoadPayload: function parseLoadPayload(languages, namespaces) {
      return undefined;
    },
    request: request,
    reloadInterval: typeof window !== 'undefined' ? false : 60 * 60 * 1000,
    customHeaders: {},
    queryStringParams: {},
    crossDomain: false,
    withCredentials: false,
    overrideMimeType: false,
    requestOptions: {
      mode: 'cors',
      credentials: 'same-origin',
      cache: 'default'
    }
  };
};
var Backend = function () {
  function Backend(services) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var allOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    _classCallCheck(this, Backend);
    this.services = services;
    this.options = options;
    this.allOptions = allOptions;
    this.type = 'backend';
    this.init(services, options, allOptions);
  }
  return _createClass(Backend, [{
    key: "init",
    value: function init(services) {
      var _this = this;
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var allOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      this.services = services;
      this.options = _objectSpread$I(_objectSpread$I(_objectSpread$I({}, getDefaults()), this.options || {}), options);
      this.allOptions = allOptions;
      if (this.services && this.options.reloadInterval) {
        var timer = setInterval(function () {
          return _this.reload();
        }, this.options.reloadInterval);
        if (_typeof(timer) === 'object' && typeof timer.unref === 'function') timer.unref();
      }
    }
  }, {
    key: "readMulti",
    value: function readMulti(languages, namespaces, callback) {
      this._readAny(languages, languages, namespaces, namespaces, callback);
    }
  }, {
    key: "read",
    value: function read(language, namespace, callback) {
      this._readAny([language], language, [namespace], namespace, callback);
    }
  }, {
    key: "_readAny",
    value: function _readAny(languages, loadUrlLanguages, namespaces, loadUrlNamespaces, callback) {
      var _this2 = this;
      var loadPath = this.options.loadPath;
      if (typeof this.options.loadPath === 'function') {
        loadPath = this.options.loadPath(languages, namespaces);
      }
      loadPath = makePromise(loadPath);
      loadPath.then(function (resolvedLoadPath) {
        if (!resolvedLoadPath) return callback(null, {});
        var url = _this2.services.interpolator.interpolate(resolvedLoadPath, {
          lng: languages.join('+'),
          ns: namespaces.join('+')
        });
        _this2.loadUrl(url, callback, loadUrlLanguages, loadUrlNamespaces);
      });
    }
  }, {
    key: "loadUrl",
    value: function loadUrl(url, callback, languages, namespaces) {
      var _this3 = this;
      var lng = typeof languages === 'string' ? [languages] : languages;
      var ns = typeof namespaces === 'string' ? [namespaces] : namespaces;
      var payload = this.options.parseLoadPayload(lng, ns);
      this.options.request(this.options, url, payload, function (err, res) {
        if (res && (res.status >= 500 && res.status < 600 || !res.status)) return callback('failed loading ' + url + '; status code: ' + res.status, true);
        if (res && res.status >= 400 && res.status < 500) return callback('failed loading ' + url + '; status code: ' + res.status, false);
        if (!res && err && err.message) {
          var errorMessage = err.message.toLowerCase();
          var isNetworkError = ['failed', 'fetch', 'network', 'load'].find(function (term) {
            return errorMessage.indexOf(term) > -1;
          });
          if (isNetworkError) {
            return callback('failed loading ' + url + ': ' + err.message, true);
          }
        }
        if (err) return callback(err, false);
        var ret, parseErr;
        try {
          if (typeof res.data === 'string') {
            ret = _this3.options.parse(res.data, languages, namespaces);
          } else {
            ret = res.data;
          }
        } catch (e) {
          parseErr = 'failed parsing ' + url + ' to json';
        }
        if (parseErr) return callback(parseErr, false);
        callback(null, ret);
      });
    }
  }, {
    key: "create",
    value: function create(languages, namespace, key, fallbackValue, callback) {
      var _this4 = this;
      if (!this.options.addPath) return;
      if (typeof languages === 'string') languages = [languages];
      var payload = this.options.parsePayload(namespace, key, fallbackValue);
      var finished = 0;
      var dataArray = [];
      var resArray = [];
      languages.forEach(function (lng) {
        var addPath = _this4.options.addPath;
        if (typeof _this4.options.addPath === 'function') {
          addPath = _this4.options.addPath(lng, namespace);
        }
        var url = _this4.services.interpolator.interpolate(addPath, {
          lng: lng,
          ns: namespace
        });
        _this4.options.request(_this4.options, url, payload, function (data, res) {
          finished += 1;
          dataArray.push(data);
          resArray.push(res);
          if (finished === languages.length) {
            if (typeof callback === 'function') callback(dataArray, resArray);
          }
        });
      });
    }
  }, {
    key: "reload",
    value: function reload() {
      var _this5 = this;
      var _this$services = this.services,
        backendConnector = _this$services.backendConnector,
        languageUtils = _this$services.languageUtils,
        logger = _this$services.logger;
      var currentLanguage = backendConnector.language;
      if (currentLanguage && currentLanguage.toLowerCase() === 'cimode') return;
      var toLoad = [];
      var append = function append(lng) {
        var lngs = languageUtils.toResolveHierarchy(lng);
        lngs.forEach(function (l) {
          if (toLoad.indexOf(l) < 0) toLoad.push(l);
        });
      };
      append(currentLanguage);
      if (this.allOptions.preload) this.allOptions.preload.forEach(function (l) {
        return append(l);
      });
      toLoad.forEach(function (lng) {
        _this5.allOptions.ns.forEach(function (ns) {
          backendConnector.read(lng, ns, 'read', null, null, function (err, data) {
            if (err) logger.warn("loading namespace ".concat(ns, " for language ").concat(lng, " failed"), err);
            if (!err && data) logger.log("loaded namespace ".concat(ns, " for language ").concat(lng), data);
            backendConnector.loaded("".concat(lng, "|").concat(ns), err, data);
          });
        });
      });
    }
  }]);
}();
Backend.type = 'backend';

const navigation$1 = {
	home: "Home",
	architecture: "Architecture",
	architects: "Architects",
	map: "Map",
	research: "Research",
	mobileMenu: "Main Navigation",
	desktopNavigation: "Desktop Navigation"
};
const homepage$1 = {
	title: "Architecture Database",
	subtitle: "A comprehensive database for searching and browsing Japanese architectural works and architects",
	searchPlaceholder: "Search by architectural work, architect, location, etc.",
	searchButton: "Search",
	statsArchitecture: "14,000+ Architecture Works",
	statsArchitects: "2,900+ Architects",
	statsNationwide: "Nationwide Coverage",
	recentWorks: "Recent Architectural Works",
	viewAllWorks: "View All Works",
	features: "Database Features",
	loadingDatabase: "Initializing database...",
	loadingProgress: "Loading large database...",
	dataLoadingText: "Loading 14,000 architectural work records",
	optimizedLoading: "High-speed loading with optimized data (1-3 seconds)",
	errorLoading: "Failed to load from database",
	networkSlow: "Internet connection may be slow. Please wait and reload the page.",
	checkConnection: "Please check your network connection.",
	retry: "Retry",
	openDiagnostics: "Open Diagnostic Tool",
	refresh: "Refresh",
	noWorksFound: "No architectural works found",
	checkDatabaseConnection: "Please check database connection"
};
const features$1 = {
	architecture: {
		title: "Architectural Works",
		description: "Browse over 14,000 architectural work information from all over Japan. Detailed search by region, era, category, etc. is possible.",
		button: "Find Works"
	},
	architects: {
		title: "Architects",
		description: "Contains information on over 2,900 architects. You can check detailed information such as career, work list, and affiliated office.",
		button: "Find Architects"
	},
	map: {
		title: "Map Display",
		description: "Visually explore architectural works on a map. Discover nearby architectural works based on location information.",
		button: "Open Map"
	}
};
const accessibility$1 = {
	skipToMain: "Skip to main content",
	skipToNavigation: "Skip to navigation",
	currentPage: "Current page",
	loading: "Loading",
	error: "Error",
	search: "Search",
	openMenu: "Open menu",
	closeMenu: "Close menu",
	pageOf: "Page {{current}} of {{total}}",
	resultsFound: "{{count}} results found",
	sortBy: "Sort by",
	filterBy: "Filter by"
};
const common$1 = {
	loading: "Loading...",
	error: "Error",
	retry: "Retry",
	close: "Close",
	open: "Open",
	search: "Search",
	clear: "Clear",
	apply: "Apply",
	cancel: "Cancel",
	save: "Save",
	edit: "Edit",
	"delete": "Delete",
	view: "View",
	next: "Next",
	previous: "Previous",
	first: "First",
	last: "Last"
};
const languages$1 = {
	japanese: "日本語",
	english: "English",
	changeLanguage: "Change Language"
};
const enCommon = {
	navigation: navigation$1,
	homepage: homepage$1,
	features: features$1,
	accessibility: accessibility$1,
	common: common$1,
	languages: languages$1
};

const navigation = {
	home: "ホーム",
	architecture: "建築作品",
	architects: "建築家",
	map: "マップ",
	research: "研究",
	mobileMenu: "メインナビゲーション",
	desktopNavigation: "デスクトップナビゲーション"
};
const homepage = {
	title: "建築データベース",
	subtitle: "日本の建築作品と建築家を検索・閲覧できる包括的なデータベース",
	searchPlaceholder: "建築作品、建築家、住所などで検索",
	searchButton: "検索",
	statsArchitecture: "14,000+ 建築作品",
	statsArchitects: "2,900+ 建築家",
	statsNationwide: "全国対応",
	recentWorks: "最近の建築作品",
	viewAllWorks: "すべての作品を見る",
	features: "データベースの特徴",
	loadingDatabase: "データベースを初期化中...",
	loadingProgress: "大きなデータベースを読み込み中...",
	dataLoadingText: "14,000件の建築作品データを読み込み中です",
	optimizedLoading: "最適化されたデータで高速読み込み中（1-3秒）",
	errorLoading: "データベースからの読み込みに失敗しました",
	networkSlow: "インターネット接続が遅い可能性があります。しばらく待ってからページを再読み込みしてください。",
	checkConnection: "ネットワーク接続を確認してください。",
	retry: "再試行",
	openDiagnostics: "診断ツールを開く",
	refresh: "リフレッシュ",
	noWorksFound: "建築作品が見つかりませんでした",
	checkDatabaseConnection: "データベースの接続を確認してください"
};
const features = {
	architecture: {
		title: "建築作品",
		description: "日本全国から14,000件以上の建築作品情報を閲覧できます。地域、年代、カテゴリーなどで詳細検索が可能です。",
		button: "作品を探す"
	},
	architects: {
		title: "建築家",
		description: "2,900人以上の建築家情報を収録。経歴、作品リスト、所属事務所などの詳細情報を確認できます。",
		button: "建築家を探す"
	},
	map: {
		title: "マップ表示",
		description: "建築作品を地図上で視覚的に探索できます。位置情報をもとに周辺の建築作品を発見できます。",
		button: "マップを開く"
	}
};
const accessibility = {
	skipToMain: "メインコンテンツへスキップ",
	skipToNavigation: "ナビゲーションへスキップ",
	currentPage: "現在のページ",
	loading: "読み込み中",
	error: "エラー",
	search: "検索",
	openMenu: "メニューを開く",
	closeMenu: "メニューを閉じる",
	pageOf: "{{total}}ページ中{{current}}ページ",
	resultsFound: "{{count}}件の結果が見つかりました",
	sortBy: "並び替え",
	filterBy: "絞り込み"
};
const common = {
	loading: "読み込み中...",
	error: "エラー",
	retry: "再試行",
	close: "閉じる",
	open: "開く",
	search: "検索",
	clear: "クリア",
	apply: "適用",
	cancel: "キャンセル",
	save: "保存",
	edit: "編集",
	"delete": "削除",
	view: "表示",
	next: "次へ",
	previous: "前へ",
	first: "最初",
	last: "最後"
};
const languages = {
	japanese: "日本語",
	english: "English",
	changeLanguage: "言語を変更"
};
const jaCommon = {
	navigation: navigation,
	homepage: homepage,
	features: features,
	accessibility: accessibility,
	common: common,
	languages: languages
};

const resources = {
  en: {
    common: enCommon
  },
  ja: {
    common: jaCommon
  }
};
instance.use(Backend).use(Browser).use(initReactI18next).init({
  // Use static resources instead of loading from backend for better performance
  resources,
  fallbackLng: "ja",
  // Default to Japanese since this is a Japanese architecture database
  debug: false,
  // Default namespace
  defaultNS: "common",
  ns: ["common"],
  interpolation: {
    escapeValue: false
    // React already escapes values
  },
  // Language detection configuration
  detection: {
    order: ["localStorage", "navigator", "htmlTag"],
    caches: ["localStorage"],
    lookupLocalStorage: "i18nextLng",
    checkWhitelist: true
  },
  // Backend configuration (fallback for missing translations)
  backend: {
    loadPath: "/locales/{{lng}}/{{ns}}.json"
  },
  // React-specific options
  react: {
    useSuspense: false,
    // Disable suspense to handle loading manually
    bindI18n: "languageChanged loaded",
    bindI18nStore: "added removed",
    transEmptyNodeValue: "",
    transSupportBasicHtmlNodes: true,
    transKeepBasicHtmlNodesFor: ["br", "strong", "i", "em"]
  },
  // Only allow Japanese and English
  supportedLngs: ["ja", "en"],
  // Performance optimizations
  load: "languageOnly",
  // Don't load region-specific variants
  preload: ["ja", "en"],
  // Preload both languages
  // Keyseparator and nsseparator
  keySeparator: ".",
  nsSeparator: ":",
  // Return key if translation is missing in development
  returnEmptyString: false,
  returnNull: false,
  returnObjects: false
});
const supportedLanguages = [
  { code: "ja", name: "日本語", nativeName: "日本語" },
  { code: "en", name: "English", nativeName: "English" }
];
const useTypedTranslation = () => {
  const { t: originalT, i18n: i18nInstance } = useTranslation("common");
  const t = (key, options) => originalT(key, options);
  const changeLanguage = (lng) => {
    return i18nInstance.changeLanguage(lng);
  };
  const currentLanguage = i18nInstance.language;
  return {
    t,
    changeLanguage,
    currentLanguage,
    isReady: i18nInstance.isInitialized
  };
};

const LanguageSwitcher = ({
  variant = "button",
  size = "medium",
  className = ""
}) => {
  const { t, changeLanguage, currentLanguage } = useTypedTranslation();
  const theme = useTheme();
  const [anchorEl, setAnchorEl] = reactExports.useState(null);
  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };
  const handleLanguageChange = async (language) => {
    try {
      await changeLanguage(language);
      handleClose();
      const announcement = document.createElement("div");
      announcement.setAttribute("aria-live", "polite");
      announcement.setAttribute("aria-atomic", "true");
      announcement.style.position = "absolute";
      announcement.style.left = "-10000px";
      announcement.textContent = `Language changed to ${supportedLanguages.find((lang) => lang.code === language)?.nativeName}`;
      document.body.appendChild(announcement);
      setTimeout(() => {
        document.body.removeChild(announcement);
      }, 1e3);
    } catch (error) {
      console.error("Failed to change language:", error);
    }
  };
  const currentLang = supportedLanguages.find((lang) => lang.code === currentLanguage);
  if (variant === "icon") {
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { className, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Button,
        {
          size,
          onClick: handleClick,
          startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(LanguageIcon, {}),
          "aria-label": t("languages.changeLanguage"),
          "aria-expanded": Boolean(anchorEl),
          "aria-haspopup": "menu",
          sx: {
            minWidth: "auto",
            px: 1,
            "&:hover": {
              backgroundColor: alpha$1(theme.palette.primary.main, 0.08)
            }
          },
          children: currentLang?.code.toUpperCase()
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Menu,
        {
          anchorEl,
          open: Boolean(anchorEl),
          onClose: handleClose,
          MenuListProps: {
            "aria-labelledby": "language-button",
            role: "menu"
          },
          transformOrigin: { horizontal: "right", vertical: "top" },
          anchorOrigin: { horizontal: "right", vertical: "bottom" },
          sx: {
            "& .MuiPaper-root": {
              minWidth: 160,
              mt: 1,
              borderRadius: 2,
              boxShadow: theme.shadows[3]
            }
          },
          children: supportedLanguages.map((language) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
            MenuItem,
            {
              onClick: () => handleLanguageChange(language.code),
              selected: language.code === currentLanguage,
              role: "menuitemradio",
              "aria-checked": language.code === currentLanguage,
              sx: {
                py: 1.5,
                px: 2,
                "&.Mui-selected": {
                  backgroundColor: alpha$1(theme.palette.primary.main, 0.12),
                  "&:hover": {
                    backgroundColor: alpha$1(theme.palette.primary.main, 0.16)
                  }
                }
              },
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(ListItemIcon, { sx: { minWidth: 32 }, children: language.code === currentLanguage && /* @__PURE__ */ jsxRuntimeExports.jsx(
                  CheckIcon,
                  {
                    fontSize: "small",
                    color: "primary",
                    "aria-hidden": "true"
                  }
                ) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  ListItemText,
                  {
                    primary: language.nativeName,
                    primaryTypographyProps: {
                      fontSize: "0.875rem",
                      fontWeight: language.code === currentLanguage ? 600 : 400
                    }
                  }
                )
              ]
            },
            language.code
          ))
        }
      )
    ] });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { className, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Button,
      {
        size,
        variant: "outlined",
        onClick: handleClick,
        startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(LanguageIcon, {}),
        "aria-label": t("languages.changeLanguage"),
        "aria-expanded": Boolean(anchorEl),
        "aria-haspopup": "menu",
        sx: {
          borderRadius: 2,
          textTransform: "none",
          fontWeight: 500,
          px: 2,
          py: 1,
          "&:hover": {
            borderColor: theme.palette.primary.main,
            backgroundColor: alpha$1(theme.palette.primary.main, 0.04)
          }
        },
        children: currentLang?.nativeName
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Menu,
      {
        anchorEl,
        open: Boolean(anchorEl),
        onClose: handleClose,
        MenuListProps: {
          "aria-labelledby": "language-button",
          role: "menu"
        },
        transformOrigin: { horizontal: "right", vertical: "top" },
        anchorOrigin: { horizontal: "right", vertical: "bottom" },
        sx: {
          "& .MuiPaper-root": {
            minWidth: 180,
            mt: 1,
            borderRadius: 2,
            boxShadow: theme.shadows[4],
            border: `1px solid ${theme.palette.divider}`
          }
        },
        children: supportedLanguages.map((language) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
          MenuItem,
          {
            onClick: () => handleLanguageChange(language.code),
            selected: language.code === currentLanguage,
            role: "menuitemradio",
            "aria-checked": language.code === currentLanguage,
            sx: {
              py: 1.5,
              px: 2,
              "&.Mui-selected": {
                backgroundColor: alpha$1(theme.palette.primary.main, 0.12),
                "&:hover": {
                  backgroundColor: alpha$1(theme.palette.primary.main, 0.16)
                }
              }
            },
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(ListItemIcon, { sx: { minWidth: 36 }, children: language.code === currentLanguage && /* @__PURE__ */ jsxRuntimeExports.jsx(
                CheckIcon,
                {
                  fontSize: "small",
                  color: "primary",
                  "aria-hidden": "true"
                }
              ) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(ListItemText, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Box,
                  {
                    component: "span",
                    sx: {
                      fontWeight: language.code === currentLanguage ? 600 : 400,
                      fontSize: "0.875rem"
                    },
                    children: language.nativeName
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Box,
                  {
                    component: "span",
                    sx: {
                      display: "block",
                      fontSize: "0.75rem",
                      color: "text.secondary",
                      mt: 0.25
                    },
                    children: language.name
                  }
                )
              ] }) })
            ]
          },
          language.code
        ))
      }
    )
  ] });
};

const getFocusableElements = (container) => {
  const focusableSelectors = [
    "a[href]",
    "button:not([disabled])",
    "input:not([disabled])",
    "select:not([disabled])",
    "textarea:not([disabled])",
    '[tabindex]:not([tabindex="-1"])',
    '[contenteditable="true"]'
  ];
  return Array.from(
    container.querySelectorAll(focusableSelectors.join(", "))
  );
};
const useKeyboardNavigation = (onEscape, onEnter, onArrowUp, onArrowDown, onArrowLeft, onArrowRight) => {
  reactExports.useEffect(() => {
    const handleKeyDown = (event) => {
      switch (event.key) {
        case "Escape":
          onEscape?.();
          break;
        case "Enter":
          break;
        case "ArrowUp":
          event.preventDefault();
          break;
        case "ArrowDown":
          event.preventDefault();
          break;
      }
    };
    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [onEscape, onEnter, onArrowUp, onArrowDown, onArrowLeft, onArrowRight]);
};
const useFocusTrap = (isActive) => {
  const containerRef = reactExports.useRef(null);
  reactExports.useEffect(() => {
    if (!isActive || !containerRef.current) return;
    const container = containerRef.current;
    const focusableElements = getFocusableElements(container);
    if (focusableElements.length === 0) return;
    const firstElement = focusableElements[0];
    const lastElement = focusableElements[focusableElements.length - 1];
    firstElement.focus();
    const handleTabKey = (event) => {
      if (event.key !== "Tab") return;
      if (event.shiftKey) {
        if (document.activeElement === firstElement) {
          event.preventDefault();
          lastElement.focus();
        }
      } else {
        if (document.activeElement === lastElement) {
          event.preventDefault();
          firstElement.focus();
        }
      }
    };
    container.addEventListener("keydown", handleTabKey);
    return () => {
      container.removeEventListener("keydown", handleTabKey);
    };
  }, [isActive]);
  return containerRef;
};
const AriaLiveRegion = ({ message, level = "polite", className = "" }) => /* @__PURE__ */ jsxRuntimeExports.jsx(
  "div",
  {
    "aria-live": level,
    "aria-atomic": "true",
    className: `sr-only ${className}`,
    style: {
      position: "absolute",
      left: "-10000px",
      width: "1px",
      height: "1px",
      overflow: "hidden"
    },
    children: message
  }
);
const useHighContrast = () => {
  const [prefersHighContrast, setPrefersHighContrast] = reactExports.useState(false);
  reactExports.useEffect(() => {
    const mediaQuery = window.matchMedia("(prefers-contrast: high)");
    setPrefersHighContrast(mediaQuery.matches);
    const handleChange = (event) => {
      setPrefersHighContrast(event.matches);
    };
    mediaQuery.addEventListener("change", handleChange);
    return () => mediaQuery.removeEventListener("change", handleChange);
  }, []);
  return prefersHighContrast;
};
const getAriaAttributes = (label, describedBy, expanded, selected, disabled, invalid, required, live, atomic) => {
  const attributes = {};
  attributes["aria-label"] = label;
  return attributes;
};

const HighContrastToggle = ({
  variant = "icon",
  size = "medium",
  className = "",
  onToggle
}) => {
  useTypedTranslation();
  const theme = useTheme();
  const systemPrefersHighContrast = useHighContrast();
  const [highContrastEnabled, setHighContrastEnabled] = reactExports.useState(() => {
    const stored = localStorage.getItem("highContrast");
    if (stored !== null) {
      return stored === "true";
    }
    return systemPrefersHighContrast;
  });
  reactExports.useEffect(() => {
    localStorage.setItem("highContrast", highContrastEnabled.toString());
  }, [highContrastEnabled]);
  reactExports.useEffect(() => {
    const root = document.documentElement;
    if (highContrastEnabled) {
      root.classList.add("high-contrast-mode");
      root.style.setProperty("--primary-color", "#000000");
      root.style.setProperty("--secondary-color", "#FFFFFF");
      root.style.setProperty("--background-color", "#FFFFFF");
      root.style.setProperty("--text-color", "#000000");
      root.style.setProperty("--border-color", "#000000");
    } else {
      root.classList.remove("high-contrast-mode");
      root.style.removeProperty("--primary-color");
      root.style.removeProperty("--secondary-color");
      root.style.removeProperty("--background-color");
      root.style.removeProperty("--text-color");
      root.style.removeProperty("--border-color");
    }
  }, [highContrastEnabled]);
  const handleToggle = reactExports.useCallback(() => {
    const newValue = !highContrastEnabled;
    setHighContrastEnabled(newValue);
    onToggle?.(newValue);
    const announcement = document.createElement("div");
    announcement.setAttribute("aria-live", "polite");
    announcement.setAttribute("aria-atomic", "true");
    announcement.style.position = "absolute";
    announcement.style.left = "-10000px";
    announcement.textContent = newValue ? "ハイコントラストモードが有効になりました" : "ハイコントラストモードが無効になりました";
    document.body.appendChild(announcement);
    setTimeout(() => {
      document.body.removeChild(announcement);
    }, 1e3);
  }, [highContrastEnabled, onToggle]);
  const ariaAttributes = getAriaAttributes(
    "ハイコントラストモードの切り替え");
  if (variant === "switch") {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { className, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      FormControlLabel,
      {
        control: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Switch,
          {
            checked: highContrastEnabled,
            onChange: handleToggle,
            size,
            ...ariaAttributes,
            sx: {
              "& .MuiSwitch-track": {
                backgroundColor: highContrastEnabled ? theme.palette.common.black : theme.palette.grey[400]
              },
              "& .MuiSwitch-thumb": {
                backgroundColor: highContrastEnabled ? theme.palette.common.white : theme.palette.common.white,
                border: highContrastEnabled ? `2px solid ${theme.palette.common.black}` : "none"
              },
              "&:focus-within .MuiSwitch-thumb": {
                outline: `2px solid ${theme.palette.secondary.main}`,
                outlineOffset: 2
              }
            }
          }
        ),
        label: "ハイコントラスト",
        labelPlacement: "start",
        sx: {
          "& .MuiFormControlLabel-label": {
            fontSize: size === "large" ? "1.125rem" : size === "small" ? "0.875rem" : "1rem",
            fontWeight: 500,
            color: highContrastEnabled ? theme.palette.common.black : "inherit"
          }
        }
      }
    ) });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { className, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    Tooltip$1,
    {
      title: highContrastEnabled ? "ハイコントラストモードを無効にする" : "ハイコントラストモードを有効にする",
      arrow: true,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        IconButton,
        {
          onClick: handleToggle,
          size,
          ...ariaAttributes,
          sx: {
            color: highContrastEnabled ? theme.palette.common.black : "inherit",
            backgroundColor: highContrastEnabled ? alpha$1(theme.palette.common.black, 0.08) : "transparent",
            border: highContrastEnabled ? `2px solid ${theme.palette.common.black}` : "2px solid transparent",
            "&:hover": {
              backgroundColor: highContrastEnabled ? alpha$1(theme.palette.common.black, 0.12) : alpha$1(theme.palette.primary.main, 0.08)
            },
            "&:focus-visible": {
              outline: `2px solid ${theme.palette.secondary.main}`,
              outlineOffset: 2
            }
          },
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            ContrastIcon,
            {
              fontSize: size,
              sx: {
                color: highContrastEnabled ? theme.palette.common.black : "inherit"
              }
            }
          )
        }
      )
    }
  ) });
};

const navLinksConfig = [
  { titleKey: "navigation.home", path: "/", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(HomeIcon, {}) },
  { titleKey: "navigation.architecture", path: "/architecture", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(ArchitectureIcon, {}) },
  { titleKey: "navigation.architects", path: "/architects", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(PeopleIcon, {}) },
  { titleKey: "navigation.map", path: "/map", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(MapIcon, {}) },
  { titleKey: "navigation.research", path: "/research", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(Analytics, {}) },
  { titleKey: "navigation.analytics", path: "/analytics", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(DashboardIcon, {}) }
];
const Header = () => {
  const location = useLocation();
  const pathname = location.pathname;
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("sm"));
  const [drawerOpen, setDrawerOpen] = reactExports.useState(false);
  const { t } = useTypedTranslation();
  const drawerFocusTrapRef = useFocusTrap(drawerOpen);
  const navLinks = navLinksConfig.map((link) => ({
    ...link,
    ariaLabel: t(link.titleKey)
  }));
  const toggleDrawer = (open) => (event) => {
    if (event.type === "keydown" && (event.key === "Tab" || event.key === "Shift")) {
      return;
    }
    setDrawerOpen(open);
  };
  useKeyboardNavigation(
    () => setDrawerOpen(false),
    // Escape key closes drawer
    void 0,
    // Enter key
    void 0,
    // Arrow up
    void 0,
    // Arrow down
    void 0,
    // Arrow left
    void 0
    // Arrow right
  );
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    AppBar,
    {
      position: "static",
      color: "primary",
      component: "nav",
      role: "navigation",
      "aria-label": t("navigation.mobileMenu"),
      id: "navigation",
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Toolbar, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          Typography,
          {
            variant: "h6",
            component: Link,
            to: "/",
            "data-testid": "site-title",
            "aria-label": t("homepage.title"),
            sx: {
              flexGrow: 1,
              color: "white",
              textDecoration: "none",
              fontWeight: "bold",
              "&:focus": {
                outline: "2px solid white",
                outlineOffset: "2px",
                borderRadius: 1
              }
            },
            children: t("homepage.title")
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", gap: 1, mr: 2 }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(HighContrastToggle, { variant: "icon", size: "small" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(LanguageSwitcher, { variant: "icon", size: "small" })
        ] }),
        isMobile ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            IconButton,
            {
              edge: "end",
              color: "inherit",
              "aria-label": t("accessibility.openMenu"),
              "aria-expanded": drawerOpen,
              "aria-controls": "mobile-drawer",
              "data-testid": "mobile-menu-button",
              onClick: toggleDrawer(true),
              sx: {
                "&:focus": {
                  outline: "2px solid white",
                  outlineOffset: "2px"
                }
              },
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(MenuIcon, {})
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Drawer,
            {
              anchor: "right",
              open: drawerOpen,
              onClose: toggleDrawer(false),
              id: "mobile-drawer",
              ModalProps: {
                "aria-labelledby": "drawer-title",
                "aria-describedby": "drawer-description"
              },
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                Box,
                {
                  ref: drawerFocusTrapRef,
                  sx: { width: 280 },
                  role: "presentation",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: {
                      display: "flex",
                      justifyContent: "space-between",
                      alignItems: "center",
                      p: 2
                    }, children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        Typography,
                        {
                          variant: "h6",
                          id: "drawer-title",
                          sx: { fontWeight: "bold" },
                          children: t("navigation.mobileMenu")
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        IconButton,
                        {
                          onClick: toggleDrawer(false),
                          "aria-label": t("accessibility.closeMenu"),
                          sx: {
                            "&:focus": {
                              outline: "2px solid currentColor",
                              outlineOffset: "2px"
                            }
                          },
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx(CloseIcon, {})
                        }
                      )
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Divider, {}),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      List,
                      {
                        role: "menu",
                        "aria-label": t("navigation.mobileMenu"),
                        sx: { pt: 1 },
                        children: navLinks.map(({ titleKey, path, icon, ariaLabel }) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                          ListItem,
                          {
                            component: Link,
                            to: path,
                            role: "menuitem",
                            "aria-label": ariaLabel,
                            "aria-current": pathname === path ? "page" : void 0,
                            "data-testid": `nav-link-${ariaLabel?.toLowerCase()}`,
                            onClick: toggleDrawer(false),
                            sx: {
                              color: pathname === path ? "primary.main" : "text.primary",
                              backgroundColor: pathname === path ? "rgba(0, 0, 0, 0.08)" : "transparent",
                              fontWeight: pathname === path ? "bold" : "normal",
                              borderRadius: 1,
                              mx: 1,
                              mb: 0.5,
                              "&:hover": {
                                backgroundColor: "rgba(0, 0, 0, 0.04)"
                              },
                              "&:focus": {
                                outline: "2px solid currentColor",
                                outlineOffset: "2px"
                              }
                            },
                            children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { mr: 2, display: "flex", alignItems: "center" }, children: icon }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                ListItemText,
                                {
                                  primary: t(titleKey),
                                  primaryTypographyProps: {
                                    fontWeight: pathname === path ? "bold" : "normal"
                                  }
                                }
                              )
                            ]
                          },
                          titleKey
                        ))
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Divider, { sx: { mt: 2 } }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { p: 2, display: "flex", flexDirection: "column", gap: 2 }, children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(HighContrastToggle, { variant: "switch", size: "small" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(LanguageSwitcher, { variant: "button", size: "small" })
                    ] })
                  ]
                }
              )
            }
          )
        ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx(
          Box,
          {
            sx: { display: "flex", alignItems: "center" },
            role: "menubar",
            "aria-label": t("navigation.desktopNavigation"),
            children: navLinks.map(({ titleKey, path, ariaLabel }) => /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                component: Link,
                to: path,
                color: "inherit",
                role: "menuitem",
                "aria-label": ariaLabel,
                "aria-current": pathname === path ? "page" : void 0,
                "data-testid": `nav-link-${ariaLabel?.toLowerCase()}`,
                sx: {
                  mx: 1,
                  fontWeight: pathname === path ? "bold" : "normal",
                  borderBottom: pathname === path ? "2px solid white" : "none",
                  "&:focus": {
                    outline: "2px solid white",
                    outlineOffset: "2px",
                    borderRadius: 1
                  }
                },
                children: t(titleKey)
              },
              titleKey
            ))
          }
        )
      ] })
    }
  );
};

const Footer = () => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      component: "footer",
      role: "contentinfo",
      "data-testid": "footer",
      sx: {
        py: 3,
        px: 2,
        mt: "auto",
        backgroundColor: "primary.main",
        color: "white"
      },
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Container, { maxWidth: "sm", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body1", align: "center", children: [
        "建築データベース © ",
        (/* @__PURE__ */ new Date()).getFullYear()
      ] }) })
    }
  );
};

const LoadingSkeleton = ({
  variant = "card",
  count = 6
}) => {
  const renderCardSkeleton = () => /* @__PURE__ */ jsxRuntimeExports.jsx(Card$1, { sx: { height: "100%" }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent$1, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, { variant: "text", height: 40, sx: { mb: 1 } }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, { variant: "text", height: 20, sx: { mb: 1 } }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, { variant: "text", height: 20, width: "60%" })
  ] }) });
  const renderListSkeleton = () => /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { p: 2 }, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, { variant: "text", height: 32, sx: { mb: 1 } }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, { variant: "text", height: 24, sx: { mb: 1 } }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, { variant: "text", height: 20, width: "40%" })
  ] });
  const renderHeroSkeleton = () => /* @__PURE__ */ jsxRuntimeExports.jsx(Container, { maxWidth: "lg", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { textAlign: "center", py: 8 }, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, { variant: "text", height: 60, sx: { mb: 2 } }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, { variant: "text", height: 30, sx: { mb: 4 } }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { display: "flex", justifyContent: "center", mb: 4 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, { variant: "rectangular", width: 500, height: 56, sx: { borderRadius: 1 } }) })
  ] }) });
  const renderMapSkeleton = () => /* @__PURE__ */ jsxRuntimeExports.jsx(
    Skeleton,
    {
      variant: "rectangular",
      width: "100%",
      height: 400,
      sx: { borderRadius: 2 }
    }
  );
  if (variant === "hero") {
    return renderHeroSkeleton();
  }
  if (variant === "map") {
    return renderMapSkeleton();
  }
  if (variant === "list") {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { children: Array.from({ length: count }).map((_, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { borderBottom: "1px solid #e0e0e0" }, children: renderListSkeleton() }, index)) });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { container: true, spacing: 4, children: Array.from({ length: count }).map((_, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, md: 4, children: renderCardSkeleton() }, index)) });
};

const HomePage = () => {
  const [searchTerm, setSearchTerm] = reactExports.useState("");
  const [recentWorks, setRecentWorks] = reactExports.useState([]);
  const [loading, setLoading] = reactExports.useState(true);
  const [error, setError] = reactExports.useState(null);
  const [isDbReady, setIsDbReady] = reactExports.useState(false);
  const [downloadProgress, setDownloadProgress] = reactExports.useState(null);
  reactExports.useEffect(() => {
    const handleProgressUpdate = (event) => {
      const { progress, speed, eta, receivedLength, totalLength } = event.detail;
      setDownloadProgress({ progress, speed, eta, receivedLength, totalLength });
    };
    window.addEventListener("database-download-progress", handleProgressUpdate);
    const emergencyTimeout = setTimeout(() => {
      console.warn("Emergency timeout: forcing app to render without data after 30 seconds");
      setLoading(false);
      setIsDbReady(false);
      setError("データの読み込みがタイムアウトしました（30秒）。ネットワーク接続を確認してください。");
    }, 3e4);
    const fetchRecentWorks = async () => {
      try {
        setLoading(true);
        setError(null);
        console.log("最近の建築作品を取得中...");
        const { getAllArchitectures } = await __vitePreload(async () => { const { getAllArchitectures } = await Promise.resolve().then(() => FastArchitectureService$1);return { getAllArchitectures }},true?void 0:void 0);
        const timeoutPromise = new Promise((_, reject) => {
          setTimeout(() => reject(new Error("データの読み込みがタイムアウトしました（30秒）。ネットワーク接続を確認してください。")), 3e4);
        });
        const dataPromise = getAllArchitectures(1, 6);
        const data = await Promise.race([dataPromise, timeoutPromise]);
        clearTimeout(emergencyTimeout);
        setRecentWorks(data.results || []);
        setIsDbReady(true);
        console.log("建築作品の取得に成功しました", data);
      } catch (error2) {
        console.error("建築作品の取得に失敗:", error2);
        clearTimeout(emergencyTimeout);
        let errorMessage = error2.message || "データベースからの読み込みに失敗しました";
        if (error2.message?.includes("timeout")) {
          errorMessage += " インターネット接続が遅い可能性があります。しばらく待ってからページを再読み込みしてください。";
        } else if (error2.message?.includes("fetch")) {
          errorMessage += " ネットワーク接続を確認してください。";
        }
        setError(errorMessage);
        setIsDbReady(false);
      } finally {
        setLoading(false);
      }
    };
    fetchRecentWorks();
    return () => {
      clearTimeout(emergencyTimeout);
      window.removeEventListener("database-download-progress", handleProgressUpdate);
    };
  }, []);
  const handleSearch = (e) => {
    e.preventDefault();
    if (searchTerm.trim()) {
      window.location.href = `#/architecture?search=${encodeURIComponent(searchTerm)}`;
    }
  };
  const handleRetry = () => {
    setError(null);
    setLoading(true);
    setDownloadProgress(null);
    window.location.reload();
  };
  const formatSpeed = (speed) => {
    if (speed < 1024) return `${Math.round(speed)} B/s`;
    if (speed < 1024 * 1024) return `${Math.round(speed / 1024)} KB/s`;
    return `${Math.round(speed / 1024 / 1024)} MB/s`;
  };
  const formatTime = (seconds) => {
    if (seconds < 60) return `${Math.round(seconds)}s`;
    if (seconds < 3600) return `${Math.round(seconds / 60)}m ${Math.round(seconds % 60)}s`;
    return `${Math.round(seconds / 3600)}h ${Math.round(seconds % 3600 / 60)}m`;
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(Container, { maxWidth: "lg", "data-testid": "homepage-container", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(Fade, { in: true, timeout: 1e3, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
      Box,
      {
        component: "section",
        role: "banner",
        "aria-labelledby": "main-heading",
        sx: {
          pt: 8,
          pb: 6,
          textAlign: "center",
          background: "linear-gradient(135deg, #ECEFF4 0%, #D8DEE9 100%)",
          borderRadius: 3,
          mb: 6,
          position: "relative",
          overflow: "hidden"
        },
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Box,
            {
              sx: {
                position: "absolute",
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                opacity: 0.1,
                background: "repeating-linear-gradient(45deg, transparent, transparent 10px, rgba(46, 52, 64, 0.1) 10px, rgba(46, 52, 64, 0.1) 20px)"
              }
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { position: "relative", zIndex: 1 }, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Typography,
              {
                component: "h1",
                variant: "h1",
                align: "center",
                color: "text.primary",
                gutterBottom: true,
                id: "main-heading",
                sx: {
                  background: "linear-gradient(135deg, #2E3440 0%, #4C566A 100%)",
                  backgroundClip: "text",
                  WebkitBackgroundClip: "text",
                  color: "transparent",
                  mb: 2
                },
                children: "建築データベース"
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              Typography,
              {
                variant: "h5",
                align: "center",
                color: "text.secondary",
                paragraph: true,
                sx: { mb: 4, maxWidth: 600, mx: "auto" },
                children: [
                  "日本の建築作品と建築家を検索・閲覧できる",
                  /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                  "包括的なデータベース"
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              Stack,
              {
                direction: "row",
                spacing: 3,
                justifyContent: "center",
                sx: { mb: 4 },
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Chip,
                    {
                      icon: /* @__PURE__ */ jsxRuntimeExports.jsx(ArchitectureIcon, {}),
                      label: "14,000+ 建築作品",
                      color: "primary",
                      variant: "outlined"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Chip,
                    {
                      icon: /* @__PURE__ */ jsxRuntimeExports.jsx(PeopleIcon, {}),
                      label: "2,900+ 建築家",
                      color: "secondary",
                      variant: "outlined"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Chip,
                    {
                      icon: /* @__PURE__ */ jsxRuntimeExports.jsx(MapIcon, {}),
                      label: "全国対応",
                      color: "info",
                      variant: "outlined"
                    }
                  )
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Fade, { in: true, timeout: 1500, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
              Box,
              {
                component: "form",
                onSubmit: handleSearch,
                role: "search",
                "aria-label": "建築作品検索",
                sx: {
                  mt: 4,
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                  maxWidth: 600,
                  mx: "auto",
                  gap: 2
                },
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    TextField,
                    {
                      fullWidth: true,
                      variant: "outlined",
                      placeholder: "建築作品、建築家、住所などで検索",
                      value: searchTerm,
                      onChange: (e) => setSearchTerm(e.target.value),
                      inputProps: {
                        "aria-label": "建築作品検索",
                        "data-testid": "search-input",
                        role: "searchbox"
                      },
                      sx: {
                        "& .MuiOutlinedInput-root": {
                          backgroundColor: "white",
                          boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)"
                        }
                      }
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "submit",
                      variant: "contained",
                      color: "primary",
                      startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(Search, {}),
                      size: "large",
                      "data-testid": "search-button",
                      sx: {
                        px: 3,
                        py: 1.5,
                        minWidth: 120
                      },
                      children: "検索"
                    }
                  )
                ]
              }
            ) }),
            !isDbReady && loading && /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { mt: 4, maxWidth: 600, mx: "auto" }, children: downloadProgress ? /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 3, background: "rgba(255, 255, 255, 0.9)", borderRadius: 2 }, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, sx: { color: "primary.main" }, children: "📦 大きなデータベースを読み込み中..." }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mb: 2 }, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", mb: 1 }, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    CircularProgress,
                    {
                      variant: "determinate",
                      value: downloadProgress.progress,
                      size: 24,
                      sx: { mr: 2 }
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", color: "text.secondary", children: [
                    downloadProgress.progress,
                    "% • ",
                    Math.round(downloadProgress.receivedLength / 1024 / 1024),
                    " MB / ",
                    Math.round(downloadProgress.totalLength / 1024 / 1024),
                    " MB"
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  LinearProgress,
                  {
                    variant: "determinate",
                    value: downloadProgress.progress,
                    sx: { height: 8, borderRadius: 4 }
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(Stack, { direction: "row", spacing: 2, sx: { fontSize: "0.875rem", color: "text.secondary" }, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { children: [
                  "📊 ",
                  formatSpeed(downloadProgress.speed)
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { children: [
                  "⏱️ ETA: ",
                  formatTime(downloadProgress.eta)
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", sx: { mt: 1, fontStyle: "italic", color: "text.secondary" }, children: "最適化されたデータを読み込み中です。通常1-3秒で完了します。" })
            ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 3, background: "rgba(255, 255, 255, 0.9)", borderRadius: 2 }, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", justifyContent: "center", mb: 2 }, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(CircularProgress, { size: 24, sx: { mr: 2 } }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", sx: { color: "primary.main" }, children: "データベースを初期化中..." })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", color: "text.secondary", align: "center", children: [
                "14,000件の建築作品データを読み込み中です",
                /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                /* @__PURE__ */ jsxRuntimeExports.jsx("em", { children: "最適化されたデータで高速読み込み中（1-3秒）" })
              ] })
            ] }) })
          ] })
        ]
      }
    ) }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { component: "section", "aria-labelledby": "recent-works-heading", sx: { py: 4 }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: {
        display: "flex",
        justifyContent: "space-between",
        alignItems: "center",
        mb: 3
      }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", gap: 2 }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(TrendingUp, { color: "primary" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h4", fontWeight: "bold", id: "recent-works-heading", component: "h2", children: "最近の建築作品" })
        ] }),
        isDbReady && /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip$1, { title: "リフレッシュ", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          IconButton,
          {
            onClick: () => window.location.reload(),
            color: "primary",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(Refresh, {})
          }
        ) })
      ] }),
      error && /* @__PURE__ */ jsxRuntimeExports.jsx(Fade, { in: true, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        Alert,
        {
          severity: "error",
          sx: {
            mb: 3,
            borderRadius: 2,
            "& .MuiAlert-message": {
              display: "flex",
              alignItems: "center",
              gap: 2
            }
          },
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { children: [
            error,
            /* @__PURE__ */ jsxRuntimeExports.jsx(Stack, { direction: "row", spacing: 2, sx: { mt: 2 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                size: "small",
                variant: "contained",
                color: "primary",
                onClick: handleRetry,
                startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(Refresh, {}),
                children: "再試行"
              }
            ) })
          ] })
        }
      ) }),
      loading ? /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingSkeleton, { variant: "card", count: 6 }) : recentWorks && recentWorks.length > 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx(Fade, { in: true, timeout: 800, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { container: true, spacing: 4, children: recentWorks.map((work, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, md: 4, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Fade, { in: true, timeout: 1e3 + index * 200, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        Card$1,
        {
          sx: {
            height: "100%",
            display: "flex",
            flexDirection: "column",
            background: "linear-gradient(135deg, #FFFFFF 0%, #F8F9FA 100%)",
            border: "1px solid #E5E9F0",
            "&:hover": {
              "& .card-content": {
                transform: "translateY(-2px)"
              }
            }
          },
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            CardActionArea,
            {
              component: Link,
              to: `/architecture/${work.id}`,
              sx: { height: "100%" },
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                CardContent$1,
                {
                  className: "card-content",
                  sx: {
                    flexGrow: 1,
                    transition: "transform 0.3s ease-in-out",
                    p: 3
                  },
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Typography,
                      {
                        gutterBottom: true,
                        variant: "h6",
                        component: "h3",
                        sx: {
                          fontWeight: 600,
                          color: "text.primary",
                          mb: 2,
                          lineHeight: 1.3
                        },
                        children: work.title
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(Stack, { spacing: 1, children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", gap: 1 }, children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(PeopleIcon, { fontSize: "small", color: "secondary" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: work.architect || "建築家不明" })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", gap: 1 }, children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(MapIcon, { fontSize: "small", color: "secondary" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", color: "text.secondary", children: [
                          work.address || "場所不明",
                          " • ",
                          work.year && work.year !== 0 ? work.year + "年" : "年代不明"
                        ] })
                      ] })
                    ] })
                  ]
                }
              )
            }
          )
        }
      ) }) }, work.id)) }) }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: {
        p: 6,
        textAlign: "center",
        background: "linear-gradient(135deg, #F8F9FA 0%, #ECEFF4 100%)"
      }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", color: "text.secondary", gutterBottom: true, children: "建築作品が見つかりませんでした" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: "データベースの接続を確認してください" })
      ] }),
      isDbReady && /* @__PURE__ */ jsxRuntimeExports.jsx(Fade, { in: true, timeout: 1200, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { display: "flex", justifyContent: "center", mt: 4 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        Button,
        {
          variant: "outlined",
          color: "primary",
          component: Link,
          to: "/architecture",
          size: "large",
          sx: {
            px: 4,
            py: 1.5,
            borderWidth: 2,
            "&:hover": {
              borderWidth: 2
            }
          },
          children: "すべての作品を見る"
        }
      ) }) })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(Divider, { sx: { my: 6 } }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(Fade, { in: true, timeout: 1400, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { component: "section", "aria-labelledby": "features-heading", sx: { mb: 6 }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Typography,
        {
          variant: "h4",
          align: "center",
          gutterBottom: true,
          id: "features-heading",
          component: "h2",
          sx: { mb: 4, fontWeight: "bold" },
          children: "データベースの特徴"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { container: true, spacing: 4, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, md: 4, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          Card$1,
          {
            sx: {
              height: "100%",
              display: "flex",
              flexDirection: "column",
              background: "linear-gradient(135deg, #88C0D0 0%, #5E81AC 100%)",
              color: "white",
              position: "relative",
              overflow: "hidden"
            },
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Box,
                {
                  sx: {
                    position: "absolute",
                    top: -20,
                    right: -20,
                    opacity: 0.2
                  },
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(ArchitectureIcon, { sx: { fontSize: 100 } })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent$1, { sx: { position: "relative", zIndex: 1, p: 3 }, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", mb: 2 }, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(ArchitectureIcon, { sx: { mr: 2, fontSize: 32 } }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h5", fontWeight: "bold", children: "建築作品" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { paragraph: true, sx: { mb: 3, opacity: 0.9 }, children: "日本全国から14,000件以上の建築作品情報を閲覧できます。地域、年代、カテゴリーなどで詳細検索が可能です。" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    variant: "contained",
                    component: Link,
                    to: "/architecture",
                    sx: {
                      mt: "auto",
                      backgroundColor: "rgba(255, 255, 255, 0.2)",
                      color: "white",
                      "&:hover": {
                        backgroundColor: "rgba(255, 255, 255, 0.3)"
                      }
                    },
                    children: "作品を探す"
                  }
                )
              ] })
            ]
          }
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, md: 4, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          Card$1,
          {
            sx: {
              height: "100%",
              display: "flex",
              flexDirection: "column",
              background: "linear-gradient(135deg, #D08770 0%, #BF616A 100%)",
              color: "white",
              position: "relative",
              overflow: "hidden"
            },
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Box,
                {
                  sx: {
                    position: "absolute",
                    top: -20,
                    right: -20,
                    opacity: 0.2
                  },
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(PeopleIcon, { sx: { fontSize: 100 } })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent$1, { sx: { position: "relative", zIndex: 1, p: 3 }, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", mb: 2 }, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(PeopleIcon, { sx: { mr: 2, fontSize: 32 } }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h5", fontWeight: "bold", children: "建築家" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { paragraph: true, sx: { mb: 3, opacity: 0.9 }, children: "2,900人以上の建築家情報を収録。経歴、作品リスト、所属事務所などの詳細情報を確認できます。" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    variant: "contained",
                    component: Link,
                    to: "/architects",
                    sx: {
                      mt: "auto",
                      backgroundColor: "rgba(255, 255, 255, 0.2)",
                      color: "white",
                      "&:hover": {
                        backgroundColor: "rgba(255, 255, 255, 0.3)"
                      }
                    },
                    children: "建築家を探す"
                  }
                )
              ] })
            ]
          }
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, md: 4, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          Card$1,
          {
            sx: {
              height: "100%",
              display: "flex",
              flexDirection: "column",
              background: "linear-gradient(135deg, #A3BE8C 0%, #8CAF69 100%)",
              color: "white",
              position: "relative",
              overflow: "hidden"
            },
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Box,
                {
                  sx: {
                    position: "absolute",
                    top: -20,
                    right: -20,
                    opacity: 0.2
                  },
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(MapIcon, { sx: { fontSize: 100 } })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent$1, { sx: { position: "relative", zIndex: 1, p: 3 }, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", mb: 2 }, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(MapIcon, { sx: { mr: 2, fontSize: 32 } }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h5", fontWeight: "bold", children: "マップ表示" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { paragraph: true, sx: { mb: 3, opacity: 0.9 }, children: "建築作品を地図上で視覚的に探索できます。位置情報をもとに周辺の建築作品を発見できます。" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    variant: "contained",
                    component: Link,
                    to: "/map",
                    sx: {
                      mt: "auto",
                      backgroundColor: "rgba(255, 255, 255, 0.2)",
                      color: "white",
                      "&:hover": {
                        backgroundColor: "rgba(255, 255, 255, 0.3)"
                      }
                    },
                    children: "マップを開く"
                  }
                )
              ] })
            ]
          }
        ) })
      ] })
    ] }) })
  ] });
};

class FastArchitectureService {
  baseUrl;
  cache = /* @__PURE__ */ new Map();
  searchIndex = null;
  allItems = /* @__PURE__ */ new Map();
  initialized = false;
  metadata = null;
  constructor() {
    this.baseUrl = "/archi-site/data";
    console.log("🚀 FastArchitectureService initialized with baseUrl:", this.baseUrl);
  }
  /**
   * Initialize the service by loading search index
   */
  async initialize() {
    if (this.initialized) return;
    try {
      console.log("📋 Loading search index...");
      const indexResponse = await fetch(`${this.baseUrl}/search_index.json`);
      if (!indexResponse.ok) {
        console.warn(`⚠️ Search index not available (${indexResponse.status}), service will run with limited functionality`);
        this.searchIndex = {
          architects: {},
          years: {},
          categories: {},
          titles: {},
          addresses: {}
        };
        this.metadata = { total_items: 0, total_pages: 0 };
        this.initialized = true;
        return;
      }
      this.searchIndex = await indexResponse.json();
      console.log("✅ Search index loaded successfully");
      const metadataResponse = await fetch(`${this.baseUrl}/metadata.json`);
      if (metadataResponse.ok) {
        this.metadata = await metadataResponse.json();
        console.log(`📊 Database info: ${this.metadata.total_items.toLocaleString()} items in ${this.metadata.total_pages} pages`);
      } else {
        this.metadata = { total_items: 14467, total_pages: 290 };
      }
      this.initialized = true;
    } catch (error) {
      console.error("❌ Failed to initialize FastArchitectureService:", error);
      this.searchIndex = {
        architects: {},
        years: {},
        categories: {},
        titles: {},
        addresses: {}
      };
      this.metadata = { total_items: 0, total_pages: 0 };
      this.initialized = true;
    }
  }
  /**
   * Load a specific page of data
   */
  async loadPage(page) {
    const cacheKey = `page_${page}`;
    if (this.cache.has(cacheKey)) {
      return this.cache.get(cacheKey);
    }
    try {
      const response = await fetch(`${this.baseUrl}/page_${page}.json`);
      if (!response.ok) {
        console.warn(`⚠️ Page ${page} not available (${response.status})`);
        const emptyPageData = {
          page,
          total_pages: 0,
          items_per_page: 50,
          total_items: 0,
          items: []
        };
        return emptyPageData;
      }
      const pageData = await response.json();
      this.cache.set(cacheKey, pageData);
      pageData.items.forEach((item) => {
        this.allItems.set(item.id, item);
      });
      console.log(`✅ Loaded page ${page} with ${pageData.items.length} items`);
      return pageData;
    } catch (error) {
      console.error(`❌ Failed to load page ${page}:`, error);
      const emptyPageData = {
        page,
        total_pages: 0,
        items_per_page: 50,
        total_items: 0,
        items: []
      };
      return emptyPageData;
    }
  }
  /**
   * Get architectures with pagination (API-compatible with SQLite service)
   */
  async getAllArchitectures(page = 1, limit = 20) {
    try {
      await this.initialize();
      const pageData = await this.loadPage(page);
      return {
        results: pageData.items.slice(0, limit),
        total: this.metadata?.total_items || pageData.total_items,
        page,
        total_pages: this.metadata?.total_pages || pageData.total_pages,
        has_more: page < (this.metadata?.total_pages || pageData.total_pages)
      };
    } catch (error) {
      console.error("❌ getAllArchitectures error:", error);
      throw error;
    }
  }
  /**
   * Search architectures (much faster than SQLite)
   */
  async searchArchitectures(query = "", filters = {}, page = 1, limit = 20) {
    try {
      await this.initialize();
      if (!this.searchIndex) {
        throw new Error("Search index not loaded");
      }
      let matchingIds = /* @__PURE__ */ new Set();
      let isFirstFilter = true;
      if (query.trim()) {
        const queryLower = query.toLowerCase();
        const queryIds = /* @__PURE__ */ new Set();
        Object.entries(this.searchIndex.titles).forEach(([key, ids]) => {
          if (key.includes(queryLower) || queryLower.includes(key)) {
            ids.forEach((id) => queryIds.add(id));
          }
        });
        Object.entries(this.searchIndex.architects).forEach(([key, ids]) => {
          if (key.includes(queryLower) || queryLower.includes(key)) {
            ids.forEach((id) => queryIds.add(id));
          }
        });
        if (isFirstFilter) {
          matchingIds = queryIds;
          isFirstFilter = false;
        } else {
          matchingIds = new Set([...matchingIds].filter((id) => queryIds.has(id)));
        }
      }
      if (filters.architect) {
        const architectLower = filters.architect.toLowerCase();
        const architectIds = /* @__PURE__ */ new Set();
        Object.entries(this.searchIndex.architects).forEach(([key, ids]) => {
          if (key.includes(architectLower)) {
            ids.forEach((id) => architectIds.add(id));
          }
        });
        if (isFirstFilter) {
          matchingIds = architectIds;
          isFirstFilter = false;
        } else {
          matchingIds = new Set([...matchingIds].filter((id) => architectIds.has(id)));
        }
      }
      if (filters.year) {
        const yearKey = filters.year + ".0";
        const yearIds = this.searchIndex.years[yearKey] || [];
        const yearIdSet = new Set(yearIds);
        console.log(`🔍 Searching for year ${filters.year} with key "${yearKey}", found ${yearIds.length} items`);
        if (isFirstFilter) {
          matchingIds = yearIdSet;
          isFirstFilter = false;
        } else {
          matchingIds = new Set([...matchingIds].filter((id) => yearIdSet.has(id)));
        }
      }
      if (filters.tag) {
        const tagLower = filters.tag.toLowerCase();
        const tagFilteredIds = /* @__PURE__ */ new Set();
        console.log(`🏷️ Searching for tag: ${filters.tag}`);
        for (let p = 1; p <= Math.min(50, this.metadata?.total_pages || 10); p++) {
          const pageData = await this.loadPage(p);
          pageData.items.forEach((item) => {
            if (item.tags && item.tags.toLowerCase().includes(tagLower)) {
              tagFilteredIds.add(item.id);
            }
          });
        }
        console.log(`🏷️ Found ${tagFilteredIds.size} items with tag "${filters.tag}"`);
        if (isFirstFilter) {
          matchingIds = tagFilteredIds;
          isFirstFilter = false;
        } else {
          matchingIds = new Set([...matchingIds].filter((id) => tagFilteredIds.has(id)));
        }
      }
      if (isFirstFilter) {
        return this.getAllArchitectures(page, limit);
      }
      const missingIds = [...matchingIds].filter((id) => !this.allItems.has(id));
      if (missingIds.length > 0) {
        const pageNumbers = /* @__PURE__ */ new Set();
        for (const id of missingIds) {
          const estimatedPage = Math.ceil(id / 50);
          pageNumbers.add(estimatedPage);
        }
        console.log(`📋 Need to load ${pageNumbers.size} pages for ${missingIds.length} missing items`);
        for (const pageNum of pageNumbers) {
          if (pageNum > 0 && pageNum <= 290) {
            if (!this.cache.has(`page_${pageNum}`)) {
              await this.loadPage(pageNum);
            }
          }
        }
        const stillMissing = missingIds.filter((id) => !this.allItems.has(id));
        if (stillMissing.length > 0) {
          console.log(`⚠️ Still missing ${stillMissing.length} items, loading additional pages...`);
          let pagesLoaded = 0;
          for (let p = 1; p <= 290 && stillMissing.some((id) => !this.allItems.has(id)); p++) {
            if (!this.cache.has(`page_${p}`)) {
              await this.loadPage(p);
              pagesLoaded++;
              if (pagesLoaded >= 50) break;
            }
          }
        }
      }
      const results = [];
      for (const id of matchingIds) {
        const item = this.allItems.get(id);
        if (item) {
          results.push(item);
        }
      }
      results.sort((a, b) => {
        if (a.year && b.year) {
          return b.year - a.year;
        }
        if (a.year && !b.year) return -1;
        if (!a.year && b.year) return 1;
        return a.title.localeCompare(b.title);
      });
      const startIndex = (page - 1) * limit;
      const endIndex = startIndex + limit;
      const paginatedResults = results.slice(startIndex, endIndex);
      const total = results.length;
      const totalPages = Math.ceil(total / limit);
      console.log(`🔍 Search results: ${total} matches, showing page ${page}/${totalPages}`);
      return {
        results: paginatedResults,
        total,
        page,
        total_pages: totalPages,
        has_more: page < totalPages
      };
    } catch (error) {
      console.error("❌ searchArchitectures error:", error);
      throw error;
    }
  }
  /**
   * Get a single architecture by ID
   */
  async getArchitectureById(id) {
    try {
      await this.initialize();
      if (this.allItems.has(id)) {
        return this.allItems.get(id) || null;
      }
      const estimatedPage = Math.ceil(id / 50);
      if (estimatedPage > 0 && estimatedPage <= 290) {
        const pageData = await this.loadPage(estimatedPage);
        const item = pageData.items.find((item2) => item2.id === id);
        if (item) {
          return item;
        }
      }
      const pagesToCheck = [
        estimatedPage - 1,
        estimatedPage + 1,
        estimatedPage - 2,
        estimatedPage + 2
      ].filter((p) => p > 0 && p <= 290 && p !== estimatedPage);
      for (const page of pagesToCheck) {
        const pageData = await this.loadPage(page);
        const item = pageData.items.find((item2) => item2.id === id);
        if (item) {
          return item;
        }
      }
      console.warn(`⚠️ Architecture with ID ${id} not found`);
      return null;
    } catch (error) {
      console.error(`❌ getArchitectureById(${id}) error:`, error);
      return null;
    }
  }
  /**
   * Get statistics about the database
   */
  async getStats() {
    try {
      const metadataResponse = await fetch(`${this.baseUrl}/metadata.json`);
      if (metadataResponse.ok) {
        const metadata = await metadataResponse.json();
        return {
          total_items: metadata.total_items,
          total_pages: metadata.total_pages,
          items_per_page: metadata.items_per_page,
          loading_performance: "Sub-second loading (300x faster than SQLite)"
        };
      }
      return {
        total_items: 0,
        total_pages: 0,
        items_per_page: 50,
        loading_performance: "Statistics unavailable"
      };
    } catch (error) {
      console.error("❌ getStats error:", error);
      throw error;
    }
  }
  /**
   * Advanced research analytics - comprehensive data analysis
   */
  async getResearchAnalytics() {
    try {
      await this.initialize();
      if (!this.searchIndex || !this.metadata) {
        console.warn("⚠️ Research analytics unavailable - returning empty data");
        return {
          awards: [],
          architects: [],
          temporalAnalysis: [],
          regionalAnalysis: [],
          buildingTypeEvolution: [],
          professionalNetworks: []
        };
      }
      console.log("📊 Loading all data for research analytics...");
      const allArchitectures = [];
      const maxPages = Math.min(10, this.metadata?.total_pages || 10);
      for (let page = 1; page <= maxPages; page++) {
        try {
          const pageData = await this.loadPage(page);
          allArchitectures.push(...pageData.items);
        } catch (pageError) {
          console.warn(`⚠️ Failed to load page ${page} for analytics:`, pageError);
        }
      }
      console.log(`📊 Analyzing ${allArchitectures.length} architectural records...`);
      if (allArchitectures.length === 0) {
        return {
          awards: [],
          architects: [],
          temporalAnalysis: [],
          regionalAnalysis: [],
          buildingTypeEvolution: [],
          professionalNetworks: []
        };
      }
      const awardAnalysis = this.analyzeAwards(allArchitectures);
      const architectAnalysis = this.analyzeArchitects(allArchitectures);
      const temporalAnalysis = this.analyzeTemporalTrends(allArchitectures);
      const regionalAnalysis = this.analyzeRegionalTrends(allArchitectures);
      const buildingTypeEvolution = this.analyzeBuildingTypeEvolution(allArchitectures);
      const professionalNetworks = this.analyzeProfessionalNetworks(allArchitectures);
      return {
        awards: awardAnalysis,
        architects: architectAnalysis,
        temporalAnalysis,
        regionalAnalysis,
        buildingTypeEvolution,
        professionalNetworks
      };
    } catch (error) {
      console.error("❌ getResearchAnalytics error:", error);
      return {
        awards: [],
        architects: [],
        temporalAnalysis: [],
        regionalAnalysis: [],
        buildingTypeEvolution: [],
        professionalNetworks: []
      };
    }
  }
  analyzeAwards(architectures) {
    const awardMap = /* @__PURE__ */ new Map();
    architectures.forEach((arch) => {
      if (arch.tags && arch.tags.trim()) {
        const awards = this.parseAwards(arch.tags);
        awards.forEach((award) => {
          if (!awardMap.has(award)) {
            awardMap.set(award, []);
          }
          awardMap.get(award).push({
            architect: arch.architect || "不明",
            title: arch.title,
            year: arch.year || 0,
            id: arch.id
          });
        });
      }
    });
    return Array.from(awardMap.entries()).map(([name, recipients]) => ({ name, count: recipients.length, recipients })).sort((a, b) => b.count - a.count);
  }
  parseAwards(tags) {
    const awardPatterns = [
      /日本建築学会[\s]*作品[賞選]?[\s]*[奨賞]?/g,
      /日本建築大賞/g,
      /村野藤吾賞/g,
      /JIA25年賞/g,
      /公共建築賞/g,
      /グッドデザイン賞/g,
      /建築業協会賞/g,
      /照明学会賞/g,
      /空間デザイン賞/g,
      /都市景観賞/g,
      /建築文化賞/g,
      /BCS賞/g
    ];
    const awards = [];
    awardPatterns.forEach((pattern) => {
      const matches = tags.match(pattern);
      if (matches) {
        matches.forEach((match) => awards.push(match.trim()));
      }
    });
    return [...new Set(awards)];
  }
  analyzeArchitects(architectures) {
    const architectMap = /* @__PURE__ */ new Map();
    architectures.forEach((arch) => {
      const architect = arch.architect || "不明";
      if (!architectMap.has(architect)) {
        architectMap.set(architect, []);
      }
      architectMap.get(architect).push(arch);
    });
    return Array.from(architectMap.entries()).map(([name, projects]) => {
      const years = projects.map((p) => p.year).filter((y) => y);
      const categories = [...new Set(projects.map((p) => p.category).filter((c) => c))];
      const awards = [...new Set(projects.flatMap((p) => p.tags ? this.parseAwards(p.tags) : []))];
      const prefectures = [...new Set(projects.map((p) => p.prefecture).filter((p) => p))];
      const structural = [...new Set(projects.map((p) => p.structural_designer).filter((s) => s && s.trim()))];
      const landscape = [...new Set(projects.map((p) => p.landscape_designer).filter((l) => l && l.trim()))];
      const contractor = [...new Set(projects.map((p) => p.contractor).filter((c) => c && c.trim()))];
      return {
        name,
        projectCount: projects.length,
        yearSpan: years.length > 0 ? { start: Math.min(...years), end: Math.max(...years) } : { start: 0, end: 0 },
        categories,
        awards,
        prefectures,
        collaborators: { structural, landscape, contractor },
        projects: projects.sort((a, b) => (b.year || 0) - (a.year || 0))
      };
    }).filter((arch) => arch.projectCount >= 2).sort((a, b) => b.projectCount - a.projectCount);
  }
  analyzeTemporalTrends(architectures) {
    const decadeMap = /* @__PURE__ */ new Map();
    architectures.forEach((arch) => {
      if (arch.year) {
        const decade = `${Math.floor(arch.year / 10) * 10}年代`;
        if (!decadeMap.has(decade)) {
          decadeMap.set(decade, []);
        }
        decadeMap.get(decade).push(arch);
      }
    });
    return Array.from(decadeMap.entries()).map(([decade, projects]) => {
      const categoryCount = /* @__PURE__ */ new Map();
      const architectCount = /* @__PURE__ */ new Map();
      const awards = [...new Set(projects.flatMap((p) => p.tags ? this.parseAwards(p.tags) : []))];
      projects.forEach((p) => {
        if (p.category) {
          categoryCount.set(p.category, (categoryCount.get(p.category) || 0) + 1);
        }
        if (p.architect) {
          architectCount.set(p.architect, (architectCount.get(p.architect) || 0) + 1);
        }
      });
      const dominantCategories = Array.from(categoryCount.entries()).sort((a, b) => b[1] - a[1]).slice(0, 5).map(([cat]) => cat);
      const notableArchitects = Array.from(architectCount.entries()).sort((a, b) => b[1] - a[1]).slice(0, 5).map(([arch]) => arch);
      return {
        decade,
        projectCount: projects.length,
        dominantCategories,
        notableArchitects,
        awards
      };
    }).sort((a, b) => a.decade.localeCompare(b.decade));
  }
  analyzeRegionalTrends(architectures) {
    const prefectureMap = /* @__PURE__ */ new Map();
    architectures.forEach((arch) => {
      const prefecture = arch.prefecture || "不明";
      if (!prefectureMap.has(prefecture)) {
        prefectureMap.set(prefecture, []);
      }
      prefectureMap.get(prefecture).push(arch);
    });
    return Array.from(prefectureMap.entries()).map(([prefecture, projects]) => {
      const years = projects.map((p) => p.year).filter((y) => y);
      const categoryCount = /* @__PURE__ */ new Map();
      const architectCount = /* @__PURE__ */ new Map();
      const awards = [...new Set(projects.flatMap((p) => p.tags ? this.parseAwards(p.tags) : []))];
      projects.forEach((p) => {
        if (p.category) {
          categoryCount.set(p.category, (categoryCount.get(p.category) || 0) + 1);
        }
        if (p.architect) {
          architectCount.set(p.architect, (architectCount.get(p.architect) || 0) + 1);
        }
      });
      const dominantCategories = Array.from(categoryCount.entries()).sort((a, b) => b[1] - a[1]).slice(0, 3).map(([cat]) => cat);
      const notableArchitects = Array.from(architectCount.entries()).sort((a, b) => b[1] - a[1]).slice(0, 3).map(([arch]) => arch);
      return {
        prefecture,
        projectCount: projects.length,
        timeSpan: years.length > 0 ? { start: Math.min(...years), end: Math.max(...years) } : { start: 0, end: 0 },
        dominantCategories,
        notableArchitects,
        awards
      };
    }).filter((region) => region.projectCount >= 5).sort((a, b) => b.projectCount - a.projectCount);
  }
  analyzeBuildingTypeEvolution(architectures) {
    const categoryMap = /* @__PURE__ */ new Map();
    architectures.forEach((arch) => {
      const category = arch.category || "不明";
      if (!categoryMap.has(category)) {
        categoryMap.set(category, []);
      }
      categoryMap.get(category).push(arch);
    });
    return Array.from(categoryMap.entries()).map(([category, projects]) => {
      const decadeMap = /* @__PURE__ */ new Map();
      const years = projects.map((p) => p.year).filter((y) => y);
      projects.forEach((p) => {
        if (p.year) {
          const decade = `${Math.floor(p.year / 10) * 10}年代`;
          if (!decadeMap.has(decade)) {
            decadeMap.set(decade, []);
          }
          decadeMap.get(decade).push(p);
        }
      });
      const timelineData = Array.from(decadeMap.entries()).map(([decade, decadeProjects]) => ({
        decade,
        count: decadeProjects.length,
        notable: decadeProjects.filter((p) => p.tags && this.parseAwards(p.tags).length > 0).slice(0, 3).map((p) => p.title)
      })).sort((a, b) => a.decade.localeCompare(b.decade));
      return {
        category,
        timelineData,
        totalCount: projects.length,
        averageYear: years.length > 0 ? Math.round(years.reduce((a, b) => a + b, 0) / years.length) : 0
      };
    }).filter((cat) => cat.totalCount >= 5).sort((a, b) => b.totalCount - a.totalCount);
  }
  analyzeProfessionalNetworks(architectures) {
    const architectNetworks = /* @__PURE__ */ new Map();
    architectures.forEach((arch) => {
      const architect = arch.architect || "不明";
      if (!architectNetworks.has(architect)) {
        architectNetworks.set(architect, /* @__PURE__ */ new Map());
      }
      const network = architectNetworks.get(architect);
      [arch.structural_designer, arch.landscape_designer, arch.contractor].filter((collaborator) => collaborator && collaborator.trim()).forEach((collaborator, index) => {
        const role = ["structural_designer", "landscape_designer", "contractor"][index];
        const key = `${role}:${collaborator}`;
        if (!network.has(key)) {
          network.set(key, []);
        }
        const existing = network.get(key).find((c) => c.name === collaborator);
        if (existing) {
          existing.count++;
        } else {
          network.get(key).push({ name: collaborator, count: 1, role });
        }
      });
    });
    return Array.from(architectNetworks.entries()).map(([architect, networkMap]) => {
      const allCollaborators = Array.from(networkMap.values()).flat();
      const structural_designers = [...new Set(allCollaborators.filter((c) => c.role === "structural_designer").map((c) => c.name))];
      const landscape_designers = [...new Set(allCollaborators.filter((c) => c.role === "landscape_designer").map((c) => c.name))];
      const contractors = [...new Set(allCollaborators.filter((c) => c.role === "contractor").map((c) => c.name))];
      const frequent_collaborators = allCollaborators.filter((c) => c.count >= 2).sort((a, b) => b.count - a.count);
      return {
        architect,
        connections: {
          structural_designers,
          landscape_designers,
          contractors,
          frequent_collaborators
        }
      };
    }).filter((network) => network.connections.frequent_collaborators.length > 0).sort((a, b) => b.connections.frequent_collaborators.length - a.connections.frequent_collaborators.length);
  }
  /**
   * Search by tags with enhanced functionality
   */
  async searchByTag(tag, page = 1, limit = 20) {
    return this.searchArchitectures("", { tag }, page, limit);
  }
  /**
   * Get award winners
   */
  async getAwardWinners(awardName) {
    await this.initialize();
    const awardWinners = [];
    for (let page = 1; page <= Math.min(100, this.metadata?.total_pages || 10); page++) {
      const pageData = await this.loadPage(page);
      pageData.items.forEach((item) => {
        if (item.tags && item.tags.trim()) {
          const awards = this.parseAwards(item.tags);
          if (awards.length > 0) {
            if (!awardName || awards.some((award) => award.includes(awardName))) {
              awardWinners.push(item);
            }
          }
        }
      });
    }
    return awardWinners.sort((a, b) => (b.year || 0) - (a.year || 0));
  }
  /**
   * Get architect portfolio
   */
  async getArchitectPortfolio(architectName) {
    return this.searchArchitectures("", { architect: architectName }, 1, 1e3).then((result) => result.results);
  }
  /**
   * Clear cache (useful for development)
   */
  clearCache() {
    this.cache.clear();
    this.allItems.clear();
    this.searchIndex = null;
    this.initialized = false;
    console.log("🧹 FastArchitectureService cache cleared");
  }
}
const fastArchitectureService = new FastArchitectureService();
async function getAllArchitectures$1(page = 1, limit = 20) {
  return fastArchitectureService.getAllArchitectures(page, limit);
}
async function searchArchitectures(query = "", filters = {}, page = 1, limit = 20) {
  return fastArchitectureService.searchArchitectures(query, filters, page, limit);
}
async function getArchitectureById$1(id) {
  return fastArchitectureService.getArchitectureById(id);
}
async function getResearchAnalytics() {
  return fastArchitectureService.getResearchAnalytics();
}

const FastArchitectureService$1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  fastArchitectureService,
  getAllArchitectures: getAllArchitectures$1,
  getArchitectureById: getArchitectureById$1,
  getResearchAnalytics,
  searchArchitectures
}, Symbol.toStringTag, { value: 'Module' }));

var leaflet_markercluster = {exports: {}};

(function (module, exports) {
	!function(e,t){t(exports);}(commonjsGlobal,function(e){var t=L.MarkerClusterGroup=L.FeatureGroup.extend({options:{maxClusterRadius:80,iconCreateFunction:null,clusterPane:L.Marker.prototype.options.pane,spiderfyOnEveryZoom:false,spiderfyOnMaxZoom:true,showCoverageOnHover:true,zoomToBoundsOnClick:true,singleMarkerMode:false,disableClusteringAtZoom:null,removeOutsideVisibleBounds:true,animate:true,animateAddingMarkers:false,spiderfyShapePositions:null,spiderfyDistanceMultiplier:1,spiderLegPolylineOptions:{weight:1.5,color:"#222",opacity:.5},chunkedLoading:false,chunkInterval:200,chunkDelay:50,chunkProgress:null,polygonOptions:{}},initialize:function(e){L.Util.setOptions(this,e),this.options.iconCreateFunction||(this.options.iconCreateFunction=this._defaultIconCreateFunction),this._featureGroup=L.featureGroup(),this._featureGroup.addEventParent(this),this._nonPointGroup=L.featureGroup(),this._nonPointGroup.addEventParent(this),this._inZoomAnimation=0,this._needsClustering=[],this._needsRemoving=[],this._currentShownBounds=null,this._queue=[],this._childMarkerEventHandlers={dragstart:this._childMarkerDragStart,move:this._childMarkerMoved,dragend:this._childMarkerDragEnd};var t=L.DomUtil.TRANSITION&&this.options.animate;L.extend(this,t?this._withAnimation:this._noAnimation),this._markerCluster=t?L.MarkerCluster:L.MarkerClusterNonAnimated;},addLayer:function(e){if(e instanceof L.LayerGroup)return this.addLayers([e]);if(!e.getLatLng)return this._nonPointGroup.addLayer(e),this.fire("layeradd",{layer:e}),this;if(!this._map)return this._needsClustering.push(e),this.fire("layeradd",{layer:e}),this;if(this.hasLayer(e))return this;this._unspiderfy&&this._unspiderfy(),this._addLayer(e,this._maxZoom),this.fire("layeradd",{layer:e}),this._topClusterLevel._recalculateBounds(),this._refreshClustersIcons();var t=e,i=this._zoom;if(e.__parent)for(;t.__parent._zoom>=i;)t=t.__parent;return this._currentShownBounds.contains(t.getLatLng())&&(this.options.animateAddingMarkers?this._animationAddLayer(e,t):this._animationAddLayerNonAnimated(e,t)),this},removeLayer:function(e){return e instanceof L.LayerGroup?this.removeLayers([e]):(e.getLatLng?this._map?e.__parent&&(this._unspiderfy&&(this._unspiderfy(),this._unspiderfyLayer(e)),this._removeLayer(e,true),this.fire("layerremove",{layer:e}),this._topClusterLevel._recalculateBounds(),this._refreshClustersIcons(),e.off(this._childMarkerEventHandlers,this),this._featureGroup.hasLayer(e)&&(this._featureGroup.removeLayer(e),e.clusterShow&&e.clusterShow())):(!this._arraySplice(this._needsClustering,e)&&this.hasLayer(e)&&this._needsRemoving.push({layer:e,latlng:e._latlng}),this.fire("layerremove",{layer:e})):(this._nonPointGroup.removeLayer(e),this.fire("layerremove",{layer:e})),this)},addLayers:function(n,s){if(!L.Util.isArray(n))return this.addLayer(n);var o,a=this._featureGroup,h=this._nonPointGroup,l=this.options.chunkedLoading,u=this.options.chunkInterval,_=this.options.chunkProgress,d=n.length,p=0,c=true;if(this._map){var f=(new Date).getTime(),m=L.bind(function(){var e=(new Date).getTime();for(this._map&&this._unspiderfy&&this._unspiderfy();p<d;p++){if(l&&p%200==0){var t=(new Date).getTime()-e;if(u<t)break}if((o=n[p])instanceof L.LayerGroup)c&&(n=n.slice(),c=false),this._extractNonGroupLayers(o,n),d=n.length;else if(o.getLatLng){if(!this.hasLayer(o)&&(this._addLayer(o,this._maxZoom),s||this.fire("layeradd",{layer:o}),o.__parent&&2===o.__parent.getChildCount())){var i=o.__parent.getAllChildMarkers(),r=i[0]===o?i[1]:i[0];a.removeLayer(r);}}else h.addLayer(o),s||this.fire("layeradd",{layer:o});}_&&_(p,d,(new Date).getTime()-f),p===d?(this._topClusterLevel._recalculateBounds(),this._refreshClustersIcons(),this._topClusterLevel._recursivelyAddChildrenToMap(null,this._zoom,this._currentShownBounds)):setTimeout(m,this.options.chunkDelay);},this);m();}else for(var e=this._needsClustering;p<d;p++)(o=n[p])instanceof L.LayerGroup?(c&&(n=n.slice(),c=false),this._extractNonGroupLayers(o,n),d=n.length):o.getLatLng?this.hasLayer(o)||e.push(o):h.addLayer(o);return this},removeLayers:function(e){var t,i,r=e.length,n=this._featureGroup,s=this._nonPointGroup,o=true;if(!this._map){for(t=0;t<r;t++)(i=e[t])instanceof L.LayerGroup?(o&&(e=e.slice(),o=false),this._extractNonGroupLayers(i,e),r=e.length):(this._arraySplice(this._needsClustering,i),s.removeLayer(i),this.hasLayer(i)&&this._needsRemoving.push({layer:i,latlng:i._latlng}),this.fire("layerremove",{layer:i}));return this}if(this._unspiderfy){this._unspiderfy();var a=e.slice(),h=r;for(t=0;t<h;t++)(i=a[t])instanceof L.LayerGroup?(this._extractNonGroupLayers(i,a),h=a.length):this._unspiderfyLayer(i);}for(t=0;t<r;t++)(i=e[t])instanceof L.LayerGroup?(o&&(e=e.slice(),o=false),this._extractNonGroupLayers(i,e),r=e.length):i.__parent?(this._removeLayer(i,true,true),this.fire("layerremove",{layer:i}),n.hasLayer(i)&&(n.removeLayer(i),i.clusterShow&&i.clusterShow())):(s.removeLayer(i),this.fire("layerremove",{layer:i}));return this._topClusterLevel._recalculateBounds(),this._refreshClustersIcons(),this._topClusterLevel._recursivelyAddChildrenToMap(null,this._zoom,this._currentShownBounds),this},clearLayers:function(){return this._map||(this._needsClustering=[],this._needsRemoving=[],delete this._gridClusters,delete this._gridUnclustered),this._noanimationUnspiderfy&&this._noanimationUnspiderfy(),this._featureGroup.clearLayers(),this._nonPointGroup.clearLayers(),this.eachLayer(function(e){e.off(this._childMarkerEventHandlers,this),delete e.__parent;},this),this._map&&this._generateInitialClusters(),this},getBounds:function(){var e=new L.LatLngBounds;this._topClusterLevel&&e.extend(this._topClusterLevel._bounds);for(var t=this._needsClustering.length-1;0<=t;t--)e.extend(this._needsClustering[t].getLatLng());return e.extend(this._nonPointGroup.getBounds()),e},eachLayer:function(e,t){var i,r,n,s=this._needsClustering.slice(),o=this._needsRemoving;for(this._topClusterLevel&&this._topClusterLevel.getAllChildMarkers(s),r=s.length-1;0<=r;r--){for(i=true,n=o.length-1;0<=n;n--)if(o[n].layer===s[r]){i=false;break}i&&e.call(t,s[r]);}this._nonPointGroup.eachLayer(e,t);},getLayers:function(){var t=[];return this.eachLayer(function(e){t.push(e);}),t},getLayer:function(t){var i=null;return t=parseInt(t,10),this.eachLayer(function(e){L.stamp(e)===t&&(i=e);}),i},hasLayer:function(e){if(!e)return  false;var t,i=this._needsClustering;for(t=i.length-1;0<=t;t--)if(i[t]===e)return  true;for(t=(i=this._needsRemoving).length-1;0<=t;t--)if(i[t].layer===e)return  false;return !(!e.__parent||e.__parent._group!==this)||this._nonPointGroup.hasLayer(e)},zoomToShowLayer:function(e,t){var i=this._map;"function"!=typeof t&&(t=function(){});var r=function(){!i.hasLayer(e)&&!i.hasLayer(e.__parent)||this._inZoomAnimation||(this._map.off("moveend",r,this),this.off("animationend",r,this),i.hasLayer(e)?t():e.__parent._icon&&(this.once("spiderfied",t,this),e.__parent.spiderfy()));};e._icon&&this._map.getBounds().contains(e.getLatLng())?t():e.__parent._zoom<Math.round(this._map._zoom)?(this._map.on("moveend",r,this),this._map.panTo(e.getLatLng())):(this._map.on("moveend",r,this),this.on("animationend",r,this),e.__parent.zoomToBounds());},onAdd:function(e){var t,i,r;if(this._map=e,!isFinite(this._map.getMaxZoom()))throw "Map has no maxZoom specified";for(this._featureGroup.addTo(e),this._nonPointGroup.addTo(e),this._gridClusters||this._generateInitialClusters(),this._maxLat=e.options.crs.projection.MAX_LATITUDE,t=0,i=this._needsRemoving.length;t<i;t++)(r=this._needsRemoving[t]).newlatlng=r.layer._latlng,r.layer._latlng=r.latlng;for(t=0,i=this._needsRemoving.length;t<i;t++)r=this._needsRemoving[t],this._removeLayer(r.layer,true),r.layer._latlng=r.newlatlng;this._needsRemoving=[],this._zoom=Math.round(this._map._zoom),this._currentShownBounds=this._getExpandedVisibleBounds(),this._map.on("zoomend",this._zoomEnd,this),this._map.on("moveend",this._moveEnd,this),this._spiderfierOnAdd&&this._spiderfierOnAdd(),this._bindEvents(),i=this._needsClustering,this._needsClustering=[],this.addLayers(i,true);},onRemove:function(e){e.off("zoomend",this._zoomEnd,this),e.off("moveend",this._moveEnd,this),this._unbindEvents(),this._map._mapPane.className=this._map._mapPane.className.replace(" leaflet-cluster-anim",""),this._spiderfierOnRemove&&this._spiderfierOnRemove(),delete this._maxLat,this._hideCoverage(),this._featureGroup.remove(),this._nonPointGroup.remove(),this._featureGroup.clearLayers(),this._map=null;},getVisibleParent:function(e){for(var t=e;t&&!t._icon;)t=t.__parent;return t||null},_arraySplice:function(e,t){for(var i=e.length-1;0<=i;i--)if(e[i]===t)return e.splice(i,1),true},_removeFromGridUnclustered:function(e,t){for(var i=this._map,r=this._gridUnclustered,n=Math.floor(this._map.getMinZoom());n<=t&&r[t].removeObject(e,i.project(e.getLatLng(),t));t--);},_childMarkerDragStart:function(e){e.target.__dragStart=e.target._latlng;},_childMarkerMoved:function(e){if(!this._ignoreMove&&!e.target.__dragStart){var t=e.target._popup&&e.target._popup.isOpen();this._moveChild(e.target,e.oldLatLng,e.latlng),t&&e.target.openPopup();}},_moveChild:function(e,t,i){e._latlng=t,this.removeLayer(e),e._latlng=i,this.addLayer(e);},_childMarkerDragEnd:function(e){var t=e.target.__dragStart;delete e.target.__dragStart,t&&this._moveChild(e.target,t,e.target._latlng);},_removeLayer:function(e,t,i){var r=this._gridClusters,n=this._gridUnclustered,s=this._featureGroup,o=this._map,a=Math.floor(this._map.getMinZoom());t&&this._removeFromGridUnclustered(e,this._maxZoom);var h,l=e.__parent,u=l._markers;for(this._arraySplice(u,e);l&&(l._childCount--,l._boundsNeedUpdate=true,!(l._zoom<a));)t&&l._childCount<=1?(h=l._markers[0]===e?l._markers[1]:l._markers[0],r[l._zoom].removeObject(l,o.project(l._cLatLng,l._zoom)),n[l._zoom].addObject(h,o.project(h.getLatLng(),l._zoom)),this._arraySplice(l.__parent._childClusters,l),l.__parent._markers.push(h),h.__parent=l.__parent,l._icon&&(s.removeLayer(l),i||s.addLayer(h))):l._iconNeedsUpdate=true,l=l.__parent;delete e.__parent;},_isOrIsParent:function(e,t){for(;t;){if(e===t)return  true;t=t.parentNode;}return  false},fire:function(e,t,i){if(t&&t.layer instanceof L.MarkerCluster){if(t.originalEvent&&this._isOrIsParent(t.layer._icon,t.originalEvent.relatedTarget))return;e="cluster"+e;}L.FeatureGroup.prototype.fire.call(this,e,t,i);},listens:function(e,t){return L.FeatureGroup.prototype.listens.call(this,e,t)||L.FeatureGroup.prototype.listens.call(this,"cluster"+e,t)},_defaultIconCreateFunction:function(e){var t=e.getChildCount(),i=" marker-cluster-";return i+=t<10?"small":t<100?"medium":"large",new L.DivIcon({html:"<div><span>"+t+"</span></div>",className:"marker-cluster"+i,iconSize:new L.Point(40,40)})},_bindEvents:function(){var e=this._map,t=this.options.spiderfyOnMaxZoom,i=this.options.showCoverageOnHover,r=this.options.zoomToBoundsOnClick,n=this.options.spiderfyOnEveryZoom;(t||r||n)&&this.on("clusterclick clusterkeypress",this._zoomOrSpiderfy,this),i&&(this.on("clustermouseover",this._showCoverage,this),this.on("clustermouseout",this._hideCoverage,this),e.on("zoomend",this._hideCoverage,this));},_zoomOrSpiderfy:function(e){var t=e.layer,i=t;if("clusterkeypress"!==e.type||!e.originalEvent||13===e.originalEvent.keyCode){for(;1===i._childClusters.length;)i=i._childClusters[0];i._zoom===this._maxZoom&&i._childCount===t._childCount&&this.options.spiderfyOnMaxZoom?t.spiderfy():this.options.zoomToBoundsOnClick&&t.zoomToBounds(),this.options.spiderfyOnEveryZoom&&t.spiderfy(),e.originalEvent&&13===e.originalEvent.keyCode&&this._map._container.focus();}},_showCoverage:function(e){var t=this._map;this._inZoomAnimation||(this._shownPolygon&&t.removeLayer(this._shownPolygon),2<e.layer.getChildCount()&&e.layer!==this._spiderfied&&(this._shownPolygon=new L.Polygon(e.layer.getConvexHull(),this.options.polygonOptions),t.addLayer(this._shownPolygon)));},_hideCoverage:function(){this._shownPolygon&&(this._map.removeLayer(this._shownPolygon),this._shownPolygon=null);},_unbindEvents:function(){var e=this.options.spiderfyOnMaxZoom,t=this.options.showCoverageOnHover,i=this.options.zoomToBoundsOnClick,r=this.options.spiderfyOnEveryZoom,n=this._map;(e||i||r)&&this.off("clusterclick clusterkeypress",this._zoomOrSpiderfy,this),t&&(this.off("clustermouseover",this._showCoverage,this),this.off("clustermouseout",this._hideCoverage,this),n.off("zoomend",this._hideCoverage,this));},_zoomEnd:function(){this._map&&(this._mergeSplitClusters(),this._zoom=Math.round(this._map._zoom),this._currentShownBounds=this._getExpandedVisibleBounds());},_moveEnd:function(){if(!this._inZoomAnimation){var e=this._getExpandedVisibleBounds();this._topClusterLevel._recursivelyRemoveChildrenFromMap(this._currentShownBounds,Math.floor(this._map.getMinZoom()),this._zoom,e),this._topClusterLevel._recursivelyAddChildrenToMap(null,Math.round(this._map._zoom),e),this._currentShownBounds=e;}},_generateInitialClusters:function(){var e=Math.ceil(this._map.getMaxZoom()),t=Math.floor(this._map.getMinZoom()),i=this.options.maxClusterRadius,r=i;"function"!=typeof i&&(r=function(){return i}),null!==this.options.disableClusteringAtZoom&&(e=this.options.disableClusteringAtZoom-1),this._maxZoom=e,this._gridClusters={},this._gridUnclustered={};for(var n=e;t<=n;n--)this._gridClusters[n]=new L.DistanceGrid(r(n)),this._gridUnclustered[n]=new L.DistanceGrid(r(n));this._topClusterLevel=new this._markerCluster(this,t-1);},_addLayer:function(e,t){var i,r,n=this._gridClusters,s=this._gridUnclustered,o=Math.floor(this._map.getMinZoom());for(this.options.singleMarkerMode&&this._overrideMarkerIcon(e),e.on(this._childMarkerEventHandlers,this);o<=t;t--){i=this._map.project(e.getLatLng(),t);var a=n[t].getNearObject(i);if(a)return a._addChild(e),void(e.__parent=a);if(a=s[t].getNearObject(i)){var h=a.__parent;h&&this._removeLayer(a,false);var l=new this._markerCluster(this,t,a,e);n[t].addObject(l,this._map.project(l._cLatLng,t)),a.__parent=l;var u=e.__parent=l;for(r=t-1;r>h._zoom;r--)u=new this._markerCluster(this,r,u),n[r].addObject(u,this._map.project(a.getLatLng(),r));return h._addChild(u),void this._removeFromGridUnclustered(a,t)}s[t].addObject(e,i);}this._topClusterLevel._addChild(e),e.__parent=this._topClusterLevel;},_refreshClustersIcons:function(){this._featureGroup.eachLayer(function(e){e instanceof L.MarkerCluster&&e._iconNeedsUpdate&&e._updateIcon();});},_enqueue:function(e){this._queue.push(e),this._queueTimeout||(this._queueTimeout=setTimeout(L.bind(this._processQueue,this),300));},_processQueue:function(){for(var e=0;e<this._queue.length;e++)this._queue[e].call(this);this._queue.length=0,clearTimeout(this._queueTimeout),this._queueTimeout=null;},_mergeSplitClusters:function(){var e=Math.round(this._map._zoom);this._processQueue(),this._zoom<e&&this._currentShownBounds.intersects(this._getExpandedVisibleBounds())?(this._animationStart(),this._topClusterLevel._recursivelyRemoveChildrenFromMap(this._currentShownBounds,Math.floor(this._map.getMinZoom()),this._zoom,this._getExpandedVisibleBounds()),this._animationZoomIn(this._zoom,e)):this._zoom>e?(this._animationStart(),this._animationZoomOut(this._zoom,e)):this._moveEnd();},_getExpandedVisibleBounds:function(){return this.options.removeOutsideVisibleBounds?L.Browser.mobile?this._checkBoundsMaxLat(this._map.getBounds()):this._checkBoundsMaxLat(this._map.getBounds().pad(1)):this._mapBoundsInfinite},_checkBoundsMaxLat:function(e){var t=this._maxLat;return void 0!==t&&(e.getNorth()>=t&&(e._northEast.lat=1/0),e.getSouth()<=-t&&(e._southWest.lat=-1/0)),e},_animationAddLayerNonAnimated:function(e,t){if(t===e)this._featureGroup.addLayer(e);else if(2===t._childCount){t._addToMap();var i=t.getAllChildMarkers();this._featureGroup.removeLayer(i[0]),this._featureGroup.removeLayer(i[1]);}else t._updateIcon();},_extractNonGroupLayers:function(e,t){var i,r=e.getLayers(),n=0;for(t=t||[];n<r.length;n++)(i=r[n])instanceof L.LayerGroup?this._extractNonGroupLayers(i,t):t.push(i);return t},_overrideMarkerIcon:function(e){return e.options.icon=this.options.iconCreateFunction({getChildCount:function(){return 1},getAllChildMarkers:function(){return [e]}})}});L.MarkerClusterGroup.include({_mapBoundsInfinite:new L.LatLngBounds(new L.LatLng(-1/0,-1/0),new L.LatLng(1/0,1/0))}),L.MarkerClusterGroup.include({_noAnimation:{_animationStart:function(){},_animationZoomIn:function(e,t){this._topClusterLevel._recursivelyRemoveChildrenFromMap(this._currentShownBounds,Math.floor(this._map.getMinZoom()),e),this._topClusterLevel._recursivelyAddChildrenToMap(null,t,this._getExpandedVisibleBounds()),this.fire("animationend");},_animationZoomOut:function(e,t){this._topClusterLevel._recursivelyRemoveChildrenFromMap(this._currentShownBounds,Math.floor(this._map.getMinZoom()),e),this._topClusterLevel._recursivelyAddChildrenToMap(null,t,this._getExpandedVisibleBounds()),this.fire("animationend");},_animationAddLayer:function(e,t){this._animationAddLayerNonAnimated(e,t);}},_withAnimation:{_animationStart:function(){this._map._mapPane.className+=" leaflet-cluster-anim",this._inZoomAnimation++;},_animationZoomIn:function(n,s){var o,a=this._getExpandedVisibleBounds(),h=this._featureGroup,e=Math.floor(this._map.getMinZoom());this._ignoreMove=true,this._topClusterLevel._recursively(a,n,e,function(e){var t,i=e._latlng,r=e._markers;for(a.contains(i)||(i=null),e._isSingleParent()&&n+1===s?(h.removeLayer(e),e._recursivelyAddChildrenToMap(null,s,a)):(e.clusterHide(),e._recursivelyAddChildrenToMap(i,s,a)),o=r.length-1;0<=o;o--)t=r[o],a.contains(t._latlng)||h.removeLayer(t);}),this._forceLayout(),this._topClusterLevel._recursivelyBecomeVisible(a,s),h.eachLayer(function(e){e instanceof L.MarkerCluster||!e._icon||e.clusterShow();}),this._topClusterLevel._recursively(a,n,s,function(e){e._recursivelyRestoreChildPositions(s);}),this._ignoreMove=false,this._enqueue(function(){this._topClusterLevel._recursively(a,n,e,function(e){h.removeLayer(e),e.clusterShow();}),this._animationEnd();});},_animationZoomOut:function(e,t){this._animationZoomOutSingle(this._topClusterLevel,e-1,t),this._topClusterLevel._recursivelyAddChildrenToMap(null,t,this._getExpandedVisibleBounds()),this._topClusterLevel._recursivelyRemoveChildrenFromMap(this._currentShownBounds,Math.floor(this._map.getMinZoom()),e,this._getExpandedVisibleBounds());},_animationAddLayer:function(e,t){var i=this,r=this._featureGroup;r.addLayer(e),t!==e&&(2<t._childCount?(t._updateIcon(),this._forceLayout(),this._animationStart(),e._setPos(this._map.latLngToLayerPoint(t.getLatLng())),e.clusterHide(),this._enqueue(function(){r.removeLayer(e),e.clusterShow(),i._animationEnd();})):(this._forceLayout(),i._animationStart(),i._animationZoomOutSingle(t,this._map.getMaxZoom(),this._zoom)));}},_animationZoomOutSingle:function(t,i,r){var n=this._getExpandedVisibleBounds(),s=Math.floor(this._map.getMinZoom());t._recursivelyAnimateChildrenInAndAddSelfToMap(n,s,i+1,r);var o=this;this._forceLayout(),t._recursivelyBecomeVisible(n,r),this._enqueue(function(){if(1===t._childCount){var e=t._markers[0];this._ignoreMove=true,e.setLatLng(e.getLatLng()),this._ignoreMove=false,e.clusterShow&&e.clusterShow();}else t._recursively(n,r,s,function(e){e._recursivelyRemoveChildrenFromMap(n,s,i+1);});o._animationEnd();});},_animationEnd:function(){this._map&&(this._map._mapPane.className=this._map._mapPane.className.replace(" leaflet-cluster-anim","")),this._inZoomAnimation--,this.fire("animationend");},_forceLayout:function(){L.Util.falseFn(document.body.offsetWidth);}}),L.markerClusterGroup=function(e){return new L.MarkerClusterGroup(e)};var i=L.MarkerCluster=L.Marker.extend({options:L.Icon.prototype.options,initialize:function(e,t,i,r){L.Marker.prototype.initialize.call(this,i?i._cLatLng||i.getLatLng():new L.LatLng(0,0),{icon:this,pane:e.options.clusterPane}),this._group=e,this._zoom=t,this._markers=[],this._childClusters=[],this._childCount=0,this._iconNeedsUpdate=true,this._boundsNeedUpdate=true,this._bounds=new L.LatLngBounds,i&&this._addChild(i),r&&this._addChild(r);},getAllChildMarkers:function(e,t){e=e||[];for(var i=this._childClusters.length-1;0<=i;i--)this._childClusters[i].getAllChildMarkers(e,t);for(var r=this._markers.length-1;0<=r;r--)t&&this._markers[r].__dragStart||e.push(this._markers[r]);return e},getChildCount:function(){return this._childCount},zoomToBounds:function(e){for(var t,i=this._childClusters.slice(),r=this._group._map,n=r.getBoundsZoom(this._bounds),s=this._zoom+1,o=r.getZoom();0<i.length&&s<n;){s++;var a=[];for(t=0;t<i.length;t++)a=a.concat(i[t]._childClusters);i=a;}s<n?this._group._map.setView(this._latlng,s):n<=o?this._group._map.setView(this._latlng,o+1):this._group._map.fitBounds(this._bounds,e);},getBounds:function(){var e=new L.LatLngBounds;return e.extend(this._bounds),e},_updateIcon:function(){this._iconNeedsUpdate=true,this._icon&&this.setIcon(this);},createIcon:function(){return this._iconNeedsUpdate&&(this._iconObj=this._group.options.iconCreateFunction(this),this._iconNeedsUpdate=false),this._iconObj.createIcon()},createShadow:function(){return this._iconObj.createShadow()},_addChild:function(e,t){this._iconNeedsUpdate=true,this._boundsNeedUpdate=true,this._setClusterCenter(e),e instanceof L.MarkerCluster?(t||(this._childClusters.push(e),e.__parent=this),this._childCount+=e._childCount):(t||this._markers.push(e),this._childCount++),this.__parent&&this.__parent._addChild(e,true);},_setClusterCenter:function(e){this._cLatLng||(this._cLatLng=e._cLatLng||e._latlng);},_resetBounds:function(){var e=this._bounds;e._southWest&&(e._southWest.lat=1/0,e._southWest.lng=1/0),e._northEast&&(e._northEast.lat=-1/0,e._northEast.lng=-1/0);},_recalculateBounds:function(){var e,t,i,r,n=this._markers,s=this._childClusters,o=0,a=0,h=this._childCount;if(0!==h){for(this._resetBounds(),e=0;e<n.length;e++)i=n[e]._latlng,this._bounds.extend(i),o+=i.lat,a+=i.lng;for(e=0;e<s.length;e++)(t=s[e])._boundsNeedUpdate&&t._recalculateBounds(),this._bounds.extend(t._bounds),i=t._wLatLng,r=t._childCount,o+=i.lat*r,a+=i.lng*r;this._latlng=this._wLatLng=new L.LatLng(o/h,a/h),this._boundsNeedUpdate=false;}},_addToMap:function(e){e&&(this._backupLatlng=this._latlng,this.setLatLng(e)),this._group._featureGroup.addLayer(this);},_recursivelyAnimateChildrenIn:function(e,n,t){this._recursively(e,this._group._map.getMinZoom(),t-1,function(e){var t,i,r=e._markers;for(t=r.length-1;0<=t;t--)(i=r[t])._icon&&(i._setPos(n),i.clusterHide());},function(e){var t,i,r=e._childClusters;for(t=r.length-1;0<=t;t--)(i=r[t])._icon&&(i._setPos(n),i.clusterHide());});},_recursivelyAnimateChildrenInAndAddSelfToMap:function(t,i,r,n){this._recursively(t,n,i,function(e){e._recursivelyAnimateChildrenIn(t,e._group._map.latLngToLayerPoint(e.getLatLng()).round(),r),e._isSingleParent()&&r-1===n?(e.clusterShow(),e._recursivelyRemoveChildrenFromMap(t,i,r)):e.clusterHide(),e._addToMap();});},_recursivelyBecomeVisible:function(e,t){this._recursively(e,this._group._map.getMinZoom(),t,null,function(e){e.clusterShow();});},_recursivelyAddChildrenToMap:function(r,n,s){this._recursively(s,this._group._map.getMinZoom()-1,n,function(e){if(n!==e._zoom)for(var t=e._markers.length-1;0<=t;t--){var i=e._markers[t];s.contains(i._latlng)&&(r&&(i._backupLatlng=i.getLatLng(),i.setLatLng(r),i.clusterHide&&i.clusterHide()),e._group._featureGroup.addLayer(i));}},function(e){e._addToMap(r);});},_recursivelyRestoreChildPositions:function(e){for(var t=this._markers.length-1;0<=t;t--){var i=this._markers[t];i._backupLatlng&&(i.setLatLng(i._backupLatlng),delete i._backupLatlng);}if(e-1===this._zoom)for(var r=this._childClusters.length-1;0<=r;r--)this._childClusters[r]._restorePosition();else for(var n=this._childClusters.length-1;0<=n;n--)this._childClusters[n]._recursivelyRestoreChildPositions(e);},_restorePosition:function(){this._backupLatlng&&(this.setLatLng(this._backupLatlng),delete this._backupLatlng);},_recursivelyRemoveChildrenFromMap:function(e,t,i,r){var n,s;this._recursively(e,t-1,i-1,function(e){for(s=e._markers.length-1;0<=s;s--)n=e._markers[s],r&&r.contains(n._latlng)||(e._group._featureGroup.removeLayer(n),n.clusterShow&&n.clusterShow());},function(e){for(s=e._childClusters.length-1;0<=s;s--)n=e._childClusters[s],r&&r.contains(n._latlng)||(e._group._featureGroup.removeLayer(n),n.clusterShow&&n.clusterShow());});},_recursively:function(e,t,i,r,n){var s,o,a=this._childClusters,h=this._zoom;if(t<=h&&(r&&r(this),n&&h===i&&n(this)),h<t||h<i)for(s=a.length-1;0<=s;s--)(o=a[s])._boundsNeedUpdate&&o._recalculateBounds(),e.intersects(o._bounds)&&o._recursively(e,t,i,r,n);},_isSingleParent:function(){return 0<this._childClusters.length&&this._childClusters[0]._childCount===this._childCount}});L.Marker.include({clusterHide:function(){var e=this.options.opacity;return this.setOpacity(0),this.options.opacity=e,this},clusterShow:function(){return this.setOpacity(this.options.opacity)}}),L.DistanceGrid=function(e){this._cellSize=e,this._sqCellSize=e*e,this._grid={},this._objectPoint={};},L.DistanceGrid.prototype={addObject:function(e,t){var i=this._getCoord(t.x),r=this._getCoord(t.y),n=this._grid,s=n[r]=n[r]||{},o=s[i]=s[i]||[],a=L.Util.stamp(e);this._objectPoint[a]=t,o.push(e);},updateObject:function(e,t){this.removeObject(e),this.addObject(e,t);},removeObject:function(e,t){var i,r,n=this._getCoord(t.x),s=this._getCoord(t.y),o=this._grid,a=o[s]=o[s]||{},h=a[n]=a[n]||[];for(delete this._objectPoint[L.Util.stamp(e)],i=0,r=h.length;i<r;i++)if(h[i]===e)return h.splice(i,1),1===r&&delete a[n],true},eachObject:function(e,t){var i,r,n,s,o,a,h=this._grid;for(i in h)for(r in o=h[i])for(n=0,s=(a=o[r]).length;n<s;n++)e.call(t,a[n])&&(n--,s--);},getNearObject:function(e){var t,i,r,n,s,o,a,h,l=this._getCoord(e.x),u=this._getCoord(e.y),_=this._objectPoint,d=this._sqCellSize,p=null;for(t=u-1;t<=u+1;t++)if(n=this._grid[t])for(i=l-1;i<=l+1;i++)if(s=n[i])for(r=0,o=s.length;r<o;r++)a=s[r],((h=this._sqDist(_[L.Util.stamp(a)],e))<d||h<=d&&null===p)&&(d=h,p=a);return p},_getCoord:function(e){var t=Math.floor(e/this._cellSize);return isFinite(t)?t:e},_sqDist:function(e,t){var i=t.x-e.x,r=t.y-e.y;return i*i+r*r}},L.QuickHull={getDistant:function(e,t){var i=t[1].lat-t[0].lat;return (t[0].lng-t[1].lng)*(e.lat-t[0].lat)+i*(e.lng-t[0].lng)},findMostDistantPointFromBaseLine:function(e,t){var i,r,n,s=0,o=null,a=[];for(i=t.length-1;0<=i;i--)r=t[i],0<(n=this.getDistant(r,e))&&(a.push(r),s<n&&(s=n,o=r));return {maxPoint:o,newPoints:a}},buildConvexHull:function(e,t){var i=[],r=this.findMostDistantPointFromBaseLine(e,t);return r.maxPoint?i=(i=i.concat(this.buildConvexHull([e[0],r.maxPoint],r.newPoints))).concat(this.buildConvexHull([r.maxPoint,e[1]],r.newPoints)):[e[0]]},getConvexHull:function(e){var t,i=false,r=false,n=false,s=false,o=null,a=null,h=null,l=null,u=null,_=null;for(t=e.length-1;0<=t;t--){var d=e[t];(false===i||d.lat>i)&&(i=(o=d).lat),(false===r||d.lat<r)&&(r=(a=d).lat),(false===n||d.lng>n)&&(n=(h=d).lng),(false===s||d.lng<s)&&(s=(l=d).lng);}return u=r!==i?(_=a,o):(_=l,h),[].concat(this.buildConvexHull([_,u],e),this.buildConvexHull([u,_],e))}},L.MarkerCluster.include({getConvexHull:function(){var e,t,i=this.getAllChildMarkers(),r=[];for(t=i.length-1;0<=t;t--)e=i[t].getLatLng(),r.push(e);return L.QuickHull.getConvexHull(r)}}),L.MarkerCluster.include({_2PI:2*Math.PI,_circleFootSeparation:25,_circleStartAngle:0,_spiralFootSeparation:28,_spiralLengthStart:11,_spiralLengthFactor:5,_circleSpiralSwitchover:9,spiderfy:function(){if(this._group._spiderfied!==this&&!this._group._inZoomAnimation){var e,t=this.getAllChildMarkers(null,true),i=this._group._map.latLngToLayerPoint(this._latlng);this._group._unspiderfy(),e=(this._group._spiderfied=this)._group.options.spiderfyShapePositions?this._group.options.spiderfyShapePositions(t.length,i):t.length>=this._circleSpiralSwitchover?this._generatePointsSpiral(t.length,i):(i.y+=10,this._generatePointsCircle(t.length,i)),this._animationSpiderfy(t,e);}},unspiderfy:function(e){this._group._inZoomAnimation||(this._animationUnspiderfy(e),this._group._spiderfied=null);},_generatePointsCircle:function(e,t){var i,r,n=this._group.options.spiderfyDistanceMultiplier*this._circleFootSeparation*(2+e)/this._2PI,s=this._2PI/e,o=[];for(n=Math.max(n,35),o.length=e,i=0;i<e;i++)r=this._circleStartAngle+i*s,o[i]=new L.Point(t.x+n*Math.cos(r),t.y+n*Math.sin(r))._round();return o},_generatePointsSpiral:function(e,t){var i,r=this._group.options.spiderfyDistanceMultiplier,n=r*this._spiralLengthStart,s=r*this._spiralFootSeparation,o=r*this._spiralLengthFactor*this._2PI,a=0,h=[];for(i=h.length=e;0<=i;i--)i<e&&(h[i]=new L.Point(t.x+n*Math.cos(a),t.y+n*Math.sin(a))._round()),n+=o/(a+=s/n+5e-4*i);return h},_noanimationUnspiderfy:function(){var e,t,i=this._group,r=i._map,n=i._featureGroup,s=this.getAllChildMarkers(null,true);for(i._ignoreMove=true,this.setOpacity(1),t=s.length-1;0<=t;t--)e=s[t],n.removeLayer(e),e._preSpiderfyLatlng&&(e.setLatLng(e._preSpiderfyLatlng),delete e._preSpiderfyLatlng),e.setZIndexOffset&&e.setZIndexOffset(0),e._spiderLeg&&(r.removeLayer(e._spiderLeg),delete e._spiderLeg);i.fire("unspiderfied",{cluster:this,markers:s}),i._ignoreMove=false,i._spiderfied=null;}}),L.MarkerClusterNonAnimated=L.MarkerCluster.extend({_animationSpiderfy:function(e,t){var i,r,n,s,o=this._group,a=o._map,h=o._featureGroup,l=this._group.options.spiderLegPolylineOptions;for(o._ignoreMove=true,i=0;i<e.length;i++)s=a.layerPointToLatLng(t[i]),r=e[i],n=new L.Polyline([this._latlng,s],l),a.addLayer(n),r._spiderLeg=n,r._preSpiderfyLatlng=r._latlng,r.setLatLng(s),r.setZIndexOffset&&r.setZIndexOffset(1e6),h.addLayer(r);this.setOpacity(.3),o._ignoreMove=false,o.fire("spiderfied",{cluster:this,markers:e});},_animationUnspiderfy:function(){this._noanimationUnspiderfy();}}),L.MarkerCluster.include({_animationSpiderfy:function(e,t){var i,r,n,s,o,a,h=this,l=this._group,u=l._map,_=l._featureGroup,d=this._latlng,p=u.latLngToLayerPoint(d),c=L.Path.SVG,f=L.extend({},this._group.options.spiderLegPolylineOptions),m=f.opacity;for(void 0===m&&(m=L.MarkerClusterGroup.prototype.options.spiderLegPolylineOptions.opacity),c?(f.opacity=0,f.className=(f.className||"")+" leaflet-cluster-spider-leg"):f.opacity=m,l._ignoreMove=true,i=0;i<e.length;i++)r=e[i],a=u.layerPointToLatLng(t[i]),n=new L.Polyline([d,a],f),u.addLayer(n),r._spiderLeg=n,c&&(o=(s=n._path).getTotalLength()+.1,s.style.strokeDasharray=o,s.style.strokeDashoffset=o),r.setZIndexOffset&&r.setZIndexOffset(1e6),r.clusterHide&&r.clusterHide(),_.addLayer(r),r._setPos&&r._setPos(p);for(l._forceLayout(),l._animationStart(),i=e.length-1;0<=i;i--)a=u.layerPointToLatLng(t[i]),(r=e[i])._preSpiderfyLatlng=r._latlng,r.setLatLng(a),r.clusterShow&&r.clusterShow(),c&&((s=(n=r._spiderLeg)._path).style.strokeDashoffset=0,n.setStyle({opacity:m}));this.setOpacity(.3),l._ignoreMove=false,setTimeout(function(){l._animationEnd(),l.fire("spiderfied",{cluster:h,markers:e});},200);},_animationUnspiderfy:function(e){var t,i,r,n,s,o,a=this,h=this._group,l=h._map,u=h._featureGroup,_=e?l._latLngToNewLayerPoint(this._latlng,e.zoom,e.center):l.latLngToLayerPoint(this._latlng),d=this.getAllChildMarkers(null,true),p=L.Path.SVG;for(h._ignoreMove=true,h._animationStart(),this.setOpacity(1),i=d.length-1;0<=i;i--)(t=d[i])._preSpiderfyLatlng&&(t.closePopup(),t.setLatLng(t._preSpiderfyLatlng),delete t._preSpiderfyLatlng,o=true,t._setPos&&(t._setPos(_),o=false),t.clusterHide&&(t.clusterHide(),o=false),o&&u.removeLayer(t),p&&(s=(n=(r=t._spiderLeg)._path).getTotalLength()+.1,n.style.strokeDashoffset=s,r.setStyle({opacity:0})));h._ignoreMove=false,setTimeout(function(){var e=0;for(i=d.length-1;0<=i;i--)(t=d[i])._spiderLeg&&e++;for(i=d.length-1;0<=i;i--)(t=d[i])._spiderLeg&&(t.clusterShow&&t.clusterShow(),t.setZIndexOffset&&t.setZIndexOffset(0),1<e&&u.removeLayer(t),l.removeLayer(t._spiderLeg),delete t._spiderLeg);h._animationEnd(),h.fire("unspiderfied",{cluster:a,markers:d});},200);}}),L.MarkerClusterGroup.include({_spiderfied:null,unspiderfy:function(){this._unspiderfy.apply(this,arguments);},_spiderfierOnAdd:function(){this._map.on("click",this._unspiderfyWrapper,this),this._map.options.zoomAnimation&&this._map.on("zoomstart",this._unspiderfyZoomStart,this),this._map.on("zoomend",this._noanimationUnspiderfy,this),L.Browser.touch||this._map.getRenderer(this);},_spiderfierOnRemove:function(){this._map.off("click",this._unspiderfyWrapper,this),this._map.off("zoomstart",this._unspiderfyZoomStart,this),this._map.off("zoomanim",this._unspiderfyZoomAnim,this),this._map.off("zoomend",this._noanimationUnspiderfy,this),this._noanimationUnspiderfy();},_unspiderfyZoomStart:function(){this._map&&this._map.on("zoomanim",this._unspiderfyZoomAnim,this);},_unspiderfyZoomAnim:function(e){L.DomUtil.hasClass(this._map._mapPane,"leaflet-touching")||(this._map.off("zoomanim",this._unspiderfyZoomAnim,this),this._unspiderfy(e));},_unspiderfyWrapper:function(){this._unspiderfy();},_unspiderfy:function(e){this._spiderfied&&this._spiderfied.unspiderfy(e);},_noanimationUnspiderfy:function(){this._spiderfied&&this._spiderfied._noanimationUnspiderfy();},_unspiderfyLayer:function(e){e._spiderLeg&&(this._featureGroup.removeLayer(e),e.clusterShow&&e.clusterShow(),e.setZIndexOffset&&e.setZIndexOffset(0),this._map.removeLayer(e._spiderLeg),delete e._spiderLeg);}}),L.MarkerClusterGroup.include({refreshClusters:function(e){return e?e instanceof L.MarkerClusterGroup?e=e._topClusterLevel.getAllChildMarkers():e instanceof L.LayerGroup?e=e._layers:e instanceof L.MarkerCluster?e=e.getAllChildMarkers():e instanceof L.Marker&&(e=[e]):e=this._topClusterLevel.getAllChildMarkers(),this._flagParentsIconsNeedUpdate(e),this._refreshClustersIcons(),this.options.singleMarkerMode&&this._refreshSingleMarkerModeMarkers(e),this},_flagParentsIconsNeedUpdate:function(e){var t,i;for(t in e)for(i=e[t].__parent;i;)i._iconNeedsUpdate=true,i=i.__parent;},_refreshSingleMarkerModeMarkers:function(e){var t,i;for(t in e)i=e[t],this.hasLayer(i)&&i.setIcon(this._overrideMarkerIcon(i));}}),L.Marker.include({refreshIconOptions:function(e,t){var i=this.options.icon;return L.setOptions(i,e),this.setIcon(i),t&&this.__parent&&this.__parent._group.refreshClusters(this),this}}),e.MarkerClusterGroup=t,e.MarkerCluster=i,Object.defineProperty(e,"__esModule",{value:true});});
	
} (leaflet_markercluster, leaflet_markercluster.exports));

const defaultOptions = {
  swipeThreshold: 50,
  velocityThreshold: 0.3,
  longPressDelay: 500,
  doubleTapDelay: 300,
  pinchThreshold: 0.1
};
const useGestureNavigation = (handlers = {}, options = {}) => {
  const opts = { ...defaultOptions, ...options };
  const gestureRef = reactExports.useRef(null);
  const touchesRef = reactExports.useRef([]);
  const longPressTimerRef = reactExports.useRef(null);
  const lastTapTimeRef = reactExports.useRef(0);
  const initialPinchDistanceRef = reactExports.useRef(0);
  const currentScaleRef = reactExports.useRef(1);
  const getDistance = reactExports.useCallback((touch1, touch2) => {
    const dx = touch1.clientX - touch2.clientX;
    const dy = touch1.clientY - touch2.clientY;
    return Math.sqrt(dx * dx + dy * dy);
  }, []);
  const getVelocity = reactExports.useCallback((startTime, endTime, distance) => {
    const timeDiff = endTime - startTime;
    return timeDiff > 0 ? distance / timeDiff : 0;
  }, []);
  const handleTouchStart = reactExports.useCallback((e) => {
    e.preventDefault();
    touchesRef.current = Array.from(e.touches);
    const touch = e.touches[0];
    const currentTime = Date.now();
    if (currentTime - lastTapTimeRef.current < (opts.doubleTapDelay || 300)) {
      handlers.onDoubleTap?.(touch.clientX, touch.clientY);
      lastTapTimeRef.current = 0;
      return;
    }
    lastTapTimeRef.current = currentTime;
    if (handlers.onLongPress) {
      longPressTimerRef.current = setTimeout(() => {
        handlers.onLongPress?.(touch.clientX, touch.clientY);
      }, opts.longPressDelay || 500);
    }
    if (e.touches.length === 2 && handlers.onPinchStart) {
      const distance = getDistance(e.touches[0], e.touches[1]);
      initialPinchDistanceRef.current = distance;
      currentScaleRef.current = 1;
      handlers.onPinchStart(1);
    }
  }, [handlers, opts, getDistance]);
  const handleTouchMove = reactExports.useCallback((e) => {
    e.preventDefault();
    if (longPressTimerRef.current) {
      clearTimeout(longPressTimerRef.current);
      longPressTimerRef.current = null;
    }
    if (e.touches.length === 2 && handlers.onPinchMove && initialPinchDistanceRef.current > 0) {
      const distance = getDistance(e.touches[0], e.touches[1]);
      const scale = distance / initialPinchDistanceRef.current;
      currentScaleRef.current = scale;
      if (Math.abs(scale - 1) > (opts.pinchThreshold || 0.1)) {
        handlers.onPinchMove(scale);
      }
    }
  }, [handlers, opts, getDistance]);
  const handleTouchEnd = reactExports.useCallback((e) => {
    e.preventDefault();
    if (longPressTimerRef.current) {
      clearTimeout(longPressTimerRef.current);
      longPressTimerRef.current = null;
    }
    const touches = touchesRef.current;
    if (touches.length === 0) return;
    if (e.touches.length === 0 && touches.length === 2 && handlers.onPinchEnd) {
      handlers.onPinchEnd(currentScaleRef.current);
      initialPinchDistanceRef.current = 0;
      currentScaleRef.current = 1;
      return;
    }
    if (touches.length === 1 && e.changedTouches.length === 1) {
      const startTouch = touches[0];
      const endTouch = e.changedTouches[0];
      const deltaX = endTouch.clientX - startTouch.clientX;
      const deltaY = endTouch.clientY - startTouch.clientY;
      const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
      const startTime = e.timeStamp || Date.now();
      const endTime = Date.now();
      const velocity = getVelocity(startTime, endTime, distance);
      if (distance > (opts.swipeThreshold || 50) && velocity > (opts.velocityThreshold || 0.3)) {
        const absX = Math.abs(deltaX);
        const absY = Math.abs(deltaY);
        if (absX > absY) {
          if (deltaX > 0) {
            handlers.onSwipeRight?.();
          } else {
            handlers.onSwipeLeft?.();
          }
        } else {
          if (deltaY > 0) {
            handlers.onSwipeDown?.();
          } else {
            handlers.onSwipeUp?.();
          }
        }
      }
    }
    touchesRef.current = [];
  }, [handlers, opts, getVelocity]);
  const handleKeyDown = reactExports.useCallback((e) => {
    switch (e.key) {
      case "ArrowLeft":
        if (e.metaKey || e.ctrlKey) {
          handlers.onSwipeLeft?.();
        }
        break;
      case "ArrowRight":
        if (e.metaKey || e.ctrlKey) {
          handlers.onSwipeRight?.();
        }
        break;
      case "ArrowUp":
        if (e.metaKey || e.ctrlKey) {
          handlers.onSwipeUp?.();
        }
        break;
      case "ArrowDown":
        if (e.metaKey || e.ctrlKey) {
          handlers.onSwipeDown?.();
        }
        break;
      case " ":
        if (e.ctrlKey) {
          const rect = gestureRef.current?.getBoundingClientRect();
          if (rect) {
            handlers.onLongPress?.(rect.width / 2, rect.height / 2);
          }
        }
        break;
      case "Enter":
        if (e.ctrlKey) {
          const rect = gestureRef.current?.getBoundingClientRect();
          if (rect) {
            handlers.onDoubleTap?.(rect.width / 2, rect.height / 2);
          }
        }
        break;
    }
  }, [handlers]);
  reactExports.useEffect(() => {
    const element = gestureRef.current;
    if (!element) return;
    element.addEventListener("touchstart", handleTouchStart, { passive: false });
    element.addEventListener("touchmove", handleTouchMove, { passive: false });
    element.addEventListener("touchend", handleTouchEnd, { passive: false });
    element.addEventListener("keydown", handleKeyDown);
    element.addEventListener("contextmenu", (e) => e.preventDefault());
    return () => {
      element.removeEventListener("touchstart", handleTouchStart);
      element.removeEventListener("touchmove", handleTouchMove);
      element.removeEventListener("touchend", handleTouchEnd);
      element.removeEventListener("keydown", handleKeyDown);
      element.removeEventListener("contextmenu", (e) => e.preventDefault());
      if (longPressTimerRef.current) {
        clearTimeout(longPressTimerRef.current);
      }
    };
  }, [handleTouchStart, handleTouchMove, handleTouchEnd, handleKeyDown]);
  return {
    gestureRef: (element) => {
      gestureRef.current = element;
    },
    // Programmatic gesture simulation for testing
    simulateSwipe: reactExports.useCallback((direction) => {
      switch (direction) {
        case "left":
          handlers.onSwipeLeft?.();
          break;
        case "right":
          handlers.onSwipeRight?.();
          break;
        case "up":
          handlers.onSwipeUp?.();
          break;
        case "down":
          handlers.onSwipeDown?.();
          break;
      }
    }, [handlers]),
    simulatePinch: reactExports.useCallback((scale) => {
      handlers.onPinchStart?.(1);
      handlers.onPinchMove?.(scale);
      handlers.onPinchEnd?.(scale);
    }, [handlers]),
    simulateLongPress: reactExports.useCallback((x = 0, y = 0) => {
      handlers.onLongPress?.(x, y);
    }, [handlers]),
    simulateDoubleTap: reactExports.useCallback((x = 0, y = 0) => {
      handlers.onDoubleTap?.(x, y);
    }, [handlers])
  };
};

delete L$1.Icon.Default.prototype._getIconUrl;
L$1.Icon.Default.mergeOptions({
  iconRetinaUrl: "https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png",
  iconUrl: "https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png",
  shadowUrl: "https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png"
});
const MapWithClustering = ({
  markers,
  center = [35.6762, 139.6503],
  // 東京をデフォルト中心に
  zoom = 6,
  height = "600px",
  enableMobileControls = true,
  enableGestures = true,
  enableFullscreen = true,
  onMarkerClick,
  showLocationButton = true
}) => {
  const navigate = useNavigate();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("md"));
  const [map, setMap] = reactExports.useState(null);
  const [loading, setLoading] = reactExports.useState(true);
  const [clusterGroup, setClusterGroup] = reactExports.useState(null);
  const [isFullscreen, setIsFullscreen] = reactExports.useState(false);
  const [currentZoom, setCurrentZoom] = reactExports.useState(zoom);
  const [userLocation, setUserLocation] = reactExports.useState(null);
  const [showControls, setShowControls] = reactExports.useState(!isMobile);
  const { gestureRef } = useGestureNavigation({
    onPinchStart: (scale) => {
      if (map && enableGestures) {
        map.dragging.disable();
      }
    },
    onPinchMove: (scale) => {
      if (map && enableGestures) {
        const newZoom = Math.max(2, Math.min(18, currentZoom + (scale - 1) * 2));
        setCurrentZoom(newZoom);
        map.setZoom(newZoom);
      }
    },
    onPinchEnd: (scale) => {
      if (map && enableGestures) {
        map.dragging.enable();
      }
    },
    onDoubleTap: (x, y) => {
      if (map && enableGestures) {
        const containerPoint = [x, y];
        const latLng = map.containerPointToLatLng(containerPoint);
        map.setView(latLng, Math.min(currentZoom + 2, 18));
      }
    },
    onLongPress: (x, y) => {
      if (isMobile) {
        setShowControls(!showControls);
      }
    }
  });
  const getUserLocation = reactExports.useCallback(() => {
    if ("geolocation" in navigator) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          setUserLocation([latitude, longitude]);
          if (map) {
            map.setView([latitude, longitude], 15);
          }
        },
        (error) => {
          console.warn("Failed to get user location:", error);
        },
        {
          enableHighAccuracy: true,
          timeout: 1e4,
          maximumAge: 6e5
          // 10 minutes
        }
      );
    }
  }, [map]);
  const handleZoomIn = reactExports.useCallback(() => {
    if (map) {
      const newZoom = Math.min(currentZoom + 1, 18);
      setCurrentZoom(newZoom);
      map.setZoom(newZoom);
    }
  }, [map, currentZoom]);
  const handleZoomOut = reactExports.useCallback(() => {
    if (map) {
      const newZoom = Math.max(currentZoom - 1, 2);
      setCurrentZoom(newZoom);
      map.setZoom(newZoom);
    }
  }, [map, currentZoom]);
  const handleFullscreenToggle = reactExports.useCallback(() => {
    const mapContainer = document.getElementById("map-with-clustering");
    if (!mapContainer) return;
    if (!isFullscreen) {
      if (mapContainer.requestFullscreen) {
        mapContainer.requestFullscreen();
      }
      setIsFullscreen(true);
    } else {
      if (document.exitFullscreen) {
        document.exitFullscreen();
      }
      setIsFullscreen(false);
    }
  }, [isFullscreen]);
  reactExports.useEffect(() => {
    const container = document.getElementById("map-with-clustering");
    if (!container) return;
    if (map) {
      map.remove();
    }
    const newMap = L$1.map("map-with-clustering", {
      center,
      zoom,
      scrollWheelZoom: !isMobile,
      // Disable scroll wheel zoom on mobile
      zoomControl: !enableMobileControls,
      // Use custom controls on mobile
      touchZoom: enableGestures,
      doubleClickZoom: enableGestures,
      boxZoom: false,
      // Disable box zoom on mobile
      keyboard: false,
      // Disable keyboard navigation on mobile
      dragging: true,
      tap: isMobile,
      tapTolerance: 20,
      // Increase tap tolerance for touch devices
      zoomSnap: 0.5,
      // Smoother zooming
      zoomDelta: 0.5,
      wheelPxPerZoomLevel: 100,
      maxZoom: 18,
      minZoom: 2
    });
    L$1.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
      maxZoom: 19
    }).addTo(newMap);
    const newClusterGroup = L$1.markerClusterGroup({
      showCoverageOnHover: false,
      zoomToBoundsOnClick: true,
      spiderfyOnMaxZoom: true,
      removeOutsideVisibleBounds: true,
      animate: true,
      chunkedLoading: true,
      chunkInterval: 200,
      chunkDelay: 50,
      maxClusterRadius: 80,
      iconCreateFunction: function(cluster) {
        const count = cluster.getChildCount();
        let className = "marker-cluster-small";
        if (count > 100) {
          className = "marker-cluster-large";
        } else if (count > 50) {
          className = "marker-cluster-medium";
        }
        return new L$1.DivIcon({
          html: `<div><span>${count}</span></div>`,
          className: `marker-cluster ${className}`,
          iconSize: new L$1.Point(40, 40)
        });
      }
    });
    newMap.addLayer(newClusterGroup);
    newMap.on("zoomend", () => {
      setCurrentZoom(newMap.getZoom());
    });
    if (isMobile) {
      newMap.on("movestart", () => {
        setShowControls(false);
      });
      newMap.on("moveend", () => {
        setTimeout(() => setShowControls(false), 2e3);
      });
    }
    setMap(newMap);
    setClusterGroup(newClusterGroup);
    setLoading(false);
    return () => {
      newMap.remove();
    };
  }, []);
  reactExports.useEffect(() => {
    if (!map || !clusterGroup || !markers || markers.length === 0) return;
    clusterGroup.clearLayers();
    const validMarkers = markers.filter(
      (marker) => marker.position && marker.position[0] && marker.position[1] && !isNaN(marker.position[0]) && !isNaN(marker.position[1])
    );
    const leafletMarkers = validMarkers.map((markerData) => {
      const { position, title, architect, year, category, tags, address, id } = markerData;
      const hasAward = tags && tags.includes("賞");
      const icon = hasAward ? new L$1.Icon({
        iconUrl: "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-gold.png",
        shadowUrl: "https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png",
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34],
        shadowSize: [41, 41]
      }) : new L$1.Icon.Default();
      const marker = L$1.marker(position, { icon });
      const isMobilePopup = window.innerWidth < 768;
      const popupContent = `
        <div style="min-width: ${isMobilePopup ? "200px" : "250px"}; max-width: ${isMobilePopup ? "250px" : "300px"}; 
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;">
          <h3 style="margin: 0 0 12px 0; font-size: ${isMobilePopup ? "14px" : "16px"}; font-weight: bold; line-height: 1.3;">
            ${title}
          </h3>
          ${architect ? `
            <div style="display: flex; align-items: center; margin-bottom: 6px; font-size: ${isMobilePopup ? "12px" : "13px"};">
              <span style="color: #666; margin-right: 8px; min-width: 50px;">建築家:</span>
              <span style="font-weight: 500;">${architect}</span>
            </div>
          ` : ""}
          ${year ? `
            <div style="display: flex; align-items: center; margin-bottom: 6px; font-size: ${isMobilePopup ? "12px" : "13px"};">
              <span style="color: #666; margin-right: 8px; min-width: 50px;">竣工年:</span>
              <span>${year}年</span>
            </div>
          ` : ""}
          ${category ? `
            <div style="display: flex; align-items: center; margin-bottom: 6px; font-size: ${isMobilePopup ? "12px" : "13px"};">
              <span style="color: #666; margin-right: 8px; min-width: 50px;">カテゴリ:</span>
              <span>${category}</span>
            </div>
          ` : ""}
          ${tags ? `
            <div style="display: flex; align-items: center; margin-bottom: 6px; font-size: ${isMobilePopup ? "12px" : "13px"};">
              <span style="color: #666; margin-right: 8px; min-width: 50px;">タグ:</span>
              <span style="color: #ff6b00; font-weight: bold;">${tags}</span>
            </div>
          ` : ""}
          ${address ? `
            <div style="display: flex; align-items: flex-start; margin-bottom: 12px; font-size: ${isMobilePopup ? "11px" : "12px"};">
              <span style="color: #666; margin-right: 8px; min-width: 50px; margin-top: 2px;">住所:</span>
              <span style="line-height: 1.3;">${address}</span>
            </div>
          ` : ""}
          <div style="text-align: center; margin-top: 16px;">
            <button onclick="window.location.hash='/architecture/${id}'" 
              style="background: #1976d2; color: white; border: none; 
                     padding: ${isMobilePopup ? "12px 20px" : "10px 18px"}; 
                     border-radius: 6px; cursor: pointer; 
                     font-size: ${isMobilePopup ? "14px" : "13px"}; 
                     font-weight: 500; box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                     min-height: 44px; min-width: ${isMobilePopup ? "120px" : "100px"};">
              詳細を見る
            </button>
          </div>
        </div>
      `;
      marker.bindPopup(popupContent, {
        maxWidth: isMobilePopup ? 280 : 320,
        minWidth: isMobilePopup ? 200 : 250,
        className: "architecture-popup",
        closeButton: true,
        autoClose: true,
        keepInView: true,
        offset: [0, -10]
      });
      marker.on("click", function() {
        if (onMarkerClick) {
          onMarkerClick(markerData);
        }
        if (isMobile) {
          setShowControls(true);
          setTimeout(() => setShowControls(false), 3e3);
        }
      });
      return marker;
    });
    clusterGroup.addLayers(leafletMarkers);
    if (validMarkers.length > 0) {
      setTimeout(() => {
        const bounds = clusterGroup.getBounds();
        if (bounds.isValid()) {
          map.fitBounds(bounds, {
            padding: [50, 50],
            maxZoom: 15
          });
        }
      }, 100);
    }
  }, [markers, map, clusterGroup, navigate]);
  reactExports.useEffect(() => {
    if (!map) return;
    if (center && zoom) {
      map.setView(center, zoom);
    }
  }, [center, zoom, map]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { position: "relative", height, width: "100%" }, children: [
    loading && /* @__PURE__ */ jsxRuntimeExports.jsxs(
      Box,
      {
        sx: {
          position: "absolute",
          top: "50%",
          left: "50%",
          transform: "translate(-50%, -50%)",
          zIndex: 1e3,
          display: "flex",
          flexDirection: "column",
          alignItems: "center",
          gap: 2
        },
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(CircularProgress, {}),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { children: "地図を読み込み中..." })
        ]
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "div",
      {
        id: "map-with-clustering",
        ref: gestureRef,
        style: {
          height: "100%",
          width: "100%",
          borderRadius: "4px",
          overflow: "hidden"
        }
      }
    ),
    enableMobileControls && isMobile && /* @__PURE__ */ jsxRuntimeExports.jsx(Zoom, { in: showControls || loading, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
      Box,
      {
        sx: {
          position: "absolute",
          top: theme.spacing(2),
          right: theme.spacing(2),
          display: "flex",
          flexDirection: "column",
          gap: 1,
          zIndex: 1e3
        },
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip$1, { title: "ズームイン", placement: "left", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Fab,
            {
              size: "small",
              color: "primary",
              onClick: handleZoomIn,
              disabled: currentZoom >= 18,
              sx: {
                minHeight: "48px",
                minWidth: "48px",
                boxShadow: theme.shadows[6]
              },
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(ZoomIn, {})
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip$1, { title: "ズームアウト", placement: "left", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Fab,
            {
              size: "small",
              color: "primary",
              onClick: handleZoomOut,
              disabled: currentZoom <= 2,
              sx: {
                minHeight: "48px",
                minWidth: "48px",
                boxShadow: theme.shadows[6]
              },
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(ZoomOut, {})
            }
          ) }),
          showLocationButton && /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip$1, { title: "現在地", placement: "left", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Fab,
            {
              size: "small",
              color: "secondary",
              onClick: getUserLocation,
              sx: {
                minHeight: "48px",
                minWidth: "48px",
                boxShadow: theme.shadows[6]
              },
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(MyLocation, {})
            }
          ) }),
          enableFullscreen && /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip$1, { title: isFullscreen ? "全画面終了" : "全画面表示", placement: "left", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Fab,
            {
              size: "small",
              color: "default",
              onClick: handleFullscreenToggle,
              sx: {
                minHeight: "48px",
                minWidth: "48px",
                boxShadow: theme.shadows[6]
              },
              children: isFullscreen ? /* @__PURE__ */ jsxRuntimeExports.jsx(CloseIcon, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(Fullscreen, {})
            }
          ) })
        ]
      }
    ) }),
    enableMobileControls && !isMobile && /* @__PURE__ */ jsxRuntimeExports.jsxs(
      Box,
      {
        sx: {
          position: "absolute",
          bottom: theme.spacing(2),
          right: theme.spacing(2),
          display: "flex",
          gap: 1,
          zIndex: 1e3
        },
        children: [
          showLocationButton && /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip$1, { title: "現在地", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            IconButton,
            {
              color: "primary",
              onClick: getUserLocation,
              sx: {
                backgroundColor: "background.paper",
                boxShadow: theme.shadows[2],
                "&:hover": {
                  backgroundColor: "background.paper",
                  boxShadow: theme.shadows[4]
                }
              },
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(MyLocation, {})
            }
          ) }),
          enableFullscreen && /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip$1, { title: isFullscreen ? "全画面終了" : "全画面表示", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            IconButton,
            {
              color: "default",
              onClick: handleFullscreenToggle,
              sx: {
                backgroundColor: "background.paper",
                boxShadow: theme.shadows[2],
                "&:hover": {
                  backgroundColor: "background.paper",
                  boxShadow: theme.shadows[4]
                }
              },
              children: isFullscreen ? /* @__PURE__ */ jsxRuntimeExports.jsx(CloseIcon, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(Fullscreen, {})
            }
          ) })
        ]
      }
    ),
    isMobile && !loading && showControls && /* @__PURE__ */ jsxRuntimeExports.jsx(Zoom, { in: showControls, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      Box,
      {
        sx: {
          position: "absolute",
          bottom: theme.spacing(2),
          left: "50%",
          transform: "translateX(-50%)",
          backgroundColor: "rgba(0, 0, 0, 0.7)",
          color: "white",
          padding: theme.spacing(1, 2),
          borderRadius: 2,
          zIndex: 1e3,
          fontSize: "12px",
          textAlign: "center"
        },
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "caption", color: "inherit", children: "長押しでコントロール表示 • ピンチでズーム • ダブルタップで拡大" })
      }
    ) }),
    userLocation && map && /* @__PURE__ */ jsxRuntimeExports.jsx(
      Box,
      {
        sx: {
          position: "absolute",
          bottom: theme.spacing(1),
          left: theme.spacing(1),
          backgroundColor: "primary.main",
          color: "white",
          padding: theme.spacing(0.5, 1),
          borderRadius: 1,
          fontSize: "12px",
          zIndex: 1e3
        },
        children: "現在地表示中"
      }
    ),
    markers.length === 0 && !loading && /* @__PURE__ */ jsxRuntimeExports.jsxs(
      Box,
      {
        sx: {
          position: "absolute",
          top: "50%",
          left: "50%",
          transform: "translate(-50%, -50%)",
          textAlign: "center",
          backgroundColor: "rgba(255, 255, 255, 0.9)",
          padding: 3,
          borderRadius: 1,
          boxShadow: 2
        },
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(LocationOn, { sx: { fontSize: 48, color: "text.secondary", mb: 2 } }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", color: "text.secondary", children: "表示する建築物がありません" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", sx: { mt: 1 }, children: "フィルターを調整するか、検索条件を変更してください" })
        ]
      }
    )
  ] });
};

const DEFAULT_TTL = 5 * 60 * 1e3;
const MAX_CACHE_SIZE = 100;
const CLEANUP_THRESHOLD = 120;
const MEMORY_CHECK_INTERVAL = 30 * 1e3;
const queryCache = {};
if (typeof window !== "undefined") {
  setInterval(performCacheCleanup, MEMORY_CHECK_INTERVAL);
}
async function getCachedQuery(cacheKey, queryFn, ttl = DEFAULT_TTL) {
  const now = Date.now();
  const cachedItem = queryCache[cacheKey];
  if (cachedItem && now - cachedItem.timestamp < cachedItem.ttl) {
    cachedItem.lastAccessed = now;
    cachedItem.accessCount++;
    console.log(`🔵 Cache hit for: ${cacheKey.substring(0, 50)}...`);
    return cachedItem.data;
  }
  console.log(`🟠 Cache miss for: ${cacheKey.substring(0, 50)}...`);
  const result = await queryFn();
  if (Object.keys(queryCache).length >= CLEANUP_THRESHOLD) {
    performCacheCleanup();
  }
  queryCache[cacheKey] = {
    data: result,
    timestamp: now,
    ttl,
    lastAccessed: now,
    accessCount: 1
  };
  return result;
}
function generateCacheKey(sql, params = []) {
  const paramsStr = JSON.stringify(params);
  return `sql:${sql}|params:${paramsStr}`;
}
function performCacheCleanup() {
  const now = Date.now();
  const keys = Object.keys(queryCache);
  const initialSize = keys.length;
  let expiredCount = 0;
  keys.forEach((key) => {
    const item = queryCache[key];
    if (now - item.timestamp > item.ttl) {
      delete queryCache[key];
      expiredCount++;
    }
  });
  const remainingKeys = Object.keys(queryCache);
  if (remainingKeys.length > MAX_CACHE_SIZE) {
    const sortedKeys = remainingKeys.sort((a, b) => {
      const itemA = queryCache[a];
      const itemB = queryCache[b];
      const accessDiff = itemA.lastAccessed - itemB.lastAccessed;
      if (accessDiff !== 0) return accessDiff;
      return itemA.accessCount - itemB.accessCount;
    });
    const itemsToRemove = remainingKeys.length - MAX_CACHE_SIZE;
    for (let i = 0; i < itemsToRemove; i++) {
      delete queryCache[sortedKeys[i]];
    }
    console.log(`🧹 Cache cleanup: removed ${expiredCount} expired + ${itemsToRemove} LRU items (${initialSize} → ${Object.keys(queryCache).length})`);
  } else if (expiredCount > 0) {
    console.log(`🧹 Cache cleanup: removed ${expiredCount} expired items (${initialSize} → ${Object.keys(queryCache).length})`);
  }
}

let dbWorker = null;
let initPromise$1 = null;
const BASE_PATH$1 = "/archi-site/".replace(/\/$/, "");
async function initDatabase$1() {
  if (dbWorker) {
    return dbWorker;
  }
  if (initPromise$1) {
    return initPromise$1;
  }
  console.log(`Initializing database from ${BASE_PATH$1}/db/archimap.sqlite`);
  let dbConfig;
  try {
    const dbInfoResponse = await fetch(`${BASE_PATH$1}/db/database-info.json`);
    if (dbInfoResponse.ok) {
      const dbInfo = await dbInfoResponse.json();
      console.log(`Database info loaded - size: ${dbInfo.size} bytes, chunks: ${dbInfo.chunks}`);
      dbConfig = {
        serverMode: "full",
        requestChunkSize: dbInfo.chunkSize || 65536,
        // Use actual chunk size
        url: `${BASE_PATH$1}/db/archimap.sqlite`,
        suffixUrl: `${BASE_PATH$1}/db/archimap.sqlite.suffix`,
        // Explicitly specify the uncompressed size for GitHub Pages compatibility
        size: dbInfo.size,
        maxBytesToRead: dbInfo.size
      };
    } else {
      throw new Error("Could not load database metadata");
    }
  } catch (error) {
    console.warn("Could not load database metadata, using fallback configuration:", error);
    dbConfig = {
      serverMode: "full",
      requestChunkSize: 65536,
      // 64KB chunks
      url: `${BASE_PATH$1}/db/archimap.sqlite`,
      suffixUrl: `${BASE_PATH$1}/db/archimap.sqlite.suffix`,
      size: 12730368,
      // Known database size
      maxBytesToRead: 12730368
    };
  }
  initPromise$1 = distExports.createDbWorker(
    [{
      from: "chunks",
      config: dbConfig
    }],
    `${BASE_PATH$1}/sqlite.worker.js`,
    `${BASE_PATH$1}/sql-wasm.wasm`
  ).then((worker) => {
    dbWorker = worker;
    console.log("Database initialized successfully");
    return worker;
  }).catch((error) => {
    console.error("Database initialization failed:", error);
    initPromise$1 = null;
    throw error;
  });
  return initPromise$1;
}
async function executeQuery$1(sql, params = [], useCache = true) {
  const cacheKey = useCache ? generateCacheKey(sql, params) : "";
  if (useCache) {
    return getCachedQuery(
      cacheKey,
      () => executeQueryDirect(sql, params),
      // Determine appropriate TTL based on query type
      // SELECT queries can be cached longer than others
      sql.trim().toLowerCase().startsWith("select") ? 3e5 : 6e4
    );
  }
  return executeQueryDirect(sql, params);
}
async function executeQueryDirect(sql, params = []) {
  const worker = await initDatabase$1();
  try {
    const result = await worker.db.exec(sql, params);
    if (!result || result.length === 0) {
      return [];
    }
    const rows = [];
    const columns = result[0].columns;
    const values = result[0].values;
    for (const value of values) {
      const row = {};
      columns.forEach((column, index) => {
        row[column] = value[index];
      });
      rows.push(row);
    }
    return rows;
  } catch (error) {
    console.error("Query execution failed:", error);
    console.error("SQL:", sql);
    console.error("Params:", params);
    throw error;
  }
}

class AutocompleteService {
  static instance;
  searchIndex = {
    architectures: /* @__PURE__ */ new Map(),
    architects: /* @__PURE__ */ new Map(),
    locations: /* @__PURE__ */ new Map(),
    categories: /* @__PURE__ */ new Map(),
    keywords: /* @__PURE__ */ new Map()
  };
  isIndexBuilt = false;
  recentSearches = [];
  popularSearches = [];
  RECENT_SEARCHES_KEY = "recent-searches";
  MAX_RECENT_SEARCHES = 20;
  constructor() {
    this.loadRecentSearches();
    this.initializePopularSearches();
  }
  static getInstance() {
    if (!AutocompleteService.instance) {
      AutocompleteService.instance = new AutocompleteService();
    }
    return AutocompleteService.instance;
  }
  /**
   * Get autocomplete results for a given query
   */
  async getAutocompleteResults(query, limit = 10) {
    if (!query || query.trim() === "") {
      return {
        suggestions: [],
        categories: [],
        recent: this.recentSearches.slice(0, 5),
        popular: this.popularSearches.slice(0, 5),
        total: 0
      };
    }
    if (!this.isIndexBuilt) {
      await this.buildSearchIndex();
    }
    const normalizedQuery = this.normalizeQuery(query);
    const cacheKey = `autocomplete:${normalizedQuery}:${limit}`;
    return getCachedQuery(
      cacheKey,
      async () => {
        const suggestions = await this.generateSuggestions(normalizedQuery, limit);
        const categories = await this.getCategorySuggestions(normalizedQuery);
        return {
          suggestions,
          categories,
          recent: this.getRecentSuggestions(normalizedQuery),
          popular: this.getPopularSuggestions(normalizedQuery),
          total: suggestions.length
        };
      },
      3e4
      // Cache for 30 seconds
    );
  }
  /**
   * Build comprehensive search index for fast autocomplete
   */
  async buildSearchIndex() {
    console.log("Building autocomplete search index...");
    try {
      await this.indexArchitectures();
      await this.indexArchitects();
      await this.indexLocations();
      await this.indexCategories();
      await this.buildKeywordMappings();
      this.isIndexBuilt = true;
      console.log("Search index built successfully");
    } catch (error) {
      console.error("Failed to build search index:", error);
      throw error;
    }
  }
  /**
   * Index architecture names with readings and variations
   */
  async indexArchitectures() {
    const architectures = await executeQuery$1(`
      SELECT 
        Z_PK as id,
        ZAR_TITLE as name,
        ZAR_ARCHITECT as architectName,
        ZAR_PREFECTURE as prefecture,
        ZAR_CATEGORY as category
      FROM ZCDARCHITECTURE
      WHERE ZAR_TITLE IS NOT NULL 
        AND ZAR_TITLE != ''
        AND ZAR_TAG NOT LIKE '%の追加建築%'
      ORDER BY ZAR_TITLE
    `, [], false);
    const nameCountMap = /* @__PURE__ */ new Map();
    architectures.forEach((arch) => {
      const count = nameCountMap.get(arch.name) || 0;
      nameCountMap.set(arch.name, count + 1);
    });
    architectures.forEach((arch) => {
      const suggestion = {
        id: `arch-${arch.id}`,
        text: arch.name,
        type: "architecture",
        count: nameCountMap.get(arch.name) || 1,
        icon: "architecture",
        relevanceScore: this.calculateRelevanceScore(arch.name, "architecture")
      };
      this.searchIndex.architectures.set(arch.name.toLowerCase(), suggestion);
      this.addSearchVariations(arch.name, suggestion);
    });
  }
  /**
   * Index architect names
   */
  async indexArchitects() {
    const architects = await executeQuery$1(`
      SELECT DISTINCT
        Z_PK as id,
        ZAT_ARCHITECT as name,
        ZAT_OFFICE as office
      FROM ZCDARCHITECT
      WHERE ZAT_ARCHITECT IS NOT NULL 
        AND ZAT_ARCHITECT != ''
      ORDER BY ZAT_ARCHITECT
    `, [], false);
    architects.forEach((architect) => {
      const suggestion = {
        id: `architect-${architect.id}`,
        text: architect.name,
        type: "architect",
        count: 1,
        icon: "person",
        relevanceScore: this.calculateRelevanceScore(architect.name, "architect")
      };
      this.searchIndex.architects.set(architect.name.toLowerCase(), suggestion);
      if (architect.office && architect.office !== architect.name) {
        const officeSuggestion = {
          id: `office-${architect.id}`,
          text: architect.office,
          type: "architect",
          count: 1,
          icon: "business",
          relevanceScore: this.calculateRelevanceScore(architect.office, "architect")
        };
        this.searchIndex.architects.set(architect.office.toLowerCase(), officeSuggestion);
        this.addSearchVariations(architect.office, officeSuggestion);
      }
      this.addSearchVariations(architect.name, suggestion);
    });
  }
  /**
   * Index location names (prefectures and addresses)
   */
  async indexLocations() {
    const locations = await executeQuery$1(`
      SELECT 
        ZAR_PREFECTURE as prefecture,
        COUNT(*) as count
      FROM ZCDARCHITECTURE
      WHERE ZAR_PREFECTURE IS NOT NULL 
        AND ZAR_PREFECTURE != ''
        AND ZAR_TAG NOT LIKE '%の追加建築%'
      GROUP BY ZAR_PREFECTURE
      ORDER BY count DESC
    `, [], false);
    locations.forEach((location) => {
      const suggestion = {
        id: `location-${location.prefecture}`,
        text: location.prefecture,
        type: "location",
        count: location.count,
        icon: "location_on",
        relevanceScore: this.calculateRelevanceScore(location.prefecture, "location")
      };
      this.searchIndex.locations.set(location.prefecture.toLowerCase(), suggestion);
      this.addSearchVariations(location.prefecture, suggestion);
    });
  }
  /**
   * Index category names
   */
  async indexCategories() {
    const categories = await executeQuery$1(`
      SELECT 
        ZAR_CATEGORY as category,
        ZAR_BIGCATEGORY as bigCategory,
        COUNT(*) as count
      FROM ZCDARCHITECTURE
      WHERE ZAR_CATEGORY IS NOT NULL 
        AND ZAR_CATEGORY != ''
        AND ZAR_TAG NOT LIKE '%の追加建築%'
      GROUP BY ZAR_CATEGORY, ZAR_BIGCATEGORY
      ORDER BY count DESC
    `, [], false);
    categories.forEach((category) => {
      const suggestion = {
        id: `category-${category.category}`,
        text: category.category,
        type: "category",
        count: category.count,
        icon: "category",
        relevanceScore: this.calculateRelevanceScore(category.category, "category")
      };
      this.searchIndex.categories.set(category.category.toLowerCase(), suggestion);
      this.addSearchVariations(category.category, suggestion);
      if (category.bigCategory && category.bigCategory !== category.category) {
        const bigCategorySuggestion = {
          id: `bigcategory-${category.bigCategory}`,
          text: category.bigCategory,
          type: "category",
          count: category.count,
          icon: "category",
          relevanceScore: this.calculateRelevanceScore(category.bigCategory, "category")
        };
        this.searchIndex.categories.set(category.bigCategory.toLowerCase(), bigCategorySuggestion);
        this.addSearchVariations(category.bigCategory, bigCategorySuggestion);
      }
    });
  }
  /**
   * Build keyword mappings for partial matching
   */
  async buildKeywordMappings() {
    const allSuggestions = [
      ...this.searchIndex.architectures.values(),
      ...this.searchIndex.architects.values(),
      ...this.searchIndex.locations.values(),
      ...this.searchIndex.categories.values()
    ];
    allSuggestions.forEach((suggestion) => {
      const words = this.extractKeywords(suggestion.text);
      words.forEach((word) => {
        const existing = this.searchIndex.keywords.get(word) || [];
        existing.push(suggestion);
        this.searchIndex.keywords.set(word, existing);
      });
    });
  }
  /**
   * Generate suggestions based on query
   */
  async generateSuggestions(query, limit) {
    const suggestions = [];
    const queryLower = query.toLowerCase();
    const exactMatches = this.findExactMatches(queryLower);
    suggestions.push(...exactMatches);
    const startsWithMatches = this.findStartsWithMatches(queryLower);
    suggestions.push(...startsWithMatches.filter(
      (s) => !suggestions.some((existing) => existing.id === s.id)
    ));
    const containsMatches = this.findContainsMatches(queryLower);
    suggestions.push(...containsMatches.filter(
      (s) => !suggestions.some((existing) => existing.id === s.id)
    ));
    const fuzzyMatches = this.findFuzzyMatches(queryLower);
    suggestions.push(...fuzzyMatches.filter(
      (s) => !suggestions.some((existing) => existing.id === s.id)
    ));
    return suggestions.sort((a, b) => (b.relevanceScore || 0) - (a.relevanceScore || 0)).slice(0, limit);
  }
  /**
   * Find exact matches across all indices
   */
  findExactMatches(query) {
    const matches = [];
    [
      this.searchIndex.architectures,
      this.searchIndex.architects,
      this.searchIndex.locations,
      this.searchIndex.categories
    ].forEach((index) => {
      const match = index.get(query);
      if (match) {
        matches.push({ ...match, relevanceScore: (match.relevanceScore || 0) + 100 });
      }
    });
    return matches;
  }
  /**
   * Find starts-with matches
   */
  findStartsWithMatches(query) {
    const matches = [];
    [
      this.searchIndex.architectures,
      this.searchIndex.architects,
      this.searchIndex.locations,
      this.searchIndex.categories
    ].forEach((index) => {
      index.forEach((suggestion, key) => {
        if (key.startsWith(query) && key !== query) {
          matches.push({ ...suggestion, relevanceScore: (suggestion.relevanceScore || 0) + 50 });
        }
      });
    });
    return matches;
  }
  /**
   * Find contains matches
   */
  findContainsMatches(query) {
    const matches = [];
    [
      this.searchIndex.architectures,
      this.searchIndex.architects,
      this.searchIndex.locations,
      this.searchIndex.categories
    ].forEach((index) => {
      index.forEach((suggestion, key) => {
        if (key.includes(query) && !key.startsWith(query)) {
          matches.push({ ...suggestion, relevanceScore: (suggestion.relevanceScore || 0) + 25 });
        }
      });
    });
    return matches;
  }
  /**
   * Find fuzzy matches for typos and variations
   */
  findFuzzyMatches(query) {
    const matches = [];
    const words = this.extractKeywords(query);
    words.forEach((word) => {
      const keywordMatches = this.searchIndex.keywords.get(word) || [];
      keywordMatches.forEach((suggestion) => {
        matches.push({ ...suggestion, relevanceScore: (suggestion.relevanceScore || 0) + 10 });
      });
    });
    return matches;
  }
  /**
   * Get category suggestions
   */
  async getCategorySuggestions(query) {
    return [];
  }
  /**
   * Get recent search suggestions that match query
   */
  getRecentSuggestions(query) {
    return this.recentSearches.filter(
      (search) => search.query.toLowerCase().includes(query.toLowerCase())
    ).slice(0, 3);
  }
  /**
   * Get popular search suggestions that match query
   */
  getPopularSuggestions(query) {
    return this.popularSearches.filter(
      (search) => search.query.toLowerCase().includes(query.toLowerCase())
    ).slice(0, 3);
  }
  /**
   * Calculate relevance score for a suggestion
   */
  calculateRelevanceScore(text, type) {
    let score = 0;
    switch (type) {
      case "architecture":
        score += 50;
        break;
      case "architect":
        score += 40;
        break;
      case "location":
        score += 30;
        break;
      case "category":
        score += 20;
        break;
    }
    score += Math.max(0, 50 - text.length);
    return score;
  }
  /**
   * Add search variations for better matching
   */
  addSearchVariations(text, suggestion) {
    const variations = this.generateTextVariations(text);
    variations.forEach((variation) => {
      if (!this.searchIndex.keywords.has(variation)) {
        this.searchIndex.keywords.set(variation, []);
      }
      this.searchIndex.keywords.get(variation).push(suggestion);
    });
  }
  /**
   * Generate text variations for better matching
   */
  generateTextVariations(text) {
    const variations = /* @__PURE__ */ new Set();
    const normalized = this.normalizeQuery(text);
    variations.add(normalized);
    const words = this.extractKeywords(normalized);
    words.forEach((word) => variations.add(word));
    if (words.length > 1) {
      for (let i = 0; i < words.length - 1; i++) {
        variations.add(words.slice(i, i + 2).join(" "));
      }
    }
    return Array.from(variations);
  }
  /**
   * Extract keywords from text
   */
  extractKeywords(text) {
    return text.toLowerCase().replace(/[^\w\s]/g, " ").split(/\s+/).filter((word) => word.length > 1).filter((word) => !this.isStopWord(word));
  }
  /**
   * Check if word is a stop word
   */
  isStopWord(word) {
    const stopWords = ["の", "に", "を", "は", "が", "で", "と", "から", "まで", "より"];
    return stopWords.includes(word);
  }
  /**
   * Normalize query for consistent matching
   */
  normalizeQuery(query) {
    return query.toLowerCase().trim().replace(/\s+/g, " ");
  }
  /**
   * Add search to recent searches
   */
  addRecentSearch(query, resultCount) {
    const search = {
      query,
      timestamp: Date.now(),
      resultCount
    };
    this.recentSearches = this.recentSearches.filter((s) => s.query !== query);
    this.recentSearches.unshift(search);
    this.recentSearches = this.recentSearches.slice(0, this.MAX_RECENT_SEARCHES);
    this.saveRecentSearches();
  }
  /**
   * Load recent searches from localStorage
   */
  loadRecentSearches() {
    try {
      const stored = localStorage.getItem(this.RECENT_SEARCHES_KEY);
      if (stored) {
        this.recentSearches = JSON.parse(stored);
      }
    } catch (error) {
      console.warn("Failed to load recent searches:", error);
      this.recentSearches = [];
    }
  }
  /**
   * Save recent searches to localStorage
   */
  saveRecentSearches() {
    try {
      localStorage.setItem(this.RECENT_SEARCHES_KEY, JSON.stringify(this.recentSearches));
    } catch (error) {
      console.warn("Failed to save recent searches:", error);
    }
  }
  /**
   * Initialize popular searches (could be fetched from analytics)
   */
  initializePopularSearches() {
    this.popularSearches = [
      { query: "東京", searchCount: 1500, trend: "stable" },
      { query: "安藤忠雄", searchCount: 1200, trend: "rising" },
      { query: "住宅", searchCount: 1e3, trend: "stable" },
      { query: "大阪", searchCount: 800, trend: "stable" },
      { query: "隈研吾", searchCount: 750, trend: "rising" }
    ];
  }
  /**
   * Clear all caches and rebuild index
   */
  async refreshIndex() {
    this.searchIndex = {
      architectures: /* @__PURE__ */ new Map(),
      architects: /* @__PURE__ */ new Map(),
      locations: /* @__PURE__ */ new Map(),
      categories: /* @__PURE__ */ new Map(),
      keywords: /* @__PURE__ */ new Map()
    };
    this.isIndexBuilt = false;
    await this.buildSearchIndex();
  }
}

const useHapticFeedback = () => {
  const lastFeedbackTime = reactExports.useRef(0);
  const feedbackCooldown = 50;
  const capabilities = {
    isSupported: typeof navigator !== "undefined" && ("vibrate" in navigator || "hapticFeedback" in navigator || "getGamepads" in navigator),
    hasVibrationAPI: typeof navigator !== "undefined" && "vibrate" in navigator,
    hasHapticFeedback: typeof navigator !== "undefined" && "hapticFeedback" in navigator,
    hasGamepadVibration: typeof navigator !== "undefined" && "getGamepads" in navigator,
    supportsIntensity: false,
    // Will be detected at runtime
    supportsDuration: typeof navigator !== "undefined" && "vibrate" in navigator
  };
  const checkVibratePatternSupport = reactExports.useCallback(() => {
    if (!capabilities.hasVibrationAPI) return false;
    try {
      const result = navigator.vibrate([1]);
      return result !== false;
    } catch {
      return false;
    }
  }, [capabilities.hasVibrationAPI]);
  const getVibrationPattern = reactExports.useCallback((type) => {
    switch (type) {
      case "selection":
      case "light":
        return 10;
      case "impact":
      case "medium":
        return 25;
      case "heavy":
        return 50;
      case "notification":
        return [50, 50, 50];
      case "success":
        return [25, 25, 25, 25, 25];
      case "warning":
        return [100, 50, 100];
      case "error":
        return [200, 100, 200, 100, 200];
      default:
        return 25;
    }
  }, []);
  const triggerIOSHaptic = reactExports.useCallback((type) => {
    if (typeof window !== "undefined" && window.TapticEngine) {
      try {
        switch (type) {
          case "selection":
            window.TapticEngine.selection();
            return true;
          case "impact":
          case "light":
            window.TapticEngine.impact({ style: "light" });
            return true;
          case "medium":
            window.TapticEngine.impact({ style: "medium" });
            return true;
          case "heavy":
            window.TapticEngine.impact({ style: "heavy" });
            return true;
          case "notification":
          case "success":
            window.TapticEngine.notification({ type: "success" });
            return true;
          case "warning":
            window.TapticEngine.notification({ type: "warning" });
            return true;
          case "error":
            window.TapticEngine.notification({ type: "error" });
            return true;
        }
      } catch (error) {
        console.debug("iOS Haptic feedback failed:", error);
      }
    }
    return false;
  }, []);
  const triggerAndroidHaptic = reactExports.useCallback((type) => {
    if (typeof window !== "undefined" && window.AndroidInterface?.hapticFeedback) {
      try {
        const androidType = type === "selection" ? "VIRTUAL_KEY" : type === "impact" ? "LONG_PRESS" : type === "success" ? "CONTEXT_CLICK" : "VIRTUAL_KEY";
        window.AndroidInterface.hapticFeedback(androidType);
        return true;
      } catch (error) {
        console.debug("Android Haptic feedback failed:", error);
      }
    }
    return false;
  }, []);
  const triggerGamepadVibration = reactExports.useCallback((type, options) => {
    if (!capabilities.hasGamepadVibration) return false;
    try {
      const gamepads = navigator.getGamepads();
      for (const gamepad of gamepads) {
        if (gamepad && gamepad.vibrationActuator) {
          const intensity = options.intensity || 0.5;
          const duration = options.duration || 100;
          let weakMagnitude = 0;
          let strongMagnitude = 0;
          switch (type) {
            case "light":
            case "selection":
              weakMagnitude = intensity * 0.3;
              break;
            case "medium":
            case "impact":
              strongMagnitude = intensity * 0.5;
              break;
            case "heavy":
            case "error":
              strongMagnitude = intensity * 0.8;
              break;
            case "success":
              weakMagnitude = intensity * 0.4;
              strongMagnitude = intensity * 0.2;
              break;
          }
          gamepad.vibrationActuator.playEffect("dual-rumble", {
            duration,
            weakMagnitude,
            strongMagnitude
          });
          return true;
        }
      }
    } catch (error) {
      console.debug("Gamepad vibration failed:", error);
    }
    return false;
  }, [capabilities.hasGamepadVibration]);
  const triggerWebVibration = reactExports.useCallback((type) => {
    if (!capabilities.hasVibrationAPI) return false;
    try {
      const pattern = getVibrationPattern(type);
      const result = navigator.vibrate(pattern);
      return result !== false;
    } catch (error) {
      console.debug("Web vibration failed:", error);
      return false;
    }
  }, [capabilities.hasVibrationAPI, getVibrationPattern]);
  const triggerAudioFallback = reactExports.useCallback((type) => {
    try {
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();
      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);
      let frequency = 200;
      let duration = 0.05;
      let volume = 0.1;
      switch (type) {
        case "selection":
        case "light":
          frequency = 400;
          duration = 0.02;
          volume = 0.05;
          break;
        case "impact":
        case "medium":
          frequency = 300;
          duration = 0.05;
          volume = 0.08;
          break;
        case "heavy":
        case "error":
          frequency = 150;
          duration = 0.1;
          volume = 0.1;
          break;
        case "success":
          frequency = 500;
          duration = 0.08;
          volume = 0.06;
          break;
      }
      oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);
      gainNode.gain.setValueAtTime(volume, audioContext.currentTime);
      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
      oscillator.start(audioContext.currentTime);
      oscillator.stop(audioContext.currentTime + duration);
      return true;
    } catch (error) {
      console.debug("Audio fallback failed:", error);
      return false;
    }
  }, []);
  const triggerVisualFallback = reactExports.useCallback((type) => {
    try {
      const flashElement = document.createElement("div");
      flashElement.style.position = "fixed";
      flashElement.style.top = "0";
      flashElement.style.left = "0";
      flashElement.style.width = "100%";
      flashElement.style.height = "100%";
      flashElement.style.pointerEvents = "none";
      flashElement.style.zIndex = "9999";
      flashElement.style.transition = "opacity 0.1s ease-out";
      let backgroundColor = "rgba(255, 255, 255, 0.1)";
      switch (type) {
        case "success":
          backgroundColor = "rgba(76, 175, 80, 0.1)";
          break;
        case "warning":
          backgroundColor = "rgba(255, 193, 7, 0.1)";
          break;
        case "error":
          backgroundColor = "rgba(244, 67, 54, 0.1)";
          break;
      }
      flashElement.style.backgroundColor = backgroundColor;
      document.body.appendChild(flashElement);
      requestAnimationFrame(() => {
        flashElement.style.opacity = "0";
        setTimeout(() => {
          document.body.removeChild(flashElement);
        }, 100);
      });
      return true;
    } catch (error) {
      console.debug("Visual fallback failed:", error);
      return false;
    }
  }, []);
  const triggerHapticFeedback = reactExports.useCallback((type, options = {}) => {
    const now = Date.now();
    if (now - lastFeedbackTime.current < feedbackCooldown) {
      return false;
    }
    lastFeedbackTime.current = now;
    const { fallback = true } = options;
    if (triggerIOSHaptic(type)) return true;
    if (triggerAndroidHaptic(type)) return true;
    if (triggerGamepadVibration(type, options)) return true;
    if (triggerWebVibration(type)) return true;
    if (fallback) {
      if (type === "selection" || type === "light") {
        return triggerAudioFallback(type);
      }
      if (type === "success" || type === "warning" || type === "error") {
        return triggerVisualFallback(type);
      }
      return triggerAudioFallback(type);
    }
    return false;
  }, [
    triggerIOSHaptic,
    triggerAndroidHaptic,
    triggerGamepadVibration,
    triggerWebVibration,
    triggerAudioFallback,
    triggerVisualFallback
  ]);
  const triggerSelectionFeedback = reactExports.useCallback(() => {
    return triggerHapticFeedback("selection");
  }, [triggerHapticFeedback]);
  const triggerImpactFeedback = reactExports.useCallback((intensity = "medium") => {
    return triggerHapticFeedback(intensity);
  }, [triggerHapticFeedback]);
  const triggerNotificationFeedback = reactExports.useCallback((type = "success") => {
    return triggerHapticFeedback(type);
  }, [triggerHapticFeedback]);
  const testHapticSupport = reactExports.useCallback(async () => {
    const testCapabilities = { ...capabilities };
    if (capabilities.hasVibrationAPI) {
      testCapabilities.supportsDuration = checkVibratePatternSupport();
    }
    if (capabilities.hasGamepadVibration) {
      try {
        const gamepads = navigator.getGamepads();
        testCapabilities.hasGamepadVibration = Array.from(gamepads).some(
          (gamepad) => gamepad?.vibrationActuator
        );
      } catch {
        testCapabilities.hasGamepadVibration = false;
      }
    }
    return testCapabilities;
  }, [capabilities, checkVibratePatternSupport]);
  return {
    triggerHapticFeedback,
    triggerSelectionFeedback,
    triggerImpactFeedback,
    triggerNotificationFeedback,
    testHapticSupport,
    capabilities,
    isSupported: capabilities.isSupported
  };
};

const TouchOptimizedSearchBar = ({
  onSearch,
  onVoiceSearch,
  onCameraSearch,
  onRandomDiscovery,
  placeholder = "建築名、建築家、場所で検索...",
  autoFocus = false,
  gestureEnabled = true,
  showAdvancedOptions = true,
  recentSearches = [],
  value: controlledValue,
  onChange
}) => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("md"));
  const isTouch = "ontouchstart" in window;
  const [localValue, setLocalValue] = reactExports.useState(controlledValue || "");
  const [suggestions, setSuggestions] = reactExports.useState([]);
  const [showSuggestions, setShowSuggestions] = reactExports.useState(false);
  const [isSearching, setIsSearching] = reactExports.useState(false);
  const [recentExpanded, setRecentExpanded] = reactExports.useState(false);
  const inputRef = reactExports.useRef(null);
  const searchTimeout = reactExports.useRef();
  const autocompleteService = reactExports.useRef(new AutocompleteService());
  useGestureNavigation();
  const { triggerHapticFeedback } = useHapticFeedback();
  const value = controlledValue !== void 0 ? controlledValue : localValue;
  const handleValueChange = (newValue) => {
    if (controlledValue !== void 0) {
      onChange?.(newValue);
    } else {
      setLocalValue(newValue);
    }
  };
  const updateSuggestions = reactExports.useCallback(async (query) => {
    if (query.length < 2) {
      setSuggestions([]);
      setShowSuggestions(false);
      return;
    }
    try {
      setIsSearching(true);
      const results = await autocompleteService.current.getAutocompleteResults(query, 8);
      setSuggestions(results.suggestions);
      setShowSuggestions(true);
    } catch (error) {
      console.error("Autocomplete error:", error);
      setSuggestions([]);
    } finally {
      setIsSearching(false);
    }
  }, []);
  const handleInputChange = (event) => {
    const newValue = event.target.value;
    handleValueChange(newValue);
    if (searchTimeout.current) {
      clearTimeout(searchTimeout.current);
    }
    searchTimeout.current = setTimeout(() => {
      updateSuggestions(newValue);
    }, 300);
  };
  const handleSearch = reactExports.useCallback((searchQuery) => {
    const query = searchQuery || value;
    if (query.trim()) {
      if (isTouch) {
        triggerHapticFeedback("selection");
      }
      onSearch(query.trim());
      setShowSuggestions(false);
      if (!recentSearches.includes(query.trim())) {
        console.log("Adding to recent searches:", query.trim());
      }
    }
  }, [value, onSearch, isTouch, triggerHapticFeedback, recentSearches]);
  const handleSuggestionClick = (suggestion) => {
    handleValueChange(suggestion.text);
    handleSearch(suggestion.text);
    if (isTouch) {
      triggerHapticFeedback("impact");
    }
  };
  const handleClear = () => {
    handleValueChange("");
    setSuggestions([]);
    setShowSuggestions(false);
    inputRef.current?.focus();
    if (isTouch) {
      triggerHapticFeedback("selection");
    }
  };
  const handleKeyDown = (event) => {
    if (event.key === "Enter") {
      event.preventDefault();
      handleSearch();
    } else if (event.key === "Escape") {
      setShowSuggestions(false);
    }
  };
  const handleVoiceSearch = () => {
    if (isTouch) {
      triggerHapticFeedback("impact");
    }
    onVoiceSearch?.();
  };
  const handleCameraSearch = () => {
    if (isTouch) {
      triggerHapticFeedback("impact");
    }
    onCameraSearch?.();
  };
  const handleRandomDiscovery = () => {
    if (isTouch) {
      triggerHapticFeedback("success");
    }
    onRandomDiscovery?.();
  };
  const handleGestureStart = (event) => {
    if (!gestureEnabled) return;
    const touch = event.touches[0];
    const startX = touch.clientX;
    const handleGestureMove = (moveEvent) => {
      const currentTouch = moveEvent.touches[0];
      const deltaX = currentTouch.clientX - startX;
      if (deltaX > 100 && value) {
        handleClear();
        document.removeEventListener("touchmove", handleGestureMove);
        document.removeEventListener("touchend", handleGestureEnd);
      }
    };
    const handleGestureEnd = () => {
      document.removeEventListener("touchmove", handleGestureMove);
      document.removeEventListener("touchend", handleGestureEnd);
    };
    document.addEventListener("touchmove", handleGestureMove);
    document.addEventListener("touchend", handleGestureEnd);
  };
  reactExports.useEffect(() => {
    return () => {
      if (searchTimeout.current) {
        clearTimeout(searchTimeout.current);
      }
    };
  }, []);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { position: "relative", width: "100%" }, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      TextField,
      {
        ref: inputRef,
        fullWidth: true,
        value,
        onChange: handleInputChange,
        onKeyDown: handleKeyDown,
        onTouchStart: handleGestureStart,
        placeholder,
        autoFocus,
        "data-testid": "search-bar",
        InputProps: {
          startAdornment: /* @__PURE__ */ jsxRuntimeExports.jsx(InputAdornment, { position: "start", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Search,
            {
              sx: {
                color: theme.palette.text.secondary,
                fontSize: isMobile ? 24 : 20
              }
            }
          ) }),
          endAdornment: /* @__PURE__ */ jsxRuntimeExports.jsx(InputAdornment, { position: "end", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", gap: 0.5 }, children: [
            value && /* @__PURE__ */ jsxRuntimeExports.jsx(
              IconButton,
              {
                onClick: handleClear,
                size: isMobile ? "medium" : "small",
                "aria-label": "検索をクリア",
                sx: {
                  minWidth: 44,
                  minHeight: 44,
                  "@media (max-width:600px)": {
                    minWidth: 48,
                    minHeight: 48
                  }
                },
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(Clear, {})
              }
            ),
            showAdvancedOptions && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
              onVoiceSearch && /* @__PURE__ */ jsxRuntimeExports.jsx(
                IconButton,
                {
                  onClick: handleVoiceSearch,
                  size: isMobile ? "medium" : "small",
                  "aria-label": "音声検索",
                  sx: {
                    minWidth: 44,
                    minHeight: 44,
                    "@media (max-width:600px)": {
                      minWidth: 48,
                      minHeight: 48
                    }
                  },
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(MicIcon, {})
                }
              ),
              onCameraSearch && /* @__PURE__ */ jsxRuntimeExports.jsx(
                IconButton,
                {
                  onClick: handleCameraSearch,
                  size: isMobile ? "medium" : "small",
                  "aria-label": "画像検索",
                  sx: {
                    minWidth: 44,
                    minHeight: 44,
                    "@media (max-width:600px)": {
                      minWidth: 48,
                      minHeight: 48
                    }
                  },
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(CameraIcon, {})
                }
              ),
              onRandomDiscovery && /* @__PURE__ */ jsxRuntimeExports.jsx(
                IconButton,
                {
                  onClick: handleRandomDiscovery,
                  size: isMobile ? "medium" : "small",
                  "aria-label": "ランダム発見",
                  sx: {
                    minWidth: 44,
                    minHeight: 44,
                    "@media (max-width:600px)": {
                      minWidth: 48,
                      minHeight: 48
                    }
                  },
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(ExploreIcon, {})
                }
              )
            ] })
          ] }) }),
          sx: {
            borderRadius: 3,
            backgroundColor: theme.palette.background.paper,
            "& .MuiOutlinedInput-input": {
              padding: isMobile ? "16px 14px" : "12px 14px",
              fontSize: isMobile ? 16 : 14
              // Prevents zoom on iOS
            },
            "&:hover .MuiOutlinedInput-notchedOutline": {
              borderColor: theme.palette.secondary.main,
              borderWidth: 2
            },
            "&.Mui-focused .MuiOutlinedInput-notchedOutline": {
              borderColor: theme.palette.primary.main,
              borderWidth: 2
            }
          }
        }
      }
    ),
    !value && recentSearches.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx(Fade, { in: !showSuggestions, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: {
      mt: 1,
      display: "flex",
      flexWrap: "wrap",
      gap: 1,
      maxHeight: recentExpanded ? "none" : 60,
      overflow: "hidden"
    }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "caption", sx: { width: "100%", color: "text.secondary" }, children: "最近の検索" }),
      recentSearches.slice(0, recentExpanded ? void 0 : 3).map((search, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(
        Chip,
        {
          label: search,
          size: "small",
          onClick: () => handleSuggestionClick({
            text: search}),
          sx: {
            height: 32,
            fontSize: "0.875rem",
            "&:hover": {
              backgroundColor: theme.palette.action.hover
            },
            "&:active": {
              transform: "scale(0.95)"
            }
          }
        },
        index
      )),
      recentSearches.length > 3 && /* @__PURE__ */ jsxRuntimeExports.jsx(
        Chip,
        {
          label: recentExpanded ? "折りたたむ" : `他${recentSearches.length - 3}件`,
          size: "small",
          variant: "outlined",
          onClick: () => setRecentExpanded(!recentExpanded)
        }
      )
    ] }) }),
    showSuggestions && suggestions.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx(Fade, { in: showSuggestions, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      Box,
      {
        sx: {
          position: "absolute",
          top: "100%",
          left: 0,
          right: 0,
          zIndex: 1e3,
          mt: 1,
          backgroundColor: theme.palette.background.paper,
          borderRadius: 2,
          boxShadow: theme.shadows[8],
          border: `1px solid ${theme.palette.divider}`,
          maxHeight: 300,
          overflow: "auto"
        },
        "data-testid": "autocomplete-suggestions",
        children: suggestions.map((suggestion, index) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
          Box,
          {
            onClick: () => handleSuggestionClick(suggestion),
            "data-testid": "suggestion-item",
            sx: {
              p: 2,
              cursor: "pointer",
              display: "flex",
              alignItems: "center",
              gap: 2,
              minHeight: 48,
              // Touch-friendly height
              borderBottom: index < suggestions.length - 1 ? `1px solid ${theme.palette.divider}` : "none",
              "&:hover": {
                backgroundColor: theme.palette.action.hover
              },
              "&:active": {
                backgroundColor: theme.palette.action.selected,
                transform: "scale(0.98)"
              },
              transition: "all 0.1s ease-in-out"
            },
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { sx: { color: "text.secondary", fontSize: 20 } }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { flex: 1 }, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", sx: { fontWeight: 500 }, children: suggestion.text }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "caption", sx: { color: "text.secondary" }, children: [
                  suggestion.type === "architecture" && "建築",
                  suggestion.type === "architect" && "建築家",
                  suggestion.type === "location" && "場所",
                  suggestion.type === "category" && "カテゴリ",
                  suggestion.count > 0 && ` • ${suggestion.count}件`
                ] })
              ] })
            ]
          },
          suggestion.id
        ))
      }
    ) })
  ] });
};

const ArchitecturePageEnhanced = () => {
  const [architectures, setArchitectures] = reactExports.useState([]);
  const [loading, setLoading] = reactExports.useState(true);
  const [researchLoading, setResearchLoading] = reactExports.useState(true);
  const [totalItems, setTotalItems] = reactExports.useState(0);
  const [currentPage, setCurrentPage] = reactExports.useState(1);
  const [searchValue, setSearchValue] = reactExports.useState(null);
  const [searchInputValue, setSearchInputValue] = reactExports.useState("");
  const [sortBy, setSortBy] = reactExports.useState("year_desc");
  const [researchData, setResearchData] = reactExports.useState(null);
  const [showInsights, setShowInsights] = reactExports.useState(true);
  const [viewMode, setViewMode] = reactExports.useState("grid");
  const [activeFilters, setActiveFilters] = reactExports.useState([]);
  const [recentSearches, setRecentSearches] = reactExports.useState([]);
  const [trendingSearches, setTrendingSearches] = reactExports.useState([]);
  const [searchLoading, setSearchLoading] = reactExports.useState(false);
  const itemsPerPage = viewMode === "grid" ? 12 : viewMode === "list" ? 20 : 200;
  const location = useLocation();
  const navigate = useNavigate();
  const { gestureRef } = useGestureNavigation({
    onSwipeLeft: () => {
      if (currentPage < Math.ceil(totalItems / itemsPerPage)) {
        handlePageChange(null, currentPage + 1);
      }
    },
    onSwipeRight: () => {
      if (currentPage > 1) {
        handlePageChange(null, currentPage - 1);
      }
    },
    onSwipeUp: () => {
      const modes = ["grid", "list", "map"];
      const currentIndex = modes.indexOf(viewMode);
      const nextIndex = (currentIndex + 1) % modes.length;
      setViewMode(modes[nextIndex]);
    },
    onSwipeDown: () => {
      if (searchValue || searchInputValue || activeFilters.length > 0) {
        handleClearFilters();
      }
    }
  });
  const addToRecentSearches = reactExports.useCallback((search) => {
    setRecentSearches((prev) => {
      const filtered = prev.filter((item) => item.value !== search.value);
      const updated = [search, ...filtered].slice(0, 5);
      try {
        localStorage.setItem("archi-recent-searches", JSON.stringify(updated));
      } catch (e) {
        console.warn("Failed to save recent searches to localStorage");
      }
      return updated;
    });
  }, []);
  reactExports.useEffect(() => {
    try {
      const saved = localStorage.getItem("archi-recent-searches");
      if (saved) {
        setRecentSearches(JSON.parse(saved));
      }
    } catch (e) {
      console.warn("Failed to load recent searches from localStorage");
    }
  }, []);
  reactExports.useEffect(() => {
    if (researchData) {
      const trending = [
        ...researchData.architects.slice(0, 3).map((architect) => ({
          label: architect.name,
          value: `architect:${architect.name}`,
          category: "建築家",
          icon: "👨‍🎨",
          count: architect.count,
          type: "trending"
        })),
        ...researchData.regionalAnalysis.slice(0, 2).map((region) => ({
          label: region.prefecture,
          value: `prefecture:${region.prefecture}`,
          category: "地域",
          icon: "📍",
          count: region.projectCount,
          type: "trending"
        }))
      ];
      setTrendingSearches(trending);
    }
  }, [researchData]);
  const handleOptimizedInputChange = reactExports.useCallback((value) => {
    setSearchLoading(true);
    setSearchInputValue(value);
    setTimeout(() => {
      setSearchLoading(false);
    }, 300);
  }, []);
  const handleVoiceSearch = reactExports.useCallback(() => {
    console.log("Voice search activated");
  }, []);
  const handleCameraSearch = reactExports.useCallback(() => {
    console.log("Camera search activated");
    const fileInput = document.createElement("input");
    fileInput.type = "file";
    fileInput.accept = "image/*";
    fileInput.capture = "environment";
    fileInput.onchange = async (event) => {
      const file = event.target.files?.[0];
      if (file) {
        try {
          const imageUrl = URL.createObjectURL(file);
          const searchQuery = prompt(
            "画像が選択されました。検索キーワードを入力してください（将来的には自動認識されます）:"
          );
          if (searchQuery) {
            setSearchInputValue(searchQuery);
            handleOptimizedInputChange(searchQuery);
          }
          URL.revokeObjectURL(imageUrl);
        } catch (error) {
          console.error("Camera search error:", error);
          alert("画像の処理中にエラーが発生しました");
        }
      }
    };
    fileInput.click();
  }, [handleOptimizedInputChange]);
  reactExports.useEffect(() => {
    const fetchInitialData = async () => {
      try {
        setResearchLoading(true);
        const analytics = await getResearchAnalytics();
        setResearchData(analytics);
      } catch (error) {
        console.error("初期データ取得エラー:", error);
        setResearchData({
          awards: [],
          architects: [],
          temporalAnalysis: [],
          regionalAnalysis: [],
          buildingTypeEvolution: [],
          professionalNetworks: []
        });
      } finally {
        setResearchLoading(false);
      }
    };
    fetchInitialData();
  }, []);
  const autocompleteSuggestions = reactExports.useMemo(() => {
    if (!researchData) return [];
    const suggestions = [];
    researchData.awards.slice(0, 5).forEach((award) => {
      suggestions.push({
        label: award.name,
        value: `tag:${award.name}`,
        category: "建築賞",
        icon: "🏆",
        count: award.count
      });
    });
    researchData.architects.slice(0, 10).forEach((architect) => {
      suggestions.push({
        label: architect.name,
        value: `architect:${architect.name}`,
        category: "建築家",
        icon: "👨‍💼",
        count: architect.projectCount
      });
    });
    researchData.buildingTypeEvolution.slice(0, 8).forEach((type) => {
      suggestions.push({
        label: type.category,
        value: `category:${type.category}`,
        category: "カテゴリ",
        icon: "🏛️",
        count: type.totalCount
      });
    });
    researchData.regionalAnalysis.slice(0, 8).forEach((region) => {
      suggestions.push({
        label: region.prefecture,
        value: `prefecture:${region.prefecture}`,
        category: "地域",
        icon: "📍",
        count: region.projectCount
      });
    });
    researchData.temporalAnalysis.forEach((period) => {
      const year = period.decade.replace("年代", "");
      suggestions.push({
        label: period.decade,
        value: `year:${year}`,
        category: "年代",
        icon: "📅",
        count: period.projectCount
      });
    });
    return suggestions;
  }, [researchData]);
  const quickInsights = reactExports.useMemo(() => {
    if (!researchData) return null;
    return {
      topAwards: researchData.awards.slice(0, 3),
      topArchitects: researchData.architects.slice(0, 5),
      popularCategories: researchData.buildingTypeEvolution.slice(0, 5),
      recentTrends: researchData.temporalAnalysis.slice(-3).reverse()
    };
  }, [researchData]);
  const fetchArchitectures = async (page, search = "", sort = sortBy) => {
    setLoading(true);
    try {
      let result;
      if (!search || search.trim() === "") {
        result = await getAllArchitectures$1(page, itemsPerPage);
      } else if (search.startsWith("tag:")) {
        const tag = search.substring(4).trim();
        result = await searchArchitectures("", { tag }, page, itemsPerPage);
      } else if (search.startsWith("year:")) {
        const year = parseInt(search.substring(5).trim());
        result = await searchArchitectures("", { year }, page, itemsPerPage);
      } else if (search.startsWith("architect:")) {
        const architect = search.substring(10).trim();
        result = await searchArchitectures("", { architect }, page, itemsPerPage);
      } else if (search.startsWith("category:")) {
        const category = search.substring(9).trim();
        result = await searchArchitectures("", { category }, page, itemsPerPage);
      } else if (search.startsWith("prefecture:")) {
        const prefecture = search.substring(11).trim();
        result = await searchArchitectures(prefecture, {}, page, itemsPerPage);
      } else {
        result = await searchArchitectures(search, {}, page, itemsPerPage);
      }
      setArchitectures(result.results);
      setTotalItems(result.total);
      setCurrentPage(page);
    } catch (error) {
      console.error("Error fetching architectures:", error);
      setArchitectures([]);
      setTotalItems(0);
    } finally {
      setLoading(false);
    }
  };
  reactExports.useEffect(() => {
    const queryParams = new URLSearchParams(location.search);
    const filters = [];
    let searchTerm = "";
    const filterTypes = [
      { param: "tag", type: "賞/タグ", prefix: "tag:" },
      { param: "architect", type: "建築家", prefix: "architect:" },
      { param: "category", type: "カテゴリ", prefix: "category:" },
      { param: "prefecture", type: "地域", prefix: "prefecture:" },
      { param: "year", type: "年", prefix: "year:" }
    ];
    filterTypes.forEach(({ param, type, prefix }) => {
      const value = queryParams.get(param);
      if (value) {
        filters.push({ type, value, label: value });
        if (!searchTerm) {
          searchTerm = `${prefix}${value}`;
        }
      }
    });
    const search = queryParams.get("search");
    if (search && !searchTerm) {
      searchTerm = search;
      const suggestion = autocompleteSuggestions.find((s) => s.value === search);
      if (suggestion) {
        setSearchValue(suggestion);
      } else {
        setSearchInputValue(search);
      }
    }
    const sort = queryParams.get("sort");
    if (sort) {
      setSortBy(sort);
    }
    setActiveFilters(filters);
    if (searchTerm || filters.length > 0) {
      fetchArchitectures(1, searchTerm || filters[0]?.prefix + filters[0]?.value, sort || sortBy);
    } else {
      fetchArchitectures(1, "", sort || sortBy);
    }
  }, [location.search, autocompleteSuggestions, sortBy]);
  const handlePageChange = (event, value) => {
    setCurrentPage(value);
    const searchTerm = searchValue?.value || searchInputValue;
    fetchArchitectures(value, searchTerm, sortBy);
    window.scrollTo(0, 0);
  };
  const handleSearch = (value) => {
    setSearchValue(value);
    if (value) {
      const queryParams = new URLSearchParams();
      const [type, ...valueParts] = value.value.split(":");
      const searchValue2 = valueParts.join(":");
      if (type === "tag") {
        queryParams.set("tag", searchValue2);
      } else if (type === "architect") {
        queryParams.set("architect", searchValue2);
      } else if (type === "category") {
        queryParams.set("category", searchValue2);
      } else if (type === "prefecture") {
        queryParams.set("prefecture", searchValue2);
      } else if (type === "year") {
        queryParams.set("year", searchValue2);
      } else {
        queryParams.set("search", value.value);
      }
      if (sortBy !== "year_desc") {
        queryParams.set("sort", sortBy);
      }
      navigate({ search: queryParams.toString() });
    } else if (searchInputValue) {
      const queryParams = new URLSearchParams();
      queryParams.set("search", searchInputValue);
      if (sortBy !== "year_desc") {
        queryParams.set("sort", sortBy);
      }
      navigate({ search: queryParams.toString() });
    }
  };
  const handleOptimizedSearch = reactExports.useCallback((value) => {
    if (value) {
      addToRecentSearches(value);
    }
    handleSearch(value);
  }, [addToRecentSearches, handleSearch]);
  const handleSortChange = (event) => {
    const newSort = event.target.value;
    setSortBy(newSort);
    const queryParams = new URLSearchParams(location.search);
    if (newSort !== "year_desc") {
      queryParams.set("sort", newSort);
    } else {
      queryParams.delete("sort");
    }
    navigate({ search: queryParams.toString() });
  };
  const handleClearFilters = () => {
    setSearchValue(null);
    setSearchInputValue("");
    setActiveFilters([]);
    setSortBy("year_desc");
    navigate({ search: "" });
  };
  const handleRemoveFilter = (filterToRemove) => {
    const queryParams = new URLSearchParams(location.search);
    const filterTypes = ["tag", "architect", "category", "prefecture", "year"];
    filterTypes.forEach((type) => {
      if (queryParams.get(type) === filterToRemove.value) {
        queryParams.delete(type);
      }
    });
    navigate({ search: queryParams.toString() });
  };
  const handleQuickFilter = (type, value) => {
    const queryParams = new URLSearchParams();
    if (type === "award") {
      queryParams.set("tag", value);
    } else if (type === "architect") {
      queryParams.set("architect", value);
    } else if (type === "category") {
      queryParams.set("category", value);
    } else if (type === "decade") {
      queryParams.set("year", value.replace("年代", ""));
    }
    if (sortBy !== "year_desc") {
      queryParams.set("sort", sortBy);
    }
    navigate({ search: queryParams.toString() });
  };
  const totalPages = Math.ceil(totalItems / itemsPerPage);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(Container, { maxWidth: "xl", sx: { py: 4 }, ref: gestureRef, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", justifyContent: "space-between", alignItems: "center", mb: 3 }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h4", component: "h1", children: "建築作品一覧" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        ToggleButtonGroup,
        {
          value: viewMode,
          exclusive: true,
          onChange: (e, newMode) => {
            if (newMode) {
              setViewMode(newMode);
              if (newMode === "map") {
                const searchTerm = searchValue?.value || searchInputValue;
                fetchArchitectures(currentPage, searchTerm, sortBy);
              }
            }
          },
          size: "small",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(ToggleButton, { value: "grid", "aria-label": "カードビュー", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip$1, { title: "カードビュー", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GridViewIcon, {}) }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ToggleButton, { value: "list", "aria-label": "リストビュー", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip$1, { title: "リストビュー", children: /* @__PURE__ */ jsxRuntimeExports.jsx(ViewListIcon, {}) }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ToggleButton, { value: "map", "aria-label": "マップビュー", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip$1, { title: "マップビュー", children: /* @__PURE__ */ jsxRuntimeExports.jsx(MapIcon, {}) }) })
          ]
        }
      )
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { container: true, spacing: 3, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { item: true, xs: 12, lg: showInsights ? 9 : 12, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 3, mb: 3 }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mb: 3 }, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              TouchOptimizedSearchBar,
              {
                value: searchValue,
                onSearch: handleOptimizedSearch,
                onInputChange: handleOptimizedInputChange,
                inputValue: searchInputValue,
                suggestions: autocompleteSuggestions,
                loading: searchLoading,
                placeholder: "建築作品、建築家、場所を検索...",
                onVoiceSearch: handleVoiceSearch,
                onCameraSearch: handleCameraSearch,
                recentSearches,
                trendingSearches
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", gap: 2, mt: 2 }, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  variant: "contained",
                  onClick: () => handleSearch(searchValue),
                  disabled: !searchValue && !searchInputValue,
                  children: "検索"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControl, { size: "small", sx: { minWidth: 120 }, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(InputLabel, { children: "並び替え" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  Select,
                  {
                    value: sortBy,
                    label: "並び替え",
                    onChange: handleSortChange,
                    startAdornment: /* @__PURE__ */ jsxRuntimeExports.jsx(SortIcon, { sx: { mr: 1, color: "action.active" } }),
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "year_desc", children: "新しい順" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "year_asc", children: "古い順" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "name_asc", children: "名前順" })
                    ]
                  }
                )
              ] })
            ] })
          ] }),
          activeFilters.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mb: 3 }, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", gap: 1, mb: 1 }, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(FilterListIcon, { color: "action" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: "絞り込み条件:" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", flexWrap: "wrap", gap: 1 }, children: [
              activeFilters.map((filter, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                Chip,
                {
                  label: `${filter.type}: ${filter.label}`,
                  onDelete: () => handleRemoveFilter(filter),
                  color: "primary",
                  variant: "outlined"
                },
                index
              )),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  size: "small",
                  startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(Clear, {}),
                  onClick: handleClearFilters,
                  children: "すべてクリア"
                }
              )
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { mb: 2 }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", color: "text.secondary", children: [
            totalItems.toLocaleString(),
            "件の建築作品",
            activeFilters.length > 0 && " (絞り込み結果)",
            viewMode === "map" && architectures.filter((a) => a.latitude && a.longitude).length < architectures.length && ` - ${architectures.filter((a) => a.latitude && a.longitude).length}件を地図に表示`
          ] }) })
        ] }),
        loading ? viewMode === "list" ? /* @__PURE__ */ jsxRuntimeExports.jsx(Paper, { sx: { p: 2 }, children: [...Array(itemsPerPage)].map((_, i) => /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mb: 2 }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, { variant: "text", height: 40 }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, { variant: "text", height: 20, width: "60%" })
        ] }, i)) }) : viewMode === "grid" ? /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { container: true, spacing: 2, children: [...Array(itemsPerPage)].map((_, i) => /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, md: 4, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, { variant: "rectangular", height: 300 }) }, i)) }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, { variant: "rectangular", height: 600 }) : viewMode === "list" ? /* @__PURE__ */ jsxRuntimeExports.jsx(Paper, { sx: { p: 2 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(List, { children: architectures.map((architecture, index) => /* @__PURE__ */ jsxRuntimeExports.jsxs(React$3.Fragment, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            ListItem,
            {
              alignItems: "flex-start",
              component: Link,
              to: `/architecture/${architecture.id}`,
              sx: {
                textDecoration: "none",
                color: "inherit",
                "&:hover": {
                  backgroundColor: "action.hover"
                }
              },
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                ListItemText,
                {
                  primary: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", gap: 1 }, children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", component: "span", children: architecture.title }),
                    architecture.tags && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Chip,
                      {
                        label: architecture.tags,
                        size: "small",
                        color: "warning",
                        variant: "outlined",
                        icon: /* @__PURE__ */ jsxRuntimeExports.jsx(EmojiEvents, {}),
                        onClick: (e) => {
                          e.preventDefault();
                          e.stopPropagation();
                          handleQuickFilter("award", architecture.tags);
                        }
                      }
                    )
                  ] }),
                  secondary: /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { mt: 1 }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { container: true, spacing: 2, children: [
                    architecture.architect && /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 4, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center" }, children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Person, { sx: { mr: 0.5, color: "text.secondary", fontSize: 16 } }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: architecture.architect })
                    ] }) }),
                    architecture.year && /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 2, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center" }, children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(CalendarTodayIcon, { sx: { mr: 0.5, color: "text.secondary", fontSize: 16 } }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", color: "text.secondary", children: [
                        architecture.year,
                        "年"
                      ] })
                    ] }) }),
                    architecture.category && /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center" }, children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Category, { sx: { mr: 0.5, color: "text.secondary", fontSize: 16 } }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: architecture.category })
                    ] }) }),
                    architecture.address && /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center" }, children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(LocationOn, { sx: { mr: 0.5, color: "text.secondary", fontSize: 16 } }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", noWrap: true, children: architecture.address })
                    ] }) })
                  ] }) })
                }
              )
            }
          ),
          index < architectures.length - 1 && /* @__PURE__ */ jsxRuntimeExports.jsx(Divider, { component: "li" })
        ] }, architecture.id)) }) }) : viewMode === "map" ? /* @__PURE__ */ jsxRuntimeExports.jsx(Paper, { sx: { height: "600px", overflow: "hidden", position: "relative" }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          MapWithClustering,
          {
            markers: architectures.filter((arch) => arch.latitude && arch.longitude).map((arch) => ({
              id: arch.id,
              position: [arch.latitude, arch.longitude],
              title: arch.title,
              architect: arch.architect,
              year: arch.year,
              category: arch.category,
              tags: arch.tags,
              address: arch.address
            })),
            center: activeFilters.some((f) => f.type === "地域") ? void 0 : architectures.filter((a) => a.latitude && a.longitude).length > 0 ? void 0 : [35.6762, 139.6503],
            zoom: activeFilters.some((f) => f.type === "地域") ? 10 : activeFilters.length > 0 ? 8 : 6,
            height: "600px",
            onMarkerClick: (markerId) => {
              navigate(`/architecture/${markerId}`);
            }
          }
        ) }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { container: true, spacing: 2, children: architectures.map((architecture) => /* @__PURE__ */ jsxRuntimeExports.jsx(
            Grid,
            {
              item: true,
              xs: 12,
              sm: 6,
              md: 4,
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(Card$1, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(CardActionArea, { component: Link, to: `/architecture/${architecture.id}`, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent$1, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", component: "h2", gutterBottom: true, children: architecture.title }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", flexDirection: "column", gap: 1 }, children: [
                  architecture.architect && /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center" }, children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Person, { sx: { mr: 1, color: "text.secondary", fontSize: 20 } }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: architecture.architect })
                  ] }),
                  architecture.year && /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center" }, children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(CalendarTodayIcon, { sx: { mr: 1, color: "text.secondary", fontSize: 20 } }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", color: "text.secondary", children: [
                      architecture.year,
                      "年"
                    ] })
                  ] }),
                  architecture.address && /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center" }, children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(LocationOn, { sx: { mr: 1, color: "text.secondary", fontSize: 20 } }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", noWrap: true, children: architecture.address })
                  ] }),
                  architecture.category && /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center" }, children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Category, { sx: { mr: 1, color: "text.secondary", fontSize: 20 } }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: architecture.category })
                  ] }),
                  architecture.tags && /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", flexWrap: "wrap", gap: 0.5, mt: 1 }, children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(EmojiEvents, { sx: { mr: 1, color: "warning.main", fontSize: 20 } }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Chip,
                      {
                        label: architecture.tags,
                        size: "small",
                        color: "warning",
                        variant: "outlined",
                        onClick: (e) => {
                          e.preventDefault();
                          handleQuickFilter("award", architecture.tags);
                        }
                      }
                    )
                  ] })
                ] })
              ] }) }) })
            },
            architecture.id
          )) }),
          totalPages > 1 && /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { display: "flex", justifyContent: "center", mt: 4 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Pagination,
            {
              count: totalPages,
              page: currentPage,
              onChange: handlePageChange,
              color: "primary",
              size: "large"
            }
          ) })
        ] }),
        viewMode === "list" && totalPages > 1 && !loading && /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { display: "flex", justifyContent: "center", mt: 4 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Pagination,
          {
            count: totalPages,
            page: currentPage,
            onChange: handlePageChange,
            color: "primary",
            size: "large"
          }
        ) })
      ] }),
      showInsights && /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, lg: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 2, position: "sticky", top: 20 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", justifyContent: "space-between", alignItems: "center", mb: 2 }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "h6", sx: { display: "flex", alignItems: "center" }, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(InsightsIcon, { sx: { mr: 1 } }),
            "研究インサイト"
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            IconButton,
            {
              size: "small",
              onClick: () => setShowInsights(false),
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(CloseIcon, {})
            }
          )
        ] }),
        researchLoading ? /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, { variant: "text", height: 30 }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, { variant: "text", height: 30 }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, { variant: "text", height: 30 })
        ] }) : quickInsights && /* @__PURE__ */ jsxRuntimeExports.jsxs(Stack, { spacing: 3, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "subtitle2", gutterBottom: true, sx: { display: "flex", alignItems: "center" }, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(EmojiEvents, { sx: { mr: 1, color: "warning.main" } }),
              "主要建築賞"
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(List, { dense: true, children: quickInsights.topAwards.map((award, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(
              ListItem,
              {
                button: true,
                onClick: () => handleQuickFilter("award", award.name),
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  ListItemText,
                  {
                    primary: award.name,
                    secondary: `${award.count}作品`
                  }
                )
              },
              index
            )) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Divider, {}),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "subtitle2", gutterBottom: true, sx: { display: "flex", alignItems: "center" }, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Person, { sx: { mr: 1, color: "primary.main" } }),
              "注目建築家"
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(List, { dense: true, children: quickInsights.topArchitects.map((architect, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(
              ListItem,
              {
                button: true,
                onClick: () => handleQuickFilter("architect", architect.name),
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  ListItemText,
                  {
                    primary: architect.name,
                    secondary: `${architect.projectCount}作品 (${architect.yearSpan.start}-${architect.yearSpan.end})`
                  }
                )
              },
              index
            )) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Divider, {}),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "subtitle2", gutterBottom: true, sx: { display: "flex", alignItems: "center" }, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Category, { sx: { mr: 1, color: "secondary.main" } }),
              "人気カテゴリ"
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { display: "flex", flexWrap: "wrap", gap: 1 }, children: quickInsights.popularCategories.map((cat, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(
              Chip,
              {
                label: `${cat.category} (${cat.totalCount})`,
                size: "small",
                onClick: () => handleQuickFilter("category", cat.category)
              },
              index
            )) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Divider, {}),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "subtitle2", gutterBottom: true, sx: { display: "flex", alignItems: "center" }, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(TrendingUp, { sx: { mr: 1, color: "success.main" } }),
              "時代トレンド"
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(List, { dense: true, children: quickInsights.recentTrends.map((trend, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(
              ListItem,
              {
                button: true,
                onClick: () => handleQuickFilter("decade", trend.decade),
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  ListItemText,
                  {
                    primary: trend.decade,
                    secondary: `${trend.projectCount}件`
                  }
                )
              },
              index
            )) })
          ] })
        ] })
      ] }) })
    ] })
  ] });
};

var leaflet_markerclusterSrc = {exports: {}};

/*
 * Leaflet.markercluster 1.5.3+master.e5124b2,
 * Provides Beautiful Animated Marker Clustering functionality for Leaflet, a JS library for interactive maps.
 * https://github.com/Leaflet/Leaflet.markercluster
 * (c) 2012-2017, Dave Leaver, smartrak
 */

(function (module, exports) {
	(function (global, factory) {
		factory(exports) ;
	}(commonjsGlobal, function (exports) {
		/*
		 * L.MarkerClusterGroup extends L.FeatureGroup by clustering the markers contained within
		 */

		var MarkerClusterGroup = L.MarkerClusterGroup = L.FeatureGroup.extend({

			options: {
				maxClusterRadius: 80, //A cluster will cover at most this many pixels from its center
				iconCreateFunction: null,
				clusterPane: L.Marker.prototype.options.pane,

				spiderfyOnEveryZoom: false,
				spiderfyOnMaxZoom: true,
				showCoverageOnHover: true,
				zoomToBoundsOnClick: true,
				singleMarkerMode: false,

				disableClusteringAtZoom: null,

				// Setting this to false prevents the removal of any clusters outside of the viewpoint, which
				// is the default behaviour for performance reasons.
				removeOutsideVisibleBounds: true,

				// Set to false to disable all animations (zoom and spiderfy).
				// If false, option animateAddingMarkers below has no effect.
				// If L.DomUtil.TRANSITION is falsy, this option has no effect.
				animate: true,

				//Whether to animate adding markers after adding the MarkerClusterGroup to the map
				// If you are adding individual markers set to true, if adding bulk markers leave false for massive performance gains.
				animateAddingMarkers: false,

				// Make it possible to provide custom function to calculate spiderfy shape positions
				spiderfyShapePositions: null,

				//Increase to increase the distance away that spiderfied markers appear from the center
				spiderfyDistanceMultiplier: 1,

				// Make it possible to specify a polyline options on a spider leg
				spiderLegPolylineOptions: { weight: 1.5, color: '#222', opacity: 0.5 },

				// When bulk adding layers, adds markers in chunks. Means addLayers may not add all the layers in the call, others will be loaded during setTimeouts
				chunkedLoading: false,
				chunkInterval: 200, // process markers for a maximum of ~ n milliseconds (then trigger the chunkProgress callback)
				chunkDelay: 50, // at the end of each interval, give n milliseconds back to system/browser
				chunkProgress: null, // progress callback: function(processed, total, elapsed) (e.g. for a progress indicator)

				//Options to pass to the L.Polygon constructor
				polygonOptions: {}
			},

			initialize: function (options) {
				L.Util.setOptions(this, options);
				if (!this.options.iconCreateFunction) {
					this.options.iconCreateFunction = this._defaultIconCreateFunction;
				}

				this._featureGroup = L.featureGroup();
				this._featureGroup.addEventParent(this);

				this._nonPointGroup = L.featureGroup();
				this._nonPointGroup.addEventParent(this);

				this._inZoomAnimation = 0;
				this._needsClustering = [];
				this._needsRemoving = []; //Markers removed while we aren't on the map need to be kept track of
				//The bounds of the currently shown area (from _getExpandedVisibleBounds) Updated on zoom/move
				this._currentShownBounds = null;

				this._queue = [];

				this._childMarkerEventHandlers = {
					'dragstart': this._childMarkerDragStart,
					'move': this._childMarkerMoved,
					'dragend': this._childMarkerDragEnd,
				};

				// Hook the appropriate animation methods.
				var animate = L.DomUtil.TRANSITION && this.options.animate;
				L.extend(this, animate ? this._withAnimation : this._noAnimation);
				// Remember which MarkerCluster class to instantiate (animated or not).
				this._markerCluster = animate ? L.MarkerCluster : L.MarkerClusterNonAnimated;
			},

			addLayer: function (layer) {

				if (layer instanceof L.LayerGroup) {
					return this.addLayers([layer]);
				}

				//Don't cluster non point data
				if (!layer.getLatLng) {
					this._nonPointGroup.addLayer(layer);
					this.fire('layeradd', { layer: layer });
					return this;
				}

				if (!this._map) {
					this._needsClustering.push(layer);
					this.fire('layeradd', { layer: layer });
					return this;
				}

				if (this.hasLayer(layer)) {
					return this;
				}


				//If we have already clustered we'll need to add this one to a cluster

				if (this._unspiderfy) {
					this._unspiderfy();
				}

				this._addLayer(layer, this._maxZoom);
				this.fire('layeradd', { layer: layer });

				// Refresh bounds and weighted positions.
				this._topClusterLevel._recalculateBounds();

				this._refreshClustersIcons();

				//Work out what is visible
				var visibleLayer = layer,
				    currentZoom = this._zoom;
				if (layer.__parent) {
					while (visibleLayer.__parent._zoom >= currentZoom) {
						visibleLayer = visibleLayer.__parent;
					}
				}

				if (this._currentShownBounds.contains(visibleLayer.getLatLng())) {
					if (this.options.animateAddingMarkers) {
						this._animationAddLayer(layer, visibleLayer);
					} else {
						this._animationAddLayerNonAnimated(layer, visibleLayer);
					}
				}
				return this;
			},

			removeLayer: function (layer) {

				if (layer instanceof L.LayerGroup) {
					return this.removeLayers([layer]);
				}

				//Non point layers
				if (!layer.getLatLng) {
					this._nonPointGroup.removeLayer(layer);
					this.fire('layerremove', { layer: layer });
					return this;
				}

				if (!this._map) {
					if (!this._arraySplice(this._needsClustering, layer) && this.hasLayer(layer)) {
						this._needsRemoving.push({ layer: layer, latlng: layer._latlng });
					}
					this.fire('layerremove', { layer: layer });
					return this;
				}

				if (!layer.__parent) {
					return this;
				}

				if (this._unspiderfy) {
					this._unspiderfy();
					this._unspiderfyLayer(layer);
				}

				//Remove the marker from clusters
				this._removeLayer(layer, true);
				this.fire('layerremove', { layer: layer });

				// Refresh bounds and weighted positions.
				this._topClusterLevel._recalculateBounds();

				this._refreshClustersIcons();

				layer.off(this._childMarkerEventHandlers, this);

				if (this._featureGroup.hasLayer(layer)) {
					this._featureGroup.removeLayer(layer);
					if (layer.clusterShow) {
						layer.clusterShow();
					}
				}

				return this;
			},

			//Takes an array of markers and adds them in bulk
			addLayers: function (layersArray, skipLayerAddEvent) {
				if (!L.Util.isArray(layersArray)) {
					return this.addLayer(layersArray);
				}

				var fg = this._featureGroup,
				    npg = this._nonPointGroup,
				    chunked = this.options.chunkedLoading,
				    chunkInterval = this.options.chunkInterval,
				    chunkProgress = this.options.chunkProgress,
				    l = layersArray.length,
				    offset = 0,
				    originalArray = true,
				    m;

				if (this._map) {
					var started = (new Date()).getTime();
					var process = L.bind(function () {
						var start = (new Date()).getTime();

						// Make sure to unspiderfy before starting to add some layers
						if (this._map && this._unspiderfy) {
							this._unspiderfy();
						}

						for (; offset < l; offset++) {
							if (chunked && offset % 200 === 0) {
								// every couple hundred markers, instrument the time elapsed since processing started:
								var elapsed = (new Date()).getTime() - start;
								if (elapsed > chunkInterval) {
									break; // been working too hard, time to take a break :-)
								}
							}

							m = layersArray[offset];

							// Group of layers, append children to layersArray and skip.
							// Side effects:
							// - Total increases, so chunkProgress ratio jumps backward.
							// - Groups are not included in this group, only their non-group child layers (hasLayer).
							// Changing array length while looping does not affect performance in current browsers:
							// http://jsperf.com/for-loop-changing-length/6
							if (m instanceof L.LayerGroup) {
								if (originalArray) {
									layersArray = layersArray.slice();
									originalArray = false;
								}
								this._extractNonGroupLayers(m, layersArray);
								l = layersArray.length;
								continue;
							}

							//Not point data, can't be clustered
							if (!m.getLatLng) {
								npg.addLayer(m);
								if (!skipLayerAddEvent) {
									this.fire('layeradd', { layer: m });
								}
								continue;
							}

							if (this.hasLayer(m)) {
								continue;
							}

							this._addLayer(m, this._maxZoom);
							if (!skipLayerAddEvent) {
								this.fire('layeradd', { layer: m });
							}

							//If we just made a cluster of size 2 then we need to remove the other marker from the map (if it is) or we never will
							if (m.__parent) {
								if (m.__parent.getChildCount() === 2) {
									var markers = m.__parent.getAllChildMarkers(),
									    otherMarker = markers[0] === m ? markers[1] : markers[0];
									fg.removeLayer(otherMarker);
								}
							}
						}

						if (chunkProgress) {
							// report progress and time elapsed:
							chunkProgress(offset, l, (new Date()).getTime() - started);
						}

						// Completed processing all markers.
						if (offset === l) {

							// Refresh bounds and weighted positions.
							this._topClusterLevel._recalculateBounds();

							this._refreshClustersIcons();

							this._topClusterLevel._recursivelyAddChildrenToMap(null, this._zoom, this._currentShownBounds);
						} else {
							setTimeout(process, this.options.chunkDelay);
						}
					}, this);

					process();
				} else {
					var needsClustering = this._needsClustering;

					for (; offset < l; offset++) {
						m = layersArray[offset];

						// Group of layers, append children to layersArray and skip.
						if (m instanceof L.LayerGroup) {
							if (originalArray) {
								layersArray = layersArray.slice();
								originalArray = false;
							}
							this._extractNonGroupLayers(m, layersArray);
							l = layersArray.length;
							continue;
						}

						//Not point data, can't be clustered
						if (!m.getLatLng) {
							npg.addLayer(m);
							continue;
						}

						if (this.hasLayer(m)) {
							continue;
						}

						needsClustering.push(m);
					}
				}
				return this;
			},

			//Takes an array of markers and removes them in bulk
			removeLayers: function (layersArray) {
				var i, m,
				    l = layersArray.length,
				    fg = this._featureGroup,
				    npg = this._nonPointGroup,
				    originalArray = true;

				if (!this._map) {
					for (i = 0; i < l; i++) {
						m = layersArray[i];

						// Group of layers, append children to layersArray and skip.
						if (m instanceof L.LayerGroup) {
							if (originalArray) {
								layersArray = layersArray.slice();
								originalArray = false;
							}
							this._extractNonGroupLayers(m, layersArray);
							l = layersArray.length;
							continue;
						}

						this._arraySplice(this._needsClustering, m);
						npg.removeLayer(m);
						if (this.hasLayer(m)) {
							this._needsRemoving.push({ layer: m, latlng: m._latlng });
						}
						this.fire('layerremove', { layer: m });
					}
					return this;
				}

				if (this._unspiderfy) {
					this._unspiderfy();

					// Work on a copy of the array, so that next loop is not affected.
					var layersArray2 = layersArray.slice(),
					    l2 = l;
					for (i = 0; i < l2; i++) {
						m = layersArray2[i];

						// Group of layers, append children to layersArray and skip.
						if (m instanceof L.LayerGroup) {
							this._extractNonGroupLayers(m, layersArray2);
							l2 = layersArray2.length;
							continue;
						}

						this._unspiderfyLayer(m);
					}
				}

				for (i = 0; i < l; i++) {
					m = layersArray[i];

					// Group of layers, append children to layersArray and skip.
					if (m instanceof L.LayerGroup) {
						if (originalArray) {
							layersArray = layersArray.slice();
							originalArray = false;
						}
						this._extractNonGroupLayers(m, layersArray);
						l = layersArray.length;
						continue;
					}

					if (!m.__parent) {
						npg.removeLayer(m);
						this.fire('layerremove', { layer: m });
						continue;
					}

					this._removeLayer(m, true, true);
					this.fire('layerremove', { layer: m });

					if (fg.hasLayer(m)) {
						fg.removeLayer(m);
						if (m.clusterShow) {
							m.clusterShow();
						}
					}
				}

				// Refresh bounds and weighted positions.
				this._topClusterLevel._recalculateBounds();

				this._refreshClustersIcons();

				//Fix up the clusters and markers on the map
				this._topClusterLevel._recursivelyAddChildrenToMap(null, this._zoom, this._currentShownBounds);

				return this;
			},

			//Removes all layers from the MarkerClusterGroup
			clearLayers: function () {
				//Need our own special implementation as the LayerGroup one doesn't work for us

				//If we aren't on the map (yet), blow away the markers we know of
				if (!this._map) {
					this._needsClustering = [];
					this._needsRemoving = [];
					delete this._gridClusters;
					delete this._gridUnclustered;
				}

				if (this._noanimationUnspiderfy) {
					this._noanimationUnspiderfy();
				}

				//Remove all the visible layers
				this._featureGroup.clearLayers();
				this._nonPointGroup.clearLayers();

				this.eachLayer(function (marker) {
					marker.off(this._childMarkerEventHandlers, this);
					delete marker.__parent;
				}, this);

				if (this._map) {
					//Reset _topClusterLevel and the DistanceGrids
					this._generateInitialClusters();
				}

				return this;
			},

			//Override FeatureGroup.getBounds as it doesn't work
			getBounds: function () {
				var bounds = new L.LatLngBounds();

				if (this._topClusterLevel) {
					bounds.extend(this._topClusterLevel._bounds);
				}

				for (var i = this._needsClustering.length - 1; i >= 0; i--) {
					bounds.extend(this._needsClustering[i].getLatLng());
				}

				bounds.extend(this._nonPointGroup.getBounds());

				return bounds;
			},

			//Overrides LayerGroup.eachLayer
			eachLayer: function (method, context) {
				var markers = this._needsClustering.slice(),
					needsRemoving = this._needsRemoving,
					thisNeedsRemoving, i, j;

				if (this._topClusterLevel) {
					this._topClusterLevel.getAllChildMarkers(markers);
				}

				for (i = markers.length - 1; i >= 0; i--) {
					thisNeedsRemoving = true;

					for (j = needsRemoving.length - 1; j >= 0; j--) {
						if (needsRemoving[j].layer === markers[i]) {
							thisNeedsRemoving = false;
							break;
						}
					}

					if (thisNeedsRemoving) {
						method.call(context, markers[i]);
					}
				}

				this._nonPointGroup.eachLayer(method, context);
			},

			//Overrides LayerGroup.getLayers
			getLayers: function () {
				var layers = [];
				this.eachLayer(function (l) {
					layers.push(l);
				});
				return layers;
			},

			//Overrides LayerGroup.getLayer, WARNING: Really bad performance
			getLayer: function (id) {
				var result = null;

				id = parseInt(id, 10);

				this.eachLayer(function (l) {
					if (L.stamp(l) === id) {
						result = l;
					}
				});

				return result;
			},

			//Returns true if the given layer is in this MarkerClusterGroup
			hasLayer: function (layer) {
				if (!layer) {
					return false;
				}

				var i, anArray = this._needsClustering;

				for (i = anArray.length - 1; i >= 0; i--) {
					if (anArray[i] === layer) {
						return true;
					}
				}

				anArray = this._needsRemoving;
				for (i = anArray.length - 1; i >= 0; i--) {
					if (anArray[i].layer === layer) {
						return false;
					}
				}

				return !!(layer.__parent && layer.__parent._group === this) || this._nonPointGroup.hasLayer(layer);
			},

			//Zoom down to show the given layer (spiderfying if necessary) then calls the callback
			zoomToShowLayer: function (layer, callback) {

				var map = this._map;

				if (typeof callback !== 'function') {
					callback = function () {};
				}

				var showMarker = function () {
					// Assumes that map.hasLayer checks for direct appearance on map, not recursively calling
					// hasLayer on Layer Groups that are on map (typically not calling this MarkerClusterGroup.hasLayer, which would always return true)
					if ((map.hasLayer(layer) || map.hasLayer(layer.__parent)) && !this._inZoomAnimation) {
						this._map.off('moveend', showMarker, this);
						this.off('animationend', showMarker, this);

						if (map.hasLayer(layer)) {
							callback();
						} else if (layer.__parent._icon) {
							this.once('spiderfied', callback, this);
							layer.__parent.spiderfy();
						}
					}
				};

				if (layer._icon && this._map.getBounds().contains(layer.getLatLng())) {
					//Layer is visible ond on screen, immediate return
					callback();
				} else if (layer.__parent._zoom < Math.round(this._map._zoom)) {
					//Layer should be visible at this zoom level. It must not be on screen so just pan over to it
					this._map.on('moveend', showMarker, this);
					this._map.panTo(layer.getLatLng());
				} else {
					this._map.on('moveend', showMarker, this);
					this.on('animationend', showMarker, this);
					layer.__parent.zoomToBounds();
				}
			},

			//Overrides FeatureGroup.onAdd
			onAdd: function (map) {
				this._map = map;
				var i, l, layer;

				if (!isFinite(this._map.getMaxZoom())) {
					throw "Map has no maxZoom specified";
				}

				this._featureGroup.addTo(map);
				this._nonPointGroup.addTo(map);

				if (!this._gridClusters) {
					this._generateInitialClusters();
				}

				this._maxLat = map.options.crs.projection.MAX_LATITUDE;

				//Restore all the positions as they are in the MCG before removing them
				for (i = 0, l = this._needsRemoving.length; i < l; i++) {
					layer = this._needsRemoving[i];
					layer.newlatlng = layer.layer._latlng;
					layer.layer._latlng = layer.latlng;
				}
				//Remove them, then restore their new positions
				for (i = 0, l = this._needsRemoving.length; i < l; i++) {
					layer = this._needsRemoving[i];
					this._removeLayer(layer.layer, true);
					layer.layer._latlng = layer.newlatlng;
				}
				this._needsRemoving = [];

				//Remember the current zoom level and bounds
				this._zoom = Math.round(this._map._zoom);
				this._currentShownBounds = this._getExpandedVisibleBounds();

				this._map.on('zoomend', this._zoomEnd, this);
				this._map.on('moveend', this._moveEnd, this);

				if (this._spiderfierOnAdd) { //TODO FIXME: Not sure how to have spiderfier add something on here nicely
					this._spiderfierOnAdd();
				}

				this._bindEvents();

				//Actually add our markers to the map:
				l = this._needsClustering;
				this._needsClustering = [];
				this.addLayers(l, true);
			},

			//Overrides FeatureGroup.onRemove
			onRemove: function (map) {
				map.off('zoomend', this._zoomEnd, this);
				map.off('moveend', this._moveEnd, this);

				this._unbindEvents();

				//In case we are in a cluster animation
				this._map._mapPane.className = this._map._mapPane.className.replace(' leaflet-cluster-anim', '');

				if (this._spiderfierOnRemove) { //TODO FIXME: Not sure how to have spiderfier add something on here nicely
					this._spiderfierOnRemove();
				}

				delete this._maxLat;

				//Clean up all the layers we added to the map
				this._hideCoverage();
				this._featureGroup.remove();
				this._nonPointGroup.remove();

				this._featureGroup.clearLayers();

				this._map = null;
			},

			getVisibleParent: function (marker) {
				var vMarker = marker;
				while (vMarker && !vMarker._icon) {
					vMarker = vMarker.__parent;
				}
				return vMarker || null;
			},

			//Remove the given object from the given array
			_arraySplice: function (anArray, obj) {
				for (var i = anArray.length - 1; i >= 0; i--) {
					if (anArray[i] === obj) {
						anArray.splice(i, 1);
						return true;
					}
				}
			},

			/**
			 * Removes a marker from all _gridUnclustered zoom levels, starting at the supplied zoom.
			 * @param marker to be removed from _gridUnclustered.
			 * @param z integer bottom start zoom level (included)
			 * @private
			 */
			_removeFromGridUnclustered: function (marker, z) {
				var map = this._map,
				    gridUnclustered = this._gridUnclustered,
					minZoom = Math.floor(this._map.getMinZoom());

				for (; z >= minZoom; z--) {
					if (!gridUnclustered[z].removeObject(marker, map.project(marker.getLatLng(), z))) {
						break;
					}
				}
			},

			_childMarkerDragStart: function (e) {
				e.target.__dragStart = e.target._latlng;
			},

			_childMarkerMoved: function (e) {
				if (!this._ignoreMove && !e.target.__dragStart) {
					var isPopupOpen = e.target._popup && e.target._popup.isOpen();

					this._moveChild(e.target, e.oldLatLng, e.latlng);

					if (isPopupOpen) {
						e.target.openPopup();
					}
				}
			},

			_moveChild: function (layer, from, to) {
				layer._latlng = from;
				this.removeLayer(layer);

				layer._latlng = to;
				this.addLayer(layer);
			},

			_childMarkerDragEnd: function (e) {
				var dragStart = e.target.__dragStart;
				delete e.target.__dragStart;
				if (dragStart) {
					this._moveChild(e.target, dragStart, e.target._latlng);
				}		
			},


			//Internal function for removing a marker from everything.
			//dontUpdateMap: set to true if you will handle updating the map manually (for bulk functions)
			_removeLayer: function (marker, removeFromDistanceGrid, dontUpdateMap) {
				var gridClusters = this._gridClusters,
					gridUnclustered = this._gridUnclustered,
					fg = this._featureGroup,
					map = this._map,
					minZoom = Math.floor(this._map.getMinZoom());

				//Remove the marker from distance clusters it might be in
				if (removeFromDistanceGrid) {
					this._removeFromGridUnclustered(marker, this._maxZoom);
				}

				//Work our way up the clusters removing them as we go if required
				var cluster = marker.__parent,
					markers = cluster._markers,
					otherMarker;

				//Remove the marker from the immediate parents marker list
				this._arraySplice(markers, marker);

				while (cluster) {
					cluster._childCount--;
					cluster._boundsNeedUpdate = true;

					if (cluster._zoom < minZoom) {
						//Top level, do nothing
						break;
					} else if (removeFromDistanceGrid && cluster._childCount <= 1) { //Cluster no longer required
						//We need to push the other marker up to the parent
						otherMarker = cluster._markers[0] === marker ? cluster._markers[1] : cluster._markers[0];

						//Update distance grid
						gridClusters[cluster._zoom].removeObject(cluster, map.project(cluster._cLatLng, cluster._zoom));
						gridUnclustered[cluster._zoom].addObject(otherMarker, map.project(otherMarker.getLatLng(), cluster._zoom));

						//Move otherMarker up to parent
						this._arraySplice(cluster.__parent._childClusters, cluster);
						cluster.__parent._markers.push(otherMarker);
						otherMarker.__parent = cluster.__parent;

						if (cluster._icon) {
							//Cluster is currently on the map, need to put the marker on the map instead
							fg.removeLayer(cluster);
							if (!dontUpdateMap) {
								fg.addLayer(otherMarker);
							}
						}
					} else {
						cluster._iconNeedsUpdate = true;
					}

					cluster = cluster.__parent;
				}

				delete marker.__parent;
			},

			_isOrIsParent: function (el, oel) {
				while (oel) {
					if (el === oel) {
						return true;
					}
					oel = oel.parentNode;
				}
				return false;
			},

			//Override L.Evented.fire
			fire: function (type, data, propagate) {
				if (data && data.layer instanceof L.MarkerCluster) {
					//Prevent multiple clustermouseover/off events if the icon is made up of stacked divs (Doesn't work in ie <= 8, no relatedTarget)
					if (data.originalEvent && this._isOrIsParent(data.layer._icon, data.originalEvent.relatedTarget)) {
						return;
					}
					type = 'cluster' + type;
				}

				L.FeatureGroup.prototype.fire.call(this, type, data, propagate);
			},

			//Override L.Evented.listens
			listens: function (type, propagate) {
				return L.FeatureGroup.prototype.listens.call(this, type, propagate) || L.FeatureGroup.prototype.listens.call(this, 'cluster' + type, propagate);
			},

			//Default functionality
			_defaultIconCreateFunction: function (cluster) {
				var childCount = cluster.getChildCount();

				var c = ' marker-cluster-';
				if (childCount < 10) {
					c += 'small';
				} else if (childCount < 100) {
					c += 'medium';
				} else {
					c += 'large';
				}

				return new L.DivIcon({ html: '<div><span>' + childCount + '</span></div>', className: 'marker-cluster' + c, iconSize: new L.Point(40, 40) });
			},

			_bindEvents: function () {
				var map = this._map,
				    spiderfyOnMaxZoom = this.options.spiderfyOnMaxZoom,
				    showCoverageOnHover = this.options.showCoverageOnHover,
				    zoomToBoundsOnClick = this.options.zoomToBoundsOnClick,
				    spiderfyOnEveryZoom = this.options.spiderfyOnEveryZoom;

				//Zoom on cluster click or spiderfy if we are at the lowest level
				if (spiderfyOnMaxZoom || zoomToBoundsOnClick || spiderfyOnEveryZoom) {
					this.on('clusterclick clusterkeypress', this._zoomOrSpiderfy, this);
				}

				//Show convex hull (boundary) polygon on mouse over
				if (showCoverageOnHover) {
					this.on('clustermouseover', this._showCoverage, this);
					this.on('clustermouseout', this._hideCoverage, this);
					map.on('zoomend', this._hideCoverage, this);
				}
			},

			_zoomOrSpiderfy: function (e) {
				var cluster = e.layer,
				    bottomCluster = cluster;

				if (e.type === 'clusterkeypress' && e.originalEvent && e.originalEvent.keyCode !== 13) {
					return;
				}

				while (bottomCluster._childClusters.length === 1) {
					bottomCluster = bottomCluster._childClusters[0];
				}

				if (bottomCluster._zoom === this._maxZoom &&
					bottomCluster._childCount === cluster._childCount &&
					this.options.spiderfyOnMaxZoom) {

					// All child markers are contained in a single cluster from this._maxZoom to this cluster.
					cluster.spiderfy();
				} else if (this.options.zoomToBoundsOnClick) {
					cluster.zoomToBounds();
				}

				if (this.options.spiderfyOnEveryZoom) {
					cluster.spiderfy();
				}

				// Focus the map again for keyboard users.
				if (e.originalEvent && e.originalEvent.keyCode === 13) {
					this._map._container.focus();
				}
			},

			_showCoverage: function (e) {
				var map = this._map;
				if (this._inZoomAnimation) {
					return;
				}
				if (this._shownPolygon) {
					map.removeLayer(this._shownPolygon);
				}
				if (e.layer.getChildCount() > 2 && e.layer !== this._spiderfied) {
					this._shownPolygon = new L.Polygon(e.layer.getConvexHull(), this.options.polygonOptions);
					map.addLayer(this._shownPolygon);
				}
			},

			_hideCoverage: function () {
				if (this._shownPolygon) {
					this._map.removeLayer(this._shownPolygon);
					this._shownPolygon = null;
				}
			},

			_unbindEvents: function () {
				var spiderfyOnMaxZoom = this.options.spiderfyOnMaxZoom,
					showCoverageOnHover = this.options.showCoverageOnHover,
					zoomToBoundsOnClick = this.options.zoomToBoundsOnClick,
					spiderfyOnEveryZoom = this.options.spiderfyOnEveryZoom,
					map = this._map;

				if (spiderfyOnMaxZoom || zoomToBoundsOnClick || spiderfyOnEveryZoom) {
					this.off('clusterclick clusterkeypress', this._zoomOrSpiderfy, this);
				}
				if (showCoverageOnHover) {
					this.off('clustermouseover', this._showCoverage, this);
					this.off('clustermouseout', this._hideCoverage, this);
					map.off('zoomend', this._hideCoverage, this);
				}
			},

			_zoomEnd: function () {
				if (!this._map) { //May have been removed from the map by a zoomEnd handler
					return;
				}
				this._mergeSplitClusters();

				this._zoom = Math.round(this._map._zoom);
				this._currentShownBounds = this._getExpandedVisibleBounds();
			},

			_moveEnd: function () {
				if (this._inZoomAnimation) {
					return;
				}

				var newBounds = this._getExpandedVisibleBounds();

				this._topClusterLevel._recursivelyRemoveChildrenFromMap(this._currentShownBounds, Math.floor(this._map.getMinZoom()), this._zoom, newBounds);
				this._topClusterLevel._recursivelyAddChildrenToMap(null, Math.round(this._map._zoom), newBounds);

				this._currentShownBounds = newBounds;
				return;
			},

			_generateInitialClusters: function () {
				var maxZoom = Math.ceil(this._map.getMaxZoom()),
					minZoom = Math.floor(this._map.getMinZoom()),
					radius = this.options.maxClusterRadius,
					radiusFn = radius;

				//If we just set maxClusterRadius to a single number, we need to create
				//a simple function to return that number. Otherwise, we just have to
				//use the function we've passed in.
				if (typeof radius !== "function") {
					radiusFn = function () { return radius; };
				}

				if (this.options.disableClusteringAtZoom !== null) {
					maxZoom = this.options.disableClusteringAtZoom - 1;
				}
				this._maxZoom = maxZoom;
				this._gridClusters = {};
				this._gridUnclustered = {};

				//Set up DistanceGrids for each zoom
				for (var zoom = maxZoom; zoom >= minZoom; zoom--) {
					this._gridClusters[zoom] = new L.DistanceGrid(radiusFn(zoom));
					this._gridUnclustered[zoom] = new L.DistanceGrid(radiusFn(zoom));
				}

				// Instantiate the appropriate L.MarkerCluster class (animated or not).
				this._topClusterLevel = new this._markerCluster(this, minZoom - 1);
			},

			//Zoom: Zoom to start adding at (Pass this._maxZoom to start at the bottom)
			_addLayer: function (layer, zoom) {
				var gridClusters = this._gridClusters,
				    gridUnclustered = this._gridUnclustered,
					minZoom = Math.floor(this._map.getMinZoom()),
				    markerPoint, z;

				if (this.options.singleMarkerMode) {
					this._overrideMarkerIcon(layer);
				}

				layer.on(this._childMarkerEventHandlers, this);

				//Find the lowest zoom level to slot this one in
				for (; zoom >= minZoom; zoom--) {
					markerPoint = this._map.project(layer.getLatLng(), zoom); // calculate pixel position

					//Try find a cluster close by
					var closest = gridClusters[zoom].getNearObject(markerPoint);
					if (closest) {
						closest._addChild(layer);
						layer.__parent = closest;
						return;
					}

					//Try find a marker close by to form a new cluster with
					closest = gridUnclustered[zoom].getNearObject(markerPoint);
					if (closest) {
						var parent = closest.__parent;
						if (parent) {
							this._removeLayer(closest, false);
						}

						//Create new cluster with these 2 in it

						var newCluster = new this._markerCluster(this, zoom, closest, layer);
						gridClusters[zoom].addObject(newCluster, this._map.project(newCluster._cLatLng, zoom));
						closest.__parent = newCluster;
						layer.__parent = newCluster;

						//First create any new intermediate parent clusters that don't exist
						var lastParent = newCluster;
						for (z = zoom - 1; z > parent._zoom; z--) {
							lastParent = new this._markerCluster(this, z, lastParent);
							gridClusters[z].addObject(lastParent, this._map.project(closest.getLatLng(), z));
						}
						parent._addChild(lastParent);

						//Remove closest from this zoom level and any above that it is in, replace with newCluster
						this._removeFromGridUnclustered(closest, zoom);

						return;
					}

					//Didn't manage to cluster in at this zoom, record us as a marker here and continue upwards
					gridUnclustered[zoom].addObject(layer, markerPoint);
				}

				//Didn't get in anything, add us to the top
				this._topClusterLevel._addChild(layer);
				layer.__parent = this._topClusterLevel;
				return;
			},

			/**
			 * Refreshes the icon of all "dirty" visible clusters.
			 * Non-visible "dirty" clusters will be updated when they are added to the map.
			 * @private
			 */
			_refreshClustersIcons: function () {
				this._featureGroup.eachLayer(function (c) {
					if (c instanceof L.MarkerCluster && c._iconNeedsUpdate) {
						c._updateIcon();
					}
				});
			},

			//Enqueue code to fire after the marker expand/contract has happened
			_enqueue: function (fn) {
				this._queue.push(fn);
				if (!this._queueTimeout) {
					this._queueTimeout = setTimeout(L.bind(this._processQueue, this), 300);
				}
			},
			_processQueue: function () {
				for (var i = 0; i < this._queue.length; i++) {
					this._queue[i].call(this);
				}
				this._queue.length = 0;
				clearTimeout(this._queueTimeout);
				this._queueTimeout = null;
			},

			//Merge and split any existing clusters that are too big or small
			_mergeSplitClusters: function () {
				var mapZoom = Math.round(this._map._zoom);

				//In case we are starting to split before the animation finished
				this._processQueue();

				if (this._zoom < mapZoom && this._currentShownBounds.intersects(this._getExpandedVisibleBounds())) { //Zoom in, split
					this._animationStart();
					//Remove clusters now off screen
					this._topClusterLevel._recursivelyRemoveChildrenFromMap(this._currentShownBounds, Math.floor(this._map.getMinZoom()), this._zoom, this._getExpandedVisibleBounds());

					this._animationZoomIn(this._zoom, mapZoom);

				} else if (this._zoom > mapZoom) { //Zoom out, merge
					this._animationStart();

					this._animationZoomOut(this._zoom, mapZoom);
				} else {
					this._moveEnd();
				}
			},

			//Gets the maps visible bounds expanded in each direction by the size of the screen (so the user cannot see an area we do not cover in one pan)
			_getExpandedVisibleBounds: function () {
				if (!this.options.removeOutsideVisibleBounds) {
					return this._mapBoundsInfinite;
				} else if (L.Browser.mobile) {
					return this._checkBoundsMaxLat(this._map.getBounds());
				}

				return this._checkBoundsMaxLat(this._map.getBounds().pad(1)); // Padding expands the bounds by its own dimensions but scaled with the given factor.
			},

			/**
			 * Expands the latitude to Infinity (or -Infinity) if the input bounds reach the map projection maximum defined latitude
			 * (in the case of Web/Spherical Mercator, it is 85.0511287798 / see https://en.wikipedia.org/wiki/Web_Mercator#Formulas).
			 * Otherwise, the removeOutsideVisibleBounds option will remove markers beyond that limit, whereas the same markers without
			 * this option (or outside MCG) will have their position floored (ceiled) by the projection and rendered at that limit,
			 * making the user think that MCG "eats" them and never displays them again.
			 * @param bounds L.LatLngBounds
			 * @returns {L.LatLngBounds}
			 * @private
			 */
			_checkBoundsMaxLat: function (bounds) {
				var maxLat = this._maxLat;

				if (maxLat !== undefined) {
					if (bounds.getNorth() >= maxLat) {
						bounds._northEast.lat = Infinity;
					}
					if (bounds.getSouth() <= -maxLat) {
						bounds._southWest.lat = -Infinity;
					}
				}

				return bounds;
			},

			//Shared animation code
			_animationAddLayerNonAnimated: function (layer, newCluster) {
				if (newCluster === layer) {
					this._featureGroup.addLayer(layer);
				} else if (newCluster._childCount === 2) {
					newCluster._addToMap();

					var markers = newCluster.getAllChildMarkers();
					this._featureGroup.removeLayer(markers[0]);
					this._featureGroup.removeLayer(markers[1]);
				} else {
					newCluster._updateIcon();
				}
			},

			/**
			 * Extracts individual (i.e. non-group) layers from a Layer Group.
			 * @param group to extract layers from.
			 * @param output {Array} in which to store the extracted layers.
			 * @returns {*|Array}
			 * @private
			 */
			_extractNonGroupLayers: function (group, output) {
				var layers = group.getLayers(),
				    i = 0,
				    layer;

				output = output || [];

				for (; i < layers.length; i++) {
					layer = layers[i];

					if (layer instanceof L.LayerGroup) {
						this._extractNonGroupLayers(layer, output);
						continue;
					}

					output.push(layer);
				}

				return output;
			},

			/**
			 * Implements the singleMarkerMode option.
			 * @param layer Marker to re-style using the Clusters iconCreateFunction.
			 * @returns {L.Icon} The newly created icon.
			 * @private
			 */
			_overrideMarkerIcon: function (layer) {
				var icon = layer.options.icon = this.options.iconCreateFunction({
					getChildCount: function () {
						return 1;
					},
					getAllChildMarkers: function () {
						return [layer];
					}
				});

				return icon;
			}
		});

		// Constant bounds used in case option "removeOutsideVisibleBounds" is set to false.
		L.MarkerClusterGroup.include({
			_mapBoundsInfinite: new L.LatLngBounds(new L.LatLng(-Infinity, -Infinity), new L.LatLng(Infinity, Infinity))
		});

		L.MarkerClusterGroup.include({
			_noAnimation: {
				//Non Animated versions of everything
				_animationStart: function () {
					//Do nothing...
				},
				_animationZoomIn: function (previousZoomLevel, newZoomLevel) {
					this._topClusterLevel._recursivelyRemoveChildrenFromMap(this._currentShownBounds, Math.floor(this._map.getMinZoom()), previousZoomLevel);
					this._topClusterLevel._recursivelyAddChildrenToMap(null, newZoomLevel, this._getExpandedVisibleBounds());

					//We didn't actually animate, but we use this event to mean "clustering animations have finished"
					this.fire('animationend');
				},
				_animationZoomOut: function (previousZoomLevel, newZoomLevel) {
					this._topClusterLevel._recursivelyRemoveChildrenFromMap(this._currentShownBounds, Math.floor(this._map.getMinZoom()), previousZoomLevel);
					this._topClusterLevel._recursivelyAddChildrenToMap(null, newZoomLevel, this._getExpandedVisibleBounds());

					//We didn't actually animate, but we use this event to mean "clustering animations have finished"
					this.fire('animationend');
				},
				_animationAddLayer: function (layer, newCluster) {
					this._animationAddLayerNonAnimated(layer, newCluster);
				}
			},

			_withAnimation: {
				//Animated versions here
				_animationStart: function () {
					this._map._mapPane.className += ' leaflet-cluster-anim';
					this._inZoomAnimation++;
				},

				_animationZoomIn: function (previousZoomLevel, newZoomLevel) {
					var bounds = this._getExpandedVisibleBounds(),
					    fg = this._featureGroup,
						minZoom = Math.floor(this._map.getMinZoom()),
					    i;

					this._ignoreMove = true;

					//Add all children of current clusters to map and remove those clusters from map
					this._topClusterLevel._recursively(bounds, previousZoomLevel, minZoom, function (c) {
						var startPos = c._latlng,
						    markers  = c._markers,
						    m;

						if (!bounds.contains(startPos)) {
							startPos = null;
						}

						if (c._isSingleParent() && previousZoomLevel + 1 === newZoomLevel) { //Immediately add the new child and remove us
							fg.removeLayer(c);
							c._recursivelyAddChildrenToMap(null, newZoomLevel, bounds);
						} else {
							//Fade out old cluster
							c.clusterHide();
							c._recursivelyAddChildrenToMap(startPos, newZoomLevel, bounds);
						}

						//Remove all markers that aren't visible any more
						//TODO: Do we actually need to do this on the higher levels too?
						for (i = markers.length - 1; i >= 0; i--) {
							m = markers[i];
							if (!bounds.contains(m._latlng)) {
								fg.removeLayer(m);
							}
						}

					});

					this._forceLayout();

					//Update opacities
					this._topClusterLevel._recursivelyBecomeVisible(bounds, newZoomLevel);
					//TODO Maybe? Update markers in _recursivelyBecomeVisible
					fg.eachLayer(function (n) {
						if (!(n instanceof L.MarkerCluster) && n._icon) {
							n.clusterShow();
						}
					});

					//update the positions of the just added clusters/markers
					this._topClusterLevel._recursively(bounds, previousZoomLevel, newZoomLevel, function (c) {
						c._recursivelyRestoreChildPositions(newZoomLevel);
					});

					this._ignoreMove = false;

					//Remove the old clusters and close the zoom animation
					this._enqueue(function () {
						//update the positions of the just added clusters/markers
						this._topClusterLevel._recursively(bounds, previousZoomLevel, minZoom, function (c) {
							fg.removeLayer(c);
							c.clusterShow();
						});

						this._animationEnd();
					});
				},

				_animationZoomOut: function (previousZoomLevel, newZoomLevel) {
					this._animationZoomOutSingle(this._topClusterLevel, previousZoomLevel - 1, newZoomLevel);

					//Need to add markers for those that weren't on the map before but are now
					this._topClusterLevel._recursivelyAddChildrenToMap(null, newZoomLevel, this._getExpandedVisibleBounds());
					//Remove markers that were on the map before but won't be now
					this._topClusterLevel._recursivelyRemoveChildrenFromMap(this._currentShownBounds, Math.floor(this._map.getMinZoom()), previousZoomLevel, this._getExpandedVisibleBounds());
				},

				_animationAddLayer: function (layer, newCluster) {
					var me = this,
					    fg = this._featureGroup;

					fg.addLayer(layer);
					if (newCluster !== layer) {
						if (newCluster._childCount > 2) { //Was already a cluster

							newCluster._updateIcon();
							this._forceLayout();
							this._animationStart();

							layer._setPos(this._map.latLngToLayerPoint(newCluster.getLatLng()));
							layer.clusterHide();

							this._enqueue(function () {
								fg.removeLayer(layer);
								layer.clusterShow();

								me._animationEnd();
							});

						} else { //Just became a cluster
							this._forceLayout();

							me._animationStart();
							me._animationZoomOutSingle(newCluster, this._map.getMaxZoom(), this._zoom);
						}
					}
				}
			},

			// Private methods for animated versions.
			_animationZoomOutSingle: function (cluster, previousZoomLevel, newZoomLevel) {
				var bounds = this._getExpandedVisibleBounds(),
					minZoom = Math.floor(this._map.getMinZoom());

				//Animate all of the markers in the clusters to move to their cluster center point
				cluster._recursivelyAnimateChildrenInAndAddSelfToMap(bounds, minZoom, previousZoomLevel + 1, newZoomLevel);

				var me = this;

				//Update the opacity (If we immediately set it they won't animate)
				this._forceLayout();
				cluster._recursivelyBecomeVisible(bounds, newZoomLevel);

				//TODO: Maybe use the transition timing stuff to make this more reliable
				//When the animations are done, tidy up
				this._enqueue(function () {

					//This cluster stopped being a cluster before the timeout fired
					if (cluster._childCount === 1) {
						var m = cluster._markers[0];
						//If we were in a cluster animation at the time then the opacity and position of our child could be wrong now, so fix it
						this._ignoreMove = true;
						m.setLatLng(m.getLatLng());
						this._ignoreMove = false;
						if (m.clusterShow) {
							m.clusterShow();
						}
					} else {
						cluster._recursively(bounds, newZoomLevel, minZoom, function (c) {
							c._recursivelyRemoveChildrenFromMap(bounds, minZoom, previousZoomLevel + 1);
						});
					}
					me._animationEnd();
				});
			},

			_animationEnd: function () {
				if (this._map) {
					this._map._mapPane.className = this._map._mapPane.className.replace(' leaflet-cluster-anim', '');
				}
				this._inZoomAnimation--;
				this.fire('animationend');
			},

			//Force a browser layout of stuff in the map
			// Should apply the current opacity and location to all elements so we can update them again for an animation
			_forceLayout: function () {
				//In my testing this works, infact offsetWidth of any element seems to work.
				//Could loop all this._layers and do this for each _icon if it stops working

				L.Util.falseFn(document.body.offsetWidth);
			}
		});

		L.markerClusterGroup = function (options) {
			return new L.MarkerClusterGroup(options);
		};

		var MarkerCluster = L.MarkerCluster = L.Marker.extend({
			options: L.Icon.prototype.options,

			initialize: function (group, zoom, a, b) {

				L.Marker.prototype.initialize.call(this, a ? (a._cLatLng || a.getLatLng()) : new L.LatLng(0, 0),
		            { icon: this, pane: group.options.clusterPane });

				this._group = group;
				this._zoom = zoom;

				this._markers = [];
				this._childClusters = [];
				this._childCount = 0;
				this._iconNeedsUpdate = true;
				this._boundsNeedUpdate = true;

				this._bounds = new L.LatLngBounds();

				if (a) {
					this._addChild(a);
				}
				if (b) {
					this._addChild(b);
				}
			},

			//Recursively retrieve all child markers of this cluster
			getAllChildMarkers: function (storageArray, ignoreDraggedMarker) {
				storageArray = storageArray || [];

				for (var i = this._childClusters.length - 1; i >= 0; i--) {
					this._childClusters[i].getAllChildMarkers(storageArray, ignoreDraggedMarker);
				}

				for (var j = this._markers.length - 1; j >= 0; j--) {
					if (ignoreDraggedMarker && this._markers[j].__dragStart) {
						continue;
					}
					storageArray.push(this._markers[j]);
				}

				return storageArray;
			},

			//Returns the count of how many child markers we have
			getChildCount: function () {
				return this._childCount;
			},

			//Zoom to the minimum of showing all of the child markers, or the extents of this cluster
			zoomToBounds: function (fitBoundsOptions) {
				var childClusters = this._childClusters.slice(),
					map = this._group._map,
					boundsZoom = map.getBoundsZoom(this._bounds),
					zoom = this._zoom + 1,
					mapZoom = map.getZoom(),
					i;

				//calculate how far we need to zoom down to see all of the markers
				while (childClusters.length > 0 && boundsZoom > zoom) {
					zoom++;
					var newClusters = [];
					for (i = 0; i < childClusters.length; i++) {
						newClusters = newClusters.concat(childClusters[i]._childClusters);
					}
					childClusters = newClusters;
				}

				if (boundsZoom > zoom) {
					this._group._map.setView(this._latlng, zoom);
				} else if (boundsZoom <= mapZoom) { //If fitBounds wouldn't zoom us down, zoom us down instead
					this._group._map.setView(this._latlng, mapZoom + 1);
				} else {
					this._group._map.fitBounds(this._bounds, fitBoundsOptions);
				}
			},

			getBounds: function () {
				var bounds = new L.LatLngBounds();
				bounds.extend(this._bounds);
				return bounds;
			},

			_updateIcon: function () {
				this._iconNeedsUpdate = true;
				if (this._icon) {
					this.setIcon(this);
				}
			},

			//Cludge for Icon, we pretend to be an icon for performance
			createIcon: function () {
				if (this._iconNeedsUpdate) {
					this._iconObj = this._group.options.iconCreateFunction(this);
					this._iconNeedsUpdate = false;
				}
				return this._iconObj.createIcon();
			},
			createShadow: function () {
				return this._iconObj.createShadow();
			},


			_addChild: function (new1, isNotificationFromChild) {

				this._iconNeedsUpdate = true;

				this._boundsNeedUpdate = true;
				this._setClusterCenter(new1);

				if (new1 instanceof L.MarkerCluster) {
					if (!isNotificationFromChild) {
						this._childClusters.push(new1);
						new1.__parent = this;
					}
					this._childCount += new1._childCount;
				} else {
					if (!isNotificationFromChild) {
						this._markers.push(new1);
					}
					this._childCount++;
				}

				if (this.__parent) {
					this.__parent._addChild(new1, true);
				}
			},

			/**
			 * Makes sure the cluster center is set. If not, uses the child center if it is a cluster, or the marker position.
			 * @param child L.MarkerCluster|L.Marker that will be used as cluster center if not defined yet.
			 * @private
			 */
			_setClusterCenter: function (child) {
				if (!this._cLatLng) {
					// when clustering, take position of the first point as the cluster center
					this._cLatLng = child._cLatLng || child._latlng;
				}
			},

			/**
			 * Assigns impossible bounding values so that the next extend entirely determines the new bounds.
			 * This method avoids having to trash the previous L.LatLngBounds object and to create a new one, which is much slower for this class.
			 * As long as the bounds are not extended, most other methods would probably fail, as they would with bounds initialized but not extended.
			 * @private
			 */
			_resetBounds: function () {
				var bounds = this._bounds;

				if (bounds._southWest) {
					bounds._southWest.lat = Infinity;
					bounds._southWest.lng = Infinity;
				}
				if (bounds._northEast) {
					bounds._northEast.lat = -Infinity;
					bounds._northEast.lng = -Infinity;
				}
			},

			_recalculateBounds: function () {
				var markers = this._markers,
				    childClusters = this._childClusters,
				    latSum = 0,
				    lngSum = 0,
				    totalCount = this._childCount,
				    i, child, childLatLng, childCount;

				// Case where all markers are removed from the map and we are left with just an empty _topClusterLevel.
				if (totalCount === 0) {
					return;
				}

				// Reset rather than creating a new object, for performance.
				this._resetBounds();

				// Child markers.
				for (i = 0; i < markers.length; i++) {
					childLatLng = markers[i]._latlng;

					this._bounds.extend(childLatLng);

					latSum += childLatLng.lat;
					lngSum += childLatLng.lng;
				}

				// Child clusters.
				for (i = 0; i < childClusters.length; i++) {
					child = childClusters[i];

					// Re-compute child bounds and weighted position first if necessary.
					if (child._boundsNeedUpdate) {
						child._recalculateBounds();
					}

					this._bounds.extend(child._bounds);

					childLatLng = child._wLatLng;
					childCount = child._childCount;

					latSum += childLatLng.lat * childCount;
					lngSum += childLatLng.lng * childCount;
				}

				this._latlng = this._wLatLng = new L.LatLng(latSum / totalCount, lngSum / totalCount);

				// Reset dirty flag.
				this._boundsNeedUpdate = false;
			},

			//Set our markers position as given and add it to the map
			_addToMap: function (startPos) {
				if (startPos) {
					this._backupLatlng = this._latlng;
					this.setLatLng(startPos);
				}
				this._group._featureGroup.addLayer(this);
			},

			_recursivelyAnimateChildrenIn: function (bounds, center, maxZoom) {
				this._recursively(bounds, this._group._map.getMinZoom(), maxZoom - 1,
					function (c) {
						var markers = c._markers,
							i, m;
						for (i = markers.length - 1; i >= 0; i--) {
							m = markers[i];

							//Only do it if the icon is still on the map
							if (m._icon) {
								m._setPos(center);
								m.clusterHide();
							}
						}
					},
					function (c) {
						var childClusters = c._childClusters,
							j, cm;
						for (j = childClusters.length - 1; j >= 0; j--) {
							cm = childClusters[j];
							if (cm._icon) {
								cm._setPos(center);
								cm.clusterHide();
							}
						}
					}
				);
			},

			_recursivelyAnimateChildrenInAndAddSelfToMap: function (bounds, mapMinZoom, previousZoomLevel, newZoomLevel) {
				this._recursively(bounds, newZoomLevel, mapMinZoom,
					function (c) {
						c._recursivelyAnimateChildrenIn(bounds, c._group._map.latLngToLayerPoint(c.getLatLng()).round(), previousZoomLevel);

						//TODO: depthToAnimateIn affects _isSingleParent, if there is a multizoom we may/may not be.
						//As a hack we only do a animation free zoom on a single level zoom, if someone does multiple levels then we always animate
						if (c._isSingleParent() && previousZoomLevel - 1 === newZoomLevel) {
							c.clusterShow();
							c._recursivelyRemoveChildrenFromMap(bounds, mapMinZoom, previousZoomLevel); //Immediately remove our children as we are replacing them. TODO previousBounds not bounds
						} else {
							c.clusterHide();
						}

						c._addToMap();
					}
				);
			},

			_recursivelyBecomeVisible: function (bounds, zoomLevel) {
				this._recursively(bounds, this._group._map.getMinZoom(), zoomLevel, null, function (c) {
					c.clusterShow();
				});
			},

			_recursivelyAddChildrenToMap: function (startPos, zoomLevel, bounds) {
				this._recursively(bounds, this._group._map.getMinZoom() - 1, zoomLevel,
					function (c) {
						if (zoomLevel === c._zoom) {
							return;
						}

						//Add our child markers at startPos (so they can be animated out)
						for (var i = c._markers.length - 1; i >= 0; i--) {
							var nm = c._markers[i];

							if (!bounds.contains(nm._latlng)) {
								continue;
							}

							if (startPos) {
								nm._backupLatlng = nm.getLatLng();

								nm.setLatLng(startPos);
								if (nm.clusterHide) {
									nm.clusterHide();
								}
							}

							c._group._featureGroup.addLayer(nm);
						}
					},
					function (c) {
						c._addToMap(startPos);
					}
				);
			},

			_recursivelyRestoreChildPositions: function (zoomLevel) {
				//Fix positions of child markers
				for (var i = this._markers.length - 1; i >= 0; i--) {
					var nm = this._markers[i];
					if (nm._backupLatlng) {
						nm.setLatLng(nm._backupLatlng);
						delete nm._backupLatlng;
					}
				}

				if (zoomLevel - 1 === this._zoom) {
					//Reposition child clusters
					for (var j = this._childClusters.length - 1; j >= 0; j--) {
						this._childClusters[j]._restorePosition();
					}
				} else {
					for (var k = this._childClusters.length - 1; k >= 0; k--) {
						this._childClusters[k]._recursivelyRestoreChildPositions(zoomLevel);
					}
				}
			},

			_restorePosition: function () {
				if (this._backupLatlng) {
					this.setLatLng(this._backupLatlng);
					delete this._backupLatlng;
				}
			},

			//exceptBounds: If set, don't remove any markers/clusters in it
			_recursivelyRemoveChildrenFromMap: function (previousBounds, mapMinZoom, zoomLevel, exceptBounds) {
				var m, i;
				this._recursively(previousBounds, mapMinZoom - 1, zoomLevel - 1,
					function (c) {
						//Remove markers at every level
						for (i = c._markers.length - 1; i >= 0; i--) {
							m = c._markers[i];
							if (!exceptBounds || !exceptBounds.contains(m._latlng)) {
								c._group._featureGroup.removeLayer(m);
								if (m.clusterShow) {
									m.clusterShow();
								}
							}
						}
					},
					function (c) {
						//Remove child clusters at just the bottom level
						for (i = c._childClusters.length - 1; i >= 0; i--) {
							m = c._childClusters[i];
							if (!exceptBounds || !exceptBounds.contains(m._latlng)) {
								c._group._featureGroup.removeLayer(m);
								if (m.clusterShow) {
									m.clusterShow();
								}
							}
						}
					}
				);
			},

			//Run the given functions recursively to this and child clusters
			// boundsToApplyTo: a L.LatLngBounds representing the bounds of what clusters to recurse in to
			// zoomLevelToStart: zoom level to start running functions (inclusive)
			// zoomLevelToStop: zoom level to stop running functions (inclusive)
			// runAtEveryLevel: function that takes an L.MarkerCluster as an argument that should be applied on every level
			// runAtBottomLevel: function that takes an L.MarkerCluster as an argument that should be applied at only the bottom level
			_recursively: function (boundsToApplyTo, zoomLevelToStart, zoomLevelToStop, runAtEveryLevel, runAtBottomLevel) {
				var childClusters = this._childClusters,
				    zoom = this._zoom,
				    i, c;

				if (zoomLevelToStart <= zoom) {
					if (runAtEveryLevel) {
						runAtEveryLevel(this);
					}
					if (runAtBottomLevel && zoom === zoomLevelToStop) {
						runAtBottomLevel(this);
					}
				}

				if (zoom < zoomLevelToStart || zoom < zoomLevelToStop) {
					for (i = childClusters.length - 1; i >= 0; i--) {
						c = childClusters[i];
						if (c._boundsNeedUpdate) {
							c._recalculateBounds();
						}
						if (boundsToApplyTo.intersects(c._bounds)) {
							c._recursively(boundsToApplyTo, zoomLevelToStart, zoomLevelToStop, runAtEveryLevel, runAtBottomLevel);
						}
					}
				}
			},

			//Returns true if we are the parent of only one cluster and that cluster is the same as us
			_isSingleParent: function () {
				//Don't need to check this._markers as the rest won't work if there are any
				return this._childClusters.length > 0 && this._childClusters[0]._childCount === this._childCount;
			}
		});

		/*
		* Extends L.Marker to include two extra methods: clusterHide and clusterShow.
		* 
		* They work as setOpacity(0) and setOpacity(1) respectively, but
		* don't overwrite the options.opacity
		* 
		*/

		L.Marker.include({
			clusterHide: function () {
				var backup = this.options.opacity;
				this.setOpacity(0);
				this.options.opacity = backup;
				return this;
			},
			
			clusterShow: function () {
				return this.setOpacity(this.options.opacity);
			}
		});

		L.DistanceGrid = function (cellSize) {
			this._cellSize = cellSize;
			this._sqCellSize = cellSize * cellSize;
			this._grid = {};
			this._objectPoint = { };
		};

		L.DistanceGrid.prototype = {

			addObject: function (obj, point) {
				var x = this._getCoord(point.x),
				    y = this._getCoord(point.y),
				    grid = this._grid,
				    row = grid[y] = grid[y] || {},
				    cell = row[x] = row[x] || [],
				    stamp = L.Util.stamp(obj);

				this._objectPoint[stamp] = point;

				cell.push(obj);
			},

			updateObject: function (obj, point) {
				this.removeObject(obj);
				this.addObject(obj, point);
			},

			//Returns true if the object was found
			removeObject: function (obj, point) {
				var x = this._getCoord(point.x),
				    y = this._getCoord(point.y),
				    grid = this._grid,
				    row = grid[y] = grid[y] || {},
				    cell = row[x] = row[x] || [],
				    i, len;

				delete this._objectPoint[L.Util.stamp(obj)];

				for (i = 0, len = cell.length; i < len; i++) {
					if (cell[i] === obj) {

						cell.splice(i, 1);

						if (len === 1) {
							delete row[x];
						}

						return true;
					}
				}

			},

			eachObject: function (fn, context) {
				var i, j, k, len, row, cell, removed,
				    grid = this._grid;

				for (i in grid) {
					row = grid[i];

					for (j in row) {
						cell = row[j];

						for (k = 0, len = cell.length; k < len; k++) {
							removed = fn.call(context, cell[k]);
							if (removed) {
								k--;
								len--;
							}
						}
					}
				}
			},

			getNearObject: function (point) {
				var x = this._getCoord(point.x),
				    y = this._getCoord(point.y),
				    i, j, k, row, cell, len, obj, dist,
				    objectPoint = this._objectPoint,
				    closestDistSq = this._sqCellSize,
				    closest = null;

				for (i = y - 1; i <= y + 1; i++) {
					row = this._grid[i];
					if (row) {

						for (j = x - 1; j <= x + 1; j++) {
							cell = row[j];
							if (cell) {

								for (k = 0, len = cell.length; k < len; k++) {
									obj = cell[k];
									dist = this._sqDist(objectPoint[L.Util.stamp(obj)], point);
									if (dist < closestDistSq ||
										dist <= closestDistSq && closest === null) {
										closestDistSq = dist;
										closest = obj;
									}
								}
							}
						}
					}
				}
				return closest;
			},

			_getCoord: function (x) {
				var coord = Math.floor(x / this._cellSize);
				return isFinite(coord) ? coord : x;
			},

			_sqDist: function (p, p2) {
				var dx = p2.x - p.x,
				    dy = p2.y - p.y;
				return dx * dx + dy * dy;
			}
		};

		/* Copyright (c) 2012 the authors listed at the following URL, and/or
		the authors of referenced articles or incorporated external code:
		http://en.literateprograms.org/Quickhull_(Javascript)?action=history&offset=20120410175256

		Permission is hereby granted, free of charge, to any person obtaining
		a copy of this software and associated documentation files (the
		"Software"), to deal in the Software without restriction, including
		without limitation the rights to use, copy, modify, merge, publish,
		distribute, sublicense, and/or sell copies of the Software, and to
		permit persons to whom the Software is furnished to do so, subject to
		the following conditions:

		The above copyright notice and this permission notice shall be
		included in all copies or substantial portions of the Software.

		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
		EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
		IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
		CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
		TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
		SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

		Retrieved from: http://en.literateprograms.org/Quickhull_(Javascript)?oldid=18434
		*/

		(function () {
			L.QuickHull = {

				/*
				 * @param {Object} cpt a point to be measured from the baseline
				 * @param {Array} bl the baseline, as represented by a two-element
				 *   array of latlng objects.
				 * @returns {Number} an approximate distance measure
				 */
				getDistant: function (cpt, bl) {
					var vY = bl[1].lat - bl[0].lat,
						vX = bl[0].lng - bl[1].lng;
					return (vX * (cpt.lat - bl[0].lat) + vY * (cpt.lng - bl[0].lng));
				},

				/*
				 * @param {Array} baseLine a two-element array of latlng objects
				 *   representing the baseline to project from
				 * @param {Array} latLngs an array of latlng objects
				 * @returns {Object} the maximum point and all new points to stay
				 *   in consideration for the hull.
				 */
				findMostDistantPointFromBaseLine: function (baseLine, latLngs) {
					var maxD = 0,
						maxPt = null,
						newPoints = [],
						i, pt, d;

					for (i = latLngs.length - 1; i >= 0; i--) {
						pt = latLngs[i];
						d = this.getDistant(pt, baseLine);

						if (d > 0) {
							newPoints.push(pt);
						} else {
							continue;
						}

						if (d > maxD) {
							maxD = d;
							maxPt = pt;
						}
					}

					return { maxPoint: maxPt, newPoints: newPoints };
				},


				/*
				 * Given a baseline, compute the convex hull of latLngs as an array
				 * of latLngs.
				 *
				 * @param {Array} latLngs
				 * @returns {Array}
				 */
				buildConvexHull: function (baseLine, latLngs) {
					var convexHullBaseLines = [],
						t = this.findMostDistantPointFromBaseLine(baseLine, latLngs);

					if (t.maxPoint) { // if there is still a point "outside" the base line
						convexHullBaseLines =
							convexHullBaseLines.concat(
								this.buildConvexHull([baseLine[0], t.maxPoint], t.newPoints)
							);
						convexHullBaseLines =
							convexHullBaseLines.concat(
								this.buildConvexHull([t.maxPoint, baseLine[1]], t.newPoints)
							);
						return convexHullBaseLines;
					} else {  // if there is no more point "outside" the base line, the current base line is part of the convex hull
						return [baseLine[0]];
					}
				},

				/*
				 * Given an array of latlngs, compute a convex hull as an array
				 * of latlngs
				 *
				 * @param {Array} latLngs
				 * @returns {Array}
				 */
				getConvexHull: function (latLngs) {
					// find first baseline
					var maxLat = false, minLat = false,
						maxLng = false, minLng = false,
						maxLatPt = null, minLatPt = null,
						maxLngPt = null, minLngPt = null,
						maxPt = null, minPt = null,
						i;

					for (i = latLngs.length - 1; i >= 0; i--) {
						var pt = latLngs[i];
						if (maxLat === false || pt.lat > maxLat) {
							maxLatPt = pt;
							maxLat = pt.lat;
						}
						if (minLat === false || pt.lat < minLat) {
							minLatPt = pt;
							minLat = pt.lat;
						}
						if (maxLng === false || pt.lng > maxLng) {
							maxLngPt = pt;
							maxLng = pt.lng;
						}
						if (minLng === false || pt.lng < minLng) {
							minLngPt = pt;
							minLng = pt.lng;
						}
					}
					
					if (minLat !== maxLat) {
						minPt = minLatPt;
						maxPt = maxLatPt;
					} else {
						minPt = minLngPt;
						maxPt = maxLngPt;
					}

					var ch = [].concat(this.buildConvexHull([minPt, maxPt], latLngs),
										this.buildConvexHull([maxPt, minPt], latLngs));
					return ch;
				}
			};
		}());

		L.MarkerCluster.include({
			getConvexHull: function () {
				var childMarkers = this.getAllChildMarkers(),
					points = [],
					p, i;

				for (i = childMarkers.length - 1; i >= 0; i--) {
					p = childMarkers[i].getLatLng();
					points.push(p);
				}

				return L.QuickHull.getConvexHull(points);
			}
		});

		//This code is 100% based on https://github.com/jawj/OverlappingMarkerSpiderfier-Leaflet
		//Huge thanks to jawj for implementing it first to make my job easy :-)

		L.MarkerCluster.include({

			_2PI: Math.PI * 2,
			_circleFootSeparation: 25, //related to circumference of circle
			_circleStartAngle: 0,

			_spiralFootSeparation:  28, //related to size of spiral (experiment!)
			_spiralLengthStart: 11,
			_spiralLengthFactor: 5,

			_circleSpiralSwitchover: 9, //show spiral instead of circle from this marker count upwards.
										// 0 -> always spiral; Infinity -> always circle

			spiderfy: function () {
				if (this._group._spiderfied === this || this._group._inZoomAnimation) {
					return;
				}

				var childMarkers = this.getAllChildMarkers(null, true),
					group = this._group,
					map = group._map,
					center = map.latLngToLayerPoint(this._latlng),
					positions;

				this._group._unspiderfy();
				this._group._spiderfied = this;

				//TODO Maybe: childMarkers order by distance to center

				if (this._group.options.spiderfyShapePositions) {
					positions = this._group.options.spiderfyShapePositions(childMarkers.length, center);
				} else if (childMarkers.length >= this._circleSpiralSwitchover) {
					positions = this._generatePointsSpiral(childMarkers.length, center);
				} else {
					center.y += 10; // Otherwise circles look wrong => hack for standard blue icon, renders differently for other icons.
					positions = this._generatePointsCircle(childMarkers.length, center);
				}

				this._animationSpiderfy(childMarkers, positions);
			},

			unspiderfy: function (zoomDetails) {
				/// <param Name="zoomDetails">Argument from zoomanim if being called in a zoom animation or null otherwise</param>
				if (this._group._inZoomAnimation) {
					return;
				}
				this._animationUnspiderfy(zoomDetails);

				this._group._spiderfied = null;
			},

			_generatePointsCircle: function (count, centerPt) {
				var circumference = this._group.options.spiderfyDistanceMultiplier * this._circleFootSeparation * (2 + count),
					legLength = circumference / this._2PI,  //radius from circumference
					angleStep = this._2PI / count,
					res = [],
					i, angle;

				legLength = Math.max(legLength, 35); // Minimum distance to get outside the cluster icon.

				res.length = count;

				for (i = 0; i < count; i++) { // Clockwise, like spiral.
					angle = this._circleStartAngle + i * angleStep;
					res[i] = new L.Point(centerPt.x + legLength * Math.cos(angle), centerPt.y + legLength * Math.sin(angle))._round();
				}

				return res;
			},

			_generatePointsSpiral: function (count, centerPt) {
				var spiderfyDistanceMultiplier = this._group.options.spiderfyDistanceMultiplier,
					legLength = spiderfyDistanceMultiplier * this._spiralLengthStart,
					separation = spiderfyDistanceMultiplier * this._spiralFootSeparation,
					lengthFactor = spiderfyDistanceMultiplier * this._spiralLengthFactor * this._2PI,
					angle = 0,
					res = [],
					i;

				res.length = count;

				// Higher index, closer position to cluster center.
				for (i = count; i >= 0; i--) {
					// Skip the first position, so that we are already farther from center and we avoid
					// being under the default cluster icon (especially important for Circle Markers).
					if (i < count) {
						res[i] = new L.Point(centerPt.x + legLength * Math.cos(angle), centerPt.y + legLength * Math.sin(angle))._round();
					}
					angle += separation / legLength + i * 0.0005;
					legLength += lengthFactor / angle;
				}
				return res;
			},

			_noanimationUnspiderfy: function () {
				var group = this._group,
					map = group._map,
					fg = group._featureGroup,
					childMarkers = this.getAllChildMarkers(null, true),
					m, i;

				group._ignoreMove = true;

				this.setOpacity(1);
				for (i = childMarkers.length - 1; i >= 0; i--) {
					m = childMarkers[i];

					fg.removeLayer(m);

					if (m._preSpiderfyLatlng) {
						m.setLatLng(m._preSpiderfyLatlng);
						delete m._preSpiderfyLatlng;
					}
					if (m.setZIndexOffset) {
						m.setZIndexOffset(0);
					}

					if (m._spiderLeg) {
						map.removeLayer(m._spiderLeg);
						delete m._spiderLeg;
					}
				}

				group.fire('unspiderfied', {
					cluster: this,
					markers: childMarkers
				});
				group._ignoreMove = false;
				group._spiderfied = null;
			}
		});

		//Non Animated versions of everything
		L.MarkerClusterNonAnimated = L.MarkerCluster.extend({
			_animationSpiderfy: function (childMarkers, positions) {
				var group = this._group,
					map = group._map,
					fg = group._featureGroup,
					legOptions = this._group.options.spiderLegPolylineOptions,
					i, m, leg, newPos;

				group._ignoreMove = true;

				// Traverse in ascending order to make sure that inner circleMarkers are on top of further legs. Normal markers are re-ordered by newPosition.
				// The reverse order trick no longer improves performance on modern browsers.
				for (i = 0; i < childMarkers.length; i++) {
					newPos = map.layerPointToLatLng(positions[i]);
					m = childMarkers[i];

					// Add the leg before the marker, so that in case the latter is a circleMarker, the leg is behind it.
					leg = new L.Polyline([this._latlng, newPos], legOptions);
					map.addLayer(leg);
					m._spiderLeg = leg;

					// Now add the marker.
					m._preSpiderfyLatlng = m._latlng;
					m.setLatLng(newPos);
					if (m.setZIndexOffset) {
						m.setZIndexOffset(1000000); //Make these appear on top of EVERYTHING
					}

					fg.addLayer(m);
				}
				this.setOpacity(0.3);

				group._ignoreMove = false;
				group.fire('spiderfied', {
					cluster: this,
					markers: childMarkers
				});
			},

			_animationUnspiderfy: function () {
				this._noanimationUnspiderfy();
			}
		});

		//Animated versions here
		L.MarkerCluster.include({

			_animationSpiderfy: function (childMarkers, positions) {
				var me = this,
					group = this._group,
					map = group._map,
					fg = group._featureGroup,
					thisLayerLatLng = this._latlng,
					thisLayerPos = map.latLngToLayerPoint(thisLayerLatLng),
					svg = L.Path.SVG,
					legOptions = L.extend({}, this._group.options.spiderLegPolylineOptions), // Copy the options so that we can modify them for animation.
					finalLegOpacity = legOptions.opacity,
					i, m, leg, legPath, legLength, newPos;

				if (finalLegOpacity === undefined) {
					finalLegOpacity = L.MarkerClusterGroup.prototype.options.spiderLegPolylineOptions.opacity;
				}

				if (svg) {
					// If the initial opacity of the spider leg is not 0 then it appears before the animation starts.
					legOptions.opacity = 0;

					// Add the class for CSS transitions.
					legOptions.className = (legOptions.className || '') + ' leaflet-cluster-spider-leg';
				} else {
					// Make sure we have a defined opacity.
					legOptions.opacity = finalLegOpacity;
				}

				group._ignoreMove = true;

				// Add markers and spider legs to map, hidden at our center point.
				// Traverse in ascending order to make sure that inner circleMarkers are on top of further legs. Normal markers are re-ordered by newPosition.
				// The reverse order trick no longer improves performance on modern browsers.
				for (i = 0; i < childMarkers.length; i++) {
					m = childMarkers[i];

					newPos = map.layerPointToLatLng(positions[i]);

					// Add the leg before the marker, so that in case the latter is a circleMarker, the leg is behind it.
					leg = new L.Polyline([thisLayerLatLng, newPos], legOptions);
					map.addLayer(leg);
					m._spiderLeg = leg;

					// Explanations: https://jakearchibald.com/2013/animated-line-drawing-svg/
					// In our case the transition property is declared in the CSS file.
					if (svg) {
						legPath = leg._path;
						legLength = legPath.getTotalLength() + 0.1; // Need a small extra length to avoid remaining dot in Firefox.
						legPath.style.strokeDasharray = legLength; // Just 1 length is enough, it will be duplicated.
						legPath.style.strokeDashoffset = legLength;
					}

					// If it is a marker, add it now and we'll animate it out
					if (m.setZIndexOffset) {
						m.setZIndexOffset(1000000); // Make normal markers appear on top of EVERYTHING
					}
					if (m.clusterHide) {
						m.clusterHide();
					}
					
					// Vectors just get immediately added
					fg.addLayer(m);

					if (m._setPos) {
						m._setPos(thisLayerPos);
					}
				}

				group._forceLayout();
				group._animationStart();

				// Reveal markers and spider legs.
				for (i = childMarkers.length - 1; i >= 0; i--) {
					newPos = map.layerPointToLatLng(positions[i]);
					m = childMarkers[i];

					//Move marker to new position
					m._preSpiderfyLatlng = m._latlng;
					m.setLatLng(newPos);
					
					if (m.clusterShow) {
						m.clusterShow();
					}

					// Animate leg (animation is actually delegated to CSS transition).
					if (svg) {
						leg = m._spiderLeg;
						legPath = leg._path;
						legPath.style.strokeDashoffset = 0;
						//legPath.style.strokeOpacity = finalLegOpacity;
						leg.setStyle({opacity: finalLegOpacity});
					}
				}
				this.setOpacity(0.3);

				group._ignoreMove = false;

				setTimeout(function () {
					group._animationEnd();
					group.fire('spiderfied', {
						cluster: me,
						markers: childMarkers
					});
				}, 200);
			},

			_animationUnspiderfy: function (zoomDetails) {
				var me = this,
					group = this._group,
					map = group._map,
					fg = group._featureGroup,
					thisLayerPos = zoomDetails ? map._latLngToNewLayerPoint(this._latlng, zoomDetails.zoom, zoomDetails.center) : map.latLngToLayerPoint(this._latlng),
					childMarkers = this.getAllChildMarkers(null, true),
					svg = L.Path.SVG,
					m, i, leg, legPath, legLength, nonAnimatable;

				group._ignoreMove = true;
				group._animationStart();

				//Make us visible and bring the child markers back in
				this.setOpacity(1);
				for (i = childMarkers.length - 1; i >= 0; i--) {
					m = childMarkers[i];

					//Marker was added to us after we were spiderfied
					if (!m._preSpiderfyLatlng) {
						continue;
					}

					//Close any popup on the marker first, otherwise setting the location of the marker will make the map scroll
					m.closePopup();

					//Fix up the location to the real one
					m.setLatLng(m._preSpiderfyLatlng);
					delete m._preSpiderfyLatlng;

					//Hack override the location to be our center
					nonAnimatable = true;
					if (m._setPos) {
						m._setPos(thisLayerPos);
						nonAnimatable = false;
					}
					if (m.clusterHide) {
						m.clusterHide();
						nonAnimatable = false;
					}
					if (nonAnimatable) {
						fg.removeLayer(m);
					}

					// Animate the spider leg back in (animation is actually delegated to CSS transition).
					if (svg) {
						leg = m._spiderLeg;
						legPath = leg._path;
						legLength = legPath.getTotalLength() + 0.1;
						legPath.style.strokeDashoffset = legLength;
						leg.setStyle({opacity: 0});
					}
				}

				group._ignoreMove = false;

				setTimeout(function () {
					//If we have only <= one child left then that marker will be shown on the map so don't remove it!
					var stillThereChildCount = 0;
					for (i = childMarkers.length - 1; i >= 0; i--) {
						m = childMarkers[i];
						if (m._spiderLeg) {
							stillThereChildCount++;
						}
					}


					for (i = childMarkers.length - 1; i >= 0; i--) {
						m = childMarkers[i];

						if (!m._spiderLeg) { //Has already been unspiderfied
							continue;
						}

						if (m.clusterShow) {
							m.clusterShow();
						}
						if (m.setZIndexOffset) {
							m.setZIndexOffset(0);
						}

						if (stillThereChildCount > 1) {
							fg.removeLayer(m);
						}

						map.removeLayer(m._spiderLeg);
						delete m._spiderLeg;
					}
					group._animationEnd();
					group.fire('unspiderfied', {
						cluster: me,
						markers: childMarkers
					});
				}, 200);
			}
		});


		L.MarkerClusterGroup.include({
			//The MarkerCluster currently spiderfied (if any)
			_spiderfied: null,

			unspiderfy: function () {
				this._unspiderfy.apply(this, arguments);
			},

			_spiderfierOnAdd: function () {
				this._map.on('click', this._unspiderfyWrapper, this);

				if (this._map.options.zoomAnimation) {
					this._map.on('zoomstart', this._unspiderfyZoomStart, this);
				}
				//Browsers without zoomAnimation or a big zoom don't fire zoomstart
				this._map.on('zoomend', this._noanimationUnspiderfy, this);

				if (!L.Browser.touch) {
					this._map.getRenderer(this);
					//Needs to happen in the pageload, not after, or animations don't work in webkit
					//  http://stackoverflow.com/questions/8455200/svg-animate-with-dynamically-added-elements
					//Disable on touch browsers as the animation messes up on a touch zoom and isn't very noticable
				}
			},

			_spiderfierOnRemove: function () {
				this._map.off('click', this._unspiderfyWrapper, this);
				this._map.off('zoomstart', this._unspiderfyZoomStart, this);
				this._map.off('zoomanim', this._unspiderfyZoomAnim, this);
				this._map.off('zoomend', this._noanimationUnspiderfy, this);

				//Ensure that markers are back where they should be
				// Use no animation to avoid a sticky leaflet-cluster-anim class on mapPane
				this._noanimationUnspiderfy();
			},

			//On zoom start we add a zoomanim handler so that we are guaranteed to be last (after markers are animated)
			//This means we can define the animation they do rather than Markers doing an animation to their actual location
			_unspiderfyZoomStart: function () {
				if (!this._map) { //May have been removed from the map by a zoomEnd handler
					return;
				}

				this._map.on('zoomanim', this._unspiderfyZoomAnim, this);
			},

			_unspiderfyZoomAnim: function (zoomDetails) {
				//Wait until the first zoomanim after the user has finished touch-zooming before running the animation
				if (L.DomUtil.hasClass(this._map._mapPane, 'leaflet-touching')) {
					return;
				}

				this._map.off('zoomanim', this._unspiderfyZoomAnim, this);
				this._unspiderfy(zoomDetails);
			},

			_unspiderfyWrapper: function () {
				/// <summary>_unspiderfy but passes no arguments</summary>
				this._unspiderfy();
			},

			_unspiderfy: function (zoomDetails) {
				if (this._spiderfied) {
					this._spiderfied.unspiderfy(zoomDetails);
				}
			},

			_noanimationUnspiderfy: function () {
				if (this._spiderfied) {
					this._spiderfied._noanimationUnspiderfy();
				}
			},

			//If the given layer is currently being spiderfied then we unspiderfy it so it isn't on the map anymore etc
			_unspiderfyLayer: function (layer) {
				if (layer._spiderLeg) {
					this._featureGroup.removeLayer(layer);

					if (layer.clusterShow) {
						layer.clusterShow();
					}
						//Position will be fixed up immediately in _animationUnspiderfy
					if (layer.setZIndexOffset) {
						layer.setZIndexOffset(0);
					}

					this._map.removeLayer(layer._spiderLeg);
					delete layer._spiderLeg;
				}
			}
		});

		/**
		 * Adds 1 public method to MCG and 1 to L.Marker to facilitate changing
		 * markers' icon options and refreshing their icon and their parent clusters
		 * accordingly (case where their iconCreateFunction uses data of childMarkers
		 * to make up the cluster icon).
		 */


		L.MarkerClusterGroup.include({
			/**
			 * Updates the icon of all clusters which are parents of the given marker(s).
			 * In singleMarkerMode, also updates the given marker(s) icon.
			 * @param layers L.MarkerClusterGroup|L.LayerGroup|Array(L.Marker)|Map(L.Marker)|
			 * L.MarkerCluster|L.Marker (optional) list of markers (or single marker) whose parent
			 * clusters need to be updated. If not provided, retrieves all child markers of this.
			 * @returns {L.MarkerClusterGroup}
			 */
			refreshClusters: function (layers) {
				if (!layers) {
					layers = this._topClusterLevel.getAllChildMarkers();
				} else if (layers instanceof L.MarkerClusterGroup) {
					layers = layers._topClusterLevel.getAllChildMarkers();
				} else if (layers instanceof L.LayerGroup) {
					layers = layers._layers;
				} else if (layers instanceof L.MarkerCluster) {
					layers = layers.getAllChildMarkers();
				} else if (layers instanceof L.Marker) {
					layers = [layers];
				} // else: must be an Array(L.Marker)|Map(L.Marker)
				this._flagParentsIconsNeedUpdate(layers);
				this._refreshClustersIcons();

				// In case of singleMarkerMode, also re-draw the markers.
				if (this.options.singleMarkerMode) {
					this._refreshSingleMarkerModeMarkers(layers);
				}

				return this;
			},

			/**
			 * Simply flags all parent clusters of the given markers as having a "dirty" icon.
			 * @param layers Array(L.Marker)|Map(L.Marker) list of markers.
			 * @private
			 */
			_flagParentsIconsNeedUpdate: function (layers) {
				var id, parent;

				// Assumes layers is an Array or an Object whose prototype is non-enumerable.
				for (id in layers) {
					// Flag parent clusters' icon as "dirty", all the way up.
					// Dumb process that flags multiple times upper parents, but still
					// much more efficient than trying to be smart and make short lists,
					// at least in the case of a hierarchy following a power law:
					// http://jsperf.com/flag-nodes-in-power-hierarchy/2
					parent = layers[id].__parent;
					while (parent) {
						parent._iconNeedsUpdate = true;
						parent = parent.__parent;
					}
				}
			},

			/**
			 * Re-draws the icon of the supplied markers.
			 * To be used in singleMarkerMode only.
			 * @param layers Array(L.Marker)|Map(L.Marker) list of markers.
			 * @private
			 */
			_refreshSingleMarkerModeMarkers: function (layers) {
				var id, layer;

				for (id in layers) {
					layer = layers[id];

					// Make sure we do not override markers that do not belong to THIS group.
					if (this.hasLayer(layer)) {
						// Need to re-create the icon first, then re-draw the marker.
						layer.setIcon(this._overrideMarkerIcon(layer));
					}
				}
			}
		});

		L.Marker.include({
			/**
			 * Updates the given options in the marker's icon and refreshes the marker.
			 * @param options map object of icon options.
			 * @param directlyRefreshClusters boolean (optional) true to trigger
			 * MCG.refreshClustersOf() right away with this single marker.
			 * @returns {L.Marker}
			 */
			refreshIconOptions: function (options, directlyRefreshClusters) {
				var icon = this.options.icon;

				L.setOptions(icon, options);

				this.setIcon(icon);

				// Shortcut to refresh the associated MCG clusters right away.
				// To be used when refreshing a single marker.
				// Otherwise, better use MCG.refreshClusters() once at the end with
				// the list of modified markers.
				if (directlyRefreshClusters && this.__parent) {
					this.__parent._group.refreshClusters(this);
				}

				return this;
			}
		});

		exports.MarkerClusterGroup = MarkerClusterGroup;
		exports.MarkerCluster = MarkerCluster;

		Object.defineProperty(exports, '__esModule', { value: true });

	}));
	
} (leaflet_markerclusterSrc, leaflet_markerclusterSrc.exports));

delete L$1.Icon.Default.prototype._getIconUrl;
L$1.Icon.Default.mergeOptions({
  iconRetinaUrl: "https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png",
  iconUrl: "https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png",
  shadowUrl: "https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png"
});
const Map$1 = ({
  markers = [],
  center,
  zoom = 13,
  height = "500px",
  singleMarker
}) => {
  const [mapInstance, setMapInstance] = reactExports.useState(null);
  const [markerClusterGroup, setMarkerClusterGroup] = reactExports.useState(null);
  const mapRef = reactExports.useCallback((node) => {
    if (node !== null && !mapInstance) {
      try {
        const initialCenter = singleMarker && singleMarker.latitude && singleMarker.longitude ? [singleMarker.latitude, singleMarker.longitude] : center;
        const map = L$1.map(node).setView(initialCenter, zoom);
        L$1.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
          attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);
        const markerCluster = L$1.markerClusterGroup({
          maxClusterRadius: 50,
          spiderfyOnMaxZoom: true,
          showCoverageOnHover: false,
          zoomToBoundsOnClick: true,
          chunkedLoading: true,
          chunkProgress: (processed, total, elapsed) => {
            if (processed === total) {
              console.log(`All ${total} markers loaded in ${elapsed}ms`);
            }
          }
        });
        if (singleMarker) {
          const lat = singleMarker.latitude || singleMarker.position && singleMarker.position[0];
          const lng = singleMarker.longitude || singleMarker.position && singleMarker.position[1];
          const title = singleMarker.name || singleMarker.title;
          if (lat && lng) {
            const marker = L$1.marker([lat, lng]);
            marker.bindPopup(`
              <div style="min-width: 200px;">
                <h3 style="margin: 0 0 8px 0; font-size: 1.1rem; font-weight: bold;">
                  ${title}
                </h3>
                ${singleMarker.architect ? `
                  <p style="margin: 0 0 4px 0; font-size: 0.9rem;">
                    <strong>建築家:</strong> ${singleMarker.architect}
                  </p>
                ` : ""}
                ${singleMarker.year ? `
                  <p style="margin: 0 0 4px 0; font-size: 0.9rem;">
                    <strong>竣工年:</strong> ${singleMarker.year}年
                  </p>
                ` : ""}
                ${singleMarker.location ? `
                  <p style="margin: 0 0 12px 0; font-size: 0.9rem; color: #666;">
                    ${singleMarker.location}
                  </p>
                ` : ""}
                <a 
                  href="/architecture/${singleMarker.id}"
                  style="
                    display: inline-block;
                    padding: 6px 12px;
                    background-color: #1976d2;
                    color: white;
                    text-decoration: none;
                    border-radius: 4px;
                    font-size: 0.875rem;
                  "
                  onclick="window.location.href='/architecture/${singleMarker.id}'; return false;"
                >
                  詳細を見る
                </a>
              </div>
            `);
            markerCluster.addLayer(marker);
          }
        }
        markers.forEach((marker) => {
          const lat = marker.latitude || marker.position && marker.position[0];
          const lng = marker.longitude || marker.position && marker.position[1];
          const title = marker.name || marker.title;
          if (lat && lng) {
            const leafletMarker = L$1.marker([lat, lng]);
            leafletMarker.bindPopup(`
              <div style="min-width: 250px;">
                <h3 style="margin: 0 0 8px 0; font-size: 1.1rem; font-weight: bold;">
                  ${title || "建築作品"}
                </h3>
                ${marker.architect ? `
                  <p style="margin: 0 0 4px 0; font-size: 0.9rem;">
                    <strong>建築家:</strong> ${marker.architect}
                  </p>
                ` : ""}
                ${marker.year ? `
                  <p style="margin: 0 0 4px 0; font-size: 0.9rem;">
                    <strong>竣工年:</strong> ${marker.year}年
                  </p>
                ` : ""}
                ${marker.category ? `
                  <p style="margin: 0 0 4px 0; font-size: 0.9rem;">
                    <strong>カテゴリ:</strong> ${marker.category}
                  </p>
                ` : ""}
                ${marker.tags ? `
                  <p style="margin: 0 0 4px 0; font-size: 0.9rem;">
                    <strong>受賞:</strong> <span style="color: #ff6f00;">${marker.tags}</span>
                  </p>
                ` : ""}
                ${marker.location ? `
                  <p style="margin: 0 0 12px 0; font-size: 0.9rem; color: #666;">
                    <strong>所在地:</strong> ${marker.location}
                  </p>
                ` : ""}
                <a 
                  href="/architecture/${marker.id}"
                  style="
                    display: inline-block;
                    padding: 6px 12px;
                    background-color: #1976d2;
                    color: white;
                    text-decoration: none;
                    border-radius: 4px;
                    font-size: 0.875rem;
                  "
                  onclick="window.location.href='/architecture/${marker.id}'; return false;"
                >
                  詳細を見る
                </a>
              </div>
            `);
            markerCluster.addLayer(leafletMarker);
          }
        });
        if (markers.length > 0 && !singleMarker) {
          const validMarkers = markers.filter((m) => {
            const lat = m.latitude || m.position && m.position[0];
            const lng = m.longitude || m.position && m.position[1];
            return lat && lng;
          });
          if (validMarkers.length > 0) {
            const bounds = L$1.latLngBounds(validMarkers.map((m) => {
              const lat = m.latitude || m.position && m.position[0];
              const lng = m.longitude || m.position && m.position[1];
              return [lat, lng];
            }));
            map.fitBounds(bounds, { padding: [50, 50] });
          }
        }
        map.addLayer(markerCluster);
        setMarkerClusterGroup(markerCluster);
        setMapInstance(map);
      } catch (error) {
        console.error("Map initialization error:", error);
      }
    }
  }, [center, zoom, singleMarker, mapInstance]);
  reactExports.useEffect(() => {
    if (mapInstance && markerClusterGroup && markers.length > 0) {
      markerClusterGroup.clearLayers();
      markers.forEach((marker) => {
        const lat = marker.latitude || marker.position && marker.position[0];
        const lng = marker.longitude || marker.position && marker.position[1];
        const title = marker.name || marker.title;
        if (lat && lng) {
          const leafletMarker = L$1.marker([lat, lng]);
          leafletMarker.bindPopup(`
            <div style="min-width: 250px;">
              <h3 style="margin: 0 0 8px 0; font-size: 1.1rem; font-weight: bold;">
                ${title || "建築作品"}
              </h3>
              ${marker.architect ? `
                <p style="margin: 0 0 4px 0; font-size: 0.9rem;">
                  <strong>建築家:</strong> ${marker.architect}
                </p>
              ` : ""}
              ${marker.year ? `
                <p style="margin: 0 0 4px 0; font-size: 0.9rem;">
                  <strong>竣工年:</strong> ${marker.year}年
                </p>
              ` : ""}
              ${marker.category ? `
                <p style="margin: 0 0 4px 0; font-size: 0.9rem;">
                  <strong>カテゴリ:</strong> ${marker.category}
                </p>
              ` : ""}
              ${marker.tags ? `
                <p style="margin: 0 0 4px 0; font-size: 0.9rem;">
                  <strong>受賞:</strong> <span style="color: #ff6f00;">${marker.tags}</span>
                </p>
              ` : ""}
              ${marker.location ? `
                <p style="margin: 0 0 12px 0; font-size: 0.9rem; color: #666;">
                  <strong>所在地:</strong> ${marker.location}
                </p>
              ` : ""}
              <a 
                href="/architecture/${marker.id}"
                style="
                  display: inline-block;
                  padding: 6px 12px;
                  background-color: #1976d2;
                  color: white;
                  text-decoration: none;
                  border-radius: 4px;
                  font-size: 0.875rem;
                "
                onclick="window.location.href='/architecture/${marker.id}'; return false;"
              >
                詳細を見る
              </a>
            </div>
          `);
          markerClusterGroup.addLayer(leafletMarker);
        }
      });
      const validMarkers = markers.filter((m) => {
        const lat = m.latitude || m.position && m.position[0];
        const lng = m.longitude || m.position && m.position[1];
        return lat && lng;
      });
      if (validMarkers.length > 0) {
        const bounds = L$1.latLngBounds(validMarkers.map((m) => {
          const lat = m.latitude || m.position && m.position[0];
          const lng = m.longitude || m.position && m.position[1];
          return [lat, lng];
        }));
        mapInstance.fitBounds(bounds, { padding: [50, 50] });
      }
    }
  }, [markers, mapInstance, markerClusterGroup]);
  reactExports.useEffect(() => {
    return () => {
      if (markerClusterGroup && mapInstance) {
        mapInstance.removeLayer(markerClusterGroup);
      }
      if (mapInstance) {
        mapInstance.remove();
      }
    };
  }, [mapInstance, markerClusterGroup]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "div",
    {
      ref: mapRef,
      style: { height, width: "100%", marginBottom: "20px" },
      className: "leaflet-container"
    }
  );
};

const ArchitectureSinglePage = () => {
  const { id } = useParams();
  const [work, setWork] = reactExports.useState(null);
  const [loading, setLoading] = reactExports.useState(true);
  const [error, setError] = reactExports.useState(null);
  const navigate = useNavigate();
  reactExports.useEffect(() => {
    const fetchWork = async () => {
      setLoading(true);
      try {
        const data = await getArchitectureById$1(parseInt(id));
        if (!data) {
          throw new Error("建築作品が見つかりませんでした");
        }
        const transformedData = {
          id: data.id,
          name: data.title,
          location: data.address,
          completedYear: data.year || 0,
          latitude: data.latitude,
          longitude: data.longitude,
          architect: data.architect ? {
            id: 0,
            // We don't have architect ID in JSON
            name: data.architect
          } : null,
          city: data.prefecture || "",
          // Use prefecture field
          bigCategory: data.big_category || data.category,
          category: data.category,
          description: data.description,
          tag: data.tags || "",
          // Use tags field from JSON
          shinkenchikuUrl: data.shinkenchiku_url || "",
          // Use actual shinkenchiku URL
          contractor: data.contractor,
          structuralDesigner: data.structural_designer,
          landscapeDesigner: data.landscape_designer
        };
        setWork(transformedData);
      } catch (error2) {
        console.error("Error fetching work:", error2);
        setError(error2.message);
      } finally {
        setLoading(false);
      }
    };
    fetchWork();
  }, [id]);
  if (loading) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { display: "flex", justifyContent: "center", alignItems: "center", minHeight: "60vh" }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(CircularProgress, {}) });
  }
  if (error) {
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(Container, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "h5", color: "error", sx: { textAlign: "center", my: 4 }, children: [
        "エラーが発生しました: ",
        error
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Button,
        {
          variant: "contained",
          component: Link,
          to: "/architecture",
          startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowBackIcon, {}),
          children: "建築作品一覧に戻る"
        }
      )
    ] });
  }
  if (!work) {
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(Container, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h5", sx: { textAlign: "center", my: 4 }, children: "建築作品が見つかりませんでした" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Button,
        {
          variant: "contained",
          component: Link,
          to: "/architecture",
          startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowBackIcon, {}),
          children: "建築作品一覧に戻る"
        }
      )
    ] });
  }
  const tags = work.tag ? work.tag.split(",").filter((tag) => tag.trim() !== "" && !tag.includes("の追加建築")) : [];
  const shinkenchikuInfo = tags.find((tag) => tag.includes("新建築"));
  const shinkenchikuLabel = shinkenchikuInfo ? shinkenchikuInfo.replace("新建築", "") : "";
  const handleTagClick = (tag) => {
    console.log(`タグがクリックされました: ${tag}`);
    navigate(`/architecture?search=tag:${encodeURIComponent(tag)}`);
  };
  const getGoogleImageSearchUrl = (workName, architect) => {
    const searchQuery = `${workName} ${architect?.name || ""} 建築`;
    return `https://www.google.com/search?q=${encodeURIComponent(searchQuery)}&tbm=isch`;
  };
  const getWikipediaSearchUrl = (workName) => {
    return `https://ja.wikipedia.org/wiki/Special:Search?search=${encodeURIComponent(workName)}`;
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(Container, { maxWidth: "lg", sx: { py: 4 }, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Button,
      {
        variant: "outlined",
        component: Link,
        to: "/architecture",
        startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowBackIcon, {}),
        sx: { mb: 3 },
        children: "建築作品一覧に戻る"
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 3, mb: 4 }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mb: 2 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h4", component: "h1", gutterBottom: true, children: work.name || "無題" }),
        work.location && /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "subtitle1", color: "text.secondary", gutterBottom: true, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(LocationOn, { fontSize: "small", sx: { verticalAlign: "middle", mr: 0.5 } }),
          work.location
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", flexWrap: "wrap", gap: 1, mb: 2 }, children: [
          work.completedYear !== 0 && /* @__PURE__ */ jsxRuntimeExports.jsx(
            Chip,
            {
              icon: /* @__PURE__ */ jsxRuntimeExports.jsx(CalendarTodayIcon, {}),
              label: `${work.completedYear}年`,
              variant: "outlined",
              size: "small",
              onClick: () => navigate(`/architecture?year=${work.completedYear}`),
              clickable: true
            }
          ),
          work.city && /* @__PURE__ */ jsxRuntimeExports.jsx(
            Chip,
            {
              icon: /* @__PURE__ */ jsxRuntimeExports.jsx(LocationOn, {}),
              label: work.city,
              variant: "outlined",
              size: "small",
              onClick: () => navigate(`/architecture?prefecture=${encodeURIComponent(work.city)}`),
              clickable: true
            }
          ),
          work.architect && work.architect.name && /* @__PURE__ */ jsxRuntimeExports.jsx(
            Chip,
            {
              icon: /* @__PURE__ */ jsxRuntimeExports.jsx(Person, {}),
              label: work.architect.name,
              component: Link,
              to: `/architects/${work.architect.id}`,
              clickable: true,
              color: "primary",
              size: "small"
            }
          ),
          work.bigCategory && /* @__PURE__ */ jsxRuntimeExports.jsx(
            Chip,
            {
              icon: /* @__PURE__ */ jsxRuntimeExports.jsx(Category, {}),
              label: work.bigCategory,
              variant: "outlined",
              size: "small",
              onClick: () => navigate(`/architecture?category=${encodeURIComponent(work.bigCategory)}`),
              clickable: true
            }
          ),
          work.category && work.category !== work.bigCategory && /* @__PURE__ */ jsxRuntimeExports.jsx(
            Chip,
            {
              icon: /* @__PURE__ */ jsxRuntimeExports.jsx(Category, {}),
              label: work.category,
              variant: "outlined",
              size: "small",
              onClick: () => navigate(`/architecture?category=${encodeURIComponent(work.category)}`),
              clickable: true
            }
          )
        ] }),
        tags.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { display: "flex", flexWrap: "wrap", gap: 1, mb: 2 }, children: tags.map((tag, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(
          Chip,
          {
            icon: /* @__PURE__ */ jsxRuntimeExports.jsx(EmojiEvents, {}),
            label: tag,
            onClick: () => handleTagClick(tag),
            clickable: true,
            color: "secondary",
            variant: "outlined",
            size: "small"
          },
          index
        )) })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Divider, { sx: { my: 3 } }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mb: 3, display: "flex", flexDirection: "row", gap: 1 }, children: [
        work.shinkenchikuUrl && /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip$1, { title: "新建築データで見る", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          Button,
          {
            variant: "contained",
            href: work.shinkenchikuUrl,
            target: "_blank",
            rel: "noopener noreferrer",
            size: "small",
            sx: {
              backgroundColor: "#003366",
              // 紺色
              color: "#ffffff",
              "&:hover": {
                backgroundColor: "#002244"
              }
            },
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: {
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                mr: 0.5
              }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                "img",
                {
                  src: "https://data.shinkenchiku.online/favicon.ico",
                  alt: "新建築データ",
                  style: {
                    height: "16px",
                    width: "auto",
                    marginRight: "4px"
                  }
                }
              ) }),
              shinkenchikuLabel && /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "caption", children: shinkenchikuLabel })
            ]
          }
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip$1, { title: "Google画像検索", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button,
          {
            href: getGoogleImageSearchUrl(work.name, work.architect),
            target: "_blank",
            rel: "noopener noreferrer",
            startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(ImageSearchIcon, {}),
            variant: "contained",
            size: "small",
            sx: {
              backgroundColor: "#4285F4",
              color: "#ffffff",
              "&:hover": {
                backgroundColor: "#3367D6"
              }
            },
            children: "画像"
          }
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip$1, { title: "Wikipediaで検索", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button,
          {
            href: getWikipediaSearchUrl(work.name),
            target: "_blank",
            rel: "noopener noreferrer",
            startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(WikipediaIcon$1, {}),
            variant: "contained",
            size: "small",
            sx: {
              backgroundColor: "#333333",
              color: "#ffffff",
              "&:hover": {
                backgroundColor: "#222222"
              }
            },
            children: "Wikipedia"
          }
        ) })
      ] }),
      work.description && /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mt: 3 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, children: "概要" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body1", paragraph: true, sx: { whiteSpace: "pre-line" }, children: work.description })
      ] }),
      (work.contractor || work.structuralDesigner || work.landscapeDesigner) && /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mt: 3 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, children: "建築関係者" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { container: true, spacing: 2, children: [
          work.contractor && /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { item: true, xs: 12, sm: 4, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "subtitle2", color: "text.secondary", children: "施工" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", children: work.contractor })
          ] }),
          work.structuralDesigner && /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { item: true, xs: 12, sm: 4, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "subtitle2", color: "text.secondary", children: "構造設計" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", children: work.structuralDesigner })
          ] }),
          work.landscapeDesigner && /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { item: true, xs: 12, sm: 4, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "subtitle2", color: "text.secondary", children: "ランドスケープ" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", children: work.landscapeDesigner })
          ] })
        ] })
      ] }),
      work.latitude && work.longitude && /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mt: 3 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, children: "位置情報" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { height: "400px", width: "100%", mt: 2, border: "1px solid #eee", borderRadius: "4px", overflow: "hidden" }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Map$1,
          {
            singleMarker: {
              id: work.id || 0,
              latitude: work.latitude,
              longitude: work.longitude,
              name: work.name,
              location: work.location
            },
            center: [work.latitude, work.longitude],
            zoom: 15
          }
        ) })
      ] })
    ] })
  ] });
};

const BASE_PATH = "/archi-site";
let worker = null;
let database = null;
let isInitializing = false;
let initPromise = null;
var DatabaseStatus = /* @__PURE__ */ ((DatabaseStatus2) => {
  DatabaseStatus2["NOT_INITIALIZED"] = "not_initialized";
  DatabaseStatus2["INITIALIZING"] = "initializing";
  DatabaseStatus2["READY"] = "ready";
  DatabaseStatus2["ERROR"] = "error";
  return DatabaseStatus2;
})(DatabaseStatus || {});
const getDatabaseStatus = () => {
  if (worker || database) return "ready" /* READY */;
  if (isInitializing) return "initializing" /* INITIALIZING */;
  return "not_initialized" /* NOT_INITIALIZED */;
};
async function tryChunkedLoading() {
  console.log("🚀 Attempting chunked database loading...");
  try {
    const sqlJsHttpvfs = await __vitePreload(() => import('./database-x2YvVIBQ.js').then(n => n.i),true?__vite__mapDeps([2,1]):void 0);
    const { createDbWorker } = sqlJsHttpvfs;
    if (!createDbWorker || typeof createDbWorker !== "function") {
      throw new Error("createDbWorker function not found in sql.js-httpvfs module");
    }
    const configResponse = await fetch(`${BASE_PATH}/db/database-info.json`, { method: "HEAD" });
    if (!configResponse.ok) {
      throw new Error(`Database config not accessible: ${configResponse.status}`);
    }
    console.log("✅ Database config is accessible");
    const dbConfig = [{
      from: "jsonconfig",
      configUrl: `${BASE_PATH}/db/archimap.sqlite3.json`
    }];
    console.log("🔧 Using jsonconfig for production-safe loading");
    const publicUrl = window.location.origin;
    const workerUrl = `${publicUrl}${BASE_PATH}/sqlite.worker.js`;
    const wasmUrl = `${publicUrl}${BASE_PATH}/sql-wasm.wasm`;
    console.log("📍 Worker URL:", workerUrl);
    console.log("📍 WASM URL:", wasmUrl);
    worker = await createDbWorker(dbConfig, workerUrl, wasmUrl);
    console.log("✅ Chunked database worker initialized");
    try {
      const exec = worker.db.exec || worker.db["exec"];
      if (!exec || typeof exec !== "function") {
        throw new Error("exec method not found on worker.db");
      }
      const versionResult = await exec.call(worker.db, "SELECT sqlite_version()");
      if (versionResult && versionResult.length > 0) {
        console.log(`🔍 SQLite version: ${versionResult[0].values[0][0]}`);
      }
    } catch (versionError) {
      console.warn("⚠️ Version check failed, but continuing:", versionError);
    }
    try {
      const exec = worker.db.exec || worker.db["exec"];
      const archCountResult = await exec.call(worker.db, "SELECT COUNT(*) FROM ZCDARCHITECTURE");
      if (archCountResult && archCountResult.length > 0) {
        console.log(`🏢 Architecture records: ${archCountResult[0].values[0][0]} (chunked loading)`);
      }
    } catch (tableError) {
      console.warn("⚠️ Architecture table check failed:", tableError);
    }
    try {
      const exec = worker.db.exec || worker.db["exec"];
      const architectCountResult = await exec.call(worker.db, "SELECT COUNT(*) FROM ZCDARCHITECT");
      if (architectCountResult && architectCountResult.length > 0) {
        console.log(`👤 Architect records: ${architectCountResult[0].values[0][0]} (chunked loading)`);
      }
    } catch (tableError) {
      console.warn("⚠️ Architect table check failed:", tableError);
    }
    return worker;
  } catch (error) {
    console.warn("⚠️ Chunked loading failed:", error);
    throw error;
  }
}
async function tryDirectLoading() {
  console.log("🚀 Fallback: Direct loading (may be slow for large files)...");
  try {
    const sqlJsModule = await __vitePreload(() => import('./database-x2YvVIBQ.js').then(n => n.s),true?__vite__mapDeps([2,1]):void 0);
    const initSqlJs = sqlJsModule.default;
    if (!initSqlJs || typeof initSqlJs !== "function") {
      throw new Error("sql.js initialization function not found");
    }
    const SQL = await initSqlJs({
      locateFile: (file) => {
        if (file === "sql-wasm.wasm") {
          return `${BASE_PATH}/sql-wasm.wasm`;
        }
        return file;
      }
    });
    console.log("📥 Downloading 12MB database (this may take time)...");
    const dbResponse = await fetch(`${BASE_PATH}/db/archimap.sqlite`);
    if (!dbResponse.ok) {
      throw new Error(`Failed to download database: ${dbResponse.status}`);
    }
    const dbArrayBuffer = await dbResponse.arrayBuffer();
    console.log(`✅ Database downloaded: ${(dbArrayBuffer.byteLength / 1024 / 1024).toFixed(2)} MB`);
    database = new SQL.Database(new Uint8Array(dbArrayBuffer));
    const archCountResult = database.exec("SELECT COUNT(*) FROM ZCDARCHITECTURE");
    if (archCountResult.length > 0) {
      console.log(`🏢 Architecture records: ${archCountResult[0].values[0][0]} (direct loading)`);
    }
    const architectCountResult = database.exec("SELECT COUNT(*) FROM ZCDARCHITECT");
    if (architectCountResult.length > 0) {
      console.log(`👤 Architect records: ${architectCountResult[0].values[0][0]} (direct loading)`);
    }
    return database;
  } catch (error) {
    console.error("❌ Direct loading failed:", error);
    throw error;
  }
}
const initDatabase = async () => {
  console.log("🔍 initDatabase called - Current state:", {
    hasWorker: !!worker,
    hasDatabase: !!database,
    isInitializing,
    hasInitPromise: !!initPromise
  });
  if (worker || database) {
    console.log("✅ Database already initialized");
    return worker || database;
  }
  if (initPromise) {
    console.log("⏳ Database initialization already in progress");
    return initPromise;
  }
  isInitializing = true;
  initPromise = (async () => {
    try {
      console.log("🚀 Starting database initialization (chunked preferred)...");
      console.log("📍 Current URL:", window.location.href);
      try {
        const result2 = await tryChunkedLoading();
        console.log("🎉 Chunked loading successful!");
        return result2;
      } catch (chunkedError) {
        console.warn("⚠️ Chunked loading failed, trying direct loading:", chunkedError.message);
      }
      const result = await tryDirectLoading();
      console.log("🎉 Direct loading successful!");
      return result;
    } catch (error) {
      console.error("❌ Database initialization failed:", error);
      worker = null;
      database = null;
      throw error;
    } finally {
      isInitializing = false;
      initPromise = null;
    }
  })();
  return initPromise;
};
const executeQuery = async (query, params = []) => {
  console.log("📊 executeQuery called:", { query: query.substring(0, 50) + "...", hasWorker: !!worker, hasDatabase: !!database });
  if (!worker && !database) {
    console.log("📊 No database connection, initializing...");
    await initDatabase();
  }
  if (worker) {
    try {
      const exec = worker.db.exec || worker.db["exec"];
      if (!exec || typeof exec !== "function") {
        throw new Error("exec method not found on worker.db");
      }
      const result = await exec.call(worker.db, query, params);
      return result;
    } catch (error) {
      console.error("Worker query error:", error);
      throw error;
    }
  } else if (database) {
    try {
      const result = database.exec(query, params);
      return result;
    } catch (error) {
      console.error("Database query error:", error);
      throw error;
    }
  } else {
    throw new Error("Database not initialized");
  }
};
const resultsToObjects = (result) => {
  if (!result || result.length === 0) {
    return [];
  }
  const { columns, values } = result[0];
  return values.map((row) => {
    const obj = {};
    columns.forEach((col, i) => {
      obj[col] = row[i];
    });
    return obj;
  });
};
const getResultsArray = async (query, params = []) => {
  const results = await executeQuery(query, params);
  return resultsToObjects(results);
};
const getSingleResult = async (query, params = []) => {
  const results = await getResultsArray(query, params);
  return results[0];
};

const getAllArchitects = async (page = 1, limit = 12, searchTerm = "", sortBy = "name_asc") => {
  console.log("🏗️ RealArchitectService.getAllArchitects called with:", { page, limit, searchTerm, sortBy });
  try {
    let whereClause = "";
    let orderClause = "";
    if (searchTerm) {
      const term = `%${searchTerm}%`;
      whereClause = `WHERE (
        ZAT_ARCHITECT LIKE '${term}' OR 
        ZAT_ARCHITECT_EN LIKE '${term}' OR 
        ZAT_NATIONALITY LIKE '${term}' OR 
        ZAT_CATEGORY LIKE '${term}' OR 
        ZAT_SCHOOL LIKE '${term}' OR
        ZAT_OFFICE LIKE '${term}'
      )`;
    }
    switch (sortBy) {
      case "name_asc":
        orderClause = "ORDER BY ZAT_ARCHITECT ASC";
        break;
      case "name_desc":
        orderClause = "ORDER BY ZAT_ARCHITECT DESC";
        break;
      case "birth_year_asc":
        orderClause = "ORDER BY ZAT_BIRTHYEAR ASC";
        break;
      case "birth_year_desc":
        orderClause = "ORDER BY ZAT_BIRTHYEAR DESC";
        break;
      default:
        orderClause = "ORDER BY ZAT_ARCHITECT ASC";
    }
    const countQuery = `SELECT COUNT(*) as total FROM ZCDARCHITECT ${whereClause}`;
    console.log("📊 Count query:", countQuery);
    const countResult = await getSingleResult(countQuery);
    console.log("📊 Count result:", countResult);
    const total = countResult?.total || 0;
    console.log("📊 Total architects found:", total);
    const offset = (page - 1) * limit;
    const dataQuery = `
      SELECT 
        Z_PK,
        ZAT_ID,
        ZAT_ARCHITECT,
        ZAT_ARCHITECT_JP,
        ZAT_ARCHITECT_EN,
        ZAT_BIRTHYEAR,
        ZAT_DEATHYEAR,
        ZAT_NATIONALITY,
        ZAT_CATEGORY,
        ZAT_SCHOOL,
        ZAT_OFFICE,
        ZAT_DESCRIPTION,
        ZAT_WEBSITE
      FROM ZCDARCHITECT 
      ${whereClause}
      ${orderClause}
      LIMIT ${limit} OFFSET ${offset}
    `;
    const architects = await getResultsArray(dataQuery);
    const mappedArchitects = architects.map((architect) => ({
      ...architect,
      id: architect.ZAT_ID || architect.Z_PK || 0,
      name: architect.ZAT_ARCHITECT || "",
      nameJp: architect.ZAT_ARCHITECT_JP,
      nameEn: architect.ZAT_ARCHITECT_EN,
      birthYear: architect.ZAT_BIRTHYEAR,
      deathYear: architect.ZAT_DEATHYEAR,
      nationality: architect.ZAT_NATIONALITY,
      category: architect.ZAT_CATEGORY,
      school: architect.ZAT_SCHOOL,
      office: architect.ZAT_OFFICE,
      bio: architect.ZAT_DESCRIPTION,
      mainWorks: void 0,
      awards: void 0,
      imageUrl: void 0
    }));
    return {
      results: mappedArchitects,
      total,
      page,
      limit,
      totalPages: Math.ceil(total / limit)
    };
  } catch (error) {
    console.error("❌ Error in RealArchitectService.getAllArchitects:", error);
    console.error("Error details:", {
      message: error instanceof Error ? error.message : "Unknown error",
      stack: error instanceof Error ? error.stack : void 0
    });
    throw error;
  }
};
const searchArchitects = async (searchTerm = "", filters = {}, page = 1, limit = 12) => {
  try {
    const conditions = [];
    if (searchTerm) {
      const term = `%${searchTerm}%`;
      conditions.push(`(
        ZAT_ARCHITECT LIKE '${term}' OR 
        ZAT_ARCHITECT_EN LIKE '${term}' OR 
        ZAT_NATIONALITY LIKE '${term}' OR 
        ZAT_CATEGORY LIKE '${term}' OR 
        ZAT_SCHOOL LIKE '${term}' OR
        ZAT_OFFICE LIKE '${term}' OR
        ZAT_DESCRIPTION LIKE '${term}'
      )`);
    }
    if (filters.nationality) {
      conditions.push(`ZAT_NATIONALITY = '${filters.nationality}'`);
    }
    if (filters.category) {
      conditions.push(`ZAT_CATEGORY = '${filters.category}'`);
    }
    if (filters.school) {
      conditions.push(`ZAT_SCHOOL LIKE '%${filters.school}%'`);
    }
    if (filters.birthYearFrom) {
      conditions.push(`ZAT_BIRTHYEAR >= ${filters.birthYearFrom}`);
    }
    if (filters.birthYearTo) {
      conditions.push(`ZAT_BIRTHYEAR <= ${filters.birthYearTo}`);
    }
    const whereClause = conditions.length > 0 ? `WHERE ${conditions.join(" AND ")}` : "";
    const countQuery = `SELECT COUNT(*) as total FROM ZCDARCHITECT ${whereClause}`;
    const countResult = await getSingleResult(countQuery);
    const total = countResult?.total || 0;
    const offset = (page - 1) * limit;
    const dataQuery = `
      SELECT 
        Z_PK,
        ZAT_ID,
        ZAT_ARCHITECT,
        ZAT_ARCHITECT_JP,
        ZAT_ARCHITECT_EN,
        ZAT_BIRTHYEAR,
        ZAT_DEATHYEAR,
        ZAT_NATIONALITY,
        ZAT_CATEGORY,
        ZAT_SCHOOL,
        ZAT_OFFICE,
        ZAT_DESCRIPTION,
        ZAT_WEBSITE
      FROM ZCDARCHITECT 
      ${whereClause}
      ORDER BY ZAT_ARCHITECT ASC
      LIMIT ${limit} OFFSET ${offset}
    `;
    const architects = await getResultsArray(dataQuery);
    const mappedArchitects = architects.map((architect) => ({
      ...architect,
      id: architect.ZAT_ID || architect.Z_PK || 0,
      name: architect.ZAT_ARCHITECT || "",
      nameJp: architect.ZAT_ARCHITECT_JP,
      nameEn: architect.ZAT_ARCHITECT_EN,
      birthYear: architect.ZAT_BIRTHYEAR,
      deathYear: architect.ZAT_DEATHYEAR,
      nationality: architect.ZAT_NATIONALITY,
      category: architect.ZAT_CATEGORY,
      school: architect.ZAT_SCHOOL,
      office: architect.ZAT_OFFICE,
      bio: architect.ZAT_DESCRIPTION,
      mainWorks: void 0,
      awards: void 0,
      imageUrl: void 0
    }));
    return {
      results: mappedArchitects,
      total,
      page,
      limit,
      totalPages: Math.ceil(total / limit)
    };
  } catch (error) {
    console.error("Error searching architects:", error);
    throw error;
  }
};
const getArchitectById = async (id) => {
  try {
    const query = `
      SELECT 
        Z_PK,
        ZAT_ID,
        ZAT_ARCHITECT,
        ZAT_ARCHITECT_JP,
        ZAT_ARCHITECT_EN,
        ZAT_BIRTHYEAR,
        ZAT_DEATHYEAR,
        ZAT_NATIONALITY,
        ZAT_CATEGORY,
        ZAT_SCHOOL,
        ZAT_OFFICE,
        ZAT_DESCRIPTION,
        ZAT_WEBSITE
      FROM ZCDARCHITECT 
      WHERE ZAT_ID = ${id} OR Z_PK = ${id}
      LIMIT 1
    `;
    const architect = await getSingleResult(query);
    if (!architect) {
      return null;
    }
    return {
      ...architect,
      id: architect.ZAT_ID || architect.Z_PK || 0,
      name: architect.ZAT_ARCHITECT || "",
      nameJp: architect.ZAT_ARCHITECT_JP,
      nameEn: architect.ZAT_ARCHITECT_EN,
      birthYear: architect.ZAT_BIRTHYEAR,
      deathYear: architect.ZAT_DEATHYEAR,
      nationality: architect.ZAT_NATIONALITY,
      category: architect.ZAT_CATEGORY,
      school: architect.ZAT_SCHOOL,
      office: architect.ZAT_OFFICE,
      bio: architect.ZAT_DESCRIPTION,
      mainWorks: void 0,
      awards: void 0,
      imageUrl: void 0
    };
  } catch (error) {
    console.error("Error fetching architect by ID:", error);
    throw error;
  }
};
const getArchitectNationalities = async () => {
  try {
    const query = `
      SELECT DISTINCT ZAT_NATIONALITY 
      FROM ZCDARCHITECT 
      WHERE ZAT_NATIONALITY IS NOT NULL AND ZAT_NATIONALITY != ''
      ORDER BY ZAT_NATIONALITY ASC
    `;
    const results = await getResultsArray(query);
    return results.map((row) => row.ZAT_NATIONALITY);
  } catch (error) {
    console.error("Error fetching nationalities:", error);
    return [];
  }
};
const getArchitectCategories = async () => {
  try {
    const query = `
      SELECT DISTINCT ZAT_CATEGORY 
      FROM ZCDARCHITECT 
      WHERE ZAT_CATEGORY IS NOT NULL AND ZAT_CATEGORY != ''
      ORDER BY ZAT_CATEGORY ASC
    `;
    const results = await getResultsArray(query);
    return results.map((row) => row.ZAT_CATEGORY);
  } catch (error) {
    console.error("Error fetching categories:", error);
    return [];
  }
};
const getArchitectSchools = async () => {
  try {
    const query = `
      SELECT DISTINCT ZAT_SCHOOL 
      FROM ZCDARCHITECT 
      WHERE ZAT_SCHOOL IS NOT NULL AND ZAT_SCHOOL != ''
      ORDER BY ZAT_SCHOOL ASC
    `;
    const results = await getResultsArray(query);
    return results.map((row) => row.ZAT_SCHOOL);
  } catch (error) {
    console.error("Error fetching schools:", error);
    return [];
  }
};

const ArchitectsPage = () => {
  const [architects, setArchitects] = reactExports.useState([]);
  const [loading, setLoading] = reactExports.useState(true);
  const [totalItems, setTotalItems] = reactExports.useState(0);
  const [currentPage, setCurrentPage] = reactExports.useState(1);
  const [searchTerm, setSearchTerm] = reactExports.useState("");
  const [sortBy, setSortBy] = reactExports.useState("name_asc");
  const [viewMode, setViewMode] = reactExports.useState("grid");
  const [showFilters, setShowFilters] = reactExports.useState(false);
  const [showSuggestions, setShowSuggestions] = reactExports.useState(true);
  const [activeFilters, setActiveFilters] = reactExports.useState([]);
  const [databaseUnavailable, setDatabaseUnavailable] = reactExports.useState(false);
  const [error, setError] = reactExports.useState("");
  const [nationalityFilter, setNationalityFilter] = reactExports.useState("");
  const [categoryFilter, setCategoryFilter] = reactExports.useState("");
  const [schoolFilter, setSchoolFilter] = reactExports.useState("");
  const [birthYearFromFilter, setBirthYearFromFilter] = reactExports.useState("");
  const [birthYearToFilter, setBirthYearToFilter] = reactExports.useState("");
  const [nationalities, setNationalities] = reactExports.useState([]);
  const [categories, setCategories] = reactExports.useState([]);
  const [schools, setSchools] = reactExports.useState([]);
  const itemsPerPage = viewMode === "grid" ? 12 : 20;
  const location = useLocation();
  const navigate = useNavigate();
  reactExports.useEffect(() => {
    const loadFilterOptions = async () => {
      try {
        console.log("🏗️ Loading filter options...");
        const [nats, cats, schs] = await Promise.all([
          getArchitectNationalities(),
          getArchitectCategories(),
          getArchitectSchools()
        ]);
        console.log("✅ Filter options loaded:", {
          nationalities: nats.length,
          categories: cats.length,
          schools: schs.length
        });
        setNationalities(nats);
        setCategories(cats);
        setSchools(schs);
      } catch (error2) {
        console.error("❌ Failed to load filter options:", error2);
      }
    };
    loadFilterOptions();
  }, []);
  reactExports.useEffect(() => {
    const queryParams = new URLSearchParams(location.search);
    const urlSearchTerm = queryParams.get("search") || "";
    const urlPage = parseInt(queryParams.get("page") || "1");
    const urlSort = queryParams.get("sort") || "name_asc";
    const urlNationality = queryParams.get("nationality") || "";
    const urlCategory = queryParams.get("category") || "";
    const urlSchool = queryParams.get("school") || "";
    setSearchTerm(urlSearchTerm);
    setCurrentPage(urlPage);
    setSortBy(urlSort);
    setNationalityFilter(urlNationality);
    setCategoryFilter(urlCategory);
    setSchoolFilter(urlSchool);
    fetchArchitects(urlPage, urlSearchTerm, urlSort, {
      nationality: urlNationality || void 0,
      category: urlCategory || void 0,
      school: urlSchool || void 0
    });
  }, [location.search]);
  reactExports.useEffect(() => {
    const filters = [];
    if (nationalityFilter) filters.push({ type: "国籍", value: nationalityFilter, label: nationalityFilter });
    if (categoryFilter) filters.push({ type: "カテゴリ", value: categoryFilter, label: categoryFilter });
    if (schoolFilter) filters.push({ type: "学校", value: schoolFilter, label: schoolFilter });
    if (searchTerm) filters.push({ type: "検索", value: searchTerm, label: searchTerm });
    setActiveFilters(filters);
  }, [nationalityFilter, categoryFilter, schoolFilter, searchTerm]);
  const quickSuggestions = reactExports.useMemo(() => {
    if (!architects || architects.length === 0) return null;
    const nationalityCounts = /* @__PURE__ */ new Map();
    const categoryCounts = /* @__PURE__ */ new Map();
    const schoolCounts = /* @__PURE__ */ new Map();
    const birthDecadeCounts = /* @__PURE__ */ new Map();
    architects.forEach((architect) => {
      if (architect.nationality) {
        nationalityCounts.set(architect.nationality, (nationalityCounts.get(architect.nationality) || 0) + 1);
      }
      if (architect.category) {
        categoryCounts.set(architect.category, (categoryCounts.get(architect.category) || 0) + 1);
      }
      if (architect.school) {
        schoolCounts.set(architect.school, (schoolCounts.get(architect.school) || 0) + 1);
      }
      if (architect.birthYear) {
        const decade = `${Math.floor(architect.birthYear / 10) * 10}年代`;
        birthDecadeCounts.set(decade, (birthDecadeCounts.get(decade) || 0) + 1);
      }
    });
    return {
      topNationalities: Array.from(nationalityCounts.entries()).sort((a, b) => b[1] - a[1]).slice(0, 5).map(([name, count]) => ({ name, count })),
      topCategories: Array.from(categoryCounts.entries()).sort((a, b) => b[1] - a[1]).slice(0, 4).map(([name, count]) => ({ name, count })),
      topSchools: Array.from(schoolCounts.entries()).sort((a, b) => b[1] - a[1]).slice(0, 3).map(([name, count]) => ({ name, count })),
      recentDecades: Array.from(birthDecadeCounts.entries()).sort((a, b) => b[0].localeCompare(a[0])).slice(0, 3).map(([decade, count]) => ({ decade, count }))
    };
  }, [architects]);
  const handleQuickFilter = (type, value) => {
    const queryParams = new URLSearchParams(location.search);
    queryParams.delete(type === "nationality" ? "nationality" : type === "category" ? "category" : type === "school" ? "school" : type);
    queryParams.set(type === "nationality" ? "nationality" : type === "category" ? "category" : type === "school" ? "school" : type, value);
    queryParams.set("page", "1");
    navigate({ search: queryParams.toString() });
  };
  const fetchArchitects = async (page, search = searchTerm, sort = sortBy, filters = {}) => {
    console.log("🔍 fetchArchitects called with:", { page, search, sort, filters });
    setLoading(true);
    try {
      let result;
      if (search || Object.values(filters).some((v) => v)) {
        console.log("📊 Using searchArchitects with filters");
        result = await searchArchitects(search, filters, page, itemsPerPage);
      } else {
        console.log("📋 Using getAllArchitects");
        result = await getAllArchitects(page, itemsPerPage, "", sort);
      }
      console.log("✅ Architects fetched successfully:", {
        total: result.total,
        resultsLength: result.results.length,
        page: result.page,
        totalPages: result.totalPages
      });
      setArchitects(result.results);
      setTotalItems(result.total);
      setCurrentPage(page);
      setDatabaseUnavailable(false);
      setError("");
    } catch (error2) {
      console.error("❌ Error fetching architects:", error2);
      setArchitects([]);
      setTotalItems(0);
      setDatabaseUnavailable(true);
      setError(error2 instanceof Error ? error2.message : "データベースに接続できませんでした");
    } finally {
      setLoading(false);
    }
  };
  const handlePageChange = (event, value) => {
    setCurrentPage(value);
    const queryParams = new URLSearchParams(location.search);
    queryParams.set("page", value.toString());
    navigate({ search: queryParams.toString() });
    window.scrollTo(0, 0);
  };
  const handleSearch = () => {
    const queryParams = new URLSearchParams();
    if (searchTerm) queryParams.set("search", searchTerm);
    if (nationalityFilter) queryParams.set("nationality", nationalityFilter);
    if (categoryFilter) queryParams.set("category", categoryFilter);
    if (schoolFilter) queryParams.set("school", schoolFilter);
    if (sortBy !== "name_asc") queryParams.set("sort", sortBy);
    navigate({ search: queryParams.toString() });
  };
  const handleSortChange = (event) => {
    const newSort = event.target.value;
    setSortBy(newSort);
    const queryParams = new URLSearchParams(location.search);
    if (newSort !== "name_asc") {
      queryParams.set("sort", newSort);
    } else {
      queryParams.delete("sort");
    }
    navigate({ search: queryParams.toString() });
  };
  const handleClearFilters = () => {
    setSearchTerm("");
    setNationalityFilter("");
    setCategoryFilter("");
    setSchoolFilter("");
    setBirthYearFromFilter("");
    setBirthYearToFilter("");
    setSortBy("name_asc");
    setShowFilters(false);
    navigate({ search: "" });
  };
  const handleRemoveFilter = (filterToRemove) => {
    const queryParams = new URLSearchParams(location.search);
    if (filterToRemove.type === "検索") {
      queryParams.delete("search");
      setSearchTerm("");
    } else if (filterToRemove.type === "国籍") {
      queryParams.delete("nationality");
      setNationalityFilter("");
    } else if (filterToRemove.type === "カテゴリ") {
      queryParams.delete("category");
      setCategoryFilter("");
    } else if (filterToRemove.type === "学校") {
      queryParams.delete("school");
      setSchoolFilter("");
    }
    navigate({ search: queryParams.toString() });
  };
  const getArchitectDisplayName = (architect) => {
    return architect.name || architect.ZAT_ARCHITECT || "不明";
  };
  const getArchitectYears = (architect) => {
    const birth = architect.birthYear || architect.ZAT_BIRTHYEAR || "?";
    const death = architect.deathYear || architect.ZAT_DEATHYEAR || "現在";
    return `${birth}-${death}`;
  };
  const getArchitectTags = (architect) => {
    const tags = [];
    const nationality = architect.nationality || architect.ZAT_NATIONALITY;
    const category = architect.category || architect.ZAT_CATEGORY;
    const school = architect.school || architect.ZAT_SCHOOL;
    if (nationality) tags.push(nationality);
    if (category) tags.push(category);
    if (school) tags.push(school);
    return tags;
  };
  const totalPages = Math.ceil(totalItems / itemsPerPage);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(Container, { maxWidth: "xl", sx: { py: 4 }, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", justifyContent: "space-between", alignItems: "center", mb: 3 }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h4", component: "h1", children: "建築家一覧" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        ToggleButtonGroup,
        {
          value: viewMode,
          exclusive: true,
          onChange: (e, newMode) => {
            if (newMode) {
              setViewMode(newMode);
            }
          },
          size: "small",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(ToggleButton, { value: "grid", "aria-label": "カードビュー", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip$1, { title: "カードビュー", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GridViewIcon, {}) }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ToggleButton, { value: "list", "aria-label": "リストビュー", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip$1, { title: "リストビュー", children: /* @__PURE__ */ jsxRuntimeExports.jsx(ViewListIcon, {}) }) })
          ]
        }
      )
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { container: true, spacing: 3, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { item: true, xs: 12, lg: showSuggestions ? 9 : 12, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 3, mb: 3 }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mb: 3 }, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              TextField,
              {
                fullWidth: true,
                variant: "outlined",
                placeholder: "建築家名、国籍、学校で検索...",
                value: searchTerm,
                onChange: (e) => setSearchTerm(e.target.value),
                onKeyPress: (e) => e.key === "Enter" && handleSearch(),
                InputProps: {
                  startAdornment: /* @__PURE__ */ jsxRuntimeExports.jsx(InputAdornment, { position: "start", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Search, {}) }),
                  endAdornment: searchTerm && /* @__PURE__ */ jsxRuntimeExports.jsx(InputAdornment, { position: "end", children: /* @__PURE__ */ jsxRuntimeExports.jsx(IconButton, { onClick: () => setSearchTerm(""), size: "small", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Clear, {}) }) })
                }
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", gap: 2, mt: 2 }, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  variant: "contained",
                  onClick: handleSearch,
                  children: "検索"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  variant: "outlined",
                  startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(FilterListIcon, {}),
                  onClick: () => setShowFilters(!showFilters),
                  children: "フィルター"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControl, { size: "small", sx: { minWidth: 120 }, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(InputLabel, { children: "並び替え" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  Select,
                  {
                    value: sortBy,
                    label: "並び替え",
                    onChange: handleSortChange,
                    startAdornment: /* @__PURE__ */ jsxRuntimeExports.jsx(SortIcon, { sx: { mr: 1, color: "action.active" } }),
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "name_asc", children: "名前順" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "name_desc", children: "名前逆順" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "birth_year_asc", children: "生年順" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "birth_year_desc", children: "生年逆順" })
                    ]
                  }
                )
              ] })
            ] })
          ] }),
          showFilters && /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mt: 3, p: 3, bgcolor: "grey.50", borderRadius: 1 }, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, children: "詳細フィルター" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { container: true, spacing: 2, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, md: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControl, { fullWidth: true, size: "small", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(InputLabel, { children: "国籍" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  Select,
                  {
                    value: nationalityFilter,
                    label: "国籍",
                    onChange: (e) => setNationalityFilter(e.target.value),
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "", children: "すべて" }),
                      nationalities.map((nationality) => /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: nationality, children: nationality }, nationality))
                    ]
                  }
                )
              ] }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, md: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControl, { fullWidth: true, size: "small", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(InputLabel, { children: "カテゴリ" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  Select,
                  {
                    value: categoryFilter,
                    label: "カテゴリ",
                    onChange: (e) => setCategoryFilter(e.target.value),
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "", children: "すべて" }),
                      categories.map((category) => /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: category, children: category }, category))
                    ]
                  }
                )
              ] }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, md: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControl, { fullWidth: true, size: "small", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(InputLabel, { children: "学校" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  Select,
                  {
                    value: schoolFilter,
                    label: "学校",
                    onChange: (e) => setSchoolFilter(e.target.value),
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "", children: "すべて" }),
                      schools.map((school) => /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: school, children: school }, school))
                    ]
                  }
                )
              ] }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, md: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  variant: "outlined",
                  startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(Clear, {}),
                  onClick: handleClearFilters,
                  fullWidth: true,
                  children: "クリア"
                }
              ) })
            ] })
          ] }),
          activeFilters.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mt: 2 }, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", gutterBottom: true, children: "適用中のフィルター:" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", flexWrap: "wrap", gap: 1 }, children: [
              activeFilters.map((filter, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                Chip,
                {
                  label: `${filter.type}: ${filter.label}`,
                  onDelete: () => handleRemoveFilter(filter),
                  color: "primary",
                  variant: "outlined"
                },
                index
              )),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  size: "small",
                  startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(Clear, {}),
                  onClick: handleClearFilters,
                  children: "すべてクリア"
                }
              )
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { mt: 2 }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", color: "text.secondary", children: [
            totalItems.toLocaleString(),
            "人の建築家",
            activeFilters.length > 0 && " (絞り込み結果)"
          ] }) })
        ] }),
        loading ? viewMode === "list" ? /* @__PURE__ */ jsxRuntimeExports.jsx(Paper, { sx: { p: 2 }, children: [...Array(itemsPerPage)].map((_, i) => /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mb: 2 }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, { variant: "text", height: 40 }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, { variant: "text", height: 20, width: "60%" })
        ] }, i)) }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { container: true, spacing: 2, children: [...Array(itemsPerPage)].map((_, i) => /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, md: 4, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, { variant: "rectangular", height: 300 }) }, i)) }) : databaseUnavailable ? /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { elevation: 1, sx: { p: 6, textAlign: "center" }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(CloudOffIcon, { sx: { fontSize: 64, color: "error.main", mb: 2 } }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, color: "error.main", children: "データベースサービスが利用できません" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", sx: { mb: 2 }, children: "現在、建築家データベースに接続できません。" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: error || "データベースサーバーが起動していない可能性があります。しばらく待ってから再度お試しください。" })
        ] }) : architects.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { elevation: 1, sx: { p: 6, textAlign: "center" }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Person, { sx: { fontSize: 64, color: "text.secondary", mb: 2 } }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, children: "建築家が見つかりませんでした" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: "検索条件を変更してもう一度お試しください" })
        ] }) : viewMode === "list" ? /* @__PURE__ */ jsxRuntimeExports.jsx(Paper, { sx: { p: 2 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(List, { children: architects.map((architect, index) => /* @__PURE__ */ jsxRuntimeExports.jsxs(React$3.Fragment, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            ListItem,
            {
              alignItems: "flex-start",
              component: Link,
              to: `/architects/${architect.id || architect.ZAT_ID || architect.Z_PK}`,
              sx: {
                textDecoration: "none",
                color: "inherit",
                "&:hover": {
                  backgroundColor: "action.hover"
                }
              },
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                ListItemText,
                {
                  primary: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", gap: 1 }, children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", component: "span", children: getArchitectDisplayName(architect) }),
                    architect.awards || architect.ZAT_AWARDS && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Chip,
                      {
                        label: "受賞",
                        size: "small",
                        color: "warning",
                        variant: "outlined",
                        icon: /* @__PURE__ */ jsxRuntimeExports.jsx(EmojiEvents, {})
                      }
                    )
                  ] }),
                  secondary: /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { mt: 1 }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { container: true, spacing: 2, children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center" }, children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(CakeIcon, { sx: { mr: 0.5, color: "text.secondary", fontSize: 16 } }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: getArchitectYears(architect) })
                    ] }) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center" }, children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(PublicIcon, { sx: { mr: 0.5, color: "text.secondary", fontSize: 16 } }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: architect.nationality || architect.ZAT_NATIONALITY || "不明" })
                    ] }) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center" }, children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Category, { sx: { mr: 0.5, color: "text.secondary", fontSize: 16 } }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: architect.category || architect.ZAT_CATEGORY || "不明" })
                    ] }) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center" }, children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(School, { sx: { mr: 0.5, color: "text.secondary", fontSize: 16 } }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", noWrap: true, children: architect.school || architect.ZAT_SCHOOL || "不明" })
                    ] }) })
                  ] }) })
                }
              )
            }
          ),
          index < architects.length - 1 && /* @__PURE__ */ jsxRuntimeExports.jsx(Divider, { component: "li" })
        ] }, architect.id || architect.ZAT_ID || architect.Z_PK || index)) }) }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { container: true, spacing: 3, children: architects.map((architect, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, md: 4, lg: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Card$1,
          {
            sx: {
              height: "100%",
              display: "flex",
              flexDirection: "column",
              transition: "all 0.2s ease-in-out",
              "&:hover": {
                transform: "translateY(-2px)",
                boxShadow: 8
              }
            },
            elevation: 2,
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              CardActionArea,
              {
                component: Link,
                to: `/architects/${architect.id || architect.ZAT_ID || architect.Z_PK}`,
                sx: { height: "100%", display: "flex", flexDirection: "column" },
                children: /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent$1, { sx: { flexGrow: 1, width: "100%" }, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Typography,
                    {
                      variant: "h6",
                      component: "div",
                      gutterBottom: true,
                      sx: {
                        fontWeight: 600,
                        lineHeight: 1.3,
                        minHeight: "2.6em",
                        display: "-webkit-box",
                        WebkitLineClamp: 2,
                        WebkitBoxOrient: "vertical",
                        overflow: "hidden"
                      },
                      children: getArchitectDisplayName(architect)
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mb: 2 }, children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", gap: 1, mb: 0.5 }, children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(PublicIcon, { sx: { fontSize: 16, color: "text.secondary" } }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: architect.nationality || architect.ZAT_NATIONALITY || "不明" })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", gap: 1, mb: 0.5 }, children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(CakeIcon, { sx: { fontSize: 16, color: "text.secondary" } }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: getArchitectYears(architect) })
                    ] }),
                    (architect.category || architect.ZAT_CATEGORY) && /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", gap: 1, mb: 0.5 }, children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Category, { sx: { fontSize: 16, color: "text.secondary" } }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: architect.category || architect.ZAT_CATEGORY })
                    ] }),
                    (architect.school || architect.ZAT_SCHOOL) && /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", gap: 1, mb: 0.5 }, children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(School, { sx: { fontSize: 16, color: "text.secondary" } }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        Typography,
                        {
                          variant: "body2",
                          color: "text.secondary",
                          sx: {
                            display: "-webkit-box",
                            WebkitLineClamp: 1,
                            WebkitBoxOrient: "vertical",
                            overflow: "hidden"
                          },
                          children: architect.school || architect.ZAT_SCHOOL
                        }
                      )
                    ] }),
                    (architect.office || architect.ZAT_OFFICE) && /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", gap: 1, mb: 0.5 }, children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(Work, { sx: { fontSize: 16, color: "text.secondary" } }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        Typography,
                        {
                          variant: "body2",
                          color: "text.secondary",
                          sx: {
                            display: "-webkit-box",
                            WebkitLineClamp: 1,
                            WebkitBoxOrient: "vertical",
                            overflow: "hidden"
                          },
                          children: architect.office || architect.ZAT_OFFICE
                        }
                      )
                    ] })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", flexWrap: "wrap", gap: 0.5, mt: "auto" }, children: [
                    getArchitectTags(architect).slice(0, 3).map((tag, tagIndex) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Chip,
                      {
                        label: tag,
                        size: "small",
                        variant: "outlined",
                        sx: {
                          fontSize: "0.75rem",
                          height: 24,
                          pointerEvents: "none"
                        }
                      },
                      tagIndex
                    )),
                    getArchitectTags(architect).length > 3 && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Chip,
                      {
                        label: `+${getArchitectTags(architect).length - 3}`,
                        size: "small",
                        variant: "outlined",
                        sx: {
                          fontSize: "0.75rem",
                          height: 24,
                          pointerEvents: "none",
                          color: "text.secondary"
                        }
                      }
                    ),
                    (architect.awards || architect.ZAT_AWARDS) && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Chip,
                      {
                        label: "受賞",
                        size: "small",
                        color: "warning",
                        variant: "outlined",
                        icon: /* @__PURE__ */ jsxRuntimeExports.jsx(EmojiEvents, { sx: { fontSize: "0.75rem" } }),
                        sx: {
                          fontSize: "0.75rem",
                          height: 24,
                          pointerEvents: "none"
                        }
                      }
                    )
                  ] })
                ] })
              }
            )
          }
        ) }, architect.id || architect.ZAT_ID || architect.Z_PK || index)) }),
        totalPages > 1 && !loading && /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { display: "flex", justifyContent: "center", mt: 4 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Pagination,
          {
            count: totalPages,
            page: currentPage,
            onChange: handlePageChange,
            color: "primary",
            size: "large",
            showFirstButton: true,
            showLastButton: true
          }
        ) })
      ] }),
      showSuggestions && /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, lg: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 2, position: "sticky", top: 20 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", justifyContent: "space-between", alignItems: "center", mb: 2 }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "h6", sx: { display: "flex", alignItems: "center" }, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(InsightsIcon, { sx: { mr: 1 } }),
            "建築家サジェスト"
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            IconButton,
            {
              size: "small",
              onClick: () => setShowSuggestions(false),
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(CloseIcon, {})
            }
          )
        ] }),
        loading ? /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, { variant: "text", height: 30 }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, { variant: "text", height: 30 }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Skeleton, { variant: "text", height: 30 })
        ] }) : quickSuggestions && /* @__PURE__ */ jsxRuntimeExports.jsxs(Stack, { spacing: 3, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "subtitle2", gutterBottom: true, sx: { display: "flex", alignItems: "center" }, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(PublicIcon, { sx: { mr: 1, color: "primary.main" } }),
              "国籍別"
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(List, { dense: true, children: quickSuggestions.topNationalities.map((item, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(
              ListItem,
              {
                button: true,
                onClick: () => handleQuickFilter("nationality", item.name),
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  ListItemText,
                  {
                    primary: item.name,
                    secondary: `${item.count}人`
                  }
                )
              },
              index
            )) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Divider, {}),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "subtitle2", gutterBottom: true, sx: { display: "flex", alignItems: "center" }, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Category, { sx: { mr: 1, color: "secondary.main" } }),
              "カテゴリ別"
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { display: "flex", flexWrap: "wrap", gap: 1 }, children: quickSuggestions.topCategories.map((item, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(
              Chip,
              {
                label: `${item.name} (${item.count})`,
                size: "small",
                onClick: () => handleQuickFilter("category", item.name)
              },
              index
            )) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Divider, {}),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "subtitle2", gutterBottom: true, sx: { display: "flex", alignItems: "center" }, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(School, { sx: { mr: 1, color: "warning.main" } }),
              "主要大学"
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(List, { dense: true, children: quickSuggestions.topSchools.map((item, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(
              ListItem,
              {
                button: true,
                onClick: () => handleQuickFilter("school", item.name),
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  ListItemText,
                  {
                    primary: item.name,
                    secondary: `${item.count}人`
                  }
                )
              },
              index
            )) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Divider, {}),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "subtitle2", gutterBottom: true, sx: { display: "flex", alignItems: "center" }, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(TrendingUp, { sx: { mr: 1, color: "success.main" } }),
              "生年代別"
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(List, { dense: true, children: quickSuggestions.recentDecades.map((item, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(ListItem, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              ListItemText,
              {
                primary: item.decade,
                secondary: `${item.count}人`
              }
            ) }, index)) })
          ] })
        ] })
      ] }) })
    ] })
  ] });
};

const ArchitectureList = reactExports.memo(({ architectures, compact = false }) => {
  if (!architectures || architectures.length === 0) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: "登録されている作品はありません。" });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { container: true, spacing: compact ? 2 : 3, children: architectures.map((architecture) => /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, md: compact ? 6 : 4, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    Card$1,
    {
      sx: {
        height: "100%",
        display: "flex",
        flexDirection: "column",
        transition: "transform 0.2s",
        "&:hover": {
          transform: "scale(1.02)"
        }
      },
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        CardActionArea,
        {
          component: Link,
          to: `/architecture/${architecture.id}`,
          sx: { flexGrow: 1 },
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent$1, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { gutterBottom: true, variant: "h6", component: "h2", children: architecture.name }),
            architecture.completedYear > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", mb: 1 }, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(EventIcon, { fontSize: "small", sx: { mr: 1, color: "text.secondary" } }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", color: "text.secondary", children: [
                architecture.completedYear,
                "年"
              ] })
            ] }),
            (architecture.city || architecture.location) && /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", mb: 1 }, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(LocationOn, { fontSize: "small", sx: { mr: 1, color: "text.secondary" } }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", color: "text.secondary", children: [
                architecture.city ? architecture.city : "",
                architecture.city && architecture.location ? " / " : "",
                architecture.location ? architecture.location : ""
              ] })
            ] }),
            architecture.tag && /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { display: "flex", flexWrap: "wrap", gap: 0.5, mt: 1 }, children: architecture.tag.split(",").filter((tag) => tag.trim() !== "" && !tag.includes("の追加建築")).map((tag, idx) => /* @__PURE__ */ jsxRuntimeExports.jsx(
              Chip,
              {
                label: tag.trim(),
                size: "small",
                color: "secondary",
                variant: "outlined",
                sx: { height: "20px", fontSize: "0.65rem" }
              },
              idx
            )) })
          ] })
        }
      )
    }
  ) }, architecture.id)) });
});
ArchitectureList.displayName = "ArchitectureList";

const WikipediaIcon = () => /* @__PURE__ */ jsxRuntimeExports.jsx(
  Box,
  {
    component: "span",
    sx: {
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      width: 24,
      height: 24
    },
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      Typography,
      {
        variant: "caption",
        component: "span",
        sx: {
          fontFamily: "serif",
          fontWeight: "bold",
          fontSize: "16px"
        },
        children: "W"
      }
    )
  }
);
const ArchitectSinglePage = () => {
  const { id } = useParams();
  const [architect, setArchitect] = reactExports.useState(null);
  const [loading, setLoading] = reactExports.useState(true);
  const [error, setError] = reactExports.useState(null);
  const [teacherInfo, setTeacherInfo] = reactExports.useState([]);
  const navigate = useNavigate();
  reactExports.useEffect(() => {
    const fetchArchitect = async () => {
      setLoading(true);
      try {
        const data = await getArchitectById(parseInt(id || "0"));
        if (!data) {
          setError("建築家情報が見つかりませんでした。");
          setLoading(false);
          return;
        }
        setArchitect(data);
        const teachers = [];
        if (data.teacher1) {
          const teacherInfo2 = { name: data.teacher1, id: null };
          try {
            teacherInfo2.id = await findArchitectIdByName(data.teacher1);
          } catch (err) {
            console.error("教師情報の取得に失敗:", err);
          }
          teachers.push(teacherInfo2);
        }
        if (data.teacher2) {
          const teacherInfo2 = { name: data.teacher2, id: null };
          try {
            teacherInfo2.id = await findArchitectIdByName(data.teacher2);
          } catch (err) {
            console.error("教師情報の取得に失敗:", err);
          }
          teachers.push(teacherInfo2);
        }
        if (data.teacher3) {
          const teacherInfo2 = { name: data.teacher3, id: null };
          try {
            teacherInfo2.id = await findArchitectIdByName(data.teacher3);
          } catch (err) {
            console.error("教師情報の取得に失敗:", err);
          }
          teachers.push(teacherInfo2);
        }
        setTeacherInfo(teachers);
      } catch (err) {
        console.error("建築家データ取得エラー:", err);
        setError("建築家情報の読み込み中にエラーが発生しました。");
      } finally {
        setLoading(false);
      }
    };
    if (id) {
      fetchArchitect();
    }
  }, [id]);
  const findArchitectIdByName = async (name) => {
    return null;
  };
  const formatEducation = () => {
    if (!architect) return null;
    const education = [];
    if (architect.school) {
      let eduStr = architect.school;
      if (architect.faculty) {
        eduStr += ` ${architect.faculty}`;
      }
      education.push(eduStr);
    }
    if (architect.schoolAbroad) {
      education.push(architect.schoolAbroad);
    }
    return education.length > 0 ? education.join("、") : null;
  };
  const formatTeachers = () => {
    if (!teacherInfo || teacherInfo.length === 0) return null;
    return teacherInfo.map((teacher, index) => /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
      index > 0 && "、",
      teacher.id ? /* @__PURE__ */ jsxRuntimeExports.jsx(Link$1, { component: Link, to: `/architects/${teacher.id}`, color: "inherit", underline: "hover", children: teacher.name }) : teacher.name
    ] }, index));
  };
  const handleTagClick = (tagType, value) => {
    if (!value) return;
    let searchParam = "";
    switch (tagType) {
      case "nationality":
        searchParam = `nationality=${encodeURIComponent(value)}`;
        break;
      case "born":
        searchParam = `birthyear_from=${encodeURIComponent(value)}&birthyear_to=${encodeURIComponent(value)}`;
        break;
      case "died":
        searchParam = `deathyear=${encodeURIComponent(value)}`;
        break;
      case "category":
        searchParam = `category=${encodeURIComponent(value)}`;
        break;
      default:
        return;
    }
    navigate(`/architects?${searchParam}`);
  };
  const getGoogleSearchUrl = (architectName, nationality) => {
    const searchQuery = `${architectName} ${nationality || ""} 建築家`;
    return `https://www.google.com/search?q=${encodeURIComponent(searchQuery)}`;
  };
  const getWikipediaSearchUrl = (architectName) => {
    return `https://ja.wikipedia.org/wiki/Special:Search?search=${encodeURIComponent(architectName)}`;
  };
  if (loading) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Container, { maxWidth: "lg", sx: { py: 4 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { display: "flex", justifyContent: "center", py: 8 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(CircularProgress, {}) }) });
  }
  if (error || !architect) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Container, { maxWidth: "lg", sx: { py: 4 }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 3 }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h5", color: "error", gutterBottom: true, children: "エラー" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { paragraph: true, children: error || "建築家情報が見つかりませんでした。" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Button,
        {
          variant: "outlined",
          startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowBackIcon, {}),
          onClick: () => navigate(-1),
          children: "戻る"
        }
      )
    ] }) });
  }
  const allTags = /* @__PURE__ */ new Set();
  if (architect.works) {
    architect.works.forEach((work) => {
      if (work.tag) {
        const tags = work.tag.split(",");
        tags.forEach((tag) => {
          const trimmedTag = tag.trim();
          if (trimmedTag && !trimmedTag.includes("の追加建築")) {
            allTags.add(trimmedTag);
          }
        });
      }
    });
  }
  const architectTags = [];
  if (architect.nationality) {
    architectTags.push(`nationality:${architect.nationality}`);
  }
  if (architect.birthYear > 0) {
    const decade = Math.floor(architect.birthYear / 10) * 10;
    architectTags.push(`born:${decade}s`);
  }
  if (architect.deathYear > 0) {
    architectTags.push(`died:${architect.deathYear}`);
  }
  if (architect.category) {
    architectTags.push(`category:${architect.category}`);
  }
  if (architect.school) {
    architectTags.push(`school:${architect.school}`);
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(Container, { maxWidth: "lg", sx: { py: 4 }, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Button,
      {
        variant: "outlined",
        component: Link,
        to: "/architects",
        startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowBackIcon, {}),
        sx: { mb: 3 },
        children: "建築家一覧に戻る"
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 3, mb: 4 }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h4", component: "h1", gutterBottom: true, children: architect.name || "不明" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", flexWrap: "wrap", gap: 2, my: 3 }, children: [
        architect.nationality && /* @__PURE__ */ jsxRuntimeExports.jsx(
          Chip,
          {
            icon: /* @__PURE__ */ jsxRuntimeExports.jsx(PublicIcon, {}),
            label: `nationality:${architect.nationality}`,
            variant: "outlined",
            onClick: () => handleTagClick("nationality", architect.nationality),
            clickable: true
          }
        ),
        architect.birthYear > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx(
          Chip,
          {
            icon: /* @__PURE__ */ jsxRuntimeExports.jsx(CakeIcon, {}),
            label: `born:${Math.floor(architect.birthYear / 10) * 10}s`,
            variant: "outlined",
            onClick: () => handleTagClick("born", Math.floor(architect.birthYear / 10) * 10),
            clickable: true
          }
        ),
        architect.deathYear > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx(
          Chip,
          {
            icon: /* @__PURE__ */ jsxRuntimeExports.jsx(PersonOffIcon, {}),
            label: `died:${architect.deathYear}`,
            variant: "outlined",
            onClick: () => handleTagClick("died", architect.deathYear),
            clickable: true
          }
        ),
        architect.category && /* @__PURE__ */ jsxRuntimeExports.jsx(
          Chip,
          {
            icon: /* @__PURE__ */ jsxRuntimeExports.jsx(Category, {}),
            label: `category:${architect.category}`,
            variant: "outlined",
            onClick: () => handleTagClick("category", architect.category),
            clickable: true
          }
        ),
        architect.office && /* @__PURE__ */ jsxRuntimeExports.jsx(
          Chip,
          {
            icon: /* @__PURE__ */ jsxRuntimeExports.jsx(Business, {}),
            label: architect.office,
            variant: "outlined"
          }
        )
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Divider, { sx: { my: 3 } }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mb: 3, display: "flex", flexDirection: "row", gap: 1 }, children: [
        architect.website && /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip$1, { title: "公式ホームページ", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button,
          {
            href: architect.website.startsWith("http") ? architect.website : `http://${architect.website}`,
            target: "_blank",
            rel: "noopener noreferrer",
            startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(LinkIcon, {}),
            variant: "contained",
            size: "small",
            sx: {
              backgroundColor: "#4caf50",
              color: "#ffffff",
              "&:hover": {
                backgroundColor: "#388e3c"
              }
            },
            children: "ホームページ"
          }
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip$1, { title: "Google検索", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button,
          {
            href: getGoogleSearchUrl(architect.name, architect.nationality),
            target: "_blank",
            rel: "noopener noreferrer",
            startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(Search, {}),
            variant: "contained",
            size: "small",
            sx: {
              backgroundColor: "#4285F4",
              color: "#ffffff",
              "&:hover": {
                backgroundColor: "#3367D6"
              }
            },
            children: "検索"
          }
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip$1, { title: "Wikipediaで検索", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button,
          {
            href: getWikipediaSearchUrl(architect.name),
            target: "_blank",
            rel: "noopener noreferrer",
            startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(WikipediaIcon, {}),
            variant: "contained",
            size: "small",
            sx: {
              backgroundColor: "#333333",
              color: "#ffffff",
              "&:hover": {
                backgroundColor: "#222222"
              }
            },
            children: "Wikipedia"
          }
        ) })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(TableContainer, { component: Paper, variant: "outlined", sx: { mb: 4 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Table, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(TableBody, { children: [
        architect.nationality && /* @__PURE__ */ jsxRuntimeExports.jsxs(TableRow, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(TableCell, { component: "th", sx: { width: "30%", bgcolor: "rgba(0, 0, 0, 0.03)" }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "subtitle2", children: "国籍" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(TableCell, { children: architect.nationality })
        ] }),
        (architect.birthYear > 0 || architect.deathYear > 0) && /* @__PURE__ */ jsxRuntimeExports.jsxs(TableRow, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(TableCell, { component: "th", sx: { width: "30%", bgcolor: "rgba(0, 0, 0, 0.03)" }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "subtitle2", children: "生年 - 没年" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(TableCell, { children: [
            architect.birthYear > 0 ? `${architect.birthYear}年` : "不明",
            architect.deathYear > 0 ? ` - ${architect.deathYear}年` : ""
          ] })
        ] }),
        architect.office && /* @__PURE__ */ jsxRuntimeExports.jsxs(TableRow, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(TableCell, { component: "th", sx: { width: "30%", bgcolor: "rgba(0, 0, 0, 0.03)" }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "subtitle2", children: "事務所" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(TableCell, { children: architect.office })
        ] }),
        architect.prefecture && /* @__PURE__ */ jsxRuntimeExports.jsxs(TableRow, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(TableCell, { component: "th", sx: { width: "30%", bgcolor: "rgba(0, 0, 0, 0.03)" }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "subtitle2", children: "拠点" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(TableCell, { children: architect.prefecture })
        ] }),
        architect.nameEn && /* @__PURE__ */ jsxRuntimeExports.jsxs(TableRow, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(TableCell, { component: "th", sx: { width: "30%", bgcolor: "rgba(0, 0, 0, 0.03)" }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "subtitle2", children: "英語表記" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(TableCell, { children: architect.nameEn })
        ] }),
        (architect.school || architect.faculty || architect.schoolAbroad) && /* @__PURE__ */ jsxRuntimeExports.jsxs(TableRow, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(TableCell, { component: "th", sx: { width: "30%", bgcolor: "rgba(0, 0, 0, 0.03)" }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "subtitle2", children: "教育背景" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(TableCell, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center" }, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(School, { sx: { mr: 1, fontSize: "1rem", color: "text.secondary" } }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", children: formatEducation() })
          ] }) })
        ] }),
        (architect.teacher1 || architect.teacher2 || architect.teacher3) && /* @__PURE__ */ jsxRuntimeExports.jsxs(TableRow, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(TableCell, { component: "th", sx: { width: "30%", bgcolor: "rgba(0, 0, 0, 0.03)" }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "subtitle2", children: "師事した建築家" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(TableCell, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { display: "flex", flexDirection: "column", gap: 1 }, children: formatTeachers() }) })
        ] }),
        architect.category && /* @__PURE__ */ jsxRuntimeExports.jsxs(TableRow, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(TableCell, { component: "th", sx: { width: "30%", bgcolor: "rgba(0, 0, 0, 0.03)" }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "subtitle2", children: "カテゴリー" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(TableCell, { children: architect.category })
        ] })
      ] }) }) }),
      allTags.size > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mb: 4 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, children: "受賞歴・選定" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { display: "flex", flexWrap: "wrap", gap: 1, mb: 2 }, children: Array.from(allTags).map((tag, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(
          Chip,
          {
            icon: /* @__PURE__ */ jsxRuntimeExports.jsx(EmojiEvents, {}),
            label: String(tag),
            onClick: () => handleTagClick("category", tag),
            clickable: true,
            color: "secondary",
            variant: "outlined",
            size: "small"
          },
          index
        )) })
      ] }),
      architect.bio && /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mb: 4 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, children: "経歴" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body1", sx: { whiteSpace: "pre-line" }, children: architect.bio })
      ] }),
      architect.works && architect.works.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mb: 4 }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, children: "作品マップ" }),
          architect.works.some((work) => work.latitude && work.longitude) ? /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { height: "400px", width: "100%", mb: 3, border: "1px solid #eee", borderRadius: "4px", overflow: "hidden" }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Map$1,
            {
              markers: architect.works.filter((work) => work.latitude && work.longitude),
              zoom: 5,
              center: [architect.works[0].latitude || 35.6762, architect.works[0].longitude || 139.6503]
            }
          ) }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: "位置情報が登録されている作品がありません。" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mb: 4 }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, children: "代表作品" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(ArchitectureList, { architectures: architect.works })
        ] })
      ] })
    ] })
  ] });
};

const MapPage = () => {
  const [loading, setLoading] = reactExports.useState(true);
  const [works, setWorks] = reactExports.useState([]);
  const [allWorks, setAllWorks] = reactExports.useState([]);
  const [filters, setFilters] = reactExports.useState({
    yearFrom: "",
    yearTo: ""
  });
  const [showFilters, setShowFilters] = reactExports.useState(false);
  const [selectedWork, setSelectedWork] = reactExports.useState(null);
  const [showWorkDetails, setShowWorkDetails] = reactExports.useState(false);
  reactExports.useEffect(() => {
    fetchWorks();
  }, []);
  const generateRandomTimeframe = (works2) => {
    if (!works2 || works2.length === 0) return { from: 0, to: 0 };
    const validWorks = works2.filter((work) => work.completedYear > 0);
    if (validWorks.length === 0) return { from: 0, to: 0 };
    const years = validWorks.map((work) => work.completedYear).sort((a, b) => a - b);
    const minYear = years[0];
    const maxYear = years[years.length - 1];
    const range = Math.min(100, Math.floor((maxYear - minYear) / 2));
    const startYearIndex = Math.floor(Math.random() * (years.length - Math.floor(years.length / 4)));
    const startYear = years[startYearIndex];
    const endYear = Math.min(startYear + range, maxYear);
    return { from: startYear, to: endYear };
  };
  const fetchWorks = async () => {
    setLoading(true);
    try {
      const response = await getAllArchitectures$1(1, 1e3);
      const mapData = response.results.filter((item) => item.latitude && item.longitude).map((item) => ({
        id: item.id,
        name: item.title,
        architectName: item.architect,
        completedYear: item.year || 0,
        city: item.prefecture,
        location: item.address || "",
        latitude: item.latitude,
        longitude: item.longitude
      }));
      setAllWorks(mapData);
      if (!filters.yearFrom && !filters.yearTo) {
        const randomTimeframe = generateRandomTimeframe(mapData);
        setFilters({
          yearFrom: randomTimeframe.from.toString(),
          yearTo: randomTimeframe.to.toString()
        });
        const filteredData = mapData.filter(
          (work) => work.completedYear >= randomTimeframe.from && work.completedYear <= randomTimeframe.to
        );
        setWorks(filteredData);
      } else {
        let filteredWorks = mapData;
        if (filters.yearFrom) {
          filteredWorks = filteredWorks.filter((work) => work.completedYear >= parseInt(filters.yearFrom));
        }
        if (filters.yearTo) {
          filteredWorks = filteredWorks.filter((work) => work.completedYear <= parseInt(filters.yearTo));
        }
        setWorks(filteredWorks);
      }
    } catch (error) {
      console.error("Error fetching works:", error);
    } finally {
      setLoading(false);
    }
  };
  const handleFilterChange = (event) => {
    const { name, value } = event.target;
    setFilters({
      ...filters,
      [name]: value
    });
  };
  const applyFilters = () => {
    setLoading(true);
    let filteredWorks = allWorks;
    if (filters.yearFrom) {
      filteredWorks = filteredWorks.filter((work) => work.completedYear >= parseInt(filters.yearFrom));
    }
    if (filters.yearTo) {
      filteredWorks = filteredWorks.filter((work) => work.completedYear <= parseInt(filters.yearTo));
    }
    setWorks(filteredWorks);
    setLoading(false);
  };
  const clearFilters = () => {
    setFilters({
      yearFrom: "",
      yearTo: ""
    });
    setWorks(allWorks);
  };
  const handleWorkClick = (work) => {
    setSelectedWork(work);
    setShowWorkDetails(true);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(Container, { maxWidth: "lg", sx: { py: 4 }, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h4", component: "h1", gutterBottom: true, children: "建築地図" }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 3, mb: 4 }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Button,
        {
          startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(FilterListIcon, {}),
          onClick: () => setShowFilters(!showFilters),
          sx: { mb: 2 },
          children: showFilters ? "フィルターを閉じる" : "フィルターを表示"
        }
      ),
      showFilters && /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { mb: 2 }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { container: true, spacing: 2, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, md: 4, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          TextField,
          {
            fullWidth: true,
            label: "年代（から）",
            name: "yearFrom",
            type: "number",
            value: filters.yearFrom,
            onChange: handleFilterChange
          }
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, md: 4, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          TextField,
          {
            fullWidth: true,
            label: "年代（まで）",
            name: "yearTo",
            type: "number",
            value: filters.yearTo,
            onChange: handleFilterChange
          }
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, md: 4, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", gap: 1, height: "100%" }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "contained",
              color: "primary",
              onClick: applyFilters,
              sx: { flexGrow: 1 },
              children: "フィルター適用"
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "outlined",
              onClick: clearFilters,
              sx: { flexGrow: 1 },
              children: "クリア"
            }
          )
        ] }) })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", mb: 2 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(MapIcon, { sx: { mr: 1 } }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", color: "text.secondary", children: [
          "マップ上に表示された作品: ",
          works.length,
          "件 ",
          filters.yearFrom && filters.yearTo && `(${filters.yearFrom}年〜${filters.yearTo}年)`
        ] })
      ] })
    ] }),
    loading ? /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { display: "flex", justifyContent: "center", py: 4 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(CircularProgress, {}) }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { height: 600, bgcolor: "grey.200", position: "relative", borderRadius: 1 }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Map$1,
        {
          markers: works,
          height: "600px",
          zoom: 5,
          center: [35.6762, 139.6503]
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { position: "absolute", top: 16, right: 16, width: 320, maxHeight: 568, overflow: "auto", bgcolor: "background.paper", borderRadius: 1, boxShadow: 3, p: 2, zIndex: 1e3 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, children: "作品リスト" }),
        works.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", children: "条件に一致する作品はありません" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(List, { dense: true, children: works.map((work) => /* @__PURE__ */ jsxRuntimeExports.jsxs(React$3.Fragment, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            ListItem,
            {
              onClick: () => handleWorkClick(work),
              sx: {
                cursor: "pointer",
                bgcolor: selectedWork && selectedWork.id === work.id ? "action.selected" : "transparent",
                "&:hover": { bgcolor: "action.hover" }
              },
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                ListItemText,
                {
                  primary: work.name,
                  secondary: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                    work.architectName && /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                      work.architectName,
                      /* @__PURE__ */ jsxRuntimeExports.jsx("br", {})
                    ] }),
                    work.completedYear > 0 && `${work.completedYear}年 | `,
                    work.city || ""
                  ] })
                }
              )
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Divider, { component: "li" })
        ] }, work.id)) })
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Drawer,
      {
        anchor: "right",
        open: showWorkDetails,
        onClose: () => setShowWorkDetails(false),
        children: selectedWork && /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { width: 350, p: 3 }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h5", gutterBottom: true, children: selectedWork.name }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mb: 3 }, children: [
            selectedWork.architectName && /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "subtitle1", color: "text.secondary", children: selectedWork.architectName }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", children: [
              selectedWork.completedYear > 0 && `${selectedWork.completedYear}年`,
              selectedWork.city && ` | ${selectedWork.city}`
            ] }),
            selectedWork.location && /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", sx: { mt: 1 }, children: selectedWork.location })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { mb: 3, height: 200 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Map$1,
            {
              singleMarker: selectedWork,
              height: "200px",
              zoom: 15,
              center: [selectedWork.latitude, selectedWork.longitude]
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", justifyContent: "space-between", mt: 4 }, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                variant: "outlined",
                onClick: () => setShowWorkDetails(false),
                children: "閉じる"
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                variant: "contained",
                component: Link,
                to: `/architecture/${selectedWork.id}`,
                children: "詳細を見る"
              }
            )
          ] })
        ] })
      }
    )
  ] });
};

const Card = ({ children, className = "" }) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `rounded-lg border bg-white shadow-sm ${className}`, children });
};
const CardHeader = ({ children, className = "" }) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `p-6 pb-0 ${className}`, children });
};
const CardTitle = ({ children, className = "" }) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: `text-lg font-medium leading-none tracking-tight ${className}`, children });
};
const CardContent = ({ children, className = "" }) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `p-6 pt-0 ${className}`, children });
};

const TabsContext = reactExports.createContext(void 0);
const Tabs = ({
  defaultValue,
  value: controlledValue,
  onValueChange,
  children,
  className = ""
}) => {
  const [internalValue, setInternalValue] = reactExports.useState(defaultValue || "");
  const value = controlledValue !== void 0 ? controlledValue : internalValue;
  const handleValueChange = (newValue) => {
    if (controlledValue === void 0) {
      setInternalValue(newValue);
    }
    onValueChange?.(newValue);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(TabsContext.Provider, { value: { value, onValueChange: handleValueChange }, children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className, children }) });
};
const TabsList = ({ children, className = "" }) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `flex space-x-1 rounded-lg bg-gray-100 p-1 ${className}`, children });
};
const TabsTrigger = ({
  value,
  children,
  className = ""
}) => {
  const context = reactExports.useContext(TabsContext);
  if (!context) {
    throw new Error("TabsTrigger must be used within a Tabs component");
  }
  const { value: currentValue, onValueChange } = context;
  const isActive = currentValue === value;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "button",
    {
      className: `
        px-3 py-2 text-sm font-medium transition-all
        ${isActive ? "bg-white text-black shadow-sm" : "text-gray-600 hover:text-black hover:bg-white/50"}
        rounded-md
        ${className}
      `,
      onClick: () => onValueChange(value),
      type: "button",
      children
    }
  );
};
const TabsContent = ({
  value,
  children,
  className = ""
}) => {
  const context = reactExports.useContext(TabsContext);
  if (!context) {
    throw new Error("TabsContent must be used within a Tabs component");
  }
  const { value: currentValue } = context;
  if (currentValue !== value) {
    return null;
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `mt-6 ${className}`, children });
};

const Badge = ({
  children,
  variant = "default",
  className = "",
  onClick
}) => {
  const baseClasses = "inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium transition-colors";
  const variantClasses = {
    default: "bg-blue-100 text-blue-800 hover:bg-blue-200",
    secondary: "bg-gray-100 text-gray-800 hover:bg-gray-200",
    outline: "border border-gray-300 text-gray-700 hover:bg-gray-50",
    destructive: "bg-red-100 text-red-800 hover:bg-red-200"
  };
  const cursorClass = onClick ? "cursor-pointer" : "";
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "span",
    {
      className: `${baseClasses} ${variantClasses[variant]} ${cursorClass} ${className}`,
      onClick,
      children
    }
  );
};

var get$2 = {};

var isUnsafeProperty = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	function isUnsafeProperty(key) {
	    return key === '__proto__';
	}

	exports.isUnsafeProperty = isUnsafeProperty; 
} (isUnsafeProperty));

var isDeepKey = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	function isDeepKey(key) {
	    switch (typeof key) {
	        case 'number':
	        case 'symbol': {
	            return false;
	        }
	        case 'string': {
	            return key.includes('.') || key.includes('[') || key.includes(']');
	        }
	    }
	}

	exports.isDeepKey = isDeepKey; 
} (isDeepKey));

var toKey = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	function toKey(value) {
	    if (typeof value === 'string' || typeof value === 'symbol') {
	        return value;
	    }
	    if (Object.is(value?.valueOf?.(), -0)) {
	        return '-0';
	    }
	    return String(value);
	}

	exports.toKey = toKey; 
} (toKey));

var toPath = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	function toPath(deepKey) {
	    const result = [];
	    const length = deepKey.length;
	    if (length === 0) {
	        return result;
	    }
	    let index = 0;
	    let key = '';
	    let quoteChar = '';
	    let bracket = false;
	    if (deepKey.charCodeAt(0) === 46) {
	        result.push('');
	        index++;
	    }
	    while (index < length) {
	        const char = deepKey[index];
	        if (quoteChar) {
	            if (char === '\\' && index + 1 < length) {
	                index++;
	                key += deepKey[index];
	            }
	            else if (char === quoteChar) {
	                quoteChar = '';
	            }
	            else {
	                key += char;
	            }
	        }
	        else if (bracket) {
	            if (char === '"' || char === "'") {
	                quoteChar = char;
	            }
	            else if (char === ']') {
	                bracket = false;
	                result.push(key);
	                key = '';
	            }
	            else {
	                key += char;
	            }
	        }
	        else {
	            if (char === '[') {
	                bracket = true;
	                if (key) {
	                    result.push(key);
	                    key = '';
	                }
	            }
	            else if (char === '.') {
	                if (key) {
	                    result.push(key);
	                    key = '';
	                }
	            }
	            else {
	                key += char;
	            }
	        }
	        index++;
	    }
	    if (key) {
	        result.push(key);
	    }
	    return result;
	}

	exports.toPath = toPath; 
} (toPath));

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const isUnsafeProperty$1 = isUnsafeProperty;
	const isDeepKey$1 = isDeepKey;
	const toKey$1 = toKey;
	const toPath$1 = toPath;

	function get(object, path, defaultValue) {
	    if (object == null) {
	        return defaultValue;
	    }
	    switch (typeof path) {
	        case 'string': {
	            if (isUnsafeProperty$1.isUnsafeProperty(path)) {
	                return defaultValue;
	            }
	            const result = object[path];
	            if (result === undefined) {
	                if (isDeepKey$1.isDeepKey(path)) {
	                    return get(object, toPath$1.toPath(path), defaultValue);
	                }
	                else {
	                    return defaultValue;
	                }
	            }
	            return result;
	        }
	        case 'number':
	        case 'symbol': {
	            if (typeof path === 'number') {
	                path = toKey$1.toKey(path);
	            }
	            const result = object[path];
	            if (result === undefined) {
	                return defaultValue;
	            }
	            return result;
	        }
	        default: {
	            if (Array.isArray(path)) {
	                return getWithPath(object, path, defaultValue);
	            }
	            if (Object.is(path?.valueOf(), -0)) {
	                path = '-0';
	            }
	            else {
	                path = String(path);
	            }
	            if (isUnsafeProperty$1.isUnsafeProperty(path)) {
	                return defaultValue;
	            }
	            const result = object[path];
	            if (result === undefined) {
	                return defaultValue;
	            }
	            return result;
	        }
	    }
	}
	function getWithPath(object, path, defaultValue) {
	    if (path.length === 0) {
	        return defaultValue;
	    }
	    let current = object;
	    for (let index = 0; index < path.length; index++) {
	        if (current == null) {
	            return defaultValue;
	        }
	        if (isUnsafeProperty$1.isUnsafeProperty(path[index])) {
	            return defaultValue;
	        }
	        current = current[path[index]];
	    }
	    if (current === undefined) {
	        return defaultValue;
	    }
	    return current;
	}

	exports.get = get; 
} (get$2));

var get = get$2.get;

const get$1 = /*@__PURE__*/getDefaultExportFromCjs(get);

var mathSign = value => {
  if (value === 0) {
    return 0;
  }
  if (value > 0) {
    return 1;
  }
  return -1;
};
var isNan = value => {
  // eslint-disable-next-line eqeqeq
  return typeof value == 'number' && value != +value;
};
var isPercent = value => typeof value === 'string' && value.indexOf('%') === value.length - 1;
var isNumber = value => (typeof value === 'number' || value instanceof Number) && !isNan(value);
var isNumOrStr = value => isNumber(value) || typeof value === 'string';
var idCounter = 0;
var uniqueId = prefix => {
  var id = ++idCounter;
  return "".concat(prefix || '').concat(id);
};

/**
 * Get percent value of a total value
 * @param {number|string} percent A percent
 * @param {number} totalValue     Total value
 * @param {number} defaultValue   The value returned when percent is undefined or invalid
 * @param {boolean} validate      If set to be true, the result will be validated
 * @return {number} value
 */
var getPercentValue = function getPercentValue(percent, totalValue) {
  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var validate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  if (!isNumber(percent) && typeof percent !== 'string') {
    return defaultValue;
  }
  var value;
  if (isPercent(percent)) {
    if (totalValue == null) {
      return defaultValue;
    }
    var index = percent.indexOf('%');
    value = totalValue * parseFloat(percent.slice(0, index)) / 100;
  } else {
    value = +percent;
  }
  if (isNan(value)) {
    value = defaultValue;
  }
  if (validate && totalValue != null && value > totalValue) {
    value = totalValue;
  }
  return value;
};
var hasDuplicate = ary => {
  if (!Array.isArray(ary)) {
    return false;
  }
  var len = ary.length;
  var cache = {};
  for (var i = 0; i < len; i++) {
    if (!cache[ary[i]]) {
      cache[ary[i]] = true;
    } else {
      return true;
    }
  }
  return false;
};

/**
 * @deprecated instead use {@link interpolate}
 *  this function returns a function that is called immediately in all use-cases.
 *  Instead, use interpolate which returns a number and skips the anonymous function step.
 *  @param numberA The first number
 *  @param numberB The second number
 *  @return A function that returns the interpolated number
 */
var interpolateNumber$1 = (numberA, numberB) => {
  if (isNumber(numberA) && isNumber(numberB)) {
    return t => numberA + t * (numberB - numberA);
  }
  return () => numberB;
};
function interpolate$1(start, end, t) {
  if (isNumber(start) && isNumber(end)) {
    return start + t * (end - start);
  }
  return end;
}
function findEntryInArray(ary, specifiedKey, specifiedValue) {
  if (!ary || !ary.length) {
    return undefined;
  }
  return ary.find(entry => entry && (typeof specifiedKey === 'function' ? specifiedKey(entry) : get$1(entry, specifiedKey)) === specifiedValue);
}
/**
 * Checks if the value is null or undefined
 * @param value The value to check
 * @returns true if the value is null or undefined
 */
var isNullish = value => {
  return value === null || typeof value === 'undefined';
};

/**
 *Uppercase the first letter of a string
 * @param {string} value The string to uppercase
 * @returns {string} The uppercased string
 */
var upperFirst = value => {
  if (isNullish(value)) {
    return value;
  }
  return "".concat(value.charAt(0).toUpperCase()).concat(value.slice(1));
};

/**
 * Determines how values are stacked:
 *
 * - `none` is the default, it adds values on top of each other. No smarts. Negative values will overlap.
 * - `expand` make it so that the values always add up to 1 - so the chart will look like a rectangle.
 * - `wiggle` and `silhouette` tries to keep the chart centered.
 * - `sign` stacks positive values above zero and negative values below zero. Similar to `none` but handles negatives.
 * - `positive` ignores all negative values, and then behaves like \`none\`.
 *
 * Also see https://d3js.org/d3-shape/stack#stack-offsets
 * (note that the `diverging` offset in d3 is named `sign` in recharts)
 */

/**
 * @deprecated use either `CartesianLayout` or `PolarLayout` instead.
 * Mixing both charts families leads to ambiguity in the type system.
 * These two layouts share very few properties, so it is best to keep them separate.
 */

/**
 * @deprecated do not use: too many properties, mixing too many concepts, cartesian and polar together, everything optional.
 */

//
// Event Handler Types -- Copied from @types/react/index.d.ts and adapted for Props.
//

var SVGContainerPropKeys = ['viewBox', 'children'];
var SVGElementPropKeys = ['aria-activedescendant', 'aria-atomic', 'aria-autocomplete', 'aria-busy', 'aria-checked', 'aria-colcount', 'aria-colindex', 'aria-colspan', 'aria-controls', 'aria-current', 'aria-describedby', 'aria-details', 'aria-disabled', 'aria-errormessage', 'aria-expanded', 'aria-flowto', 'aria-haspopup', 'aria-hidden', 'aria-invalid', 'aria-keyshortcuts', 'aria-label', 'aria-labelledby', 'aria-level', 'aria-live', 'aria-modal', 'aria-multiline', 'aria-multiselectable', 'aria-orientation', 'aria-owns', 'aria-placeholder', 'aria-posinset', 'aria-pressed', 'aria-readonly', 'aria-relevant', 'aria-required', 'aria-roledescription', 'aria-rowcount', 'aria-rowindex', 'aria-rowspan', 'aria-selected', 'aria-setsize', 'aria-sort', 'aria-valuemax', 'aria-valuemin', 'aria-valuenow', 'aria-valuetext', 'className', 'color', 'height', 'id', 'lang', 'max', 'media', 'method', 'min', 'name', 'style',
/*
 * removed 'type' SVGElementPropKey because we do not currently use any SVG elements
 * that can use it, and it conflicts with the recharts prop 'type'
 * https://github.com/recharts/recharts/pull/3327
 * https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/type
 */
// 'type',
'target', 'width', 'role', 'tabIndex', 'accentHeight', 'accumulate', 'additive', 'alignmentBaseline', 'allowReorder', 'alphabetic', 'amplitude', 'arabicForm', 'ascent', 'attributeName', 'attributeType', 'autoReverse', 'azimuth', 'baseFrequency', 'baselineShift', 'baseProfile', 'bbox', 'begin', 'bias', 'by', 'calcMode', 'capHeight', 'clip', 'clipPath', 'clipPathUnits', 'clipRule', 'colorInterpolation', 'colorInterpolationFilters', 'colorProfile', 'colorRendering', 'contentScriptType', 'contentStyleType', 'cursor', 'cx', 'cy', 'd', 'decelerate', 'descent', 'diffuseConstant', 'direction', 'display', 'divisor', 'dominantBaseline', 'dur', 'dx', 'dy', 'edgeMode', 'elevation', 'enableBackground', 'end', 'exponent', 'externalResourcesRequired', 'fill', 'fillOpacity', 'fillRule', 'filter', 'filterRes', 'filterUnits', 'floodColor', 'floodOpacity', 'focusable', 'fontFamily', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontWeight', 'format', 'from', 'fx', 'fy', 'g1', 'g2', 'glyphName', 'glyphOrientationHorizontal', 'glyphOrientationVertical', 'glyphRef', 'gradientTransform', 'gradientUnits', 'hanging', 'horizAdvX', 'horizOriginX', 'href', 'ideographic', 'imageRendering', 'in2', 'in', 'intercept', 'k1', 'k2', 'k3', 'k4', 'k', 'kernelMatrix', 'kernelUnitLength', 'kerning', 'keyPoints', 'keySplines', 'keyTimes', 'lengthAdjust', 'letterSpacing', 'lightingColor', 'limitingConeAngle', 'local', 'markerEnd', 'markerHeight', 'markerMid', 'markerStart', 'markerUnits', 'markerWidth', 'mask', 'maskContentUnits', 'maskUnits', 'mathematical', 'mode', 'numOctaves', 'offset', 'opacity', 'operator', 'order', 'orient', 'orientation', 'origin', 'overflow', 'overlinePosition', 'overlineThickness', 'paintOrder', 'panose1', 'pathLength', 'patternContentUnits', 'patternTransform', 'patternUnits', 'pointerEvents', 'pointsAtX', 'pointsAtY', 'pointsAtZ', 'preserveAlpha', 'preserveAspectRatio', 'primitiveUnits', 'r', 'radius', 'refX', 'refY', 'renderingIntent', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'result', 'rotate', 'rx', 'ry', 'seed', 'shapeRendering', 'slope', 'spacing', 'specularConstant', 'specularExponent', 'speed', 'spreadMethod', 'startOffset', 'stdDeviation', 'stemh', 'stemv', 'stitchTiles', 'stopColor', 'stopOpacity', 'strikethroughPosition', 'strikethroughThickness', 'string', 'stroke', 'strokeDasharray', 'strokeDashoffset', 'strokeLinecap', 'strokeLinejoin', 'strokeMiterlimit', 'strokeOpacity', 'strokeWidth', 'surfaceScale', 'systemLanguage', 'tableValues', 'targetX', 'targetY', 'textAnchor', 'textDecoration', 'textLength', 'textRendering', 'to', 'transform', 'u1', 'u2', 'underlinePosition', 'underlineThickness', 'unicode', 'unicodeBidi', 'unicodeRange', 'unitsPerEm', 'vAlphabetic', 'values', 'vectorEffect', 'version', 'vertAdvY', 'vertOriginX', 'vertOriginY', 'vHanging', 'vIdeographic', 'viewTarget', 'visibility', 'vMathematical', 'widths', 'wordSpacing', 'writingMode', 'x1', 'x2', 'x', 'xChannelSelector', 'xHeight', 'xlinkActuate', 'xlinkArcrole', 'xlinkHref', 'xlinkRole', 'xlinkShow', 'xlinkTitle', 'xlinkType', 'xmlBase', 'xmlLang', 'xmlns', 'xmlnsXlink', 'xmlSpace', 'y1', 'y2', 'y', 'yChannelSelector', 'z', 'zoomAndPan', 'ref', 'key', 'angle'];
var PolyElementKeys = ['points', 'pathLength'];

/** svg element types that have specific attribute filtration requirements */

/** map of svg element types to unique svg attributes that belong to that element */
var FilteredElementKeyMap = {
  svg: SVGContainerPropKeys,
  polygon: PolyElementKeys,
  polyline: PolyElementKeys
};
var EventKeys = ['dangerouslySetInnerHTML', 'onCopy', 'onCopyCapture', 'onCut', 'onCutCapture', 'onPaste', 'onPasteCapture', 'onCompositionEnd', 'onCompositionEndCapture', 'onCompositionStart', 'onCompositionStartCapture', 'onCompositionUpdate', 'onCompositionUpdateCapture', 'onFocus', 'onFocusCapture', 'onBlur', 'onBlurCapture', 'onChange', 'onChangeCapture', 'onBeforeInput', 'onBeforeInputCapture', 'onInput', 'onInputCapture', 'onReset', 'onResetCapture', 'onSubmit', 'onSubmitCapture', 'onInvalid', 'onInvalidCapture', 'onLoad', 'onLoadCapture', 'onError', 'onErrorCapture', 'onKeyDown', 'onKeyDownCapture', 'onKeyPress', 'onKeyPressCapture', 'onKeyUp', 'onKeyUpCapture', 'onAbort', 'onAbortCapture', 'onCanPlay', 'onCanPlayCapture', 'onCanPlayThrough', 'onCanPlayThroughCapture', 'onDurationChange', 'onDurationChangeCapture', 'onEmptied', 'onEmptiedCapture', 'onEncrypted', 'onEncryptedCapture', 'onEnded', 'onEndedCapture', 'onLoadedData', 'onLoadedDataCapture', 'onLoadedMetadata', 'onLoadedMetadataCapture', 'onLoadStart', 'onLoadStartCapture', 'onPause', 'onPauseCapture', 'onPlay', 'onPlayCapture', 'onPlaying', 'onPlayingCapture', 'onProgress', 'onProgressCapture', 'onRateChange', 'onRateChangeCapture', 'onSeeked', 'onSeekedCapture', 'onSeeking', 'onSeekingCapture', 'onStalled', 'onStalledCapture', 'onSuspend', 'onSuspendCapture', 'onTimeUpdate', 'onTimeUpdateCapture', 'onVolumeChange', 'onVolumeChangeCapture', 'onWaiting', 'onWaitingCapture', 'onAuxClick', 'onAuxClickCapture', 'onClick', 'onClickCapture', 'onContextMenu', 'onContextMenuCapture', 'onDoubleClick', 'onDoubleClickCapture', 'onDrag', 'onDragCapture', 'onDragEnd', 'onDragEndCapture', 'onDragEnter', 'onDragEnterCapture', 'onDragExit', 'onDragExitCapture', 'onDragLeave', 'onDragLeaveCapture', 'onDragOver', 'onDragOverCapture', 'onDragStart', 'onDragStartCapture', 'onDrop', 'onDropCapture', 'onMouseDown', 'onMouseDownCapture', 'onMouseEnter', 'onMouseLeave', 'onMouseMove', 'onMouseMoveCapture', 'onMouseOut', 'onMouseOutCapture', 'onMouseOver', 'onMouseOverCapture', 'onMouseUp', 'onMouseUpCapture', 'onSelect', 'onSelectCapture', 'onTouchCancel', 'onTouchCancelCapture', 'onTouchEnd', 'onTouchEndCapture', 'onTouchMove', 'onTouchMoveCapture', 'onTouchStart', 'onTouchStartCapture', 'onPointerDown', 'onPointerDownCapture', 'onPointerMove', 'onPointerMoveCapture', 'onPointerUp', 'onPointerUpCapture', 'onPointerCancel', 'onPointerCancelCapture', 'onPointerEnter', 'onPointerEnterCapture', 'onPointerLeave', 'onPointerLeaveCapture', 'onPointerOver', 'onPointerOverCapture', 'onPointerOut', 'onPointerOutCapture', 'onGotPointerCapture', 'onGotPointerCaptureCapture', 'onLostPointerCapture', 'onLostPointerCaptureCapture', 'onScroll', 'onScrollCapture', 'onWheel', 'onWheelCapture', 'onAnimationStart', 'onAnimationStartCapture', 'onAnimationEnd', 'onAnimationEndCapture', 'onAnimationIteration', 'onAnimationIterationCapture', 'onTransitionEnd', 'onTransitionEndCapture'];

/** The type of easing function to use for animations */

/** Specifies the duration of animation, the unit of this option is ms. */

/**
 * This object defines the offset of the chart area and width and height and brush and ... it's a bit too much information all in one.
 * We use it internally but let's not expose it to the outside world.
 * If you are looking for this information, instead import `ChartOffset` or `PlotArea` from `recharts`.
 */

/**
 * The domain of axis.
 * This is the definition
 *
 * Numeric domain is always defined by an array of exactly two values, for the min and the max of the axis.
 * Categorical domain is defined as array of all possible values.
 *
 * Can be specified in many ways:
 * - array of numbers
 * - with special strings like 'dataMin' and 'dataMax'
 * - with special string math like 'dataMin - 100'
 * - with keyword 'auto'
 * - or a function
 * - array of functions
 * - or a combination of the above
 */

/**
 * NumberDomain is an evaluated {@link AxisDomain}.
 * Unlike {@link AxisDomain}, it has no variety - it's a tuple of two number.
 * This is after all the keywords and functions were evaluated and what is left is [min, max].
 *
 * Know that the min, max values are not guaranteed to be nice numbers - values like -Infinity or NaN are possible.
 *
 * There are also `category` axes that have different things than numbers in their domain.
 */

/** The props definition of base axis */

/** Defines how ticks are placed and whether / how tick collisions are handled.
 * 'preserveStart' keeps the left tick on collision and ensures that the first tick is always shown.
 * 'preserveEnd' keeps the right tick on collision and ensures that the last tick is always shown.
 * 'preserveStartEnd' keeps the left tick on collision and ensures that the first and last ticks always show.
 * 'equidistantPreserveStart' selects a number N such that every nTh tick will be shown without collision.
 */

/**
 * Ticks can be any type when the axis is the type of category.
 *
 * Ticks must be numbers when the axis is the type of number.
 */

var adaptEventHandlers = (props, newHandler) => {
  if (!props || typeof props === 'function' || typeof props === 'boolean') {
    return null;
  }
  var inputProps = props;
  if (/*#__PURE__*/reactExports.isValidElement(props)) {
    inputProps = props.props;
  }
  if (typeof inputProps !== 'object' && typeof inputProps !== 'function') {
    return null;
  }
  var out = {};
  Object.keys(inputProps).forEach(key => {
    if (EventKeys.includes(key)) {
      out[key] = (e => inputProps[key](inputProps, e));
    }
  });
  return out;
};
var getEventHandlerOfChild = (originalHandler, data, index) => e => {
  originalHandler(data, index, e);
  return null;
};
var adaptEventsOfChild = (props, data, index) => {
  if (props === null || typeof props !== 'object' && typeof props !== 'function') {
    return null;
  }
  var out = null;
  Object.keys(props).forEach(key => {
    var item = props[key];
    if (EventKeys.includes(key) && typeof item === 'function') {
      if (!out) out = {};
      out[key] = getEventHandlerOfChild(item, data, index);
    }
  });
  return out;
};

/**
 * 'axis' means that all graphical items belonging to this axis tick will be highlighted,
 * and all will be present in the tooltip.
 * Tooltip with 'axis' will display when hovering on the chart background.
 *
 * 'item' means only the one graphical item being hovered will show in the tooltip.
 * Tooltip with 'item' will display when hovering over individual graphical items.
 *
 * This is calculated internally;
 * charts have a `defaultTooltipEventType` and `validateTooltipEventTypes` options.
 *
 * Users then use <Tooltip shared={true} /> or <Tooltip shared={false} /> to control their preference,
 * and charts will then see what is allowed and what is not.
 */

/**
 * These are the props we are going to pass to an `activeDot` if it is a function or a custom Component
 */

/**
 * This is the type of `activeDot` prop on:
 * - Area
 * - Line
 * - Radar
 */

// TODO we need two different range objects, one for polar and another for cartesian layouts

/**
 * Simplified version of the MouseEvent so that we don't have to mock the whole thing in tests.
 *
 * This is meant to represent the React.MouseEvent
 * which is a wrapper on top of https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent
 */

/**
 * Coordinates relative to the top-left corner of the chart.
 * Also include scale which means that a chart that's scaled will return the same coordinates as a chart that's not scaled.
 */

/**
 * @deprecated instead find another approach that does not depend on displayName.
 * Get the display name of a component
 * @param  {Object} Comp Specified Component
 * @return {String}      Display name of Component
 */
var getDisplayName = Comp => {
  if (typeof Comp === 'string') {
    return Comp;
  }
  if (!Comp) {
    return '';
  }
  return Comp.displayName || Comp.name || 'Component';
};

// `toArray` gets called multiple times during the render
// so we can memoize last invocation (since reference to `children` is the same)
var lastChildren = null;
var lastResult = null;

/**
 * @deprecated instead find another approach that does not require reading React Elements from DOM.
 *
 * @param children do not use
 * @return deprecated do not use
 */
var toArray$1 = children => {
  if (children === lastChildren && Array.isArray(lastResult)) {
    return lastResult;
  }
  var result = [];
  reactExports.Children.forEach(children, child => {
    if (isNullish(child)) return;
    if (reactIsExports.isFragment(child)) {
      result = result.concat(toArray$1(child.props.children));
    } else {
      // @ts-expect-error this could still be Iterable<ReactNode> and TS does not like that
      result.push(child);
    }
  });
  lastResult = result;
  lastChildren = children;
  return result;
};

/**
 * @deprecated instead find another approach that does not require reading React Elements from DOM.
 *
 * Find and return all matched children by type.
 * `type` must be a React.ComponentType
 *
 * @param children do not use
 * @param type do not use
 * @return deprecated do not use
 */
function findAllByType(children, type) {
  var result = [];
  var types = [];
  if (Array.isArray(type)) {
    types = type.map(t => getDisplayName(t));
  } else {
    types = [getDisplayName(type)];
  }
  toArray$1(children).forEach(child => {
    var childType = get$1(child, 'type.displayName') || get$1(child, 'type.name');
    // ts-expect-error toArray and lodash.get are not compatible. Let's get rid of the whole findAllByType function
    if (types.indexOf(childType) !== -1) {
      result.push(child);
    }
  });
  return result;
}
var isClipDot = dot => {
  if (dot && typeof dot === 'object' && 'clipDot' in dot) {
    return Boolean(dot.clipDot);
  }
  return true;
};

/**
 * Checks if the property is valid to spread onto an SVG element or onto a specific component
 * @param {unknown} property property value currently being compared
 * @param {string} key property key currently being compared
 * @param {boolean} includeEvents if events are included in spreadable props
 * @param {boolean} svgElementType checks against map of SVG element types to attributes
 * @returns {boolean} is prop valid
 */
var isValidSpreadableProp = (property, key, includeEvents, svgElementType) => {
  var _ref;
  /**
   * If the svg element type is explicitly included, check against the filtered element key map
   * to determine if there are attributes that should only exist on that element type.
   * @todo Add an internal cjs version of https://github.com/wooorm/svg-element-attributes for full coverage.
   */
  var matchingElementTypeKeys = (_ref = svgElementType && (FilteredElementKeyMap === null || FilteredElementKeyMap === void 0 ? void 0 : FilteredElementKeyMap[svgElementType])) !== null && _ref !== void 0 ? _ref : [];
  return key.startsWith('data-') || typeof property !== 'function' && (svgElementType && matchingElementTypeKeys.includes(key) || SVGElementPropKeys.includes(key)) || includeEvents && EventKeys.includes(key);
};
var filterProps = (props, includeEvents, svgElementType) => {
  if (!props || typeof props === 'function' || typeof props === 'boolean') {
    return null;
  }
  var inputProps = props;
  if (/*#__PURE__*/reactExports.isValidElement(props)) {
    inputProps = props.props;
  }
  if (typeof inputProps !== 'object' && typeof inputProps !== 'function') {
    return null;
  }
  var out = {};

  /**
   * Props are blindly spread onto SVG elements. This loop filters out properties that we don't want to spread.
   * Items filtered out are as follows:
   *   - functions in properties that are SVG attributes (functions are included when includeEvents is true)
   *   - props that are SVG attributes but don't matched the passed svgElementType
   *   - any prop that is not in SVGElementPropKeys (or in EventKeys if includeEvents is true)
   */
  Object.keys(inputProps).forEach(key => {
    var _inputProps;
    if (isValidSpreadableProp((_inputProps = inputProps) === null || _inputProps === void 0 ? void 0 : _inputProps[key], key, includeEvents, svgElementType)) {
      out[key] = inputProps[key];
    }
  });
  return out;
};

var _excluded$s = ["children", "width", "height", "viewBox", "className", "style", "title", "desc"];
function _extends$y() { return _extends$y = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$y.apply(null, arguments); }
function _objectWithoutProperties$s(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$s(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$s(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
var Surface = /*#__PURE__*/reactExports.forwardRef((props, ref) => {
  var {
      children,
      width,
      height,
      viewBox,
      className,
      style,
      title,
      desc
    } = props,
    others = _objectWithoutProperties$s(props, _excluded$s);
  var svgView = viewBox || {
    width,
    height,
    x: 0,
    y: 0
  };
  var layerClass = clsx('recharts-surface', className);
  return /*#__PURE__*/reactExports.createElement("svg", _extends$y({}, filterProps(others, true, 'svg'), {
    className: layerClass,
    width: width,
    height: height,
    style: style,
    viewBox: "".concat(svgView.x, " ").concat(svgView.y, " ").concat(svgView.width, " ").concat(svgView.height),
    ref: ref
  }), /*#__PURE__*/reactExports.createElement("title", null, title), /*#__PURE__*/reactExports.createElement("desc", null, desc), children);
});

var _excluded$r = ["children", "className"];
function _extends$x() { return _extends$x = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$x.apply(null, arguments); }
function _objectWithoutProperties$r(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$r(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$r(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
var Layer = /*#__PURE__*/reactExports.forwardRef((props, ref) => {
  var {
      children,
      className
    } = props,
    others = _objectWithoutProperties$r(props, _excluded$r);
  var layerClass = clsx('recharts-layer', className);
  return /*#__PURE__*/reactExports.createElement("g", _extends$x({
    className: layerClass
  }, filterProps(others, true), {
    ref: ref
  }), children);
});

var LegendPortalContext = /*#__PURE__*/reactExports.createContext(null);
var useLegendPortal = () => reactExports.useContext(LegendPortalContext);

function constant$1(x) {
  return function constant() {
    return x;
  };
}

const cos = Math.cos;
const sin = Math.sin;
const sqrt$1 = Math.sqrt;
const pi$1 = Math.PI;
const tau$1 = 2 * pi$1;

const pi = Math.PI,
    tau = 2 * pi,
    epsilon = 1e-6,
    tauEpsilon = tau - epsilon;

function append(strings) {
  this._ += strings[0];
  for (let i = 1, n = strings.length; i < n; ++i) {
    this._ += arguments[i] + strings[i];
  }
}

function appendRound(digits) {
  let d = Math.floor(digits);
  if (!(d >= 0)) throw new Error(`invalid digits: ${digits}`);
  if (d > 15) return append;
  const k = 10 ** d;
  return function(strings) {
    this._ += strings[0];
    for (let i = 1, n = strings.length; i < n; ++i) {
      this._ += Math.round(arguments[i] * k) / k + strings[i];
    }
  };
}

class Path {
  constructor(digits) {
    this._x0 = this._y0 = // start of current subpath
    this._x1 = this._y1 = null; // end of current subpath
    this._ = "";
    this._append = digits == null ? append : appendRound(digits);
  }
  moveTo(x, y) {
    this._append`M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;
  }
  closePath() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._append`Z`;
    }
  }
  lineTo(x, y) {
    this._append`L${this._x1 = +x},${this._y1 = +y}`;
  }
  quadraticCurveTo(x1, y1, x, y) {
    this._append`Q${+x1},${+y1},${this._x1 = +x},${this._y1 = +y}`;
  }
  bezierCurveTo(x1, y1, x2, y2, x, y) {
    this._append`C${+x1},${+y1},${+x2},${+y2},${this._x1 = +x},${this._y1 = +y}`;
  }
  arcTo(x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;

    // Is the radius negative? Error.
    if (r < 0) throw new Error(`negative radius: ${r}`);

    let x0 = this._x1,
        y0 = this._y1,
        x21 = x2 - x1,
        y21 = y2 - y1,
        x01 = x0 - x1,
        y01 = y0 - y1,
        l01_2 = x01 * x01 + y01 * y01;

    // Is this path empty? Move to (x1,y1).
    if (this._x1 === null) {
      this._append`M${this._x1 = x1},${this._y1 = y1}`;
    }

    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
    else if (!(l01_2 > epsilon));

    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
    // Equivalently, is (x1,y1) coincident with (x2,y2)?
    // Or, is the radius zero? Line to (x1,y1).
    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
      this._append`L${this._x1 = x1},${this._y1 = y1}`;
    }

    // Otherwise, draw an arc!
    else {
      let x20 = x2 - x0,
          y20 = y2 - y0,
          l21_2 = x21 * x21 + y21 * y21,
          l20_2 = x20 * x20 + y20 * y20,
          l21 = Math.sqrt(l21_2),
          l01 = Math.sqrt(l01_2),
          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
          t01 = l / l01,
          t21 = l / l21;

      // If the start tangent is not coincident with (x0,y0), line to.
      if (Math.abs(t01 - 1) > epsilon) {
        this._append`L${x1 + t01 * x01},${y1 + t01 * y01}`;
      }

      this._append`A${r},${r},0,0,${+(y01 * x20 > x01 * y20)},${this._x1 = x1 + t21 * x21},${this._y1 = y1 + t21 * y21}`;
    }
  }
  arc(x, y, r, a0, a1, ccw) {
    x = +x, y = +y, r = +r, ccw = !!ccw;

    // Is the radius negative? Error.
    if (r < 0) throw new Error(`negative radius: ${r}`);

    let dx = r * Math.cos(a0),
        dy = r * Math.sin(a0),
        x0 = x + dx,
        y0 = y + dy,
        cw = 1 ^ ccw,
        da = ccw ? a0 - a1 : a1 - a0;

    // Is this path empty? Move to (x0,y0).
    if (this._x1 === null) {
      this._append`M${x0},${y0}`;
    }

    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
      this._append`L${x0},${y0}`;
    }

    // Is this arc empty? We’re done.
    if (!r) return;

    // Does the angle go the wrong way? Flip the direction.
    if (da < 0) da = da % tau + tau;

    // Is this a complete circle? Draw two arcs to complete the circle.
    if (da > tauEpsilon) {
      this._append`A${r},${r},0,1,${cw},${x - dx},${y - dy}A${r},${r},0,1,${cw},${this._x1 = x0},${this._y1 = y0}`;
    }

    // Is this arc non-empty? Draw an arc!
    else if (da > epsilon) {
      this._append`A${r},${r},0,${+(da >= pi)},${cw},${this._x1 = x + r * Math.cos(a1)},${this._y1 = y + r * Math.sin(a1)}`;
    }
  }
  rect(x, y, w, h) {
    this._append`M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${w = +w}v${+h}h${-w}Z`;
  }
  toString() {
    return this._;
  }
}

function withPath(shape) {
  let digits = 3;

  shape.digits = function(_) {
    if (!arguments.length) return digits;
    if (_ == null) {
      digits = null;
    } else {
      const d = Math.floor(_);
      if (!(d >= 0)) throw new RangeError(`invalid digits: ${_}`);
      digits = d;
    }
    return shape;
  };

  return () => new Path(digits);
}

function array(x) {
  return typeof x === "object" && "length" in x
    ? x // Array, TypedArray, NodeList, array-like
    : Array.from(x); // Map, Set, iterable, string, or anything else
}

function Linear(context) {
  this._context = context;
}

Linear.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; // falls through
      default: this._context.lineTo(x, y); break;
    }
  }
};

function curveLinear(context) {
  return new Linear(context);
}

function x(p) {
  return p[0];
}

function y(p) {
  return p[1];
}

function shapeLine(x$1, y$1) {
  var defined = constant$1(true),
      context = null,
      curve = curveLinear,
      output = null,
      path = withPath(line);

  x$1 = typeof x$1 === "function" ? x$1 : (x$1 === undefined) ? x : constant$1(x$1);
  y$1 = typeof y$1 === "function" ? y$1 : (y$1 === undefined) ? y : constant$1(y$1);

  function line(data) {
    var i,
        n = (data = array(data)).length,
        d,
        defined0 = false,
        buffer;

    if (context == null) output = curve(buffer = path());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();
        else output.lineEnd();
      }
      if (defined0) output.point(+x$1(d, i, data), +y$1(d, i, data));
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  line.x = function(_) {
    return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant$1(+_), line) : x$1;
  };

  line.y = function(_) {
    return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant$1(+_), line) : y$1;
  };

  line.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant$1(!!_), line) : defined;
  };

  line.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };

  line.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };

  return line;
}

function shapeArea(x0, y0, y1) {
  var x1 = null,
      defined = constant$1(true),
      context = null,
      curve = curveLinear,
      output = null,
      path = withPath(area);

  x0 = typeof x0 === "function" ? x0 : (x0 === undefined) ? x : constant$1(+x0);
  y0 = typeof y0 === "function" ? y0 : (y0 === undefined) ? constant$1(0) : constant$1(+y0);
  y1 = typeof y1 === "function" ? y1 : (y1 === undefined) ? y : constant$1(+y1);

  function area(data) {
    var i,
        j,
        k,
        n = (data = array(data)).length,
        d,
        defined0 = false,
        buffer,
        x0z = new Array(n),
        y0z = new Array(n);

    if (context == null) output = curve(buffer = path());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();
          for (k = i - 1; k >= j; --k) {
            output.point(x0z[k], y0z[k]);
          }
          output.lineEnd();
          output.areaEnd();
        }
      }
      if (defined0) {
        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
      }
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  function arealine() {
    return shapeLine().defined(defined).curve(curve).context(context);
  }

  area.x = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$1(+_), x1 = null, area) : x0;
  };

  area.x0 = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$1(+_), area) : x0;
  };

  area.x1 = function(_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant$1(+_), area) : x1;
  };

  area.y = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$1(+_), y1 = null, area) : y0;
  };

  area.y0 = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$1(+_), area) : y0;
  };

  area.y1 = function(_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant$1(+_), area) : y1;
  };

  area.lineX0 =
  area.lineY0 = function() {
    return arealine().x(x0).y(y0);
  };

  area.lineY1 = function() {
    return arealine().x(x0).y(y1);
  };

  area.lineX1 = function() {
    return arealine().x(x1).y(y0);
  };

  area.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant$1(!!_), area) : defined;
  };

  area.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  };

  area.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };

  return area;
}

class Bump {
  constructor(context, x) {
    this._context = context;
    this._x = x;
  }
  areaStart() {
    this._line = 0;
  }
  areaEnd() {
    this._line = NaN;
  }
  lineStart() {
    this._point = 0;
  }
  lineEnd() {
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  }
  point(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: {
        this._point = 1;
        if (this._line) this._context.lineTo(x, y);
        else this._context.moveTo(x, y);
        break;
      }
      case 1: this._point = 2; // falls through
      default: {
        if (this._x) this._context.bezierCurveTo(this._x0 = (this._x0 + x) / 2, this._y0, this._x0, y, x, y);
        else this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y) / 2, x, this._y0, x, y);
        break;
      }
    }
    this._x0 = x, this._y0 = y;
  }
}

function bumpX(context) {
  return new Bump(context, true);
}

function bumpY(context) {
  return new Bump(context, false);
}

const symbolCircle = {
  draw(context, size) {
    const r = sqrt$1(size / pi$1);
    context.moveTo(r, 0);
    context.arc(0, 0, r, 0, tau$1);
  }
};

const symbolCross = {
  draw(context, size) {
    const r = sqrt$1(size / 5) / 2;
    context.moveTo(-3 * r, -r);
    context.lineTo(-r, -r);
    context.lineTo(-r, -3 * r);
    context.lineTo(r, -3 * r);
    context.lineTo(r, -r);
    context.lineTo(3 * r, -r);
    context.lineTo(3 * r, r);
    context.lineTo(r, r);
    context.lineTo(r, 3 * r);
    context.lineTo(-r, 3 * r);
    context.lineTo(-r, r);
    context.lineTo(-3 * r, r);
    context.closePath();
  }
};

const tan30 = sqrt$1(1 / 3);
const tan30_2 = tan30 * 2;

const symbolDiamond = {
  draw(context, size) {
    const y = sqrt$1(size / tan30_2);
    const x = y * tan30;
    context.moveTo(0, -y);
    context.lineTo(x, 0);
    context.lineTo(0, y);
    context.lineTo(-x, 0);
    context.closePath();
  }
};

const symbolSquare = {
  draw(context, size) {
    const w = sqrt$1(size);
    const x = -w / 2;
    context.rect(x, x, w, w);
  }
};

const ka = 0.89081309152928522810;
const kr = sin(pi$1 / 10) / sin(7 * pi$1 / 10);
const kx = sin(tau$1 / 10) * kr;
const ky = -cos(tau$1 / 10) * kr;

const symbolStar = {
  draw(context, size) {
    const r = sqrt$1(size * ka);
    const x = kx * r;
    const y = ky * r;
    context.moveTo(0, -r);
    context.lineTo(x, y);
    for (let i = 1; i < 5; ++i) {
      const a = tau$1 * i / 5;
      const c = cos(a);
      const s = sin(a);
      context.lineTo(s * r, -c * r);
      context.lineTo(c * x - s * y, s * x + c * y);
    }
    context.closePath();
  }
};

const sqrt3 = sqrt$1(3);

const symbolTriangle = {
  draw(context, size) {
    const y = -sqrt$1(size / (sqrt3 * 3));
    context.moveTo(0, y * 2);
    context.lineTo(-sqrt3 * y, -y);
    context.lineTo(sqrt3 * y, -y);
    context.closePath();
  }
};

const c = -0.5;
const s = sqrt$1(3) / 2;
const k = 1 / sqrt$1(12);
const a = (k / 2 + 1) * 3;

const symbolWye = {
  draw(context, size) {
    const r = sqrt$1(size / a);
    const x0 = r / 2, y0 = r * k;
    const x1 = x0, y1 = r * k + r;
    const x2 = -x1, y2 = y1;
    context.moveTo(x0, y0);
    context.lineTo(x1, y1);
    context.lineTo(x2, y2);
    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
    context.closePath();
  }
};

function Symbol$1(type, size) {
  let context = null,
      path = withPath(symbol);

  type = typeof type === "function" ? type : constant$1(type || symbolCircle);
  size = typeof size === "function" ? size : constant$1(size === undefined ? 64 : +size);

  function symbol() {
    let buffer;
    if (!context) context = buffer = path();
    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
    if (buffer) return context = null, buffer + "" || null;
  }

  symbol.type = function(_) {
    return arguments.length ? (type = typeof _ === "function" ? _ : constant$1(_), symbol) : type;
  };

  symbol.size = function(_) {
    return arguments.length ? (size = typeof _ === "function" ? _ : constant$1(+_), symbol) : size;
  };

  symbol.context = function(_) {
    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
  };

  return symbol;
}

function noop$6() {}

function point$2(that, x, y) {
  that._context.bezierCurveTo(
    (2 * that._x0 + that._x1) / 3,
    (2 * that._y0 + that._y1) / 3,
    (that._x0 + 2 * that._x1) / 3,
    (that._y0 + 2 * that._y1) / 3,
    (that._x0 + 4 * that._x1 + x) / 6,
    (that._y0 + 4 * that._y1 + y) / 6
  );
}

function Basis(context) {
  this._context = context;
}

Basis.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 =
    this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 3: point$2(this, this._x1, this._y1); // falls through
      case 2: this._context.lineTo(this._x1, this._y1); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // falls through
      default: point$2(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function curveBasis(context) {
  return new Basis(context);
}

function BasisClosed(context) {
  this._context = context;
}

BasisClosed.prototype = {
  areaStart: noop$6,
  areaEnd: noop$6,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =
    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x2, this._y2);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x2, this._y2);
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        break;
      }
    }
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._x2 = x, this._y2 = y; break;
      case 1: this._point = 2; this._x3 = x, this._y3 = y; break;
      case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;
      default: point$2(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function curveBasisClosed(context) {
  return new BasisClosed(context);
}

function BasisOpen(context) {
  this._context = context;
}

BasisOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 =
    this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;
      case 3: this._point = 4; // falls through
      default: point$2(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function curveBasisOpen(context) {
  return new BasisOpen(context);
}

function LinearClosed(context) {
  this._context = context;
}

LinearClosed.prototype = {
  areaStart: noop$6,
  areaEnd: noop$6,
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._point) this._context.closePath();
  },
  point: function(x, y) {
    x = +x, y = +y;
    if (this._point) this._context.lineTo(x, y);
    else this._point = 1, this._context.moveTo(x, y);
  }
};

function curveLinearClosed(context) {
  return new LinearClosed(context);
}

function sign(x) {
  return x < 0 ? -1 : 1;
}

// Calculate the slopes of the tangents (Hermite-type interpolation) based on
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
// NOV(II), P. 443, 1990.
function slope3(that, x2, y2) {
  var h0 = that._x1 - that._x0,
      h1 = x2 - that._x1,
      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
      p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}

// Calculate a one-sided slope.
function slope2(that, t) {
  var h = that._x1 - that._x0;
  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
}

// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
function point$1(that, t0, t1) {
  var x0 = that._x0,
      y0 = that._y0,
      x1 = that._x1,
      y1 = that._y1,
      dx = (x1 - x0) / 3;
  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
}

function MonotoneX(context) {
  this._context = context;
}

MonotoneX.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 =
    this._y0 = this._y1 =
    this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2: this._context.lineTo(this._x1, this._y1); break;
      case 3: point$1(this, this._t0, slope2(this, this._t0)); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    var t1 = NaN;

    x = +x, y = +y;
    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; point$1(this, slope2(this, t1 = slope3(this, x, y)), t1); break;
      default: point$1(this, this._t0, t1 = slope3(this, x, y)); break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
    this._t0 = t1;
  }
};

function MonotoneY(context) {
  this._context = new ReflectContext(context);
}

(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
  MonotoneX.prototype.point.call(this, y, x);
};

function ReflectContext(context) {
  this._context = context;
}

ReflectContext.prototype = {
  moveTo: function(x, y) { this._context.moveTo(y, x); },
  closePath: function() { this._context.closePath(); },
  lineTo: function(x, y) { this._context.lineTo(y, x); },
  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }
};

function monotoneX(context) {
  return new MonotoneX(context);
}

function monotoneY(context) {
  return new MonotoneY(context);
}

function Natural(context) {
  this._context = context;
}

Natural.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = [];
    this._y = [];
  },
  lineEnd: function() {
    var x = this._x,
        y = this._y,
        n = x.length;

    if (n) {
      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
      if (n === 2) {
        this._context.lineTo(x[1], y[1]);
      } else {
        var px = controlPoints(x),
            py = controlPoints(y);
        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
        }
      }
    }

    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function(x, y) {
    this._x.push(+x);
    this._y.push(+y);
  }
};

// See https://www.particleincell.com/2012/bezier-splines/ for derivation.
function controlPoints(x) {
  var i,
      n = x.length - 1,
      m,
      a = new Array(n),
      b = new Array(n),
      r = new Array(n);
  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
  a[n - 1] = r[n - 1] / b[n - 1];
  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];
  b[n - 1] = (x[n] + a[n - 1]) / 2;
  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];
  return [a, b];
}

function curveNatural(context) {
  return new Natural(context);
}

function Step(context, t) {
  this._context = context;
  this._t = t;
}

Step.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; // falls through
      default: {
        if (this._t <= 0) {
          this._context.lineTo(this._x, y);
          this._context.lineTo(x, y);
        } else {
          var x1 = this._x * (1 - this._t) + x * this._t;
          this._context.lineTo(x1, this._y);
          this._context.lineTo(x1, y);
        }
        break;
      }
    }
    this._x = x, this._y = y;
  }
};

function curveStep(context) {
  return new Step(context, 0.5);
}

function stepBefore(context) {
  return new Step(context, 0);
}

function stepAfter(context) {
  return new Step(context, 1);
}

function stackOffsetNone(series, order) {
  if (!((n = series.length) > 1)) return;
  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
    s0 = s1, s1 = series[order[i]];
    for (j = 0; j < m; ++j) {
      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
    }
  }
}

function stackOrderNone(series) {
  var n = series.length, o = new Array(n);
  while (--n >= 0) o[n] = n;
  return o;
}

function stackValue(d, key) {
  return d[key];
}

function stackSeries(key) {
  const series = [];
  series.key = key;
  return series;
}

function shapeStack() {
  var keys = constant$1([]),
      order = stackOrderNone,
      offset = stackOffsetNone,
      value = stackValue;

  function stack(data) {
    var sz = Array.from(keys.apply(this, arguments), stackSeries),
        i, n = sz.length, j = -1,
        oz;

    for (const d of data) {
      for (i = 0, ++j; i < n; ++i) {
        (sz[i][j] = [0, +value(d, sz[i].key, j, data)]).data = d;
      }
    }

    for (i = 0, oz = array(order(sz)); i < n; ++i) {
      sz[oz[i]].index = i;
    }

    offset(sz, oz);
    return sz;
  }

  stack.keys = function(_) {
    return arguments.length ? (keys = typeof _ === "function" ? _ : constant$1(Array.from(_)), stack) : keys;
  };

  stack.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant$1(+_), stack) : value;
  };

  stack.order = function(_) {
    return arguments.length ? (order = _ == null ? stackOrderNone : typeof _ === "function" ? _ : constant$1(Array.from(_)), stack) : order;
  };

  stack.offset = function(_) {
    return arguments.length ? (offset = _ == null ? stackOffsetNone : _, stack) : offset;
  };

  return stack;
}

function stackOffsetExpand(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;
    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
  }
  stackOffsetNone(series, order);
}

function stackOffsetSilhouette(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;
    s0[j][1] += s0[j][0] = -y / 2;
  }
  stackOffsetNone(series, order);
}

function stackOffsetWiggle(series, order) {
  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
      var si = series[order[i]],
          sij0 = si[j][1] || 0,
          sij1 = si[j - 1][1] || 0,
          s3 = (sij0 - sij1) / 2;
      for (var k = 0; k < i; ++k) {
        var sk = series[order[k]],
            skj0 = sk[j][1] || 0,
            skj1 = sk[j - 1][1] || 0;
        s3 += skj0 - skj1;
      }
      s1 += sij0, s2 += s3 * sij0;
    }
    s0[j - 1][1] += s0[j - 1][0] = y;
    if (s1) y -= s2 / s1;
  }
  s0[j - 1][1] += s0[j - 1][0] = y;
  stackOffsetNone(series, order);
}

var _excluded$q = ["type", "size", "sizeType"];
function _extends$w() { return _extends$w = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$w.apply(null, arguments); }
function ownKeys$H(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$H(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$H(Object(t), true).forEach(function (r) { _defineProperty$L(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$H(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$L(e, r, t) { return (r = _toPropertyKey$L(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$L(t) { var i = _toPrimitive$L(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$L(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties$q(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$q(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$q(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
var symbolFactories = {
  symbolCircle,
  symbolCross,
  symbolDiamond,
  symbolSquare,
  symbolStar,
  symbolTriangle,
  symbolWye
};
var RADIAN$2 = Math.PI / 180;
var getSymbolFactory = type => {
  var name = "symbol".concat(upperFirst(type));
  return symbolFactories[name] || symbolCircle;
};
var calculateAreaSize = (size, sizeType, type) => {
  if (sizeType === 'area') {
    return size;
  }
  switch (type) {
    case 'cross':
      return 5 * size * size / 9;
    case 'diamond':
      return 0.5 * size * size / Math.sqrt(3);
    case 'square':
      return size * size;
    case 'star':
      {
        var angle = 18 * RADIAN$2;
        return 1.25 * size * size * (Math.tan(angle) - Math.tan(angle * 2) * Math.tan(angle) ** 2);
      }
    case 'triangle':
      return Math.sqrt(3) * size * size / 4;
    case 'wye':
      return (21 - 10 * Math.sqrt(3)) * size * size / 8;
    default:
      return Math.PI * size * size / 4;
  }
};
var registerSymbol = (key, factory) => {
  symbolFactories["symbol".concat(upperFirst(key))] = factory;
};
var Symbols = _ref => {
  var {
      type = 'circle',
      size = 64,
      sizeType = 'area'
    } = _ref,
    rest = _objectWithoutProperties$q(_ref, _excluded$q);
  var props = _objectSpread$H(_objectSpread$H({}, rest), {}, {
    type,
    size,
    sizeType
  });

  /**
   * Calculate the path of curve
   * @return {String} path
   */
  var getPath = () => {
    var symbolFactory = getSymbolFactory(type);
    var symbol = Symbol$1().type(symbolFactory).size(calculateAreaSize(size, sizeType, type));
    return symbol();
  };
  var {
    className,
    cx,
    cy
  } = props;
  var filteredProps = filterProps(props, true);
  if (cx === +cx && cy === +cy && size === +size) {
    return /*#__PURE__*/reactExports.createElement("path", _extends$w({}, filteredProps, {
      className: clsx('recharts-symbols', className),
      transform: "translate(".concat(cx, ", ").concat(cy, ")"),
      d: getPath()
    }));
  }
  return null;
};
Symbols.registerSymbol = registerSymbol;

function _extends$v() { return _extends$v = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$v.apply(null, arguments); }
function ownKeys$G(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$G(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$G(Object(t), true).forEach(function (r) { _defineProperty$K(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$G(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$K(e, r, t) { return (r = _toPropertyKey$K(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$K(t) { var i = _toPrimitive$K(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$K(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var SIZE = 32;
class DefaultLegendContent extends reactExports.PureComponent {
  /**
   * Render the path of icon
   * @param data Data of each legend item
   * @param iconType if defined, it will always render this icon. If undefined then it uses icon from data.type
   * @return Path element
   */
  renderIcon(data, iconType) {
    var {
      inactiveColor
    } = this.props;
    var halfSize = SIZE / 2;
    var sixthSize = SIZE / 6;
    var thirdSize = SIZE / 3;
    var color = data.inactive ? inactiveColor : data.color;
    var preferredIcon = iconType !== null && iconType !== void 0 ? iconType : data.type;
    if (preferredIcon === 'none') {
      return null;
    }
    if (preferredIcon === 'plainline') {
      return /*#__PURE__*/reactExports.createElement("line", {
        strokeWidth: 4,
        fill: "none",
        stroke: color,
        strokeDasharray: data.payload.strokeDasharray,
        x1: 0,
        y1: halfSize,
        x2: SIZE,
        y2: halfSize,
        className: "recharts-legend-icon"
      });
    }
    if (preferredIcon === 'line') {
      return /*#__PURE__*/reactExports.createElement("path", {
        strokeWidth: 4,
        fill: "none",
        stroke: color,
        d: "M0,".concat(halfSize, "h").concat(thirdSize, "\n            A").concat(sixthSize, ",").concat(sixthSize, ",0,1,1,").concat(2 * thirdSize, ",").concat(halfSize, "\n            H").concat(SIZE, "M").concat(2 * thirdSize, ",").concat(halfSize, "\n            A").concat(sixthSize, ",").concat(sixthSize, ",0,1,1,").concat(thirdSize, ",").concat(halfSize),
        className: "recharts-legend-icon"
      });
    }
    if (preferredIcon === 'rect') {
      return /*#__PURE__*/reactExports.createElement("path", {
        stroke: "none",
        fill: color,
        d: "M0,".concat(SIZE / 8, "h").concat(SIZE, "v").concat(SIZE * 3 / 4, "h").concat(-SIZE, "z"),
        className: "recharts-legend-icon"
      });
    }
    if (/*#__PURE__*/reactExports.isValidElement(data.legendIcon)) {
      var iconProps = _objectSpread$G({}, data);
      delete iconProps.legendIcon;
      return /*#__PURE__*/reactExports.cloneElement(data.legendIcon, iconProps);
    }
    return /*#__PURE__*/reactExports.createElement(Symbols, {
      fill: color,
      cx: halfSize,
      cy: halfSize,
      size: SIZE,
      sizeType: "diameter",
      type: preferredIcon
    });
  }

  /**
   * Draw items of legend
   * @return Items
   */
  renderItems() {
    var {
      payload,
      iconSize,
      layout,
      formatter,
      inactiveColor,
      iconType
    } = this.props;
    var viewBox = {
      x: 0,
      y: 0,
      width: SIZE,
      height: SIZE
    };
    var itemStyle = {
      display: layout === 'horizontal' ? 'inline-block' : 'block',
      marginRight: 10
    };
    var svgStyle = {
      display: 'inline-block',
      verticalAlign: 'middle',
      marginRight: 4
    };
    return payload.map((entry, i) => {
      var finalFormatter = entry.formatter || formatter;
      var className = clsx({
        'recharts-legend-item': true,
        ["legend-item-".concat(i)]: true,
        inactive: entry.inactive
      });
      if (entry.type === 'none') {
        return null;
      }
      var color = entry.inactive ? inactiveColor : entry.color;
      var finalValue = finalFormatter ? finalFormatter(entry.value, entry, i) : entry.value;
      return /*#__PURE__*/reactExports.createElement("li", _extends$v({
        className: className,
        style: itemStyle
        // eslint-disable-next-line react/no-array-index-key
        ,
        key: "legend-item-".concat(i)
      }, adaptEventsOfChild(this.props, entry, i)), /*#__PURE__*/reactExports.createElement(Surface, {
        width: iconSize,
        height: iconSize,
        viewBox: viewBox,
        style: svgStyle,
        "aria-label": "".concat(finalValue, " legend icon")
      }, this.renderIcon(entry, iconType)), /*#__PURE__*/reactExports.createElement("span", {
        className: "recharts-legend-item-text",
        style: {
          color
        }
      }, finalValue));
    });
  }
  render() {
    var {
      payload,
      layout,
      align
    } = this.props;
    if (!payload || !payload.length) {
      return null;
    }
    var finalStyle = {
      padding: 0,
      margin: 0,
      textAlign: layout === 'horizontal' ? align : 'left'
    };
    return /*#__PURE__*/reactExports.createElement("ul", {
      className: "recharts-default-legend",
      style: finalStyle
    }, this.renderItems());
  }
}
_defineProperty$K(DefaultLegendContent, "displayName", 'Legend');
_defineProperty$K(DefaultLegendContent, "defaultProps", {
  align: 'center',
  iconSize: 14,
  inactiveColor: '#ccc',
  layout: 'horizontal',
  verticalAlign: 'middle'
});

var uniqBy$3 = {};

var uniqBy$2 = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	function uniqBy(arr, mapper) {
	    const map = new Map();
	    for (let i = 0; i < arr.length; i++) {
	        const item = arr[i];
	        const key = mapper(item);
	        if (!map.has(key)) {
	            map.set(key, item);
	        }
	    }
	    return Array.from(map.values());
	}

	exports.uniqBy = uniqBy; 
} (uniqBy$2));

var identity$4 = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	function identity(x) {
	    return x;
	}

	exports.identity = identity; 
} (identity$4));

var isArrayLikeObject = {};

var isArrayLike = {};

var isLength = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	function isLength(value) {
	    return Number.isSafeInteger(value) && value >= 0;
	}

	exports.isLength = isLength; 
} (isLength));

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const isLength$1 = isLength;

	function isArrayLike(value) {
	    return value != null && typeof value !== 'function' && isLength$1.isLength(value.length);
	}

	exports.isArrayLike = isArrayLike; 
} (isArrayLike));

var isObjectLike = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	function isObjectLike(value) {
	    return typeof value === 'object' && value !== null;
	}

	exports.isObjectLike = isObjectLike; 
} (isObjectLike));

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const isArrayLike$1 = isArrayLike;
	const isObjectLike$1 = isObjectLike;

	function isArrayLikeObject(value) {
	    return isObjectLike$1.isObjectLike(value) && isArrayLike$1.isArrayLike(value);
	}

	exports.isArrayLikeObject = isArrayLikeObject; 
} (isArrayLikeObject));

var iteratee = {};

var property = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const get = get$2;

	function property(path) {
	    return function (object) {
	        return get.get(object, path);
	    };
	}

	exports.property = property; 
} (property));

var matches = {};

var isMatch = {};

var isMatchWith = {};

var isObject = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	function isObject(value) {
	    return value !== null && (typeof value === 'object' || typeof value === 'function');
	}

	exports.isObject = isObject; 
} (isObject));

var isPrimitive = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	function isPrimitive(value) {
	    return value == null || (typeof value !== 'object' && typeof value !== 'function');
	}

	exports.isPrimitive = isPrimitive; 
} (isPrimitive));

var eq = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	function eq(value, other) {
	    return value === other || (Number.isNaN(value) && Number.isNaN(other));
	}

	exports.eq = eq; 
} (eq));

var hasRequiredIsMatchWith;

function requireIsMatchWith () {
	if (hasRequiredIsMatchWith) return isMatchWith;
	hasRequiredIsMatchWith = 1;
	(function (exports) {

		Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

		const isMatch = requireIsMatch();
		const isObject$1 = isObject;
		const isPrimitive$1 = isPrimitive;
		const eq$1 = eq;

		function isMatchWith(target, source, compare) {
		    if (typeof compare !== 'function') {
		        return isMatch.isMatch(target, source);
		    }
		    return isMatchWithInternal(target, source, function doesMatch(objValue, srcValue, key, object, source, stack) {
		        const isEqual = compare(objValue, srcValue, key, object, source, stack);
		        if (isEqual !== undefined) {
		            return Boolean(isEqual);
		        }
		        return isMatchWithInternal(objValue, srcValue, doesMatch, stack);
		    }, new Map());
		}
		function isMatchWithInternal(target, source, compare, stack) {
		    if (source === target) {
		        return true;
		    }
		    switch (typeof source) {
		        case 'object': {
		            return isObjectMatch(target, source, compare, stack);
		        }
		        case 'function': {
		            const sourceKeys = Object.keys(source);
		            if (sourceKeys.length > 0) {
		                return isMatchWithInternal(target, { ...source }, compare, stack);
		            }
		            return eq$1.eq(target, source);
		        }
		        default: {
		            if (!isObject$1.isObject(target)) {
		                return eq$1.eq(target, source);
		            }
		            if (typeof source === 'string') {
		                return source === '';
		            }
		            return true;
		        }
		    }
		}
		function isObjectMatch(target, source, compare, stack) {
		    if (source == null) {
		        return true;
		    }
		    if (Array.isArray(source)) {
		        return isArrayMatch(target, source, compare, stack);
		    }
		    if (source instanceof Map) {
		        return isMapMatch(target, source, compare, stack);
		    }
		    if (source instanceof Set) {
		        return isSetMatch(target, source, compare, stack);
		    }
		    const keys = Object.keys(source);
		    if (target == null) {
		        return keys.length === 0;
		    }
		    if (keys.length === 0) {
		        return true;
		    }
		    if (stack && stack.has(source)) {
		        return stack.get(source) === target;
		    }
		    if (stack) {
		        stack.set(source, target);
		    }
		    try {
		        for (let i = 0; i < keys.length; i++) {
		            const key = keys[i];
		            if (!isPrimitive$1.isPrimitive(target) && !(key in target)) {
		                return false;
		            }
		            if (source[key] === undefined && target[key] !== undefined) {
		                return false;
		            }
		            if (source[key] === null && target[key] !== null) {
		                return false;
		            }
		            const isEqual = compare(target[key], source[key], key, target, source, stack);
		            if (!isEqual) {
		                return false;
		            }
		        }
		        return true;
		    }
		    finally {
		        if (stack) {
		            stack.delete(source);
		        }
		    }
		}
		function isMapMatch(target, source, compare, stack) {
		    if (source.size === 0) {
		        return true;
		    }
		    if (!(target instanceof Map)) {
		        return false;
		    }
		    for (const [key, sourceValue] of source.entries()) {
		        const targetValue = target.get(key);
		        const isEqual = compare(targetValue, sourceValue, key, target, source, stack);
		        if (isEqual === false) {
		            return false;
		        }
		    }
		    return true;
		}
		function isArrayMatch(target, source, compare, stack) {
		    if (source.length === 0) {
		        return true;
		    }
		    if (!Array.isArray(target)) {
		        return false;
		    }
		    const countedIndex = new Set();
		    for (let i = 0; i < source.length; i++) {
		        const sourceItem = source[i];
		        let found = false;
		        for (let j = 0; j < target.length; j++) {
		            if (countedIndex.has(j)) {
		                continue;
		            }
		            const targetItem = target[j];
		            let matches = false;
		            const isEqual = compare(targetItem, sourceItem, i, target, source, stack);
		            if (isEqual) {
		                matches = true;
		            }
		            if (matches) {
		                countedIndex.add(j);
		                found = true;
		                break;
		            }
		        }
		        if (!found) {
		            return false;
		        }
		    }
		    return true;
		}
		function isSetMatch(target, source, compare, stack) {
		    if (source.size === 0) {
		        return true;
		    }
		    if (!(target instanceof Set)) {
		        return false;
		    }
		    return isArrayMatch([...target], [...source], compare, stack);
		}

		exports.isMatchWith = isMatchWith;
		exports.isSetMatch = isSetMatch; 
	} (isMatchWith));
	return isMatchWith;
}

var hasRequiredIsMatch;

function requireIsMatch () {
	if (hasRequiredIsMatch) return isMatch;
	hasRequiredIsMatch = 1;
	(function (exports) {

		Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

		const isMatchWith = requireIsMatchWith();

		function isMatch(target, source) {
		    return isMatchWith.isMatchWith(target, source, () => undefined);
		}

		exports.isMatch = isMatch; 
	} (isMatch));
	return isMatch;
}

var cloneDeep$1 = {};

var cloneDeepWith$1 = {};

var getSymbols = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	function getSymbols(object) {
	    return Object.getOwnPropertySymbols(object).filter(symbol => Object.prototype.propertyIsEnumerable.call(object, symbol));
	}

	exports.getSymbols = getSymbols; 
} (getSymbols));

var getTag = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	function getTag(value) {
	    if (value == null) {
	        return value === undefined ? '[object Undefined]' : '[object Null]';
	    }
	    return Object.prototype.toString.call(value);
	}

	exports.getTag = getTag; 
} (getTag));

var tags = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const regexpTag = '[object RegExp]';
	const stringTag = '[object String]';
	const numberTag = '[object Number]';
	const booleanTag = '[object Boolean]';
	const argumentsTag = '[object Arguments]';
	const symbolTag = '[object Symbol]';
	const dateTag = '[object Date]';
	const mapTag = '[object Map]';
	const setTag = '[object Set]';
	const arrayTag = '[object Array]';
	const functionTag = '[object Function]';
	const arrayBufferTag = '[object ArrayBuffer]';
	const objectTag = '[object Object]';
	const errorTag = '[object Error]';
	const dataViewTag = '[object DataView]';
	const uint8ArrayTag = '[object Uint8Array]';
	const uint8ClampedArrayTag = '[object Uint8ClampedArray]';
	const uint16ArrayTag = '[object Uint16Array]';
	const uint32ArrayTag = '[object Uint32Array]';
	const bigUint64ArrayTag = '[object BigUint64Array]';
	const int8ArrayTag = '[object Int8Array]';
	const int16ArrayTag = '[object Int16Array]';
	const int32ArrayTag = '[object Int32Array]';
	const bigInt64ArrayTag = '[object BigInt64Array]';
	const float32ArrayTag = '[object Float32Array]';
	const float64ArrayTag = '[object Float64Array]';

	exports.argumentsTag = argumentsTag;
	exports.arrayBufferTag = arrayBufferTag;
	exports.arrayTag = arrayTag;
	exports.bigInt64ArrayTag = bigInt64ArrayTag;
	exports.bigUint64ArrayTag = bigUint64ArrayTag;
	exports.booleanTag = booleanTag;
	exports.dataViewTag = dataViewTag;
	exports.dateTag = dateTag;
	exports.errorTag = errorTag;
	exports.float32ArrayTag = float32ArrayTag;
	exports.float64ArrayTag = float64ArrayTag;
	exports.functionTag = functionTag;
	exports.int16ArrayTag = int16ArrayTag;
	exports.int32ArrayTag = int32ArrayTag;
	exports.int8ArrayTag = int8ArrayTag;
	exports.mapTag = mapTag;
	exports.numberTag = numberTag;
	exports.objectTag = objectTag;
	exports.regexpTag = regexpTag;
	exports.setTag = setTag;
	exports.stringTag = stringTag;
	exports.symbolTag = symbolTag;
	exports.uint16ArrayTag = uint16ArrayTag;
	exports.uint32ArrayTag = uint32ArrayTag;
	exports.uint8ArrayTag = uint8ArrayTag;
	exports.uint8ClampedArrayTag = uint8ClampedArrayTag; 
} (tags));

var isTypedArray = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	function isTypedArray(x) {
	    return ArrayBuffer.isView(x) && !(x instanceof DataView);
	}

	exports.isTypedArray = isTypedArray; 
} (isTypedArray));

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const getSymbols$1 = getSymbols;
	const getTag$1 = getTag;
	const tags$1 = tags;
	const isPrimitive$1 = isPrimitive;
	const isTypedArray$1 = isTypedArray;

	function cloneDeepWith(obj, cloneValue) {
	    return cloneDeepWithImpl(obj, undefined, obj, new Map(), cloneValue);
	}
	function cloneDeepWithImpl(valueToClone, keyToClone, objectToClone, stack = new Map(), cloneValue = undefined) {
	    const cloned = cloneValue?.(valueToClone, keyToClone, objectToClone, stack);
	    if (cloned != null) {
	        return cloned;
	    }
	    if (isPrimitive$1.isPrimitive(valueToClone)) {
	        return valueToClone;
	    }
	    if (stack.has(valueToClone)) {
	        return stack.get(valueToClone);
	    }
	    if (Array.isArray(valueToClone)) {
	        const result = new Array(valueToClone.length);
	        stack.set(valueToClone, result);
	        for (let i = 0; i < valueToClone.length; i++) {
	            result[i] = cloneDeepWithImpl(valueToClone[i], i, objectToClone, stack, cloneValue);
	        }
	        if (Object.hasOwn(valueToClone, 'index')) {
	            result.index = valueToClone.index;
	        }
	        if (Object.hasOwn(valueToClone, 'input')) {
	            result.input = valueToClone.input;
	        }
	        return result;
	    }
	    if (valueToClone instanceof Date) {
	        return new Date(valueToClone.getTime());
	    }
	    if (valueToClone instanceof RegExp) {
	        const result = new RegExp(valueToClone.source, valueToClone.flags);
	        result.lastIndex = valueToClone.lastIndex;
	        return result;
	    }
	    if (valueToClone instanceof Map) {
	        const result = new Map();
	        stack.set(valueToClone, result);
	        for (const [key, value] of valueToClone) {
	            result.set(key, cloneDeepWithImpl(value, key, objectToClone, stack, cloneValue));
	        }
	        return result;
	    }
	    if (valueToClone instanceof Set) {
	        const result = new Set();
	        stack.set(valueToClone, result);
	        for (const value of valueToClone) {
	            result.add(cloneDeepWithImpl(value, undefined, objectToClone, stack, cloneValue));
	        }
	        return result;
	    }
	    if (typeof Buffer !== 'undefined' && Buffer.isBuffer(valueToClone)) {
	        return valueToClone.subarray();
	    }
	    if (isTypedArray$1.isTypedArray(valueToClone)) {
	        const result = new (Object.getPrototypeOf(valueToClone).constructor)(valueToClone.length);
	        stack.set(valueToClone, result);
	        for (let i = 0; i < valueToClone.length; i++) {
	            result[i] = cloneDeepWithImpl(valueToClone[i], i, objectToClone, stack, cloneValue);
	        }
	        return result;
	    }
	    if (valueToClone instanceof ArrayBuffer ||
	        (typeof SharedArrayBuffer !== 'undefined' && valueToClone instanceof SharedArrayBuffer)) {
	        return valueToClone.slice(0);
	    }
	    if (valueToClone instanceof DataView) {
	        const result = new DataView(valueToClone.buffer.slice(0), valueToClone.byteOffset, valueToClone.byteLength);
	        stack.set(valueToClone, result);
	        copyProperties(result, valueToClone, objectToClone, stack, cloneValue);
	        return result;
	    }
	    if (typeof File !== 'undefined' && valueToClone instanceof File) {
	        const result = new File([valueToClone], valueToClone.name, {
	            type: valueToClone.type,
	        });
	        stack.set(valueToClone, result);
	        copyProperties(result, valueToClone, objectToClone, stack, cloneValue);
	        return result;
	    }
	    if (valueToClone instanceof Blob) {
	        const result = new Blob([valueToClone], { type: valueToClone.type });
	        stack.set(valueToClone, result);
	        copyProperties(result, valueToClone, objectToClone, stack, cloneValue);
	        return result;
	    }
	    if (valueToClone instanceof Error) {
	        const result = new valueToClone.constructor();
	        stack.set(valueToClone, result);
	        result.message = valueToClone.message;
	        result.name = valueToClone.name;
	        result.stack = valueToClone.stack;
	        result.cause = valueToClone.cause;
	        copyProperties(result, valueToClone, objectToClone, stack, cloneValue);
	        return result;
	    }
	    if (typeof valueToClone === 'object' && isCloneableObject(valueToClone)) {
	        const result = Object.create(Object.getPrototypeOf(valueToClone));
	        stack.set(valueToClone, result);
	        copyProperties(result, valueToClone, objectToClone, stack, cloneValue);
	        return result;
	    }
	    return valueToClone;
	}
	function copyProperties(target, source, objectToClone = target, stack, cloneValue) {
	    const keys = [...Object.keys(source), ...getSymbols$1.getSymbols(source)];
	    for (let i = 0; i < keys.length; i++) {
	        const key = keys[i];
	        const descriptor = Object.getOwnPropertyDescriptor(target, key);
	        if (descriptor == null || descriptor.writable) {
	            target[key] = cloneDeepWithImpl(source[key], key, objectToClone, stack, cloneValue);
	        }
	    }
	}
	function isCloneableObject(object) {
	    switch (getTag$1.getTag(object)) {
	        case tags$1.argumentsTag:
	        case tags$1.arrayTag:
	        case tags$1.arrayBufferTag:
	        case tags$1.dataViewTag:
	        case tags$1.booleanTag:
	        case tags$1.dateTag:
	        case tags$1.float32ArrayTag:
	        case tags$1.float64ArrayTag:
	        case tags$1.int8ArrayTag:
	        case tags$1.int16ArrayTag:
	        case tags$1.int32ArrayTag:
	        case tags$1.mapTag:
	        case tags$1.numberTag:
	        case tags$1.objectTag:
	        case tags$1.regexpTag:
	        case tags$1.setTag:
	        case tags$1.stringTag:
	        case tags$1.symbolTag:
	        case tags$1.uint8ArrayTag:
	        case tags$1.uint8ClampedArrayTag:
	        case tags$1.uint16ArrayTag:
	        case tags$1.uint32ArrayTag: {
	            return true;
	        }
	        default: {
	            return false;
	        }
	    }
	}

	exports.cloneDeepWith = cloneDeepWith;
	exports.cloneDeepWithImpl = cloneDeepWithImpl;
	exports.copyProperties = copyProperties; 
} (cloneDeepWith$1));

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const cloneDeepWith = cloneDeepWith$1;

	function cloneDeep(obj) {
	    return cloneDeepWith.cloneDeepWithImpl(obj, undefined, obj, new Map(), undefined);
	}

	exports.cloneDeep = cloneDeep; 
} (cloneDeep$1));

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const isMatch = requireIsMatch();
	const cloneDeep = cloneDeep$1;

	function matches(source) {
	    source = cloneDeep.cloneDeep(source);
	    return (target) => {
	        return isMatch.isMatch(target, source);
	    };
	}

	exports.matches = matches; 
} (matches));

var matchesProperty = {};

var cloneDeep = {};

var cloneDeepWith = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const cloneDeepWith$1$1 = cloneDeepWith$1;
	const tags$1 = tags;

	function cloneDeepWith(obj, customizer) {
	    return cloneDeepWith$1$1.cloneDeepWith(obj, (value, key, object, stack) => {
	        const cloned = customizer?.(value, key, object, stack);
	        if (cloned != null) {
	            return cloned;
	        }
	        if (typeof obj !== 'object') {
	            return undefined;
	        }
	        switch (Object.prototype.toString.call(obj)) {
	            case tags$1.numberTag:
	            case tags$1.stringTag:
	            case tags$1.booleanTag: {
	                const result = new obj.constructor(obj?.valueOf());
	                cloneDeepWith$1$1.copyProperties(result, obj);
	                return result;
	            }
	            case tags$1.argumentsTag: {
	                const result = {};
	                cloneDeepWith$1$1.copyProperties(result, obj);
	                result.length = obj.length;
	                result[Symbol.iterator] = obj[Symbol.iterator];
	                return result;
	            }
	            default: {
	                return undefined;
	            }
	        }
	    });
	}

	exports.cloneDeepWith = cloneDeepWith; 
} (cloneDeepWith));

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const cloneDeepWith$1 = cloneDeepWith;

	function cloneDeep(obj) {
	    return cloneDeepWith$1.cloneDeepWith(obj);
	}

	exports.cloneDeep = cloneDeep; 
} (cloneDeep));

var has$1 = {};

var isIndex = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const IS_UNSIGNED_INTEGER = /^(?:0|[1-9]\d*)$/;
	function isIndex(value, length = Number.MAX_SAFE_INTEGER) {
	    switch (typeof value) {
	        case 'number': {
	            return Number.isInteger(value) && value >= 0 && value < length;
	        }
	        case 'symbol': {
	            return false;
	        }
	        case 'string': {
	            return IS_UNSIGNED_INTEGER.test(value);
	        }
	    }
	}

	exports.isIndex = isIndex; 
} (isIndex));

var isArguments = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const getTag$1 = getTag;

	function isArguments(value) {
	    return value !== null && typeof value === 'object' && getTag$1.getTag(value) === '[object Arguments]';
	}

	exports.isArguments = isArguments; 
} (isArguments));

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const isDeepKey$1 = isDeepKey;
	const isIndex$1 = isIndex;
	const isArguments$1 = isArguments;
	const toPath$1 = toPath;

	function has(object, path) {
	    let resolvedPath;
	    if (Array.isArray(path)) {
	        resolvedPath = path;
	    }
	    else if (typeof path === 'string' && isDeepKey$1.isDeepKey(path) && object?.[path] == null) {
	        resolvedPath = toPath$1.toPath(path);
	    }
	    else {
	        resolvedPath = [path];
	    }
	    if (resolvedPath.length === 0) {
	        return false;
	    }
	    let current = object;
	    for (let i = 0; i < resolvedPath.length; i++) {
	        const key = resolvedPath[i];
	        if (current == null || !Object.hasOwn(current, key)) {
	            const isSparseIndex = (Array.isArray(current) || isArguments$1.isArguments(current)) && isIndex$1.isIndex(key) && key < current.length;
	            if (!isSparseIndex) {
	                return false;
	            }
	        }
	        current = current[key];
	    }
	    return true;
	}

	exports.has = has; 
} (has$1));

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const isMatch = requireIsMatch();
	const toKey$1 = toKey;
	const cloneDeep$1 = cloneDeep;
	const get = get$2;
	const has = has$1;

	function matchesProperty(property, source) {
	    switch (typeof property) {
	        case 'object': {
	            if (Object.is(property?.valueOf(), -0)) {
	                property = '-0';
	            }
	            break;
	        }
	        case 'number': {
	            property = toKey$1.toKey(property);
	            break;
	        }
	    }
	    source = cloneDeep$1.cloneDeep(source);
	    return function (target) {
	        const result = get.get(target, property);
	        if (result === undefined) {
	            return has.has(target, property);
	        }
	        if (source === undefined) {
	            return result === undefined;
	        }
	        return isMatch.isMatch(result, source);
	    };
	}

	exports.matchesProperty = matchesProperty; 
} (matchesProperty));

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const identity = identity$4;
	const property$1 = property;
	const matches$1 = matches;
	const matchesProperty$1 = matchesProperty;

	function iteratee(value) {
	    if (value == null) {
	        return identity.identity;
	    }
	    switch (typeof value) {
	        case 'function': {
	            return value;
	        }
	        case 'object': {
	            if (Array.isArray(value) && value.length === 2) {
	                return matchesProperty$1.matchesProperty(value[0], value[1]);
	            }
	            return matches$1.matches(value);
	        }
	        case 'string':
	        case 'symbol':
	        case 'number': {
	            return property$1.property(value);
	        }
	    }
	}

	exports.iteratee = iteratee; 
} (iteratee));

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const uniqBy$1 = uniqBy$2;
	const identity = identity$4;
	const isArrayLikeObject$1 = isArrayLikeObject;
	const iteratee$1 = iteratee;

	function uniqBy(array, iteratee$1$1 = identity.identity) {
	    if (!isArrayLikeObject$1.isArrayLikeObject(array)) {
	        return [];
	    }
	    return uniqBy$1.uniqBy(Array.from(array), iteratee$1.iteratee(iteratee$1$1));
	}

	exports.uniqBy = uniqBy; 
} (uniqBy$3));

var uniqBy = uniqBy$3.uniqBy;

const uniqBy$1 = /*@__PURE__*/getDefaultExportFromCjs(uniqBy);

/**
 * This is configuration option that decides how to filter for unique values only:
 *
 * - `false` means "no filter"
 * - `true` means "use recharts default filter"
 * - function means "use return of this function as the default key"
 */

function getUniqPayload(payload, option, defaultUniqBy) {
  if (option === true) {
    return uniqBy$1(payload, defaultUniqBy);
  }
  if (typeof option === 'function') {
    return uniqBy$1(payload, option);
  }
  return payload;
}

var withSelector = {exports: {}};

var withSelector_production = {};

var shim$2 = {exports: {}};

var useSyncExternalStoreShim_production = {};

/**
 * @license React
 * use-sync-external-store-shim.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var React$2 = reactExports;
function is$3(x, y) {
  return (x === y && (0 !== x || 1 / x === 1 / y)) || (x !== x && y !== y);
}
var objectIs$2 = "function" === typeof Object.is ? Object.is : is$3,
  useState = React$2.useState,
  useEffect$2 = React$2.useEffect,
  useLayoutEffect = React$2.useLayoutEffect,
  useDebugValue$2 = React$2.useDebugValue;
function useSyncExternalStore$2(subscribe, getSnapshot) {
  var value = getSnapshot(),
    _useState = useState({ inst: { value: value, getSnapshot: getSnapshot } }),
    inst = _useState[0].inst,
    forceUpdate = _useState[1];
  useLayoutEffect(
    function () {
      inst.value = value;
      inst.getSnapshot = getSnapshot;
      checkIfSnapshotChanged(inst) && forceUpdate({ inst: inst });
    },
    [subscribe, value, getSnapshot]
  );
  useEffect$2(
    function () {
      checkIfSnapshotChanged(inst) && forceUpdate({ inst: inst });
      return subscribe(function () {
        checkIfSnapshotChanged(inst) && forceUpdate({ inst: inst });
      });
    },
    [subscribe]
  );
  useDebugValue$2(value);
  return value;
}
function checkIfSnapshotChanged(inst) {
  var latestGetSnapshot = inst.getSnapshot;
  inst = inst.value;
  try {
    var nextValue = latestGetSnapshot();
    return !objectIs$2(inst, nextValue);
  } catch (error) {
    return true;
  }
}
function useSyncExternalStore$1$1(subscribe, getSnapshot) {
  return getSnapshot();
}
var shim$1 =
  "undefined" === typeof window ||
  "undefined" === typeof window.document ||
  "undefined" === typeof window.document.createElement
    ? useSyncExternalStore$1$1
    : useSyncExternalStore$2;
useSyncExternalStoreShim_production.useSyncExternalStore =
  void 0 !== React$2.useSyncExternalStore ? React$2.useSyncExternalStore : shim$1;

{
  shim$2.exports = useSyncExternalStoreShim_production;
}

var shimExports = shim$2.exports;

/**
 * @license React
 * use-sync-external-store-shim/with-selector.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var React$1 = reactExports,
  shim = shimExports;
function is$2(x, y) {
  return (x === y && (0 !== x || 1 / x === 1 / y)) || (x !== x && y !== y);
}
var objectIs$1 = "function" === typeof Object.is ? Object.is : is$2,
  useSyncExternalStore$1 = shim.useSyncExternalStore,
  useRef$1 = React$1.useRef,
  useEffect$1 = React$1.useEffect,
  useMemo$1 = React$1.useMemo,
  useDebugValue$1 = React$1.useDebugValue;
withSelector_production.useSyncExternalStoreWithSelector = function (
  subscribe,
  getSnapshot,
  getServerSnapshot,
  selector,
  isEqual
) {
  var instRef = useRef$1(null);
  if (null === instRef.current) {
    var inst = { hasValue: false, value: null };
    instRef.current = inst;
  } else inst = instRef.current;
  instRef = useMemo$1(
    function () {
      function memoizedSelector(nextSnapshot) {
        if (!hasMemo) {
          hasMemo = true;
          memoizedSnapshot = nextSnapshot;
          nextSnapshot = selector(nextSnapshot);
          if (void 0 !== isEqual && inst.hasValue) {
            var currentSelection = inst.value;
            if (isEqual(currentSelection, nextSnapshot))
              return (memoizedSelection = currentSelection);
          }
          return (memoizedSelection = nextSnapshot);
        }
        currentSelection = memoizedSelection;
        if (objectIs$1(memoizedSnapshot, nextSnapshot)) return currentSelection;
        var nextSelection = selector(nextSnapshot);
        if (void 0 !== isEqual && isEqual(currentSelection, nextSelection))
          return (memoizedSnapshot = nextSnapshot), currentSelection;
        memoizedSnapshot = nextSnapshot;
        return (memoizedSelection = nextSelection);
      }
      var hasMemo = false,
        memoizedSnapshot,
        memoizedSelection,
        maybeGetServerSnapshot =
          void 0 === getServerSnapshot ? null : getServerSnapshot;
      return [
        function () {
          return memoizedSelector(getSnapshot());
        },
        null === maybeGetServerSnapshot
          ? void 0
          : function () {
              return memoizedSelector(maybeGetServerSnapshot());
            }
      ];
    },
    [getSnapshot, getServerSnapshot, selector, isEqual]
  );
  var value = useSyncExternalStore$1(subscribe, instRef[0], instRef[1]);
  useEffect$1(
    function () {
      inst.hasValue = true;
      inst.value = value;
    },
    [value]
  );
  useDebugValue$1(value);
  return value;
};

{
  withSelector.exports = withSelector_production;
}

var withSelectorExports = withSelector.exports;

/*
 * This is a copy of the React-Redux context type, but with our own store type.
 * We could import directly from react-redux like this:
 * import { ReactReduxContextValue } from 'react-redux/src/components/Context';
 * but that makes typescript angry with some errors I am not sure how to resolve
 * so copy it is.
 */

/**
 * We need to use our own independent Redux context because we need to avoid interfering with other people's Redux stores
 * in case they decide to install and use Recharts in another Redux app which is likely to happen.
 *
 * https://react-redux.js.org/using-react-redux/accessing-store#providing-custom-context
 */
var RechartsReduxContext = /*#__PURE__*/reactExports.createContext(null);

var noopDispatch = a => a;
var useAppDispatch = () => {
  var context = reactExports.useContext(RechartsReduxContext);
  if (context) {
    return context.store.dispatch;
  }
  return noopDispatch;
};
var noop$5 = () => {};
var addNestedSubNoop = () => noop$5;
var refEquality = (a, b) => a === b;

/**
 * This is a recharts variant of `useSelector` from 'react-redux' package.
 *
 * The difference is that react-redux version will throw an Error when used outside of Redux context.
 *
 * This, recharts version, will return undefined instead.
 *
 * This is because we want to allow using our components outside the Chart wrapper,
 * and have people provide all props explicitly.
 *
 * If however they use the component inside a chart wrapper then those props become optional,
 * and we read them from Redux state instead.
 *
 * @param selector for pulling things out of Redux store; will not be called if the store is not accessible
 * @return whatever the selector returned; or undefined when outside of Redux store
 */
function useAppSelector(selector) {
  var context = reactExports.useContext(RechartsReduxContext);
  return withSelectorExports.useSyncExternalStoreWithSelector(context ? context.subscription.addNestedSub : addNestedSubNoop, context ? context.store.getState : noop$5, context ? context.store.getState : noop$5, context ? selector : noop$5, refEquality);
}

function assertIsFunction(func, errorMessage = `expected a function, instead received ${typeof func}`) {
  if (typeof func !== "function") {
    throw new TypeError(errorMessage);
  }
}
function assertIsObject(object, errorMessage = `expected an object, instead received ${typeof object}`) {
  if (typeof object !== "object") {
    throw new TypeError(errorMessage);
  }
}
function assertIsArrayOfFunctions(array, errorMessage = `expected all items to be functions, instead received the following types: `) {
  if (!array.every((item) => typeof item === "function")) {
    const itemTypes = array.map(
      (item) => typeof item === "function" ? `function ${item.name || "unnamed"}()` : typeof item
    ).join(", ");
    throw new TypeError(`${errorMessage}[${itemTypes}]`);
  }
}
var ensureIsArray = (item) => {
  return Array.isArray(item) ? item : [item];
};
function getDependencies(createSelectorArgs) {
  const dependencies = Array.isArray(createSelectorArgs[0]) ? createSelectorArgs[0] : createSelectorArgs;
  assertIsArrayOfFunctions(
    dependencies,
    `createSelector expects all input-selectors to be functions, but received the following types: `
  );
  return dependencies;
}
function collectInputSelectorResults(dependencies, inputSelectorArgs) {
  const inputSelectorResults = [];
  const { length } = dependencies;
  for (let i = 0; i < length; i++) {
    inputSelectorResults.push(dependencies[i].apply(null, inputSelectorArgs));
  }
  return inputSelectorResults;
}
var StrongRef = class {
  constructor(value) {
    this.value = value;
  }
  deref() {
    return this.value;
  }
};
var Ref = typeof WeakRef !== "undefined" ? WeakRef : StrongRef;
var UNTERMINATED = 0;
var TERMINATED = 1;
function createCacheNode() {
  return {
    s: UNTERMINATED,
    v: void 0,
    o: null,
    p: null
  };
}
function weakMapMemoize(func, options = {}) {
  let fnNode = createCacheNode();
  const { resultEqualityCheck } = options;
  let lastResult;
  let resultsCount = 0;
  function memoized() {
    let cacheNode = fnNode;
    const { length } = arguments;
    for (let i = 0, l = length; i < l; i++) {
      const arg = arguments[i];
      if (typeof arg === "function" || typeof arg === "object" && arg !== null) {
        let objectCache = cacheNode.o;
        if (objectCache === null) {
          cacheNode.o = objectCache = /* @__PURE__ */ new WeakMap();
        }
        const objectNode = objectCache.get(arg);
        if (objectNode === void 0) {
          cacheNode = createCacheNode();
          objectCache.set(arg, cacheNode);
        } else {
          cacheNode = objectNode;
        }
      } else {
        let primitiveCache = cacheNode.p;
        if (primitiveCache === null) {
          cacheNode.p = primitiveCache = /* @__PURE__ */ new Map();
        }
        const primitiveNode = primitiveCache.get(arg);
        if (primitiveNode === void 0) {
          cacheNode = createCacheNode();
          primitiveCache.set(arg, cacheNode);
        } else {
          cacheNode = primitiveNode;
        }
      }
    }
    const terminatedNode = cacheNode;
    let result;
    if (cacheNode.s === TERMINATED) {
      result = cacheNode.v;
    } else {
      result = func.apply(null, arguments);
      resultsCount++;
      if (resultEqualityCheck) {
        const lastResultValue = lastResult?.deref?.() ?? lastResult;
        if (lastResultValue != null && resultEqualityCheck(lastResultValue, result)) {
          result = lastResultValue;
          resultsCount !== 0 && resultsCount--;
        }
        const needsWeakRef = typeof result === "object" && result !== null || typeof result === "function";
        lastResult = needsWeakRef ? new Ref(result) : result;
      }
    }
    terminatedNode.s = TERMINATED;
    terminatedNode.v = result;
    return result;
  }
  memoized.clearCache = () => {
    fnNode = createCacheNode();
    memoized.resetResultsCount();
  };
  memoized.resultsCount = () => resultsCount;
  memoized.resetResultsCount = () => {
    resultsCount = 0;
  };
  return memoized;
}
function createSelectorCreator(memoizeOrOptions, ...memoizeOptionsFromArgs) {
  const createSelectorCreatorOptions = typeof memoizeOrOptions === "function" ? {
    memoize: memoizeOrOptions,
    memoizeOptions: memoizeOptionsFromArgs
  } : memoizeOrOptions;
  const createSelector2 = (...createSelectorArgs) => {
    let recomputations = 0;
    let dependencyRecomputations = 0;
    let lastResult;
    let directlyPassedOptions = {};
    let resultFunc = createSelectorArgs.pop();
    if (typeof resultFunc === "object") {
      directlyPassedOptions = resultFunc;
      resultFunc = createSelectorArgs.pop();
    }
    assertIsFunction(
      resultFunc,
      `createSelector expects an output function after the inputs, but received: [${typeof resultFunc}]`
    );
    const combinedOptions = {
      ...createSelectorCreatorOptions,
      ...directlyPassedOptions
    };
    const {
      memoize,
      memoizeOptions = [],
      argsMemoize = weakMapMemoize,
      argsMemoizeOptions = []} = combinedOptions;
    const finalMemoizeOptions = ensureIsArray(memoizeOptions);
    const finalArgsMemoizeOptions = ensureIsArray(argsMemoizeOptions);
    const dependencies = getDependencies(createSelectorArgs);
    const memoizedResultFunc = memoize(function recomputationWrapper() {
      recomputations++;
      return resultFunc.apply(
        null,
        arguments
      );
    }, ...finalMemoizeOptions);
    const selector = argsMemoize(function dependenciesChecker() {
      dependencyRecomputations++;
      const inputSelectorResults = collectInputSelectorResults(
        dependencies,
        arguments
      );
      lastResult = memoizedResultFunc.apply(null, inputSelectorResults);
      return lastResult;
    }, ...finalArgsMemoizeOptions);
    return Object.assign(selector, {
      resultFunc,
      memoizedResultFunc,
      dependencies,
      dependencyRecomputations: () => dependencyRecomputations,
      resetDependencyRecomputations: () => {
        dependencyRecomputations = 0;
      },
      lastResult: () => lastResult,
      recomputations: () => recomputations,
      resetRecomputations: () => {
        recomputations = 0;
      },
      memoize,
      argsMemoize
    });
  };
  Object.assign(createSelector2, {
    withTypes: () => createSelector2
  });
  return createSelector2;
}
var createSelector = /* @__PURE__ */ createSelectorCreator(weakMapMemoize);
var createStructuredSelector = Object.assign(
  (inputSelectorsObject, selectorCreator = createSelector) => {
    assertIsObject(
      inputSelectorsObject,
      `createStructuredSelector expects first argument to be an object where each property is a selector, instead received a ${typeof inputSelectorsObject}`
    );
    const inputSelectorKeys = Object.keys(inputSelectorsObject);
    const dependencies = inputSelectorKeys.map(
      (key) => inputSelectorsObject[key]
    );
    const structuredSelector = selectorCreator(
      dependencies,
      (...inputSelectorResults) => {
        return inputSelectorResults.reduce((composition, value, index) => {
          composition[inputSelectorKeys[index]] = value;
          return composition;
        }, {});
      }
    );
    return structuredSelector;
  },
  { withTypes: () => createStructuredSelector }
);

var sortBy$2 = {};

var orderBy = {};

var compareValues = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	function getPriority(a) {
	    if (typeof a === 'symbol') {
	        return 1;
	    }
	    if (a === null) {
	        return 2;
	    }
	    if (a === undefined) {
	        return 3;
	    }
	    if (a !== a) {
	        return 4;
	    }
	    return 0;
	}
	const compareValues = (a, b, order) => {
	    if (a !== b) {
	        const aPriority = getPriority(a);
	        const bPriority = getPriority(b);
	        if (aPriority === bPriority && aPriority === 0) {
	            if (a < b) {
	                return order === 'desc' ? 1 : -1;
	            }
	            if (a > b) {
	                return order === 'desc' ? -1 : 1;
	            }
	        }
	        return order === 'desc' ? bPriority - aPriority : aPriority - bPriority;
	    }
	    return 0;
	};

	exports.compareValues = compareValues; 
} (compareValues));

var isKey = {};

var isSymbol = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	function isSymbol(value) {
	    return typeof value === 'symbol' || value instanceof Symbol;
	}

	exports.isSymbol = isSymbol; 
} (isSymbol));

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const isSymbol$1 = isSymbol;

	const regexIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
	const regexIsPlainProp = /^\w*$/;
	function isKey(value, object) {
	    if (Array.isArray(value)) {
	        return false;
	    }
	    if (typeof value === 'number' || typeof value === 'boolean' || value == null || isSymbol$1.isSymbol(value)) {
	        return true;
	    }
	    return ((typeof value === 'string' && (regexIsPlainProp.test(value) || !regexIsDeepProp.test(value))) ||
	        (object != null && Object.hasOwn(object, value)));
	}

	exports.isKey = isKey; 
} (isKey));

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const compareValues$1 = compareValues;
	const isKey$1 = isKey;
	const toPath$1 = toPath;

	function orderBy(collection, criteria, orders, guard) {
	    if (collection == null) {
	        return [];
	    }
	    orders = guard ? undefined : orders;
	    if (!Array.isArray(collection)) {
	        collection = Object.values(collection);
	    }
	    if (!Array.isArray(criteria)) {
	        criteria = criteria == null ? [null] : [criteria];
	    }
	    if (criteria.length === 0) {
	        criteria = [null];
	    }
	    if (!Array.isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	    }
	    orders = orders.map(order => String(order));
	    const getValueByNestedPath = (object, path) => {
	        let target = object;
	        for (let i = 0; i < path.length && target != null; ++i) {
	            target = target[path[i]];
	        }
	        return target;
	    };
	    const getValueByCriterion = (criterion, object) => {
	        if (object == null || criterion == null) {
	            return object;
	        }
	        if (typeof criterion === 'object' && 'key' in criterion) {
	            if (Object.hasOwn(object, criterion.key)) {
	                return object[criterion.key];
	            }
	            return getValueByNestedPath(object, criterion.path);
	        }
	        if (typeof criterion === 'function') {
	            return criterion(object);
	        }
	        if (Array.isArray(criterion)) {
	            return getValueByNestedPath(object, criterion);
	        }
	        if (typeof object === 'object') {
	            return object[criterion];
	        }
	        return object;
	    };
	    const preparedCriteria = criteria.map((criterion) => {
	        if (Array.isArray(criterion) && criterion.length === 1) {
	            criterion = criterion[0];
	        }
	        if (criterion == null || typeof criterion === 'function' || Array.isArray(criterion) || isKey$1.isKey(criterion)) {
	            return criterion;
	        }
	        return { key: criterion, path: toPath$1.toPath(criterion) };
	    });
	    const preparedCollection = collection.map(item => ({
	        original: item,
	        criteria: preparedCriteria.map((criterion) => getValueByCriterion(criterion, item)),
	    }));
	    return preparedCollection
	        .slice()
	        .sort((a, b) => {
	        for (let i = 0; i < preparedCriteria.length; i++) {
	            const comparedResult = compareValues$1.compareValues(a.criteria[i], b.criteria[i], orders[i]);
	            if (comparedResult !== 0) {
	                return comparedResult;
	            }
	        }
	        return 0;
	    })
	        .map(item => item.original);
	}

	exports.orderBy = orderBy; 
} (orderBy));

var flatten = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	function flatten(arr, depth = 1) {
	    const result = [];
	    const flooredDepth = Math.floor(depth);
	    const recursive = (arr, currentDepth) => {
	        for (let i = 0; i < arr.length; i++) {
	            const item = arr[i];
	            if (Array.isArray(item) && currentDepth < flooredDepth) {
	                recursive(item, currentDepth + 1);
	            }
	            else {
	                result.push(item);
	            }
	        }
	    };
	    recursive(arr, 0);
	    return result;
	}

	exports.flatten = flatten; 
} (flatten));

var isIterateeCall = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const isIndex$1 = isIndex;
	const isArrayLike$1 = isArrayLike;
	const isObject$1 = isObject;
	const eq$1 = eq;

	function isIterateeCall(value, index, object) {
	    if (!isObject$1.isObject(object)) {
	        return false;
	    }
	    if ((typeof index === 'number' && isArrayLike$1.isArrayLike(object) && isIndex$1.isIndex(index) && index < object.length) ||
	        (typeof index === 'string' && index in object)) {
	        return eq$1.eq(object[index], value);
	    }
	    return false;
	}

	exports.isIterateeCall = isIterateeCall; 
} (isIterateeCall));

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const orderBy$1 = orderBy;
	const flatten$1 = flatten;
	const isIterateeCall$1 = isIterateeCall;

	function sortBy(collection, ...criteria) {
	    const length = criteria.length;
	    if (length > 1 && isIterateeCall$1.isIterateeCall(collection, criteria[0], criteria[1])) {
	        criteria = [];
	    }
	    else if (length > 2 && isIterateeCall$1.isIterateeCall(criteria[0], criteria[1], criteria[2])) {
	        criteria = [criteria[0]];
	    }
	    return orderBy$1.orderBy(collection, flatten$1.flatten(criteria), ['asc']);
	}

	exports.sortBy = sortBy; 
} (sortBy$2));

var sortBy = sortBy$2.sortBy;

const sortBy$1 = /*@__PURE__*/getDefaultExportFromCjs(sortBy);

var selectLegendSettings = state => state.legend.settings;
var selectLegendSize = state => state.legend.size;
var selectAllLegendPayload2DArray = state => state.legend.payload;
var selectLegendPayload = createSelector([selectAllLegendPayload2DArray, selectLegendSettings], (payloads, _ref) => {
  var {
    itemSorter
  } = _ref;
  var flat = payloads.flat(1);
  return itemSorter ? sortBy$1(flat, itemSorter) : flat;
});

/**
 * Use this hook in Legend, or anywhere else where you want to read the current Legend items.
 * @return all Legend items ready to be rendered
 */
function useLegendPayload() {
  return useAppSelector(selectLegendPayload);
}

var EPS$1 = 1;

/**
 * TODO this documentation does not reflect what this hook is doing, update it.
 * Stores the `offsetHeight`, `offsetLeft`, `offsetTop`, and `offsetWidth` of a DOM element.
 */

/**
 * Use this to listen to element layout changes.
 *
 * Very useful for reading actual sizes of DOM elements relative to the viewport.
 *
 * @param extraDependencies use this to trigger new DOM dimensions read when any of these change. Good for things like payload and label, that will re-render something down in the children array, but you want to read the layout box of a parent.
 * @returns [lastElementOffset, updateElementOffset] most recent value, and setter. Pass the setter to a DOM element ref like this: `<div ref={updateElementOffset}>`
 */
function useElementOffset() {
  var extraDependencies = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var [lastBoundingBox, setLastBoundingBox] = reactExports.useState({
    height: 0,
    left: 0,
    top: 0,
    width: 0
  });
  var updateBoundingBox = reactExports.useCallback(node => {
    if (node != null) {
      var rect = node.getBoundingClientRect();
      var box = {
        height: rect.height,
        left: rect.left,
        top: rect.top,
        width: rect.width
      };
      if (Math.abs(box.height - lastBoundingBox.height) > EPS$1 || Math.abs(box.left - lastBoundingBox.left) > EPS$1 || Math.abs(box.top - lastBoundingBox.top) > EPS$1 || Math.abs(box.width - lastBoundingBox.width) > EPS$1) {
        setLastBoundingBox({
          height: box.height,
          left: box.left,
          top: box.top,
          width: box.width
        });
      }
    }
  }, [lastBoundingBox.width, lastBoundingBox.height, lastBoundingBox.top, lastBoundingBox.left, ...extraDependencies]);
  return [lastBoundingBox, updateBoundingBox];
}

function formatProdErrorMessage$1(code) {
  return `Minified Redux error #${code}; visit https://redux.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;
}
var $$observable = /* @__PURE__ */ (() => typeof Symbol === "function" && Symbol.observable || "@@observable")();
var symbol_observable_default = $$observable;
var randomString = () => Math.random().toString(36).substring(7).split("").join(".");
var ActionTypes = {
  INIT: `@@redux/INIT${/* @__PURE__ */ randomString()}`,
  REPLACE: `@@redux/REPLACE${/* @__PURE__ */ randomString()}`,
  PROBE_UNKNOWN_ACTION: () => `@@redux/PROBE_UNKNOWN_ACTION${randomString()}`
};
var actionTypes_default = ActionTypes;
function isPlainObject$5(obj) {
  if (typeof obj !== "object" || obj === null)
    return false;
  let proto = obj;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return Object.getPrototypeOf(obj) === proto || Object.getPrototypeOf(obj) === null;
}
function createStore(reducer, preloadedState, enhancer) {
  if (typeof reducer !== "function") {
    throw new Error(formatProdErrorMessage$1(2) );
  }
  if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
    throw new Error(formatProdErrorMessage$1(0) );
  }
  if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
    enhancer = preloadedState;
    preloadedState = void 0;
  }
  if (typeof enhancer !== "undefined") {
    if (typeof enhancer !== "function") {
      throw new Error(formatProdErrorMessage$1(1) );
    }
    return enhancer(createStore)(reducer, preloadedState);
  }
  let currentReducer = reducer;
  let currentState = preloadedState;
  let currentListeners = /* @__PURE__ */ new Map();
  let nextListeners = currentListeners;
  let listenerIdCounter = 0;
  let isDispatching = false;
  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = /* @__PURE__ */ new Map();
      currentListeners.forEach((listener, key) => {
        nextListeners.set(key, listener);
      });
    }
  }
  function getState() {
    if (isDispatching) {
      throw new Error(formatProdErrorMessage$1(3) );
    }
    return currentState;
  }
  function subscribe(listener) {
    if (typeof listener !== "function") {
      throw new Error(formatProdErrorMessage$1(4) );
    }
    if (isDispatching) {
      throw new Error(formatProdErrorMessage$1(5) );
    }
    let isSubscribed = true;
    ensureCanMutateNextListeners();
    const listenerId = listenerIdCounter++;
    nextListeners.set(listenerId, listener);
    return function unsubscribe() {
      if (!isSubscribed) {
        return;
      }
      if (isDispatching) {
        throw new Error(formatProdErrorMessage$1(6) );
      }
      isSubscribed = false;
      ensureCanMutateNextListeners();
      nextListeners.delete(listenerId);
      currentListeners = null;
    };
  }
  function dispatch(action) {
    if (!isPlainObject$5(action)) {
      throw new Error(formatProdErrorMessage$1(7) );
    }
    if (typeof action.type === "undefined") {
      throw new Error(formatProdErrorMessage$1(8) );
    }
    if (typeof action.type !== "string") {
      throw new Error(formatProdErrorMessage$1(17) );
    }
    if (isDispatching) {
      throw new Error(formatProdErrorMessage$1(9) );
    }
    try {
      isDispatching = true;
      currentState = currentReducer(currentState, action);
    } finally {
      isDispatching = false;
    }
    const listeners = currentListeners = nextListeners;
    listeners.forEach((listener) => {
      listener();
    });
    return action;
  }
  function replaceReducer(nextReducer) {
    if (typeof nextReducer !== "function") {
      throw new Error(formatProdErrorMessage$1(10) );
    }
    currentReducer = nextReducer;
    dispatch({
      type: actionTypes_default.REPLACE
    });
  }
  function observable() {
    const outerSubscribe = subscribe;
    return {
      /**
       * The minimal observable subscription method.
       * @param observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
      subscribe(observer) {
        if (typeof observer !== "object" || observer === null) {
          throw new Error(formatProdErrorMessage$1(11) );
        }
        function observeState() {
          const observerAsObserver = observer;
          if (observerAsObserver.next) {
            observerAsObserver.next(getState());
          }
        }
        observeState();
        const unsubscribe = outerSubscribe(observeState);
        return {
          unsubscribe
        };
      },
      [symbol_observable_default]() {
        return this;
      }
    };
  }
  dispatch({
    type: actionTypes_default.INIT
  });
  const store = {
    dispatch,
    subscribe,
    getState,
    replaceReducer,
    [symbol_observable_default]: observable
  };
  return store;
}
function assertReducerShape(reducers) {
  Object.keys(reducers).forEach((key) => {
    const reducer = reducers[key];
    const initialState = reducer(void 0, {
      type: actionTypes_default.INIT
    });
    if (typeof initialState === "undefined") {
      throw new Error(formatProdErrorMessage$1(12) );
    }
    if (typeof reducer(void 0, {
      type: actionTypes_default.PROBE_UNKNOWN_ACTION()
    }) === "undefined") {
      throw new Error(formatProdErrorMessage$1(13) );
    }
  });
}
function combineReducers(reducers) {
  const reducerKeys = Object.keys(reducers);
  const finalReducers = {};
  for (let i = 0; i < reducerKeys.length; i++) {
    const key = reducerKeys[i];
    if (typeof reducers[key] === "function") {
      finalReducers[key] = reducers[key];
    }
  }
  const finalReducerKeys = Object.keys(finalReducers);
  let shapeAssertionError;
  try {
    assertReducerShape(finalReducers);
  } catch (e) {
    shapeAssertionError = e;
  }
  return function combination(state = {}, action) {
    if (shapeAssertionError) {
      throw shapeAssertionError;
    }
    let hasChanged = false;
    const nextState = {};
    for (let i = 0; i < finalReducerKeys.length; i++) {
      const key = finalReducerKeys[i];
      const reducer = finalReducers[key];
      const previousStateForKey = state[key];
      const nextStateForKey = reducer(previousStateForKey, action);
      if (typeof nextStateForKey === "undefined") {
        action && action.type;
        throw new Error(formatProdErrorMessage$1(14) );
      }
      nextState[key] = nextStateForKey;
      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
    }
    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
    return hasChanged ? nextState : state;
  };
}
function compose$1(...funcs) {
  if (funcs.length === 0) {
    return (arg) => arg;
  }
  if (funcs.length === 1) {
    return funcs[0];
  }
  return funcs.reduce((a, b) => (...args) => a(b(...args)));
}
function applyMiddleware(...middlewares) {
  return (createStore2) => (reducer, preloadedState) => {
    const store = createStore2(reducer, preloadedState);
    let dispatch = () => {
      throw new Error(formatProdErrorMessage$1(15) );
    };
    const middlewareAPI = {
      getState: store.getState,
      dispatch: (action, ...args) => dispatch(action, ...args)
    };
    const chain = middlewares.map((middleware) => middleware(middlewareAPI));
    dispatch = compose$1(...chain)(store.dispatch);
    return {
      ...store,
      dispatch
    };
  };
}
function isAction(action) {
  return isPlainObject$5(action) && "type" in action && typeof action.type === "string";
}

var NOTHING = Symbol.for("immer-nothing");
var DRAFTABLE = Symbol.for("immer-draftable");
var DRAFT_STATE = Symbol.for("immer-state");
function die(error, ...args) {
  throw new Error(
    `[Immer] minified error nr: ${error}. Full error at: https://bit.ly/3cXEKWf`
  );
}
var getPrototypeOf = Object.getPrototypeOf;
function isDraft(value) {
  return !!value && !!value[DRAFT_STATE];
}
function isDraftable(value) {
  if (!value)
    return false;
  return isPlainObject$4(value) || Array.isArray(value) || !!value[DRAFTABLE] || !!value.constructor?.[DRAFTABLE] || isMap(value) || isSet(value);
}
var objectCtorString = Object.prototype.constructor.toString();
function isPlainObject$4(value) {
  if (!value || typeof value !== "object")
    return false;
  const proto = getPrototypeOf(value);
  if (proto === null) {
    return true;
  }
  const Ctor = Object.hasOwnProperty.call(proto, "constructor") && proto.constructor;
  if (Ctor === Object)
    return true;
  return typeof Ctor == "function" && Function.toString.call(Ctor) === objectCtorString;
}
function each(obj, iter) {
  if (getArchtype(obj) === 0) {
    Reflect.ownKeys(obj).forEach((key) => {
      iter(key, obj[key], obj);
    });
  } else {
    obj.forEach((entry, index) => iter(index, entry, obj));
  }
}
function getArchtype(thing) {
  const state = thing[DRAFT_STATE];
  return state ? state.type_ : Array.isArray(thing) ? 1 : isMap(thing) ? 2 : isSet(thing) ? 3 : 0;
}
function has(thing, prop) {
  return getArchtype(thing) === 2 ? thing.has(prop) : Object.prototype.hasOwnProperty.call(thing, prop);
}
function set(thing, propOrOldValue, value) {
  const t = getArchtype(thing);
  if (t === 2)
    thing.set(propOrOldValue, value);
  else if (t === 3) {
    thing.add(value);
  } else
    thing[propOrOldValue] = value;
}
function is$1(x, y) {
  if (x === y) {
    return x !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}
function isMap(target) {
  return target instanceof Map;
}
function isSet(target) {
  return target instanceof Set;
}
function latest(state) {
  return state.copy_ || state.base_;
}
function shallowCopy(base, strict) {
  if (isMap(base)) {
    return new Map(base);
  }
  if (isSet(base)) {
    return new Set(base);
  }
  if (Array.isArray(base))
    return Array.prototype.slice.call(base);
  const isPlain = isPlainObject$4(base);
  if (strict === true || strict === "class_only" && !isPlain) {
    const descriptors = Object.getOwnPropertyDescriptors(base);
    delete descriptors[DRAFT_STATE];
    let keys = Reflect.ownKeys(descriptors);
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];
      const desc = descriptors[key];
      if (desc.writable === false) {
        desc.writable = true;
        desc.configurable = true;
      }
      if (desc.get || desc.set)
        descriptors[key] = {
          configurable: true,
          writable: true,
          // could live with !!desc.set as well here...
          enumerable: desc.enumerable,
          value: base[key]
        };
    }
    return Object.create(getPrototypeOf(base), descriptors);
  } else {
    const proto = getPrototypeOf(base);
    if (proto !== null && isPlain) {
      return { ...base };
    }
    const obj = Object.create(proto);
    return Object.assign(obj, base);
  }
}
function freeze(obj, deep = false) {
  if (isFrozen(obj) || isDraft(obj) || !isDraftable(obj))
    return obj;
  if (getArchtype(obj) > 1) {
    obj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections;
  }
  Object.freeze(obj);
  if (deep)
    Object.entries(obj).forEach(([key, value]) => freeze(value, true));
  return obj;
}
function dontMutateFrozenCollections() {
  die(2);
}
function isFrozen(obj) {
  return Object.isFrozen(obj);
}
var plugins = {};
function getPlugin(pluginKey) {
  const plugin = plugins[pluginKey];
  if (!plugin) {
    die(0, pluginKey);
  }
  return plugin;
}
var currentScope;
function getCurrentScope() {
  return currentScope;
}
function createScope(parent_, immer_) {
  return {
    drafts_: [],
    parent_,
    immer_,
    // Whenever the modified draft contains a draft from another scope, we
    // need to prevent auto-freezing so the unowned draft can be finalized.
    canAutoFreeze_: true,
    unfinalizedDrafts_: 0
  };
}
function usePatchesInScope(scope, patchListener) {
  if (patchListener) {
    getPlugin("Patches");
    scope.patches_ = [];
    scope.inversePatches_ = [];
    scope.patchListener_ = patchListener;
  }
}
function revokeScope(scope) {
  leaveScope(scope);
  scope.drafts_.forEach(revokeDraft);
  scope.drafts_ = null;
}
function leaveScope(scope) {
  if (scope === currentScope) {
    currentScope = scope.parent_;
  }
}
function enterScope(immer2) {
  return currentScope = createScope(currentScope, immer2);
}
function revokeDraft(draft) {
  const state = draft[DRAFT_STATE];
  if (state.type_ === 0 || state.type_ === 1)
    state.revoke_();
  else
    state.revoked_ = true;
}
function processResult(result, scope) {
  scope.unfinalizedDrafts_ = scope.drafts_.length;
  const baseDraft = scope.drafts_[0];
  const isReplaced = result !== void 0 && result !== baseDraft;
  if (isReplaced) {
    if (baseDraft[DRAFT_STATE].modified_) {
      revokeScope(scope);
      die(4);
    }
    if (isDraftable(result)) {
      result = finalize(scope, result);
      if (!scope.parent_)
        maybeFreeze(scope, result);
    }
    if (scope.patches_) {
      getPlugin("Patches").generateReplacementPatches_(
        baseDraft[DRAFT_STATE].base_,
        result,
        scope.patches_,
        scope.inversePatches_
      );
    }
  } else {
    result = finalize(scope, baseDraft, []);
  }
  revokeScope(scope);
  if (scope.patches_) {
    scope.patchListener_(scope.patches_, scope.inversePatches_);
  }
  return result !== NOTHING ? result : void 0;
}
function finalize(rootScope, value, path) {
  if (isFrozen(value))
    return value;
  const state = value[DRAFT_STATE];
  if (!state) {
    each(
      value,
      (key, childValue) => finalizeProperty(rootScope, state, value, key, childValue, path)
    );
    return value;
  }
  if (state.scope_ !== rootScope)
    return value;
  if (!state.modified_) {
    maybeFreeze(rootScope, state.base_, true);
    return state.base_;
  }
  if (!state.finalized_) {
    state.finalized_ = true;
    state.scope_.unfinalizedDrafts_--;
    const result = state.copy_;
    let resultEach = result;
    let isSet2 = false;
    if (state.type_ === 3) {
      resultEach = new Set(result);
      result.clear();
      isSet2 = true;
    }
    each(
      resultEach,
      (key, childValue) => finalizeProperty(rootScope, state, result, key, childValue, path, isSet2)
    );
    maybeFreeze(rootScope, result, false);
    if (path && rootScope.patches_) {
      getPlugin("Patches").generatePatches_(
        state,
        path,
        rootScope.patches_,
        rootScope.inversePatches_
      );
    }
  }
  return state.copy_;
}
function finalizeProperty(rootScope, parentState, targetObject, prop, childValue, rootPath, targetIsSet) {
  if (isDraft(childValue)) {
    const path = rootPath && parentState && parentState.type_ !== 3 && // Set objects are atomic since they have no keys.
    !has(parentState.assigned_, prop) ? rootPath.concat(prop) : void 0;
    const res = finalize(rootScope, childValue, path);
    set(targetObject, prop, res);
    if (isDraft(res)) {
      rootScope.canAutoFreeze_ = false;
    } else
      return;
  } else if (targetIsSet) {
    targetObject.add(childValue);
  }
  if (isDraftable(childValue) && !isFrozen(childValue)) {
    if (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {
      return;
    }
    finalize(rootScope, childValue);
    if ((!parentState || !parentState.scope_.parent_) && typeof prop !== "symbol" && Object.prototype.propertyIsEnumerable.call(targetObject, prop))
      maybeFreeze(rootScope, childValue);
  }
}
function maybeFreeze(scope, value, deep = false) {
  if (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {
    freeze(value, deep);
  }
}
function createProxyProxy(base, parent) {
  const isArray = Array.isArray(base);
  const state = {
    type_: isArray ? 1 : 0,
    // Track which produce call this is associated with.
    scope_: parent ? parent.scope_ : getCurrentScope(),
    // True for both shallow and deep changes.
    modified_: false,
    // Used during finalization.
    finalized_: false,
    // Track which properties have been assigned (true) or deleted (false).
    assigned_: {},
    // The parent draft state.
    parent_: parent,
    // The base state.
    base_: base,
    // The base proxy.
    draft_: null,
    // set below
    // The base copy with any updated values.
    copy_: null,
    // Called by the `produce` function.
    revoke_: null,
    isManual_: false
  };
  let target = state;
  let traps = objectTraps;
  if (isArray) {
    target = [state];
    traps = arrayTraps;
  }
  const { revoke, proxy } = Proxy.revocable(target, traps);
  state.draft_ = proxy;
  state.revoke_ = revoke;
  return proxy;
}
var objectTraps = {
  get(state, prop) {
    if (prop === DRAFT_STATE)
      return state;
    const source = latest(state);
    if (!has(source, prop)) {
      return readPropFromProto(state, source, prop);
    }
    const value = source[prop];
    if (state.finalized_ || !isDraftable(value)) {
      return value;
    }
    if (value === peek(state.base_, prop)) {
      prepareCopy(state);
      return state.copy_[prop] = createProxy(value, state);
    }
    return value;
  },
  has(state, prop) {
    return prop in latest(state);
  },
  ownKeys(state) {
    return Reflect.ownKeys(latest(state));
  },
  set(state, prop, value) {
    const desc = getDescriptorFromProto(latest(state), prop);
    if (desc?.set) {
      desc.set.call(state.draft_, value);
      return true;
    }
    if (!state.modified_) {
      const current2 = peek(latest(state), prop);
      const currentState = current2?.[DRAFT_STATE];
      if (currentState && currentState.base_ === value) {
        state.copy_[prop] = value;
        state.assigned_[prop] = false;
        return true;
      }
      if (is$1(value, current2) && (value !== void 0 || has(state.base_, prop)))
        return true;
      prepareCopy(state);
      markChanged(state);
    }
    if (state.copy_[prop] === value && // special case: handle new props with value 'undefined'
    (value !== void 0 || prop in state.copy_) || // special case: NaN
    Number.isNaN(value) && Number.isNaN(state.copy_[prop]))
      return true;
    state.copy_[prop] = value;
    state.assigned_[prop] = true;
    return true;
  },
  deleteProperty(state, prop) {
    if (peek(state.base_, prop) !== void 0 || prop in state.base_) {
      state.assigned_[prop] = false;
      prepareCopy(state);
      markChanged(state);
    } else {
      delete state.assigned_[prop];
    }
    if (state.copy_) {
      delete state.copy_[prop];
    }
    return true;
  },
  // Note: We never coerce `desc.value` into an Immer draft, because we can't make
  // the same guarantee in ES5 mode.
  getOwnPropertyDescriptor(state, prop) {
    const owner = latest(state);
    const desc = Reflect.getOwnPropertyDescriptor(owner, prop);
    if (!desc)
      return desc;
    return {
      writable: true,
      configurable: state.type_ !== 1 || prop !== "length",
      enumerable: desc.enumerable,
      value: owner[prop]
    };
  },
  defineProperty() {
    die(11);
  },
  getPrototypeOf(state) {
    return getPrototypeOf(state.base_);
  },
  setPrototypeOf() {
    die(12);
  }
};
var arrayTraps = {};
each(objectTraps, (key, fn) => {
  arrayTraps[key] = function() {
    arguments[0] = arguments[0][0];
    return fn.apply(this, arguments);
  };
});
arrayTraps.deleteProperty = function(state, prop) {
  return arrayTraps.set.call(this, state, prop, void 0);
};
arrayTraps.set = function(state, prop, value) {
  return objectTraps.set.call(this, state[0], prop, value, state[0]);
};
function peek(draft, prop) {
  const state = draft[DRAFT_STATE];
  const source = state ? latest(state) : draft;
  return source[prop];
}
function readPropFromProto(state, source, prop) {
  const desc = getDescriptorFromProto(source, prop);
  return desc ? `value` in desc ? desc.value : (
    // This is a very special case, if the prop is a getter defined by the
    // prototype, we should invoke it with the draft as context!
    desc.get?.call(state.draft_)
  ) : void 0;
}
function getDescriptorFromProto(source, prop) {
  if (!(prop in source))
    return void 0;
  let proto = getPrototypeOf(source);
  while (proto) {
    const desc = Object.getOwnPropertyDescriptor(proto, prop);
    if (desc)
      return desc;
    proto = getPrototypeOf(proto);
  }
  return void 0;
}
function markChanged(state) {
  if (!state.modified_) {
    state.modified_ = true;
    if (state.parent_) {
      markChanged(state.parent_);
    }
  }
}
function prepareCopy(state) {
  if (!state.copy_) {
    state.copy_ = shallowCopy(
      state.base_,
      state.scope_.immer_.useStrictShallowCopy_
    );
  }
}
var Immer2 = class {
  constructor(config) {
    this.autoFreeze_ = true;
    this.useStrictShallowCopy_ = false;
    this.produce = (base, recipe, patchListener) => {
      if (typeof base === "function" && typeof recipe !== "function") {
        const defaultBase = recipe;
        recipe = base;
        const self = this;
        return function curriedProduce(base2 = defaultBase, ...args) {
          return self.produce(base2, (draft) => recipe.call(this, draft, ...args));
        };
      }
      if (typeof recipe !== "function")
        die(6);
      if (patchListener !== void 0 && typeof patchListener !== "function")
        die(7);
      let result;
      if (isDraftable(base)) {
        const scope = enterScope(this);
        const proxy = createProxy(base, void 0);
        let hasError = true;
        try {
          result = recipe(proxy);
          hasError = false;
        } finally {
          if (hasError)
            revokeScope(scope);
          else
            leaveScope(scope);
        }
        usePatchesInScope(scope, patchListener);
        return processResult(result, scope);
      } else if (!base || typeof base !== "object") {
        result = recipe(base);
        if (result === void 0)
          result = base;
        if (result === NOTHING)
          result = void 0;
        if (this.autoFreeze_)
          freeze(result, true);
        if (patchListener) {
          const p = [];
          const ip = [];
          getPlugin("Patches").generateReplacementPatches_(base, result, p, ip);
          patchListener(p, ip);
        }
        return result;
      } else
        die(1, base);
    };
    this.produceWithPatches = (base, recipe) => {
      if (typeof base === "function") {
        return (state, ...args) => this.produceWithPatches(state, (draft) => base(draft, ...args));
      }
      let patches, inversePatches;
      const result = this.produce(base, recipe, (p, ip) => {
        patches = p;
        inversePatches = ip;
      });
      return [result, patches, inversePatches];
    };
    if (typeof config?.autoFreeze === "boolean")
      this.setAutoFreeze(config.autoFreeze);
    if (typeof config?.useStrictShallowCopy === "boolean")
      this.setUseStrictShallowCopy(config.useStrictShallowCopy);
  }
  createDraft(base) {
    if (!isDraftable(base))
      die(8);
    if (isDraft(base))
      base = current(base);
    const scope = enterScope(this);
    const proxy = createProxy(base, void 0);
    proxy[DRAFT_STATE].isManual_ = true;
    leaveScope(scope);
    return proxy;
  }
  finishDraft(draft, patchListener) {
    const state = draft && draft[DRAFT_STATE];
    if (!state || !state.isManual_)
      die(9);
    const { scope_: scope } = state;
    usePatchesInScope(scope, patchListener);
    return processResult(void 0, scope);
  }
  /**
   * Pass true to automatically freeze all copies created by Immer.
   *
   * By default, auto-freezing is enabled.
   */
  setAutoFreeze(value) {
    this.autoFreeze_ = value;
  }
  /**
   * Pass true to enable strict shallow copy.
   *
   * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.
   */
  setUseStrictShallowCopy(value) {
    this.useStrictShallowCopy_ = value;
  }
  applyPatches(base, patches) {
    let i;
    for (i = patches.length - 1; i >= 0; i--) {
      const patch = patches[i];
      if (patch.path.length === 0 && patch.op === "replace") {
        base = patch.value;
        break;
      }
    }
    if (i > -1) {
      patches = patches.slice(i + 1);
    }
    const applyPatchesImpl = getPlugin("Patches").applyPatches_;
    if (isDraft(base)) {
      return applyPatchesImpl(base, patches);
    }
    return this.produce(
      base,
      (draft) => applyPatchesImpl(draft, patches)
    );
  }
};
function createProxy(value, parent) {
  const draft = isMap(value) ? getPlugin("MapSet").proxyMap_(value, parent) : isSet(value) ? getPlugin("MapSet").proxySet_(value, parent) : createProxyProxy(value, parent);
  const scope = parent ? parent.scope_ : getCurrentScope();
  scope.drafts_.push(draft);
  return draft;
}
function current(value) {
  if (!isDraft(value))
    die(10, value);
  return currentImpl(value);
}
function currentImpl(value) {
  if (!isDraftable(value) || isFrozen(value))
    return value;
  const state = value[DRAFT_STATE];
  let copy;
  if (state) {
    if (!state.modified_)
      return state.base_;
    state.finalized_ = true;
    copy = shallowCopy(value, state.scope_.immer_.useStrictShallowCopy_);
  } else {
    copy = shallowCopy(value, true);
  }
  each(copy, (key, childValue) => {
    set(copy, key, currentImpl(childValue));
  });
  if (state) {
    state.finalized_ = false;
  }
  return copy;
}
var immer = new Immer2();
var produce = immer.produce;
immer.produceWithPatches.bind(
  immer
);
immer.setAutoFreeze.bind(immer);
immer.setUseStrictShallowCopy.bind(immer);
immer.applyPatches.bind(immer);
immer.createDraft.bind(immer);
immer.finishDraft.bind(immer);
function castDraft(value) {
  return value;
}

// src/index.ts
function createThunkMiddleware(extraArgument) {
  const middleware = ({ dispatch, getState }) => (next) => (action) => {
    if (typeof action === "function") {
      return action(dispatch, getState, extraArgument);
    }
    return next(action);
  };
  return middleware;
}
var thunk = createThunkMiddleware();
var withExtraArgument = createThunkMiddleware;

var composeWithDevTools = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function() {
  if (arguments.length === 0) return void 0;
  if (typeof arguments[0] === "object") return compose$1;
  return compose$1.apply(null, arguments);
};
function createAction(type, prepareAction) {
  function actionCreator(...args) {
    if (prepareAction) {
      let prepared = prepareAction(...args);
      if (!prepared) {
        throw new Error(formatProdErrorMessage(0) );
      }
      return {
        type,
        payload: prepared.payload,
        ..."meta" in prepared && {
          meta: prepared.meta
        },
        ..."error" in prepared && {
          error: prepared.error
        }
      };
    }
    return {
      type,
      payload: args[0]
    };
  }
  actionCreator.toString = () => `${type}`;
  actionCreator.type = type;
  actionCreator.match = (action) => isAction(action) && action.type === type;
  return actionCreator;
}
var Tuple = class _Tuple extends Array {
  constructor(...items) {
    super(...items);
    Object.setPrototypeOf(this, _Tuple.prototype);
  }
  static get [Symbol.species]() {
    return _Tuple;
  }
  concat(...arr) {
    return super.concat.apply(this, arr);
  }
  prepend(...arr) {
    if (arr.length === 1 && Array.isArray(arr[0])) {
      return new _Tuple(...arr[0].concat(this));
    }
    return new _Tuple(...arr.concat(this));
  }
};
function freezeDraftable(val) {
  return isDraftable(val) ? produce(val, () => {
  }) : val;
}
function getOrInsertComputed(map, key, compute) {
  if (map.has(key)) return map.get(key);
  return map.set(key, compute(key)).get(key);
}
function isBoolean(x) {
  return typeof x === "boolean";
}
var buildGetDefaultMiddleware = () => function getDefaultMiddleware(options) {
  const {
    thunk: thunk$1 = true,
    immutableCheck = true,
    serializableCheck = true,
    actionCreatorCheck = true
  } = options ?? {};
  let middlewareArray = new Tuple();
  if (thunk$1) {
    if (isBoolean(thunk$1)) {
      middlewareArray.push(thunk);
    } else {
      middlewareArray.push(withExtraArgument(thunk$1.extraArgument));
    }
  }
  return middlewareArray;
};
var SHOULD_AUTOBATCH = "RTK_autoBatch";
var createQueueWithTimer = (timeout) => {
  return (notify) => {
    setTimeout(notify, timeout);
  };
};
var autoBatchEnhancer = (options = {
  type: "raf"
}) => (next) => (...args) => {
  const store = next(...args);
  let notifying = true;
  let shouldNotifyAtEndOfTick = false;
  let notificationQueued = false;
  const listeners = /* @__PURE__ */ new Set();
  const queueCallback = options.type === "tick" ? queueMicrotask : options.type === "raf" ? (
    // requestAnimationFrame won't exist in SSR environments. Fall back to a vague approximation just to keep from erroring.
    typeof window !== "undefined" && window.requestAnimationFrame ? window.requestAnimationFrame : createQueueWithTimer(10)
  ) : options.type === "callback" ? options.queueNotification : createQueueWithTimer(options.timeout);
  const notifyListeners = () => {
    notificationQueued = false;
    if (shouldNotifyAtEndOfTick) {
      shouldNotifyAtEndOfTick = false;
      listeners.forEach((l) => l());
    }
  };
  return Object.assign({}, store, {
    // Override the base `store.subscribe` method to keep original listeners
    // from running if we're delaying notifications
    subscribe(listener2) {
      const wrappedListener = () => notifying && listener2();
      const unsubscribe = store.subscribe(wrappedListener);
      listeners.add(listener2);
      return () => {
        unsubscribe();
        listeners.delete(listener2);
      };
    },
    // Override the base `store.dispatch` method so that we can check actions
    // for the `shouldAutoBatch` flag and determine if batching is active
    dispatch(action) {
      try {
        notifying = !action?.meta?.[SHOULD_AUTOBATCH];
        shouldNotifyAtEndOfTick = !notifying;
        if (shouldNotifyAtEndOfTick) {
          if (!notificationQueued) {
            notificationQueued = true;
            queueCallback(notifyListeners);
          }
        }
        return store.dispatch(action);
      } finally {
        notifying = true;
      }
    }
  });
};
var buildGetDefaultEnhancers = (middlewareEnhancer) => function getDefaultEnhancers(options) {
  const {
    autoBatch = true
  } = options ?? {};
  let enhancerArray = new Tuple(middlewareEnhancer);
  if (autoBatch) {
    enhancerArray.push(autoBatchEnhancer(typeof autoBatch === "object" ? autoBatch : void 0));
  }
  return enhancerArray;
};
function configureStore(options) {
  const getDefaultMiddleware = buildGetDefaultMiddleware();
  const {
    reducer = void 0,
    middleware,
    devTools = true,
    preloadedState = void 0,
    enhancers = void 0
  } = options || {};
  let rootReducer;
  if (typeof reducer === "function") {
    rootReducer = reducer;
  } else if (isPlainObject$5(reducer)) {
    rootReducer = combineReducers(reducer);
  } else {
    throw new Error(formatProdErrorMessage(1) );
  }
  let finalMiddleware;
  if (typeof middleware === "function") {
    finalMiddleware = middleware(getDefaultMiddleware);
  } else {
    finalMiddleware = getDefaultMiddleware();
  }
  let finalCompose = compose$1;
  if (devTools) {
    finalCompose = composeWithDevTools({
      // Enable capture of stack traces for dispatched Redux actions
      trace: false,
      ...typeof devTools === "object" && devTools
    });
  }
  const middlewareEnhancer = applyMiddleware(...finalMiddleware);
  const getDefaultEnhancers = buildGetDefaultEnhancers(middlewareEnhancer);
  let storeEnhancers = typeof enhancers === "function" ? enhancers(getDefaultEnhancers) : getDefaultEnhancers();
  const composedEnhancer = finalCompose(...storeEnhancers);
  return createStore(rootReducer, preloadedState, composedEnhancer);
}
function executeReducerBuilderCallback(builderCallback) {
  const actionsMap = {};
  const actionMatchers = [];
  let defaultCaseReducer;
  const builder = {
    addCase(typeOrActionCreator, reducer) {
      const type = typeof typeOrActionCreator === "string" ? typeOrActionCreator : typeOrActionCreator.type;
      if (!type) {
        throw new Error(formatProdErrorMessage(28) );
      }
      if (type in actionsMap) {
        throw new Error(formatProdErrorMessage(29) );
      }
      actionsMap[type] = reducer;
      return builder;
    },
    addMatcher(matcher, reducer) {
      actionMatchers.push({
        matcher,
        reducer
      });
      return builder;
    },
    addDefaultCase(reducer) {
      defaultCaseReducer = reducer;
      return builder;
    }
  };
  builderCallback(builder);
  return [actionsMap, actionMatchers, defaultCaseReducer];
}
function isStateFunction(x) {
  return typeof x === "function";
}
function createReducer(initialState, mapOrBuilderCallback) {
  let [actionsMap, finalActionMatchers, finalDefaultCaseReducer] = executeReducerBuilderCallback(mapOrBuilderCallback);
  let getInitialState;
  if (isStateFunction(initialState)) {
    getInitialState = () => freezeDraftable(initialState());
  } else {
    const frozenInitialState = freezeDraftable(initialState);
    getInitialState = () => frozenInitialState;
  }
  function reducer(state = getInitialState(), action) {
    let caseReducers = [actionsMap[action.type], ...finalActionMatchers.filter(({
      matcher
    }) => matcher(action)).map(({
      reducer: reducer2
    }) => reducer2)];
    if (caseReducers.filter((cr) => !!cr).length === 0) {
      caseReducers = [finalDefaultCaseReducer];
    }
    return caseReducers.reduce((previousState, caseReducer) => {
      if (caseReducer) {
        if (isDraft(previousState)) {
          const draft = previousState;
          const result = caseReducer(draft, action);
          if (result === void 0) {
            return previousState;
          }
          return result;
        } else if (!isDraftable(previousState)) {
          const result = caseReducer(previousState, action);
          if (result === void 0) {
            if (previousState === null) {
              return previousState;
            }
            throw Error("A case reducer on a non-draftable value must not return undefined");
          }
          return result;
        } else {
          return produce(previousState, (draft) => {
            return caseReducer(draft, action);
          });
        }
      }
      return previousState;
    }, state);
  }
  reducer.getInitialState = getInitialState;
  return reducer;
}
var urlAlphabet = "ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW";
var nanoid = (size = 21) => {
  let id = "";
  let i = size;
  while (i--) {
    id += urlAlphabet[Math.random() * 64 | 0];
  }
  return id;
};
var asyncThunkSymbol = /* @__PURE__ */ Symbol.for("rtk-slice-createasyncthunk");
function getType(slice, actionKey) {
  return `${slice}/${actionKey}`;
}
function buildCreateSlice({
  creators
} = {}) {
  const cAT = creators?.asyncThunk?.[asyncThunkSymbol];
  return function createSlice2(options) {
    const {
      name,
      reducerPath = name
    } = options;
    if (!name) {
      throw new Error(formatProdErrorMessage(11) );
    }
    const reducers = (typeof options.reducers === "function" ? options.reducers(buildReducerCreators()) : options.reducers) || {};
    const reducerNames = Object.keys(reducers);
    const context = {
      sliceCaseReducersByName: {},
      sliceCaseReducersByType: {},
      actionCreators: {},
      sliceMatchers: []
    };
    const contextMethods = {
      addCase(typeOrActionCreator, reducer2) {
        const type = typeof typeOrActionCreator === "string" ? typeOrActionCreator : typeOrActionCreator.type;
        if (!type) {
          throw new Error(formatProdErrorMessage(12) );
        }
        if (type in context.sliceCaseReducersByType) {
          throw new Error(formatProdErrorMessage(13) );
        }
        context.sliceCaseReducersByType[type] = reducer2;
        return contextMethods;
      },
      addMatcher(matcher, reducer2) {
        context.sliceMatchers.push({
          matcher,
          reducer: reducer2
        });
        return contextMethods;
      },
      exposeAction(name2, actionCreator) {
        context.actionCreators[name2] = actionCreator;
        return contextMethods;
      },
      exposeCaseReducer(name2, reducer2) {
        context.sliceCaseReducersByName[name2] = reducer2;
        return contextMethods;
      }
    };
    reducerNames.forEach((reducerName) => {
      const reducerDefinition = reducers[reducerName];
      const reducerDetails = {
        reducerName,
        type: getType(name, reducerName),
        createNotation: typeof options.reducers === "function"
      };
      if (isAsyncThunkSliceReducerDefinition(reducerDefinition)) {
        handleThunkCaseReducerDefinition(reducerDetails, reducerDefinition, contextMethods, cAT);
      } else {
        handleNormalReducerDefinition(reducerDetails, reducerDefinition, contextMethods);
      }
    });
    function buildReducer() {
      const [extraReducers = {}, actionMatchers = [], defaultCaseReducer = void 0] = typeof options.extraReducers === "function" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers];
      const finalCaseReducers = {
        ...extraReducers,
        ...context.sliceCaseReducersByType
      };
      return createReducer(options.initialState, (builder) => {
        for (let key in finalCaseReducers) {
          builder.addCase(key, finalCaseReducers[key]);
        }
        for (let sM of context.sliceMatchers) {
          builder.addMatcher(sM.matcher, sM.reducer);
        }
        for (let m of actionMatchers) {
          builder.addMatcher(m.matcher, m.reducer);
        }
        if (defaultCaseReducer) {
          builder.addDefaultCase(defaultCaseReducer);
        }
      });
    }
    const selectSelf = (state) => state;
    const injectedSelectorCache = /* @__PURE__ */ new Map();
    const injectedStateCache = /* @__PURE__ */ new WeakMap();
    let _reducer;
    function reducer(state, action) {
      if (!_reducer) _reducer = buildReducer();
      return _reducer(state, action);
    }
    function getInitialState() {
      if (!_reducer) _reducer = buildReducer();
      return _reducer.getInitialState();
    }
    function makeSelectorProps(reducerPath2, injected = false) {
      function selectSlice(state) {
        let sliceState = state[reducerPath2];
        if (typeof sliceState === "undefined") {
          if (injected) {
            sliceState = getOrInsertComputed(injectedStateCache, selectSlice, getInitialState);
          }
        }
        return sliceState;
      }
      function getSelectors(selectState = selectSelf) {
        const selectorCache = getOrInsertComputed(injectedSelectorCache, injected, () => /* @__PURE__ */ new WeakMap());
        return getOrInsertComputed(selectorCache, selectState, () => {
          const map = {};
          for (const [name2, selector] of Object.entries(options.selectors ?? {})) {
            map[name2] = wrapSelector(selector, selectState, () => getOrInsertComputed(injectedStateCache, selectState, getInitialState), injected);
          }
          return map;
        });
      }
      return {
        reducerPath: reducerPath2,
        getSelectors,
        get selectors() {
          return getSelectors(selectSlice);
        },
        selectSlice
      };
    }
    const slice = {
      name,
      reducer,
      actions: context.actionCreators,
      caseReducers: context.sliceCaseReducersByName,
      getInitialState,
      ...makeSelectorProps(reducerPath),
      injectInto(injectable, {
        reducerPath: pathOpt,
        ...config
      } = {}) {
        const newReducerPath = pathOpt ?? reducerPath;
        injectable.inject({
          reducerPath: newReducerPath,
          reducer
        }, config);
        return {
          ...slice,
          ...makeSelectorProps(newReducerPath, true)
        };
      }
    };
    return slice;
  };
}
function wrapSelector(selector, selectState, getInitialState, injected) {
  function wrapper(rootState, ...args) {
    let sliceState = selectState(rootState);
    if (typeof sliceState === "undefined") {
      if (injected) {
        sliceState = getInitialState();
      }
    }
    return selector(sliceState, ...args);
  }
  wrapper.unwrapped = selector;
  return wrapper;
}
var createSlice = /* @__PURE__ */ buildCreateSlice();
function buildReducerCreators() {
  function asyncThunk(payloadCreator, config) {
    return {
      _reducerDefinitionType: "asyncThunk",
      payloadCreator,
      ...config
    };
  }
  asyncThunk.withTypes = () => asyncThunk;
  return {
    reducer(caseReducer) {
      return Object.assign({
        // hack so the wrapping function has the same name as the original
        // we need to create a wrapper so the `reducerDefinitionType` is not assigned to the original
        [caseReducer.name](...args) {
          return caseReducer(...args);
        }
      }[caseReducer.name], {
        _reducerDefinitionType: "reducer"
        /* reducer */
      });
    },
    preparedReducer(prepare, reducer) {
      return {
        _reducerDefinitionType: "reducerWithPrepare",
        prepare,
        reducer
      };
    },
    asyncThunk
  };
}
function handleNormalReducerDefinition({
  type,
  reducerName,
  createNotation
}, maybeReducerWithPrepare, context) {
  let caseReducer;
  let prepareCallback;
  if ("reducer" in maybeReducerWithPrepare) {
    if (createNotation && !isCaseReducerWithPrepareDefinition(maybeReducerWithPrepare)) {
      throw new Error(formatProdErrorMessage(17) );
    }
    caseReducer = maybeReducerWithPrepare.reducer;
    prepareCallback = maybeReducerWithPrepare.prepare;
  } else {
    caseReducer = maybeReducerWithPrepare;
  }
  context.addCase(type, caseReducer).exposeCaseReducer(reducerName, caseReducer).exposeAction(reducerName, prepareCallback ? createAction(type, prepareCallback) : createAction(type));
}
function isAsyncThunkSliceReducerDefinition(reducerDefinition) {
  return reducerDefinition._reducerDefinitionType === "asyncThunk";
}
function isCaseReducerWithPrepareDefinition(reducerDefinition) {
  return reducerDefinition._reducerDefinitionType === "reducerWithPrepare";
}
function handleThunkCaseReducerDefinition({
  type,
  reducerName
}, reducerDefinition, context, cAT) {
  if (!cAT) {
    throw new Error(formatProdErrorMessage(18) );
  }
  const {
    payloadCreator,
    fulfilled,
    pending,
    rejected,
    settled,
    options
  } = reducerDefinition;
  const thunk = cAT(type, payloadCreator, options);
  context.exposeAction(reducerName, thunk);
  if (fulfilled) {
    context.addCase(thunk.fulfilled, fulfilled);
  }
  if (pending) {
    context.addCase(thunk.pending, pending);
  }
  if (rejected) {
    context.addCase(thunk.rejected, rejected);
  }
  if (settled) {
    context.addMatcher(thunk.settled, settled);
  }
  context.exposeCaseReducer(reducerName, {
    fulfilled: fulfilled || noop$4,
    pending: pending || noop$4,
    rejected: rejected || noop$4,
    settled: settled || noop$4
  });
}
function noop$4() {
}
var task = "task";
var listener = "listener";
var completed = "completed";
var cancelled = "cancelled";
var taskCancelled = `task-${cancelled}`;
var taskCompleted = `task-${completed}`;
var listenerCancelled = `${listener}-${cancelled}`;
var listenerCompleted = `${listener}-${completed}`;
var TaskAbortError = class {
  constructor(code) {
    this.code = code;
    this.message = `${task} ${cancelled} (reason: ${code})`;
  }
  name = "TaskAbortError";
  message;
};
var assertFunction = (func, expected) => {
  if (typeof func !== "function") {
    throw new TypeError(formatProdErrorMessage(32) );
  }
};
var noop2 = () => {
};
var catchRejection = (promise, onError = noop2) => {
  promise.catch(onError);
  return promise;
};
var addAbortSignalListener = (abortSignal, callback) => {
  abortSignal.addEventListener("abort", callback, {
    once: true
  });
  return () => abortSignal.removeEventListener("abort", callback);
};
var abortControllerWithReason = (abortController, reason) => {
  const signal = abortController.signal;
  if (signal.aborted) {
    return;
  }
  if (!("reason" in signal)) {
    Object.defineProperty(signal, "reason", {
      enumerable: true,
      value: reason,
      configurable: true,
      writable: true
    });
  }
  abortController.abort(reason);
};
var validateActive = (signal) => {
  if (signal.aborted) {
    const {
      reason
    } = signal;
    throw new TaskAbortError(reason);
  }
};
function raceWithSignal(signal, promise) {
  let cleanup = noop2;
  return new Promise((resolve, reject) => {
    const notifyRejection = () => reject(new TaskAbortError(signal.reason));
    if (signal.aborted) {
      notifyRejection();
      return;
    }
    cleanup = addAbortSignalListener(signal, notifyRejection);
    promise.finally(() => cleanup()).then(resolve, reject);
  }).finally(() => {
    cleanup = noop2;
  });
}
var runTask = async (task2, cleanUp) => {
  try {
    await Promise.resolve();
    const value = await task2();
    return {
      status: "ok",
      value
    };
  } catch (error) {
    return {
      status: error instanceof TaskAbortError ? "cancelled" : "rejected",
      error
    };
  } finally {
    cleanUp?.();
  }
};
var createPause = (signal) => {
  return (promise) => {
    return catchRejection(raceWithSignal(signal, promise).then((output) => {
      validateActive(signal);
      return output;
    }));
  };
};
var createDelay = (signal) => {
  const pause = createPause(signal);
  return (timeoutMs) => {
    return pause(new Promise((resolve) => setTimeout(resolve, timeoutMs)));
  };
};
var {
  assign
} = Object;
var INTERNAL_NIL_TOKEN = {};
var alm = "listenerMiddleware";
var createFork = (parentAbortSignal, parentBlockingPromises) => {
  const linkControllers = (controller) => addAbortSignalListener(parentAbortSignal, () => abortControllerWithReason(controller, parentAbortSignal.reason));
  return (taskExecutor, opts) => {
    assertFunction(taskExecutor);
    const childAbortController = new AbortController();
    linkControllers(childAbortController);
    const result = runTask(async () => {
      validateActive(parentAbortSignal);
      validateActive(childAbortController.signal);
      const result2 = await taskExecutor({
        pause: createPause(childAbortController.signal),
        delay: createDelay(childAbortController.signal),
        signal: childAbortController.signal
      });
      validateActive(childAbortController.signal);
      return result2;
    }, () => abortControllerWithReason(childAbortController, taskCompleted));
    if (opts?.autoJoin) {
      parentBlockingPromises.push(result.catch(noop2));
    }
    return {
      result: createPause(parentAbortSignal)(result),
      cancel() {
        abortControllerWithReason(childAbortController, taskCancelled);
      }
    };
  };
};
var createTakePattern = (startListening, signal) => {
  const take = async (predicate, timeout) => {
    validateActive(signal);
    let unsubscribe = () => {
    };
    const tuplePromise = new Promise((resolve, reject) => {
      let stopListening = startListening({
        predicate,
        effect: (action, listenerApi) => {
          listenerApi.unsubscribe();
          resolve([action, listenerApi.getState(), listenerApi.getOriginalState()]);
        }
      });
      unsubscribe = () => {
        stopListening();
        reject();
      };
    });
    const promises = [tuplePromise];
    if (timeout != null) {
      promises.push(new Promise((resolve) => setTimeout(resolve, timeout, null)));
    }
    try {
      const output = await raceWithSignal(signal, Promise.race(promises));
      validateActive(signal);
      return output;
    } finally {
      unsubscribe();
    }
  };
  return (predicate, timeout) => catchRejection(take(predicate, timeout));
};
var getListenerEntryPropsFrom = (options) => {
  let {
    type,
    actionCreator,
    matcher,
    predicate,
    effect
  } = options;
  if (type) {
    predicate = createAction(type).match;
  } else if (actionCreator) {
    type = actionCreator.type;
    predicate = actionCreator.match;
  } else if (matcher) {
    predicate = matcher;
  } else if (predicate) ; else {
    throw new Error(formatProdErrorMessage(21) );
  }
  assertFunction(effect);
  return {
    predicate,
    type,
    effect
  };
};
var createListenerEntry = /* @__PURE__ */ assign((options) => {
  const {
    type,
    predicate,
    effect
  } = getListenerEntryPropsFrom(options);
  const entry = {
    id: nanoid(),
    effect,
    type,
    predicate,
    pending: /* @__PURE__ */ new Set(),
    unsubscribe: () => {
      throw new Error(formatProdErrorMessage(22) );
    }
  };
  return entry;
}, {
  withTypes: () => createListenerEntry
});
var findListenerEntry = (listenerMap, options) => {
  const {
    type,
    effect,
    predicate
  } = getListenerEntryPropsFrom(options);
  return Array.from(listenerMap.values()).find((entry) => {
    const matchPredicateOrType = typeof type === "string" ? entry.type === type : entry.predicate === predicate;
    return matchPredicateOrType && entry.effect === effect;
  });
};
var cancelActiveListeners = (entry) => {
  entry.pending.forEach((controller) => {
    abortControllerWithReason(controller, listenerCancelled);
  });
};
var createClearListenerMiddleware = (listenerMap) => {
  return () => {
    listenerMap.forEach(cancelActiveListeners);
    listenerMap.clear();
  };
};
var safelyNotifyError = (errorHandler, errorToNotify, errorInfo) => {
  try {
    errorHandler(errorToNotify, errorInfo);
  } catch (errorHandlerError) {
    setTimeout(() => {
      throw errorHandlerError;
    }, 0);
  }
};
var addListener = /* @__PURE__ */ assign(/* @__PURE__ */ createAction(`${alm}/add`), {
  withTypes: () => addListener
});
var clearAllListeners = /* @__PURE__ */ createAction(`${alm}/removeAll`);
var removeListener = /* @__PURE__ */ assign(/* @__PURE__ */ createAction(`${alm}/remove`), {
  withTypes: () => removeListener
});
var defaultErrorHandler = (...args) => {
  console.error(`${alm}/error`, ...args);
};
var createListenerMiddleware = (middlewareOptions = {}) => {
  const listenerMap = /* @__PURE__ */ new Map();
  const {
    extra,
    onError = defaultErrorHandler
  } = middlewareOptions;
  assertFunction(onError);
  const insertEntry = (entry) => {
    entry.unsubscribe = () => listenerMap.delete(entry.id);
    listenerMap.set(entry.id, entry);
    return (cancelOptions) => {
      entry.unsubscribe();
      if (cancelOptions?.cancelActive) {
        cancelActiveListeners(entry);
      }
    };
  };
  const startListening = (options) => {
    const entry = findListenerEntry(listenerMap, options) ?? createListenerEntry(options);
    return insertEntry(entry);
  };
  assign(startListening, {
    withTypes: () => startListening
  });
  const stopListening = (options) => {
    const entry = findListenerEntry(listenerMap, options);
    if (entry) {
      entry.unsubscribe();
      if (options.cancelActive) {
        cancelActiveListeners(entry);
      }
    }
    return !!entry;
  };
  assign(stopListening, {
    withTypes: () => stopListening
  });
  const notifyListener = async (entry, action, api, getOriginalState) => {
    const internalTaskController = new AbortController();
    const take = createTakePattern(startListening, internalTaskController.signal);
    const autoJoinPromises = [];
    try {
      entry.pending.add(internalTaskController);
      await Promise.resolve(entry.effect(
        action,
        // Use assign() rather than ... to avoid extra helper functions added to bundle
        assign({}, api, {
          getOriginalState,
          condition: (predicate, timeout) => take(predicate, timeout).then(Boolean),
          take,
          delay: createDelay(internalTaskController.signal),
          pause: createPause(internalTaskController.signal),
          extra,
          signal: internalTaskController.signal,
          fork: createFork(internalTaskController.signal, autoJoinPromises),
          unsubscribe: entry.unsubscribe,
          subscribe: () => {
            listenerMap.set(entry.id, entry);
          },
          cancelActiveListeners: () => {
            entry.pending.forEach((controller, _, set) => {
              if (controller !== internalTaskController) {
                abortControllerWithReason(controller, listenerCancelled);
                set.delete(controller);
              }
            });
          },
          cancel: () => {
            abortControllerWithReason(internalTaskController, listenerCancelled);
            entry.pending.delete(internalTaskController);
          },
          throwIfCancelled: () => {
            validateActive(internalTaskController.signal);
          }
        })
      ));
    } catch (listenerError) {
      if (!(listenerError instanceof TaskAbortError)) {
        safelyNotifyError(onError, listenerError, {
          raisedBy: "effect"
        });
      }
    } finally {
      await Promise.all(autoJoinPromises);
      abortControllerWithReason(internalTaskController, listenerCompleted);
      entry.pending.delete(internalTaskController);
    }
  };
  const clearListenerMiddleware = createClearListenerMiddleware(listenerMap);
  const middleware = (api) => (next) => (action) => {
    if (!isAction(action)) {
      return next(action);
    }
    if (addListener.match(action)) {
      return startListening(action.payload);
    }
    if (clearAllListeners.match(action)) {
      clearListenerMiddleware();
      return;
    }
    if (removeListener.match(action)) {
      return stopListening(action.payload);
    }
    let originalState = api.getState();
    const getOriginalState = () => {
      if (originalState === INTERNAL_NIL_TOKEN) {
        throw new Error(formatProdErrorMessage(23) );
      }
      return originalState;
    };
    let result;
    try {
      result = next(action);
      if (listenerMap.size > 0) {
        const currentState = api.getState();
        const listenerEntries = Array.from(listenerMap.values());
        for (const entry of listenerEntries) {
          let runListener = false;
          try {
            runListener = entry.predicate(action, currentState, originalState);
          } catch (predicateError) {
            runListener = false;
            safelyNotifyError(onError, predicateError, {
              raisedBy: "predicate"
            });
          }
          if (!runListener) {
            continue;
          }
          notifyListener(entry, action, api, getOriginalState);
        }
      }
    } finally {
      originalState = INTERNAL_NIL_TOKEN;
    }
    return result;
  };
  return {
    middleware,
    startListening,
    stopListening,
    clearListeners: clearListenerMiddleware
  };
};
function formatProdErrorMessage(code) {
  return `Minified Redux Toolkit error #${code}; visit https://redux-toolkit.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;
}

var initialState$9 = {
  layoutType: 'horizontal',
  width: 0,
  height: 0,
  margin: {
    top: 5,
    right: 5,
    bottom: 5,
    left: 5
  },
  scale: 1
};
var chartLayoutSlice = createSlice({
  name: 'chartLayout',
  initialState: initialState$9,
  reducers: {
    setLayout(state, action) {
      state.layoutType = action.payload;
    },
    setChartSize(state, action) {
      state.width = action.payload.width;
      state.height = action.payload.height;
    },
    setMargin(state, action) {
      state.margin.top = action.payload.top;
      state.margin.right = action.payload.right;
      state.margin.bottom = action.payload.bottom;
      state.margin.left = action.payload.left;
    },
    setScale(state, action) {
      state.scale = action.payload;
    }
  }
});
var {
  setMargin,
  setLayout,
  setChartSize,
  setScale
} = chartLayoutSlice.actions;
var chartLayoutReducer = chartLayoutSlice.reducer;

function ownKeys$F(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$F(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$F(Object(t), true).forEach(function (r) { _defineProperty$J(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$F(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$J(e, r, t) { return (r = _toPropertyKey$J(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$J(t) { var i = _toPrimitive$J(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$J(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var RADIAN$1 = Math.PI / 180;
var radianToDegree = angleInRadian => angleInRadian * 180 / Math.PI;
var polarToCartesian = (cx, cy, radius, angle) => ({
  x: cx + Math.cos(-RADIAN$1 * angle) * radius,
  y: cy + Math.sin(-RADIAN$1 * angle) * radius
});
var getMaxRadius = function getMaxRadius(width, height) {
  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0};
  return Math.min(Math.abs(width - (offset.left || 0) - (offset.right || 0)), Math.abs(height - (offset.top || 0) - (offset.bottom || 0))) / 2;
};
var distanceBetweenPoints = (point, anotherPoint) => {
  var {
    x: x1,
    y: y1
  } = point;
  var {
    x: x2,
    y: y2
  } = anotherPoint;
  return Math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2);
};
var getAngleOfPoint = (_ref, _ref2) => {
  var {
    x,
    y
  } = _ref;
  var {
    cx,
    cy
  } = _ref2;
  var radius = distanceBetweenPoints({
    x,
    y
  }, {
    x: cx,
    y: cy
  });
  if (radius <= 0) {
    return {
      radius,
      angle: 0
    };
  }
  var cos = (x - cx) / radius;
  var angleInRadian = Math.acos(cos);
  if (y > cy) {
    angleInRadian = 2 * Math.PI - angleInRadian;
  }
  return {
    radius,
    angle: radianToDegree(angleInRadian),
    angleInRadian
  };
};
var formatAngleOfSector = _ref3 => {
  var {
    startAngle,
    endAngle
  } = _ref3;
  var startCnt = Math.floor(startAngle / 360);
  var endCnt = Math.floor(endAngle / 360);
  var min = Math.min(startCnt, endCnt);
  return {
    startAngle: startAngle - min * 360,
    endAngle: endAngle - min * 360
  };
};
var reverseFormatAngleOfSector = (angle, _ref4) => {
  var {
    startAngle,
    endAngle
  } = _ref4;
  var startCnt = Math.floor(startAngle / 360);
  var endCnt = Math.floor(endAngle / 360);
  var min = Math.min(startCnt, endCnt);
  return angle + min * 360;
};
var inRangeOfSector = (_ref5, viewBox) => {
  var {
    x,
    y
  } = _ref5;
  var {
    radius,
    angle
  } = getAngleOfPoint({
    x,
    y
  }, viewBox);
  var {
    innerRadius,
    outerRadius
  } = viewBox;
  if (radius < innerRadius || radius > outerRadius) {
    return null;
  }
  if (radius === 0) {
    return null;
  }
  var {
    startAngle,
    endAngle
  } = formatAngleOfSector(viewBox);
  var formatAngle = angle;
  var inRange;
  if (startAngle <= endAngle) {
    while (formatAngle > endAngle) {
      formatAngle -= 360;
    }
    while (formatAngle < startAngle) {
      formatAngle += 360;
    }
    inRange = formatAngle >= startAngle && formatAngle <= endAngle;
  } else {
    while (formatAngle > startAngle) {
      formatAngle -= 360;
    }
    while (formatAngle < endAngle) {
      formatAngle += 360;
    }
    inRange = formatAngle >= endAngle && formatAngle <= startAngle;
  }
  if (inRange) {
    return _objectSpread$F(_objectSpread$F({}, viewBox), {}, {
      radius,
      angle: reverseFormatAngleOfSector(formatAngle, viewBox)
    });
  }
  return null;
};
var getTickClassName = tick => ! /*#__PURE__*/reactExports.isValidElement(tick) && typeof tick !== 'function' && typeof tick !== 'boolean' && tick != null ? tick.className : '';

function ownKeys$E(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$E(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$E(Object(t), true).forEach(function (r) { _defineProperty$I(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$E(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$I(e, r, t) { return (r = _toPropertyKey$I(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$I(t) { var i = _toPrimitive$I(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$I(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function getValueByDataKey(obj, dataKey, defaultValue) {
  if (isNullish(obj) || isNullish(dataKey)) {
    return defaultValue;
  }
  if (isNumOrStr(dataKey)) {
    return get$1(obj, dataKey, defaultValue);
  }
  if (typeof dataKey === 'function') {
    return dataKey(obj);
  }
  return defaultValue;
}
var calculateActiveTickIndex = (coordinate, ticks, unsortedTicks, axisType, range) => {
  var _ticks$length;
  var index = -1;
  var len = (_ticks$length = ticks === null || ticks === void 0 ? void 0 : ticks.length) !== null && _ticks$length !== void 0 ? _ticks$length : 0;

  // if there are 1 or fewer ticks or if there is no coordinate then the active tick is at index 0
  if (len <= 1 || coordinate == null) {
    return 0;
  }
  if (axisType === 'angleAxis' && range != null && Math.abs(Math.abs(range[1] - range[0]) - 360) <= 1e-6) {
    // ticks are distributed in a circle
    for (var i = 0; i < len; i++) {
      var before = i > 0 ? unsortedTicks[i - 1].coordinate : unsortedTicks[len - 1].coordinate;
      var cur = unsortedTicks[i].coordinate;
      var after = i >= len - 1 ? unsortedTicks[0].coordinate : unsortedTicks[i + 1].coordinate;
      var sameDirectionCoord = void 0;
      if (mathSign(cur - before) !== mathSign(after - cur)) {
        var diffInterval = [];
        if (mathSign(after - cur) === mathSign(range[1] - range[0])) {
          sameDirectionCoord = after;
          var curInRange = cur + range[1] - range[0];
          diffInterval[0] = Math.min(curInRange, (curInRange + before) / 2);
          diffInterval[1] = Math.max(curInRange, (curInRange + before) / 2);
        } else {
          sameDirectionCoord = before;
          var afterInRange = after + range[1] - range[0];
          diffInterval[0] = Math.min(cur, (afterInRange + cur) / 2);
          diffInterval[1] = Math.max(cur, (afterInRange + cur) / 2);
        }
        var sameInterval = [Math.min(cur, (sameDirectionCoord + cur) / 2), Math.max(cur, (sameDirectionCoord + cur) / 2)];
        if (coordinate > sameInterval[0] && coordinate <= sameInterval[1] || coordinate >= diffInterval[0] && coordinate <= diffInterval[1]) {
          ({
            index
          } = unsortedTicks[i]);
          break;
        }
      } else {
        var minValue = Math.min(before, after);
        var maxValue = Math.max(before, after);
        if (coordinate > (minValue + cur) / 2 && coordinate <= (maxValue + cur) / 2) {
          ({
            index
          } = unsortedTicks[i]);
          break;
        }
      }
    }
  } else if (ticks) {
    // ticks are distributed in a single direction
    for (var _i = 0; _i < len; _i++) {
      if (_i === 0 && coordinate <= (ticks[_i].coordinate + ticks[_i + 1].coordinate) / 2 || _i > 0 && _i < len - 1 && coordinate > (ticks[_i].coordinate + ticks[_i - 1].coordinate) / 2 && coordinate <= (ticks[_i].coordinate + ticks[_i + 1].coordinate) / 2 || _i === len - 1 && coordinate > (ticks[_i].coordinate + ticks[_i - 1].coordinate) / 2) {
        ({
          index
        } = ticks[_i]);
        break;
      }
    }
  }
  return index;
};
var appendOffsetOfLegend = (offset, legendSettings, legendSize) => {
  if (legendSettings && legendSize) {
    var {
      width: boxWidth,
      height: boxHeight
    } = legendSize;
    var {
      align,
      verticalAlign,
      layout
    } = legendSettings;
    if ((layout === 'vertical' || layout === 'horizontal' && verticalAlign === 'middle') && align !== 'center' && isNumber(offset[align])) {
      return _objectSpread$E(_objectSpread$E({}, offset), {}, {
        [align]: offset[align] + (boxWidth || 0)
      });
    }
    if ((layout === 'horizontal' || layout === 'vertical' && align === 'center') && verticalAlign !== 'middle' && isNumber(offset[verticalAlign])) {
      return _objectSpread$E(_objectSpread$E({}, offset), {}, {
        [verticalAlign]: offset[verticalAlign] + (boxHeight || 0)
      });
    }
  }
  return offset;
};
var isCategoricalAxis = (layout, axisType) => layout === 'horizontal' && axisType === 'xAxis' || layout === 'vertical' && axisType === 'yAxis' || layout === 'centric' && axisType === 'angleAxis' || layout === 'radial' && axisType === 'radiusAxis';

/**
 * Calculate the Coordinates of grid
 * @param  {Array} ticks           The ticks in axis
 * @param {Number} minValue        The minimum value of axis
 * @param {Number} maxValue        The maximum value of axis
 * @param {boolean} syncWithTicks  Synchronize grid lines with ticks or not
 * @return {Array}                 Coordinates
 */
var getCoordinatesOfGrid = (ticks, minValue, maxValue, syncWithTicks) => {
  if (syncWithTicks) {
    return ticks.map(entry => entry.coordinate);
  }
  var hasMin, hasMax;
  var values = ticks.map(entry => {
    if (entry.coordinate === minValue) {
      hasMin = true;
    }
    if (entry.coordinate === maxValue) {
      hasMax = true;
    }
    return entry.coordinate;
  });
  if (!hasMin) {
    values.push(minValue);
  }
  if (!hasMax) {
    values.push(maxValue);
  }
  return values;
};

/**
 * A subset of d3-scale that Recharts is using
 */

/**
 * Get the ticks of an axis
 * @param  {Object}  axis The configuration of an axis
 * @param {Boolean} isGrid Whether or not are the ticks in grid
 * @param {Boolean} isAll Return the ticks of all the points or not
 * @return {Array}  Ticks
 */
var getTicksOfAxis = (axis, isGrid, isAll) => {
  if (!axis) {
    return null;
  }
  var {
    duplicateDomain,
    type,
    range,
    scale,
    realScaleType,
    isCategorical,
    categoricalDomain,
    tickCount,
    ticks,
    niceTicks,
    axisType
  } = axis;
  if (!scale) {
    return null;
  }
  var offsetForBand = realScaleType === 'scaleBand' && scale.bandwidth ? scale.bandwidth() / 2 : 2;
  var offset = type === 'category' && scale.bandwidth ? scale.bandwidth() / offsetForBand : 0;
  offset = axisType === 'angleAxis' && range && range.length >= 2 ? mathSign(range[0] - range[1]) * 2 * offset : offset;

  // The ticks set by user should only affect the ticks adjacent to axis line
  if ((ticks || niceTicks)) {
    var result = (ticks || niceTicks || []).map((entry, index) => {
      var scaleContent = duplicateDomain ? duplicateDomain.indexOf(entry) : entry;
      return {
        // If the scaleContent is not a number, the coordinate will be NaN.
        // That could be the case for example with a PointScale and a string as domain.
        coordinate: scale(scaleContent) + offset,
        value: entry,
        offset,
        index
      };
    });
    return result.filter(row => !isNan(row.coordinate));
  }

  // When axis is a categorical axis, but the type of axis is number or the scale of axis is not "auto"
  if (isCategorical && categoricalDomain) {
    return categoricalDomain.map((entry, index) => ({
      coordinate: scale(entry) + offset,
      value: entry,
      index,
      offset
    }));
  }
  if (scale.ticks && true && tickCount != null) {
    return scale.ticks(tickCount).map((entry, index) => ({
      coordinate: scale(entry) + offset,
      value: entry,
      offset,
      index
    }));
  }

  // When axis has duplicated text, serial numbers are used to generate scale
  return scale.domain().map((entry, index) => ({
    coordinate: scale(entry) + offset,
    value: duplicateDomain ? duplicateDomain[entry] : entry,
    index,
    offset
  }));
};
var EPS = 1e-4;
var checkDomainOfScale = scale => {
  var domain = scale.domain();
  if (!domain || domain.length <= 2) {
    return;
  }
  var len = domain.length;
  var range = scale.range();
  var minValue = Math.min(range[0], range[1]) - EPS;
  var maxValue = Math.max(range[0], range[1]) + EPS;
  var first = scale(domain[0]);
  var last = scale(domain[len - 1]);
  if (first < minValue || first > maxValue || last < minValue || last > maxValue) {
    scale.domain([domain[0], domain[len - 1]]);
  }
};

/**
 * Both value and domain are tuples of two numbers
 * - but the type stays as array of numbers until we have better support in rest of the app
 * @param value input that will be truncated
 * @param domain boundaries
 * @returns tuple of two numbers
 */
var truncateByDomain = (value, domain) => {
  if (!domain || domain.length !== 2 || !isNumber(domain[0]) || !isNumber(domain[1])) {
    return value;
  }
  var minValue = Math.min(domain[0], domain[1]);
  var maxValue = Math.max(domain[0], domain[1]);
  var result = [value[0], value[1]];
  if (!isNumber(value[0]) || value[0] < minValue) {
    result[0] = minValue;
  }
  if (!isNumber(value[1]) || value[1] > maxValue) {
    result[1] = maxValue;
  }
  if (result[0] > maxValue) {
    result[0] = maxValue;
  }
  if (result[1] < minValue) {
    result[1] = minValue;
  }
  return result;
};

/**
 * Stacks all positive numbers above zero and all negative numbers below zero.
 *
 * If all values in the series are positive then this behaves the same as 'none' stacker.
 *
 * @param {Array} series from d3-shape Stack
 * @return {Array} series with applied offset
 */
var offsetSign = series => {
  var n = series.length;
  if (n <= 0) {
    return;
  }
  for (var j = 0, m = series[0].length; j < m; ++j) {
    var positive = 0;
    var negative = 0;
    for (var i = 0; i < n; ++i) {
      var value = isNan(series[i][j][1]) ? series[i][j][0] : series[i][j][1];

      /* eslint-disable prefer-destructuring, no-param-reassign */
      if (value >= 0) {
        series[i][j][0] = positive;
        series[i][j][1] = positive + value;
        positive = series[i][j][1];
      } else {
        series[i][j][0] = negative;
        series[i][j][1] = negative + value;
        negative = series[i][j][1];
      }
      /* eslint-enable prefer-destructuring, no-param-reassign */
    }
  }
};

/**
 * Replaces all negative values with zero when stacking data.
 *
 * If all values in the series are positive then this behaves the same as 'none' stacker.
 *
 * @param {Array} series from d3-shape Stack
 * @return {Array} series with applied offset
 */
var offsetPositive = series => {
  var n = series.length;
  if (n <= 0) {
    return;
  }
  for (var j = 0, m = series[0].length; j < m; ++j) {
    var positive = 0;
    for (var i = 0; i < n; ++i) {
      var value = isNan(series[i][j][1]) ? series[i][j][0] : series[i][j][1];

      /* eslint-disable prefer-destructuring, no-param-reassign */
      if (value >= 0) {
        series[i][j][0] = positive;
        series[i][j][1] = positive + value;
        positive = series[i][j][1];
      } else {
        series[i][j][0] = 0;
        series[i][j][1] = 0;
      }
      /* eslint-enable prefer-destructuring, no-param-reassign */
    }
  }
};

/**
 * Function type to compute offset for stacked data.
 *
 * d3-shape has something fishy going on with its types.
 * In @definitelytyped/d3-shape, this function (the offset accessor) is typed as Series<> => void.
 * However! When I actually open the storybook I can see that the offset accessor actually receives Array<Series<>>.
 * The same I can see in the source code itself:
 * https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/66042
 * That one unfortunately has no types but we can tell it passes three-dimensional array.
 *
 * Which leads me to believe that definitelytyped is wrong on this one.
 * There's open discussion on this topic without much attention:
 * https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/66042
 */

var STACK_OFFSET_MAP = {
  sign: offsetSign,
  // @ts-expect-error definitelytyped types are incorrect
  expand: stackOffsetExpand,
  // @ts-expect-error definitelytyped types are incorrect
  none: stackOffsetNone,
  // @ts-expect-error definitelytyped types are incorrect
  silhouette: stackOffsetSilhouette,
  // @ts-expect-error definitelytyped types are incorrect
  wiggle: stackOffsetWiggle,
  positive: offsetPositive
};
var getStackedData = (data, dataKeys, offsetType) => {
  var offsetAccessor = STACK_OFFSET_MAP[offsetType];
  var stack = shapeStack().keys(dataKeys).value((d, key) => +getValueByDataKey(d, key, 0)).order(stackOrderNone)
  // @ts-expect-error definitelytyped types are incorrect
  .offset(offsetAccessor);
  return stack(data);
};

/**
 * Stack IDs in the external props allow numbers; but internally we use it as an object key
 * and object keys are always strings. Also it would be kinda confusing if stackId=8 and stackId='8' were different stacks
 * so let's just force a string.
 */

function getNormalizedStackId(publicStackId) {
  return publicStackId == null ? undefined : String(publicStackId);
}
function getCateCoordinateOfLine(_ref) {
  var {
    axis,
    ticks,
    bandSize,
    entry,
    index,
    dataKey
  } = _ref;
  if (axis.type === 'category') {
    // find coordinate of category axis by the value of category
    // @ts-expect-error why does this use direct object access instead of getValueByDataKey?
    if (!axis.allowDuplicatedCategory && axis.dataKey && !isNullish(entry[axis.dataKey])) {
      // @ts-expect-error why does this use direct object access instead of getValueByDataKey?
      var matchedTick = findEntryInArray(ticks, 'value', entry[axis.dataKey]);
      if (matchedTick) {
        return matchedTick.coordinate + bandSize / 2;
      }
    }
    return ticks[index] ? ticks[index].coordinate + bandSize / 2 : null;
  }
  var value = getValueByDataKey(entry, !isNullish(dataKey) ? dataKey : axis.dataKey);

  // @ts-expect-error getValueByDataKey does not validate the output type
  return !isNullish(value) ? axis.scale(value) : null;
}
var getCateCoordinateOfBar = _ref2 => {
  var {
    axis,
    ticks,
    offset,
    bandSize,
    entry,
    index
  } = _ref2;
  if (axis.type === 'category') {
    return ticks[index] ? ticks[index].coordinate + offset : null;
  }
  var value = getValueByDataKey(entry, axis.dataKey, axis.scale.domain()[index]);
  return !isNullish(value) ? axis.scale(value) - bandSize / 2 + offset : null;
};
var getBaseValueOfBar = _ref3 => {
  var {
    numericAxis
  } = _ref3;
  var domain = numericAxis.scale.domain();
  if (numericAxis.type === 'number') {
    // @ts-expect-error type number means the domain has numbers in it but this relationship is not known to typescript
    var minValue = Math.min(domain[0], domain[1]);
    // @ts-expect-error type number means the domain has numbers in it but this relationship is not known to typescript
    var maxValue = Math.max(domain[0], domain[1]);
    if (minValue <= 0 && maxValue >= 0) {
      return 0;
    }
    if (maxValue < 0) {
      return maxValue;
    }
    return minValue;
  }
  return domain[0];
};
var getDomainOfSingle = data => {
  var flat = data.flat(2).filter(isNumber);
  return [Math.min(...flat), Math.max(...flat)];
};
var makeDomainFinite = domain => {
  return [domain[0] === Infinity ? 0 : domain[0], domain[1] === -Infinity ? 0 : domain[1]];
};
var getDomainOfStackGroups = (stackGroups, startIndex, endIndex) => {
  if (stackGroups == null) {
    return undefined;
  }
  return makeDomainFinite(Object.keys(stackGroups).reduce((result, stackId) => {
    var group = stackGroups[stackId];
    var {
      stackedData
    } = group;
    var domain = stackedData.reduce((res, entry) => {
      var s = getDomainOfSingle(entry.slice(startIndex, endIndex + 1));
      return [Math.min(res[0], s[0]), Math.max(res[1], s[1])];
    }, [Infinity, -Infinity]);
    return [Math.min(domain[0], result[0]), Math.max(domain[1], result[1])];
  }, [Infinity, -Infinity]));
};
var MIN_VALUE_REG = /^dataMin[\s]*-[\s]*([0-9]+([.]{1}[0-9]+){0,1})$/;
var MAX_VALUE_REG = /^dataMax[\s]*\+[\s]*([0-9]+([.]{1}[0-9]+){0,1})$/;

/**
 * Calculate the size between two category
 * @param  {Object} axis  The options of axis
 * @param  {Array}  ticks The ticks of axis
 * @param  {Boolean} isBar if items in axis are bars
 * @return {Number} Size
 */
var getBandSizeOfAxis = (axis, ticks, isBar) => {
  if (axis && axis.scale && axis.scale.bandwidth) {
    var bandWidth = axis.scale.bandwidth();
    if (!isBar || bandWidth > 0) {
      return bandWidth;
    }
  }
  if (axis && ticks && ticks.length >= 2) {
    var orderedTicks = sortBy$1(ticks, o => o.coordinate);
    var bandSize = Infinity;
    for (var i = 1, len = orderedTicks.length; i < len; i++) {
      var cur = orderedTicks[i];
      var prev = orderedTicks[i - 1];
      bandSize = Math.min((cur.coordinate || 0) - (prev.coordinate || 0), bandSize);
    }
    return bandSize === Infinity ? 0 : bandSize;
  }
  return isBar ? undefined : 0;
};
function getTooltipEntry(_ref4) {
  var {
    tooltipEntrySettings,
    dataKey,
    payload,
    value,
    name
  } = _ref4;
  return _objectSpread$E(_objectSpread$E({}, tooltipEntrySettings), {}, {
    dataKey,
    payload,
    value,
    name
  });
}
function getTooltipNameProp(nameFromItem, dataKey) {
  if (nameFromItem) {
    return String(nameFromItem);
  }
  if (typeof dataKey === 'string') {
    return dataKey;
  }
  return undefined;
}
function inRange(x, y, layout, polarViewBox, offset) {
  if (layout === 'horizontal' || layout === 'vertical') {
    var isInRange = x >= offset.left && x <= offset.left + offset.width && y >= offset.top && y <= offset.top + offset.height;
    return isInRange ? {
      x,
      y
    } : null;
  }
  if (polarViewBox) {
    return inRangeOfSector({
      x,
      y
    }, polarViewBox);
  }
  return null;
}
var getActiveCoordinate = (layout, tooltipTicks, activeIndex, rangeObj) => {
  var entry = tooltipTicks.find(tick => tick && tick.index === activeIndex);
  if (entry) {
    if (layout === 'horizontal') {
      return {
        x: entry.coordinate,
        y: rangeObj.y
      };
    }
    if (layout === 'vertical') {
      return {
        x: rangeObj.x,
        y: entry.coordinate
      };
    }
    if (layout === 'centric') {
      var _angle = entry.coordinate;
      var {
        radius: _radius
      } = rangeObj;
      return _objectSpread$E(_objectSpread$E(_objectSpread$E({}, rangeObj), polarToCartesian(rangeObj.cx, rangeObj.cy, _radius, _angle)), {}, {
        angle: _angle,
        radius: _radius
      });
    }
    var radius = entry.coordinate;
    var {
      angle
    } = rangeObj;
    return _objectSpread$E(_objectSpread$E(_objectSpread$E({}, rangeObj), polarToCartesian(rangeObj.cx, rangeObj.cy, radius, angle)), {}, {
      angle,
      radius
    });
  }
  return {
    x: 0,
    y: 0
  };
};
var calculateTooltipPos = (rangeObj, layout) => {
  if (layout === 'horizontal') {
    return rangeObj.x;
  }
  if (layout === 'vertical') {
    return rangeObj.y;
  }
  if (layout === 'centric') {
    return rangeObj.angle;
  }
  return rangeObj.radius;
};

var selectChartWidth = state => state.layout.width;
var selectChartHeight = state => state.layout.height;
var selectContainerScale = state => state.layout.scale;
var selectMargin = state => state.layout.margin;

var selectAllXAxes = createSelector(state => state.cartesianAxis.xAxis, xAxisMap => {
  return Object.values(xAxisMap);
});
var selectAllYAxes = createSelector(state => state.cartesianAxis.yAxis, yAxisMap => {
  return Object.values(yAxisMap);
});

/**
 * We use this attribute to identify which element is the one that the user is touching.
 * The index is the position of the element in the data array.
 * This can be either a number (for array-based charts) or a string (for the charts that have a matrix-shaped data).
 */
var DATA_ITEM_INDEX_ATTRIBUTE_NAME = 'data-recharts-item-index';
/**
 * We use this attribute to identify which element is the one that the user is touching.
 * DataKey works here as a kind of identifier for the element. It's not a perfect identifier for ~two~ three reasons:
 *
 * 1. There can be two different elements with the same dataKey; we won't know which is it
 * 2. DataKey can be a function, and that serialized will be a `[Function: anonymous]` string
 * which means we will be able to identify that it was a function but can't tell which one.
 * This will lead to some weird bugs. A proper fix would be to either:
 * a) use a unique identifier for each element (passed from props, or generated)
 * b) figure out how to compare the dataKey or graphical item by object reference
 *
 * a) is a fuss because we don't have the unique identifier in props,
 * and b) is possible most of the time except for touchMove events which work differently from mouseEnter/mouseLeave:
 * - while mouseEnter is fired for the element that the mouse is over,
 * touchMove is fired for the element where user has started touching. As the finger moves,
 * we can identify the element that the user is touching by using the elementFromPoint method,
 * but it keeps calling the handler on the element where touchStart was fired.
 *
 * Okay and now I discovered a third reason: the dataKey can be undefined and that's still fine
 * because if dataKey is undefined then graphical elements assume the dataKey of the axes.
 * Which makes it a convenient way of using recharts to render a chart but horrible identifier.
 */
var DATA_ITEM_DATAKEY_ATTRIBUTE_NAME = 'data-recharts-item-data-key';
var DEFAULT_Y_AXIS_WIDTH = 60;

function ownKeys$D(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$D(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$D(Object(t), true).forEach(function (r) { _defineProperty$H(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$D(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$H(e, r, t) { return (r = _toPropertyKey$H(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$H(t) { var i = _toPrimitive$H(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$H(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var selectBrushHeight = state => state.brush.height;

/**
 * For internal use only.
 *
 * @param root state
 * @return ChartOffsetInternal
 */
var selectChartOffsetInternal = createSelector([selectChartWidth, selectChartHeight, selectMargin, selectBrushHeight, selectAllXAxes, selectAllYAxes, selectLegendSettings, selectLegendSize], (chartWidth, chartHeight, margin, brushHeight, xAxes, yAxes, legendSettings, legendSize) => {
  var offsetH = yAxes.reduce((result, entry) => {
    var {
      orientation
    } = entry;
    if (!entry.mirror && !entry.hide) {
      var width = typeof entry.width === 'number' ? entry.width : DEFAULT_Y_AXIS_WIDTH;
      return _objectSpread$D(_objectSpread$D({}, result), {}, {
        [orientation]: result[orientation] + width
      });
    }
    return result;
  }, {
    left: margin.left || 0,
    right: margin.right || 0
  });
  var offsetV = xAxes.reduce((result, entry) => {
    var {
      orientation
    } = entry;
    if (!entry.mirror && !entry.hide) {
      return _objectSpread$D(_objectSpread$D({}, result), {}, {
        [orientation]: get$1(result, "".concat(orientation)) + entry.height
      });
    }
    return result;
  }, {
    top: margin.top || 0,
    bottom: margin.bottom || 0
  });
  var offset = _objectSpread$D(_objectSpread$D({}, offsetV), offsetH);
  var brushBottom = offset.bottom;
  offset.bottom += brushHeight;
  offset = appendOffsetOfLegend(offset, legendSettings, legendSize);
  var offsetWidth = chartWidth - offset.left - offset.right;
  var offsetHeight = chartHeight - offset.top - offset.bottom;
  return _objectSpread$D(_objectSpread$D({
    brushBottom
  }, offset), {}, {
    // never return negative values for height and width
    width: Math.max(offsetWidth, 0),
    height: Math.max(offsetHeight, 0)
  });
});
var selectChartViewBox = createSelector(selectChartOffsetInternal, offset => ({
  x: offset.left,
  y: offset.top,
  width: offset.width,
  height: offset.height
}));
var selectAxisViewBox = createSelector(selectChartWidth, selectChartHeight, (width, height) => ({
  x: 0,
  y: 0,
  width,
  height
}));

var PanoramaContext = /*#__PURE__*/reactExports.createContext(null);
var useIsPanorama = () => reactExports.useContext(PanoramaContext) != null;

var selectBrushSettings = state => state.brush;
var selectBrushDimensions = createSelector([selectBrushSettings, selectChartOffsetInternal, selectMargin], (brushSettings, offset, margin) => ({
  height: brushSettings.height,
  x: isNumber(brushSettings.x) ? brushSettings.x : offset.left,
  y: isNumber(brushSettings.y) ? brushSettings.y : offset.top + offset.height + offset.brushBottom - ((margin === null || margin === void 0 ? void 0 : margin.bottom) || 0),
  width: isNumber(brushSettings.width) ? brushSettings.width : offset.width
}));

var useViewBox = () => {
  var _useAppSelector;
  var panorama = useIsPanorama();
  var rootViewBox = useAppSelector(selectChartViewBox);
  var brushDimensions = useAppSelector(selectBrushDimensions);
  var brushPadding = (_useAppSelector = useAppSelector(selectBrushSettings)) === null || _useAppSelector === void 0 ? void 0 : _useAppSelector.padding;
  if (!panorama || !brushDimensions || !brushPadding) {
    return rootViewBox;
  }
  return {
    width: brushDimensions.width - brushPadding.left - brushPadding.right,
    height: brushDimensions.height - brushPadding.top - brushPadding.bottom,
    x: brushPadding.left,
    y: brushPadding.top
  };
};
var manyComponentsThrowErrorsIfOffsetIsUndefined = {
  top: 0,
  bottom: 0,
  left: 0,
  right: 0,
  width: 0,
  height: 0,
  brushBottom: 0
};
/**
 * For internal use only. If you want this information, `import { useOffset } from 'recharts'` instead.
 *
 * Returns the offset of the chart in pixels.
 *
 * @returns {ChartOffsetInternal} The offset of the chart in pixels, or a default value if not in a chart context.
 */
var useOffsetInternal = () => {
  var _useAppSelector2;
  return (_useAppSelector2 = useAppSelector(selectChartOffsetInternal)) !== null && _useAppSelector2 !== void 0 ? _useAppSelector2 : manyComponentsThrowErrorsIfOffsetIsUndefined;
};

/**
 * Returns the width of the chart in pixels.
 *
 * If you are using chart with hardcoded `width` prop, then the width returned will be the same
 * as the `width` prop on the main chart element.
 *
 * If you are using a chart with a `ResponsiveContainer`, the width will be the size of the chart
 * as the ResponsiveContainer has decided it would be.
 *
 * If the chart has any axes or legend, the `width` will be the size of the chart
 * including the axes and legend. Meaning: adding axes and legend will not change the width.
 *
 * The dimensions do not scale, meaning as user zoom in and out, the width number will not change
 * as the chart gets visually larger or smaller.
 *
 * Returns `undefined` if used outside a chart context.
 *
 * @returns {number | undefined} The width of the chart in pixels, or `undefined` if not in a chart context.
 */
var useChartWidth = () => {
  return useAppSelector(selectChartWidth);
};

/**
 * Returns the height of the chart in pixels.
 *
 * If you are using chart with hardcoded `height` props, then the height returned will be the same
 * as the `height` prop on the main chart element.
 *
 * If you are using a chart with a `ResponsiveContainer`, the height will be the size of the chart
 * as the ResponsiveContainer has decided it would be.
 *
 * If the chart has any axes or legend, the `height` will be the size of the chart
 * including the axes and legend. Meaning: adding axes and legend will not change the height.
 *
 * The dimensions do not scale, meaning as user zoom in and out, the height number will not change
 * as the chart gets visually larger or smaller.
 *
 * Returns `undefined` if used outside a chart context.
 *
 * @returns {number | undefined} The height of the chart in pixels, or `undefined` if not in a chart context.
 */
var useChartHeight = () => {
  return useAppSelector(selectChartHeight);
};
var manyComponentsThrowErrorsIfMarginIsUndefined = {
  top: 0,
  right: 0,
  bottom: 0,
  left: 0
};
var useMargin = () => {
  var _useAppSelector3;
  return (_useAppSelector3 = useAppSelector(state => state.layout.margin)) !== null && _useAppSelector3 !== void 0 ? _useAppSelector3 : manyComponentsThrowErrorsIfMarginIsUndefined;
};
var selectChartLayout = state => state.layout.layoutType;
var useChartLayout = () => useAppSelector(selectChartLayout);

/**
 * The properties inside this state update independently of each other and quite often.
 * When selecting, never select the whole state because you are going to get
 * unnecessary re-renders. Select only the properties you need.
 *
 * This is why this state type is not exported - don't use it directly.
 */

var initialState$8 = {
  settings: {
    layout: 'horizontal',
    align: 'center',
    verticalAlign: 'middle',
    itemSorter: 'value'
  },
  size: {
    width: 0,
    height: 0
  },
  payload: []
};
var legendSlice = createSlice({
  name: 'legend',
  initialState: initialState$8,
  reducers: {
    setLegendSize(state, action) {
      state.size.width = action.payload.width;
      state.size.height = action.payload.height;
    },
    setLegendSettings(state, action) {
      state.settings.align = action.payload.align;
      state.settings.layout = action.payload.layout;
      state.settings.verticalAlign = action.payload.verticalAlign;
      state.settings.itemSorter = action.payload.itemSorter;
    },
    addLegendPayload(state, action) {
      state.payload.push(castDraft(action.payload));
    },
    removeLegendPayload(state, action) {
      var index = current(state).payload.indexOf(castDraft(action.payload));
      if (index > -1) {
        state.payload.splice(index, 1);
      }
    }
  }
});
var {
  setLegendSize,
  setLegendSettings,
  addLegendPayload,
  removeLegendPayload
} = legendSlice.actions;
var legendReducer = legendSlice.reducer;

var _excluded$p = ["contextPayload"];
function _extends$u() { return _extends$u = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$u.apply(null, arguments); }
function ownKeys$C(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$C(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$C(Object(t), true).forEach(function (r) { _defineProperty$G(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$C(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$G(e, r, t) { return (r = _toPropertyKey$G(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$G(t) { var i = _toPrimitive$G(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$G(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties$p(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$p(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$p(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
function defaultUniqBy$1(entry) {
  return entry.value;
}
function LegendContent(props) {
  var {
      contextPayload
    } = props,
    otherProps = _objectWithoutProperties$p(props, _excluded$p);
  var finalPayload = getUniqPayload(contextPayload, props.payloadUniqBy, defaultUniqBy$1);
  var contentProps = _objectSpread$C(_objectSpread$C({}, otherProps), {}, {
    payload: finalPayload
  });
  if (/*#__PURE__*/reactExports.isValidElement(props.content)) {
    return /*#__PURE__*/reactExports.cloneElement(props.content, contentProps);
  }
  if (typeof props.content === 'function') {
    return /*#__PURE__*/reactExports.createElement(props.content, contentProps);
  }
  return /*#__PURE__*/reactExports.createElement(DefaultLegendContent, contentProps);
}
function getDefaultPosition(style, props, margin, chartWidth, chartHeight, box) {
  var {
    layout,
    align,
    verticalAlign
  } = props;
  var hPos, vPos;
  if (!style || (style.left === undefined || style.left === null) && (style.right === undefined || style.right === null)) {
    if (align === 'center' && layout === 'vertical') {
      hPos = {
        left: ((chartWidth || 0) - box.width) / 2
      };
    } else {
      hPos = align === 'right' ? {
        right: margin && margin.right || 0
      } : {
        left: margin && margin.left || 0
      };
    }
  }
  if (!style || (style.top === undefined || style.top === null) && (style.bottom === undefined || style.bottom === null)) {
    if (verticalAlign === 'middle') {
      vPos = {
        top: ((chartHeight || 0) - box.height) / 2
      };
    } else {
      vPos = verticalAlign === 'bottom' ? {
        bottom: margin && margin.bottom || 0
      } : {
        top: margin && margin.top || 0
      };
    }
  }
  return _objectSpread$C(_objectSpread$C({}, hPos), vPos);
}
function LegendSettingsDispatcher(props) {
  var dispatch = useAppDispatch();
  reactExports.useEffect(() => {
    dispatch(setLegendSettings(props));
  }, [dispatch, props]);
  return null;
}
function LegendSizeDispatcher(props) {
  var dispatch = useAppDispatch();
  reactExports.useEffect(() => {
    dispatch(setLegendSize(props));
    return () => {
      dispatch(setLegendSize({
        width: 0,
        height: 0
      }));
    };
  }, [dispatch, props]);
  return null;
}
function LegendWrapper(props) {
  var contextPayload = useLegendPayload();
  var legendPortalFromContext = useLegendPortal();
  var margin = useMargin();
  var {
    width: widthFromProps,
    height: heightFromProps,
    wrapperStyle,
    portal: portalFromProps
  } = props;
  // The contextPayload is not used directly inside the hook, but we need the onBBoxUpdate call
  // when the payload changes, therefore it's here as a dependency.
  var [lastBoundingBox, updateBoundingBox] = useElementOffset([contextPayload]);
  var chartWidth = useChartWidth();
  var chartHeight = useChartHeight();
  var maxWidth = chartWidth - (margin.left || 0) - (margin.right || 0);
  // eslint-disable-next-line @typescript-eslint/no-use-before-define
  var widthOrHeight = Legend.getWidthOrHeight(props.layout, heightFromProps, widthFromProps, maxWidth);
  // if the user supplies their own portal, only use their defined wrapper styles
  var outerStyle = portalFromProps ? wrapperStyle : _objectSpread$C(_objectSpread$C({
    position: 'absolute',
    width: (widthOrHeight === null || widthOrHeight === void 0 ? void 0 : widthOrHeight.width) || widthFromProps || 'auto',
    height: (widthOrHeight === null || widthOrHeight === void 0 ? void 0 : widthOrHeight.height) || heightFromProps || 'auto'
  }, getDefaultPosition(wrapperStyle, props, margin, chartWidth, chartHeight, lastBoundingBox)), wrapperStyle);
  var legendPortal = portalFromProps !== null && portalFromProps !== void 0 ? portalFromProps : legendPortalFromContext;
  if (legendPortal == null) {
    return null;
  }
  var legendElement = /*#__PURE__*/reactExports.createElement("div", {
    className: "recharts-legend-wrapper",
    style: outerStyle,
    ref: updateBoundingBox
  }, /*#__PURE__*/reactExports.createElement(LegendSettingsDispatcher, {
    layout: props.layout,
    align: props.align,
    verticalAlign: props.verticalAlign,
    itemSorter: props.itemSorter
  }), /*#__PURE__*/reactExports.createElement(LegendSizeDispatcher, {
    width: lastBoundingBox.width,
    height: lastBoundingBox.height
  }), /*#__PURE__*/reactExports.createElement(LegendContent, _extends$u({}, props, widthOrHeight, {
    margin: margin,
    chartWidth: chartWidth,
    chartHeight: chartHeight,
    contextPayload: contextPayload
  })));
  return /*#__PURE__*/reactDomExports.createPortal(legendElement, legendPortal);
}
class Legend extends reactExports.PureComponent {
  static getWidthOrHeight(layout, height, width, maxWidth) {
    if (layout === 'vertical' && isNumber(height)) {
      return {
        height
      };
    }
    if (layout === 'horizontal') {
      return {
        width: width || maxWidth
      };
    }
    return null;
  }
  render() {
    return /*#__PURE__*/reactExports.createElement(LegendWrapper, this.props);
  }
}
_defineProperty$G(Legend, "displayName", 'Legend');
_defineProperty$G(Legend, "defaultProps", {
  align: 'center',
  iconSize: 14,
  itemSorter: 'value',
  layout: 'horizontal',
  verticalAlign: 'bottom'
});

function _extends$t() { return _extends$t = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$t.apply(null, arguments); }
function ownKeys$B(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$B(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$B(Object(t), true).forEach(function (r) { _defineProperty$F(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$B(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$F(e, r, t) { return (r = _toPropertyKey$F(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$F(t) { var i = _toPrimitive$F(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$F(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function defaultFormatter(value) {
  return Array.isArray(value) && isNumOrStr(value[0]) && isNumOrStr(value[1]) ? value.join(' ~ ') : value;
}
var DefaultTooltipContent = props => {
  var {
    separator = ' : ',
    contentStyle = {},
    itemStyle = {},
    labelStyle = {},
    payload,
    formatter,
    itemSorter,
    wrapperClassName,
    labelClassName,
    label,
    labelFormatter,
    accessibilityLayer = false
  } = props;
  var renderContent = () => {
    if (payload && payload.length) {
      var listStyle = {
        padding: 0,
        margin: 0
      };
      var items = (itemSorter ? sortBy$1(payload, itemSorter) : payload).map((entry, i) => {
        if (entry.type === 'none') {
          return null;
        }
        var finalFormatter = entry.formatter || formatter || defaultFormatter;
        var {
          value,
          name
        } = entry;
        var finalValue = value;
        var finalName = name;
        if (finalFormatter) {
          var formatted = finalFormatter(value, name, entry, i, payload);
          if (Array.isArray(formatted)) {
            [finalValue, finalName] = formatted;
          } else if (formatted != null) {
            finalValue = formatted;
          } else {
            return null;
          }
        }
        var finalItemStyle = _objectSpread$B({
          display: 'block',
          paddingTop: 4,
          paddingBottom: 4,
          color: entry.color || '#000'
        }, itemStyle);
        return (
          /*#__PURE__*/
          // eslint-disable-next-line react/no-array-index-key
          reactExports.createElement("li", {
            className: "recharts-tooltip-item",
            key: "tooltip-item-".concat(i),
            style: finalItemStyle
          }, isNumOrStr(finalName) ? /*#__PURE__*/reactExports.createElement("span", {
            className: "recharts-tooltip-item-name"
          }, finalName) : null, isNumOrStr(finalName) ? /*#__PURE__*/reactExports.createElement("span", {
            className: "recharts-tooltip-item-separator"
          }, separator) : null, /*#__PURE__*/reactExports.createElement("span", {
            className: "recharts-tooltip-item-value"
          }, finalValue), /*#__PURE__*/reactExports.createElement("span", {
            className: "recharts-tooltip-item-unit"
          }, entry.unit || ''))
        );
      });
      return /*#__PURE__*/reactExports.createElement("ul", {
        className: "recharts-tooltip-item-list",
        style: listStyle
      }, items);
    }
    return null;
  };
  var finalStyle = _objectSpread$B({
    margin: 0,
    padding: 10,
    backgroundColor: '#fff',
    border: '1px solid #ccc',
    whiteSpace: 'nowrap'
  }, contentStyle);
  var finalLabelStyle = _objectSpread$B({
    margin: 0
  }, labelStyle);
  var hasLabel = !isNullish(label);
  var finalLabel = hasLabel ? label : '';
  var wrapperCN = clsx('recharts-default-tooltip', wrapperClassName);
  var labelCN = clsx('recharts-tooltip-label', labelClassName);
  if (hasLabel && labelFormatter && payload !== undefined && payload !== null) {
    finalLabel = labelFormatter(label, payload);
  }
  var accessibilityAttributes = accessibilityLayer ? {
    role: 'status',
    'aria-live': 'assertive'
  } : {};
  return /*#__PURE__*/reactExports.createElement("div", _extends$t({
    className: wrapperCN,
    style: finalStyle
  }, accessibilityAttributes), /*#__PURE__*/reactExports.createElement("p", {
    className: labelCN,
    style: finalLabelStyle
  }, /*#__PURE__*/reactExports.isValidElement(finalLabel) ? finalLabel : "".concat(finalLabel)), renderContent());
};

var CSS_CLASS_PREFIX = 'recharts-tooltip-wrapper';
var TOOLTIP_HIDDEN = {
  visibility: 'hidden'
};
function getTooltipCSSClassName(_ref) {
  var {
    coordinate,
    translateX,
    translateY
  } = _ref;
  return clsx(CSS_CLASS_PREFIX, {
    ["".concat(CSS_CLASS_PREFIX, "-right")]: isNumber(translateX) && coordinate && isNumber(coordinate.x) && translateX >= coordinate.x,
    ["".concat(CSS_CLASS_PREFIX, "-left")]: isNumber(translateX) && coordinate && isNumber(coordinate.x) && translateX < coordinate.x,
    ["".concat(CSS_CLASS_PREFIX, "-bottom")]: isNumber(translateY) && coordinate && isNumber(coordinate.y) && translateY >= coordinate.y,
    ["".concat(CSS_CLASS_PREFIX, "-top")]: isNumber(translateY) && coordinate && isNumber(coordinate.y) && translateY < coordinate.y
  });
}
function getTooltipTranslateXY(_ref2) {
  var {
    allowEscapeViewBox,
    coordinate,
    key,
    offsetTopLeft,
    position,
    reverseDirection,
    tooltipDimension,
    viewBox,
    viewBoxDimension
  } = _ref2;
  if (position && isNumber(position[key])) {
    return position[key];
  }
  var negative = coordinate[key] - tooltipDimension - (offsetTopLeft > 0 ? offsetTopLeft : 0);
  var positive = coordinate[key] + offsetTopLeft;
  if (allowEscapeViewBox[key]) {
    return reverseDirection[key] ? negative : positive;
  }
  var viewBoxKey = viewBox[key];
  if (viewBoxKey == null) {
    return 0;
  }
  if (reverseDirection[key]) {
    var _tooltipBoundary = negative;
    var _viewBoxBoundary = viewBoxKey;
    if (_tooltipBoundary < _viewBoxBoundary) {
      return Math.max(positive, viewBoxKey);
    }
    return Math.max(negative, viewBoxKey);
  }
  if (viewBoxDimension == null) {
    return 0;
  }
  var tooltipBoundary = positive + tooltipDimension;
  var viewBoxBoundary = viewBoxKey + viewBoxDimension;
  if (tooltipBoundary > viewBoxBoundary) {
    return Math.max(negative, viewBoxKey);
  }
  return Math.max(positive, viewBoxKey);
}
function getTransformStyle(_ref3) {
  var {
    translateX,
    translateY,
    useTranslate3d
  } = _ref3;
  return {
    transform: useTranslate3d ? "translate3d(".concat(translateX, "px, ").concat(translateY, "px, 0)") : "translate(".concat(translateX, "px, ").concat(translateY, "px)")
  };
}
function getTooltipTranslate(_ref4) {
  var {
    allowEscapeViewBox,
    coordinate,
    offsetTopLeft,
    position,
    reverseDirection,
    tooltipBox,
    useTranslate3d,
    viewBox
  } = _ref4;
  var cssProperties, translateX, translateY;
  if (tooltipBox.height > 0 && tooltipBox.width > 0 && coordinate) {
    translateX = getTooltipTranslateXY({
      allowEscapeViewBox,
      coordinate,
      key: 'x',
      offsetTopLeft,
      position,
      reverseDirection,
      tooltipDimension: tooltipBox.width,
      viewBox,
      viewBoxDimension: viewBox.width
    });
    translateY = getTooltipTranslateXY({
      allowEscapeViewBox,
      coordinate,
      key: 'y',
      offsetTopLeft,
      position,
      reverseDirection,
      tooltipDimension: tooltipBox.height,
      viewBox,
      viewBoxDimension: viewBox.height
    });
    cssProperties = getTransformStyle({
      translateX,
      translateY,
      useTranslate3d
    });
  } else {
    cssProperties = TOOLTIP_HIDDEN;
  }
  return {
    cssProperties,
    cssClasses: getTooltipCSSClassName({
      translateX,
      translateY,
      coordinate
    })
  };
}

function ownKeys$A(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$A(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$A(Object(t), true).forEach(function (r) { _defineProperty$E(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$A(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$E(e, r, t) { return (r = _toPropertyKey$E(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$E(t) { var i = _toPrimitive$E(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$E(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class TooltipBoundingBox extends reactExports.PureComponent {
  constructor() {
    super(...arguments);
    _defineProperty$E(this, "state", {
      dismissed: false,
      dismissedAtCoordinate: {
        x: 0,
        y: 0
      }
    });
    _defineProperty$E(this, "handleKeyDown", event => {
      if (event.key === 'Escape') {
        var _this$props$coordinat, _this$props$coordinat2, _this$props$coordinat3, _this$props$coordinat4;
        this.setState({
          dismissed: true,
          dismissedAtCoordinate: {
            x: (_this$props$coordinat = (_this$props$coordinat2 = this.props.coordinate) === null || _this$props$coordinat2 === void 0 ? void 0 : _this$props$coordinat2.x) !== null && _this$props$coordinat !== void 0 ? _this$props$coordinat : 0,
            y: (_this$props$coordinat3 = (_this$props$coordinat4 = this.props.coordinate) === null || _this$props$coordinat4 === void 0 ? void 0 : _this$props$coordinat4.y) !== null && _this$props$coordinat3 !== void 0 ? _this$props$coordinat3 : 0
          }
        });
      }
    });
  }
  componentDidMount() {
    document.addEventListener('keydown', this.handleKeyDown);
  }
  componentWillUnmount() {
    document.removeEventListener('keydown', this.handleKeyDown);
  }
  componentDidUpdate() {
    var _this$props$coordinat5, _this$props$coordinat6;
    if (!this.state.dismissed) {
      return;
    }
    if (((_this$props$coordinat5 = this.props.coordinate) === null || _this$props$coordinat5 === void 0 ? void 0 : _this$props$coordinat5.x) !== this.state.dismissedAtCoordinate.x || ((_this$props$coordinat6 = this.props.coordinate) === null || _this$props$coordinat6 === void 0 ? void 0 : _this$props$coordinat6.y) !== this.state.dismissedAtCoordinate.y) {
      this.state.dismissed = false;
    }
  }
  render() {
    var {
      active,
      allowEscapeViewBox,
      animationDuration,
      animationEasing,
      children,
      coordinate,
      hasPayload,
      isAnimationActive,
      offset,
      position,
      reverseDirection,
      useTranslate3d,
      viewBox,
      wrapperStyle,
      lastBoundingBox,
      innerRef,
      hasPortalFromProps
    } = this.props;
    var {
      cssClasses,
      cssProperties
    } = getTooltipTranslate({
      allowEscapeViewBox,
      coordinate,
      offsetTopLeft: offset,
      position,
      reverseDirection,
      tooltipBox: {
        height: lastBoundingBox.height,
        width: lastBoundingBox.width
      },
      useTranslate3d,
      viewBox
    });

    // do not use absolute styles if the user has passed a custom portal prop
    var positionStyles = hasPortalFromProps ? {} : _objectSpread$A(_objectSpread$A({
      transition: isAnimationActive && active ? "transform ".concat(animationDuration, "ms ").concat(animationEasing) : undefined
    }, cssProperties), {}, {
      pointerEvents: 'none',
      visibility: !this.state.dismissed && active && hasPayload ? 'visible' : 'hidden',
      position: 'absolute',
      top: 0,
      left: 0
    });
    var outerStyle = _objectSpread$A(_objectSpread$A({}, positionStyles), {}, {
      visibility: !this.state.dismissed && active && hasPayload ? 'visible' : 'hidden'
    }, wrapperStyle);
    return (
      /*#__PURE__*/
      // This element allow listening to the `Escape` key. See https://github.com/recharts/recharts/pull/2925
      reactExports.createElement("div", {
        // @ts-expect-error typescript library does not recognize xmlns attribute, but it's required for an HTML chunk inside SVG.
        xmlns: "http://www.w3.org/1999/xhtml",
        tabIndex: -1,
        className: cssClasses,
        style: outerStyle,
        ref: innerRef
      }, children)
    );
  }
}

var parseIsSsrByDefault = () => !(typeof window !== 'undefined' && window.document && Boolean(window.document.createElement) && window.setTimeout);
var Global = {
  isSsr: parseIsSsrByDefault()
};

var useAccessibilityLayer = () => useAppSelector(state => state.rootProps.accessibilityLayer);

function isWellBehavedNumber(n) {
  return Number.isFinite(n);
}
function isPositiveNumber(n) {
  return typeof n === 'number' && n > 0 && Number.isFinite(n);
}

function _extends$s() { return _extends$s = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$s.apply(null, arguments); }
function ownKeys$z(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$z(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$z(Object(t), true).forEach(function (r) { _defineProperty$D(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$z(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$D(e, r, t) { return (r = _toPropertyKey$D(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$D(t) { var i = _toPrimitive$D(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$D(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var CURVE_FACTORIES = {
  curveBasisClosed,
  curveBasisOpen,
  curveBasis,
  curveBumpX: bumpX,
  curveBumpY: bumpY,
  curveLinearClosed,
  curveLinear,
  curveMonotoneX: monotoneX,
  curveMonotoneY: monotoneY,
  curveNatural,
  curveStep,
  curveStepAfter: stepAfter,
  curveStepBefore: stepBefore
};

/**
 * @deprecated use {@link Coordinate} instead
 * Duplicated with `Coordinate` in `util/types.ts`
 */

/**
 * @deprecated use {@link NullableCoordinate} instead
 * Duplicated with `NullableCoordinate` in `util/types.ts`
 */

var defined = p => isWellBehavedNumber(p.x) && isWellBehavedNumber(p.y);
var getX = p => p.x;
var getY = p => p.y;
var getCurveFactory = (type, layout) => {
  if (typeof type === 'function') {
    return type;
  }
  var name = "curve".concat(upperFirst(type));
  if ((name === 'curveMonotone' || name === 'curveBump') && layout) {
    return CURVE_FACTORIES["".concat(name).concat(layout === 'vertical' ? 'Y' : 'X')];
  }
  return CURVE_FACTORIES[name] || curveLinear;
};
/**
 * Calculate the path of curve. Returns null if points is an empty array.
 * @return path or null
 */
var getPath$1 = _ref => {
  var {
    type = 'linear',
    points = [],
    baseLine,
    layout,
    connectNulls = false
  } = _ref;
  var curveFactory = getCurveFactory(type, layout);
  var formatPoints = connectNulls ? points.filter(defined) : points;
  var lineFunction;
  if (Array.isArray(baseLine)) {
    var formatBaseLine = connectNulls ? baseLine.filter(base => defined(base)) : baseLine;
    var areaPoints = formatPoints.map((entry, index) => _objectSpread$z(_objectSpread$z({}, entry), {}, {
      base: formatBaseLine[index]
    }));
    if (layout === 'vertical') {
      lineFunction = shapeArea().y(getY).x1(getX).x0(d => d.base.x);
    } else {
      lineFunction = shapeArea().x(getX).y1(getY).y0(d => d.base.y);
    }
    lineFunction.defined(defined).curve(curveFactory);
    return lineFunction(areaPoints);
  }
  if (layout === 'vertical' && isNumber(baseLine)) {
    lineFunction = shapeArea().y(getY).x1(getX).x0(baseLine);
  } else if (isNumber(baseLine)) {
    lineFunction = shapeArea().x(getX).y1(getY).y0(baseLine);
  } else {
    lineFunction = shapeLine().x(getX).y(getY);
  }
  lineFunction.defined(defined).curve(curveFactory);
  return lineFunction(formatPoints);
};
var Curve = props => {
  var {
    className,
    points,
    path,
    pathRef
  } = props;
  if ((!points || !points.length) && !path) {
    return null;
  }
  var realPath = points && points.length ? getPath$1(props) : path;
  return /*#__PURE__*/reactExports.createElement("path", _extends$s({}, filterProps(props, false), adaptEventHandlers(props), {
    className: clsx('recharts-curve', className),
    d: realPath === null ? undefined : realPath,
    ref: pathRef
  }));
};

var _excluded$o = ["x", "y", "top", "left", "width", "height", "className"];
function _extends$r() { return _extends$r = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$r.apply(null, arguments); }
function ownKeys$y(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$y(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$y(Object(t), true).forEach(function (r) { _defineProperty$C(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$y(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$C(e, r, t) { return (r = _toPropertyKey$C(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$C(t) { var i = _toPrimitive$C(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$C(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties$o(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$o(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$o(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
var getPath = (x, y, width, height, top, left) => {
  return "M".concat(x, ",").concat(top, "v").concat(height, "M").concat(left, ",").concat(y, "h").concat(width);
};
var Cross = _ref => {
  var {
      x = 0,
      y = 0,
      top = 0,
      left = 0,
      width = 0,
      height = 0,
      className
    } = _ref,
    rest = _objectWithoutProperties$o(_ref, _excluded$o);
  var props = _objectSpread$y({
    x,
    y,
    top,
    left,
    width,
    height
  }, rest);
  if (!isNumber(x) || !isNumber(y) || !isNumber(width) || !isNumber(height) || !isNumber(top) || !isNumber(left)) {
    return null;
  }
  return /*#__PURE__*/reactExports.createElement("path", _extends$r({}, filterProps(props, true), {
    className: clsx('recharts-cross', className),
    d: getPath(x, y, width, height, top, left)
  }));
};

function getCursorRectangle(layout, activeCoordinate, offset, tooltipAxisBandSize) {
  var halfSize = tooltipAxisBandSize / 2;
  return {
    stroke: 'none',
    fill: '#ccc',
    x: layout === 'horizontal' ? activeCoordinate.x - halfSize : offset.left + 0.5,
    y: layout === 'horizontal' ? offset.top + 0.5 : activeCoordinate.y - halfSize,
    width: layout === 'horizontal' ? tooltipAxisBandSize : offset.width - 1,
    height: layout === 'horizontal' ? offset.height - 1 : tooltipAxisBandSize
  };
}

function ownKeys$x(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$x(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$x(Object(t), true).forEach(function (r) { _defineProperty$B(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$x(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$B(e, r, t) { return (r = _toPropertyKey$B(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$B(t) { var i = _toPrimitive$B(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$B(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * This function mimics the behavior of the `defaultProps` static property in React.
 * Functional components do not have a defaultProps property, so this function is useful to resolve default props.
 *
 * The common recommendation is to use ES6 destructuring with default values in the function signature,
 * but you need to be careful there and make sure you destructure all the individual properties
 * and not the whole object. See the test file for example.
 *
 * And because destructuring all properties one by one is a faff, and it's easy to miss one property,
 * this function exists.
 *
 * @param realProps - the props object passed to the component by the user
 * @param defaultProps - the default props object defined in the component by Recharts
 * @returns - the props object with all the default props resolved. All `undefined` values are replaced with the default value.
 */
function resolveDefaultProps(realProps, defaultProps) {
  /*
   * To avoid mutating the original `realProps` object passed to the function, create a shallow copy of it.
   * `resolvedProps` will be modified directly with the defaults.
   */
  var resolvedProps = _objectSpread$x({}, realProps);
  /*
   * Since the function guarantees `D extends Partial<T>`, this assignment is safe.
   * It allows TypeScript to work with the well-defined `Partial<T>` type inside the loop,
   * making subsequent type inference (especially for `dp[key]`) much more straightforward for the compiler.
   * This is a key step to improve type safety *without* value assertions later.
   */
  var dp = defaultProps;
  /*
   * `Object.keys` doesn't preserve strong key types - it always returns Array<string>.
   * However, due to the `D extends Partial<T>` constraint,
   * we know these keys *must* also be valid keys of `T`.
   * This assertion informs TypeScript of this relationship, avoiding type errors when using `key` to index `acc` (type T).
   *
   * Type assertions are not sound but in this case it's necessary
   * as `Object.keys` does not do what we want it to do.
   */
  var keys = Object.keys(defaultProps);
  var withDefaults = keys.reduce((acc, key) => {
    if (acc[key] === undefined && dp[key] !== undefined) {
      acc[key] = dp[key];
    }
    return acc;
  }, resolvedProps);
  /*
   * And again type assertions are not safe but here we have done the runtime work
   * so let's bypass the lack of static type safety and tell the compiler what happened.
   */
  return withDefaults;
}

/**
 * Helper type to extract the keys of T that are required.
 * It iterates through each key K in T. If Pick<T, K> cannot be assigned an empty object {},
 * it means K is required, so we keep K; otherwise, we discard it (never).
 * [keyof T] at the end creates a union of the kept keys.
 */

/**
 * Helper type to extract the keys of T that are optional.
 * It iterates through each key K in T. If Pick<T, K> can be assigned an empty object {},
 * it means K is optional (or potentially missing), so we keep K; otherwise, we discard it (never).
 * [keyof T] at the end creates a union of the kept keys.
 */

/**
 * Helper type to ensure keys of D exist in T.
 * For each key K in D, if K is also a key of T, keep the type D[K].
 * If K is NOT a key of T, map it to type `never`.
 * An object cannot have a property of type `never`, effectively disallowing extra keys.
 */

/**
 * This type will take a source type `Props` and a default type `Defaults` and will return a new type
 * where all properties that are optional in `Props` but required in `Defaults` are made required in the result.
 * Properties that are required in `Props` and optional in `Defaults` will remain required.
 * Properties that are optional in both `Props` and `Defaults` will remain optional.
 *
 * This is useful for creating a type that represents the resolved props of a component with default props.
 */

var isEqual$2 = {};

var isEqualWith = {};

var isPlainObject$3 = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	function isPlainObject(value) {
	    if (!value || typeof value !== 'object') {
	        return false;
	    }
	    const proto = Object.getPrototypeOf(value);
	    const hasObjectPrototype = proto === null ||
	        proto === Object.prototype ||
	        Object.getPrototypeOf(proto) === null;
	    if (!hasObjectPrototype) {
	        return false;
	    }
	    return Object.prototype.toString.call(value) === '[object Object]';
	}

	exports.isPlainObject = isPlainObject; 
} (isPlainObject$3));

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const isPlainObject = isPlainObject$3;
	const getSymbols$1 = getSymbols;
	const getTag$1 = getTag;
	const tags$1 = tags;
	const eq$1 = eq;

	function isEqualWith(a, b, areValuesEqual) {
	    return isEqualWithImpl(a, b, undefined, undefined, undefined, undefined, areValuesEqual);
	}
	function isEqualWithImpl(a, b, property, aParent, bParent, stack, areValuesEqual) {
	    const result = areValuesEqual(a, b, property, aParent, bParent, stack);
	    if (result !== undefined) {
	        return result;
	    }
	    if (typeof a === typeof b) {
	        switch (typeof a) {
	            case 'bigint':
	            case 'string':
	            case 'boolean':
	            case 'symbol':
	            case 'undefined': {
	                return a === b;
	            }
	            case 'number': {
	                return a === b || Object.is(a, b);
	            }
	            case 'function': {
	                return a === b;
	            }
	            case 'object': {
	                return areObjectsEqual(a, b, stack, areValuesEqual);
	            }
	        }
	    }
	    return areObjectsEqual(a, b, stack, areValuesEqual);
	}
	function areObjectsEqual(a, b, stack, areValuesEqual) {
	    if (Object.is(a, b)) {
	        return true;
	    }
	    let aTag = getTag$1.getTag(a);
	    let bTag = getTag$1.getTag(b);
	    if (aTag === tags$1.argumentsTag) {
	        aTag = tags$1.objectTag;
	    }
	    if (bTag === tags$1.argumentsTag) {
	        bTag = tags$1.objectTag;
	    }
	    if (aTag !== bTag) {
	        return false;
	    }
	    switch (aTag) {
	        case tags$1.stringTag:
	            return a.toString() === b.toString();
	        case tags$1.numberTag: {
	            const x = a.valueOf();
	            const y = b.valueOf();
	            return eq$1.eq(x, y);
	        }
	        case tags$1.booleanTag:
	        case tags$1.dateTag:
	        case tags$1.symbolTag:
	            return Object.is(a.valueOf(), b.valueOf());
	        case tags$1.regexpTag: {
	            return a.source === b.source && a.flags === b.flags;
	        }
	        case tags$1.functionTag: {
	            return a === b;
	        }
	    }
	    stack = stack ?? new Map();
	    const aStack = stack.get(a);
	    const bStack = stack.get(b);
	    if (aStack != null && bStack != null) {
	        return aStack === b;
	    }
	    stack.set(a, b);
	    stack.set(b, a);
	    try {
	        switch (aTag) {
	            case tags$1.mapTag: {
	                if (a.size !== b.size) {
	                    return false;
	                }
	                for (const [key, value] of a.entries()) {
	                    if (!b.has(key) || !isEqualWithImpl(value, b.get(key), key, a, b, stack, areValuesEqual)) {
	                        return false;
	                    }
	                }
	                return true;
	            }
	            case tags$1.setTag: {
	                if (a.size !== b.size) {
	                    return false;
	                }
	                const aValues = Array.from(a.values());
	                const bValues = Array.from(b.values());
	                for (let i = 0; i < aValues.length; i++) {
	                    const aValue = aValues[i];
	                    const index = bValues.findIndex(bValue => {
	                        return isEqualWithImpl(aValue, bValue, undefined, a, b, stack, areValuesEqual);
	                    });
	                    if (index === -1) {
	                        return false;
	                    }
	                    bValues.splice(index, 1);
	                }
	                return true;
	            }
	            case tags$1.arrayTag:
	            case tags$1.uint8ArrayTag:
	            case tags$1.uint8ClampedArrayTag:
	            case tags$1.uint16ArrayTag:
	            case tags$1.uint32ArrayTag:
	            case tags$1.bigUint64ArrayTag:
	            case tags$1.int8ArrayTag:
	            case tags$1.int16ArrayTag:
	            case tags$1.int32ArrayTag:
	            case tags$1.bigInt64ArrayTag:
	            case tags$1.float32ArrayTag:
	            case tags$1.float64ArrayTag: {
	                if (typeof Buffer !== 'undefined' && Buffer.isBuffer(a) !== Buffer.isBuffer(b)) {
	                    return false;
	                }
	                if (a.length !== b.length) {
	                    return false;
	                }
	                for (let i = 0; i < a.length; i++) {
	                    if (!isEqualWithImpl(a[i], b[i], i, a, b, stack, areValuesEqual)) {
	                        return false;
	                    }
	                }
	                return true;
	            }
	            case tags$1.arrayBufferTag: {
	                if (a.byteLength !== b.byteLength) {
	                    return false;
	                }
	                return areObjectsEqual(new Uint8Array(a), new Uint8Array(b), stack, areValuesEqual);
	            }
	            case tags$1.dataViewTag: {
	                if (a.byteLength !== b.byteLength || a.byteOffset !== b.byteOffset) {
	                    return false;
	                }
	                return areObjectsEqual(new Uint8Array(a), new Uint8Array(b), stack, areValuesEqual);
	            }
	            case tags$1.errorTag: {
	                return a.name === b.name && a.message === b.message;
	            }
	            case tags$1.objectTag: {
	                const areEqualInstances = areObjectsEqual(a.constructor, b.constructor, stack, areValuesEqual) ||
	                    (isPlainObject.isPlainObject(a) && isPlainObject.isPlainObject(b));
	                if (!areEqualInstances) {
	                    return false;
	                }
	                const aKeys = [...Object.keys(a), ...getSymbols$1.getSymbols(a)];
	                const bKeys = [...Object.keys(b), ...getSymbols$1.getSymbols(b)];
	                if (aKeys.length !== bKeys.length) {
	                    return false;
	                }
	                for (let i = 0; i < aKeys.length; i++) {
	                    const propKey = aKeys[i];
	                    const aProp = a[propKey];
	                    if (!Object.hasOwn(b, propKey)) {
	                        return false;
	                    }
	                    const bProp = b[propKey];
	                    if (!isEqualWithImpl(aProp, bProp, propKey, a, b, stack, areValuesEqual)) {
	                        return false;
	                    }
	                }
	                return true;
	            }
	            default: {
	                return false;
	            }
	        }
	    }
	    finally {
	        stack.delete(a);
	        stack.delete(b);
	    }
	}

	exports.isEqualWith = isEqualWith; 
} (isEqualWith));

var noop$3 = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	function noop() { }

	exports.noop = noop; 
} (noop$3));

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const isEqualWith$1 = isEqualWith;
	const noop = noop$3;

	function isEqual(a, b) {
	    return isEqualWith$1.isEqualWith(a, b, noop.noop);
	}

	exports.isEqual = isEqual; 
} (isEqual$2));

var isEqual = isEqual$2.isEqual;

const isEqual$1 = /*@__PURE__*/getDefaultExportFromCjs(isEqual);

/**
 * Represents a single item in the ReactSmoothQueue.
 * The item can be:
 * - A number representing a delay in milliseconds.
 * - An object representing a style change
 * - A StartAnimationFunction that starts eased transition and calls different render
 *      because of course in Recharts we have to have three ways to do everything
 * - An arbitrary function to be executed
 */

function createAnimateManager(timeoutController) {
  var currStyle = {};
  var handleChange = () => null;
  var shouldStop = false;
  var cancelTimeout = null;
  var setStyle = _style => {
    if (shouldStop) {
      return;
    }
    if (Array.isArray(_style)) {
      if (!_style.length) {
        return;
      }
      var styles = _style;
      var [curr, ...restStyles] = styles;
      if (typeof curr === 'number') {
        cancelTimeout = timeoutController.setTimeout(setStyle.bind(null, restStyles), curr);
        return;
      }
      setStyle(curr);
      cancelTimeout = timeoutController.setTimeout(setStyle.bind(null, restStyles));
      return;
    }
    if (typeof _style === 'object') {
      currStyle = _style;
      handleChange(currStyle);
    }
    if (typeof _style === 'function') {
      _style();
    }
  };
  return {
    stop: () => {
      shouldStop = true;
    },
    start: style => {
      shouldStop = false;
      if (cancelTimeout) {
        cancelTimeout();
        cancelTimeout = null;
      }
      setStyle(style);
    },
    subscribe: _handleChange => {
      handleChange = _handleChange;
      return () => {
        handleChange = () => null;
      };
    },
    getTimeoutController: () => timeoutController
  };
}

var ACCURACY = 1e-4;
var cubicBezierFactor = (c1, c2) => [0, 3 * c1, 3 * c2 - 6 * c1, 3 * c1 - 3 * c2 + 1];
var evaluatePolynomial = (params, t) => params.map((param, i) => param * t ** i).reduce((pre, curr) => pre + curr);
var cubicBezier = (c1, c2) => t => {
  var params = cubicBezierFactor(c1, c2);
  return evaluatePolynomial(params, t);
};
var derivativeCubicBezier = (c1, c2) => t => {
  var params = cubicBezierFactor(c1, c2);
  var newParams = [...params.map((param, i) => param * i).slice(1), 0];
  return evaluatePolynomial(newParams, t);
};
// calculate cubic-bezier using Newton's method
var configBezier = function configBezier() {
  var x1, x2, y1, y2;
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  if (args.length === 1) {
    switch (args[0]) {
      case 'linear':
        [x1, y1, x2, y2] = [0.0, 0.0, 1.0, 1.0];
        break;
      case 'ease':
        [x1, y1, x2, y2] = [0.25, 0.1, 0.25, 1.0];
        break;
      case 'ease-in':
        [x1, y1, x2, y2] = [0.42, 0.0, 1.0, 1.0];
        break;
      case 'ease-out':
        [x1, y1, x2, y2] = [0.42, 0.0, 0.58, 1.0];
        break;
      case 'ease-in-out':
        [x1, y1, x2, y2] = [0.0, 0.0, 0.58, 1.0];
        break;
      default:
        {
          var easing = args[0].split('(');
          if (easing[0] === 'cubic-bezier' && easing[1].split(')')[0].split(',').length === 4) {
            [x1, y1, x2, y2] = easing[1].split(')')[0].split(',').map(x => parseFloat(x));
          }
        }
    }
  } else if (args.length === 4) {
    [x1, y1, x2, y2] = args;
  }
  var curveX = cubicBezier(x1, x2);
  var curveY = cubicBezier(y1, y2);
  var derCurveX = derivativeCubicBezier(x1, x2);
  var rangeValue = value => {
    if (value > 1) {
      return 1;
    }
    if (value < 0) {
      return 0;
    }
    return value;
  };
  var bezier = _t => {
    var t = _t > 1 ? 1 : _t;
    var x = t;
    for (var i = 0; i < 8; ++i) {
      var evalT = curveX(x) - t;
      var derVal = derCurveX(x);
      if (Math.abs(evalT - t) < ACCURACY || derVal < ACCURACY) {
        return curveY(x);
      }
      x = rangeValue(x - evalT / derVal);
    }
    return curveY(x);
  };
  bezier.isStepper = false;
  return bezier;
};
var configSpring = function configSpring() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var {
    stiff = 100,
    damping = 8,
    dt = 17
  } = config;
  var stepper = (currX, destX, currV) => {
    var FSpring = -(currX - destX) * stiff;
    var FDamping = currV * damping;
    var newV = currV + (FSpring - FDamping) * dt / 1000;
    var newX = currV * dt / 1000 + currX;
    if (Math.abs(newX - destX) < ACCURACY && Math.abs(newV) < ACCURACY) {
      return [destX, 0];
    }
    return [newX, newV];
  };
  stepper.isStepper = true;
  stepper.dt = dt;
  return stepper;
};
var configEasing = easing => {
  if (typeof easing === 'string') {
    switch (easing) {
      case 'ease':
      case 'ease-in-out':
      case 'ease-out':
      case 'ease-in':
      case 'linear':
        return configBezier(easing);
      case 'spring':
        return configSpring();
      default:
        if (easing.split('(')[0] === 'cubic-bezier') {
          return configBezier(easing);
        }
    }
  }
  if (typeof easing === 'function') {
    return easing;
  }
  return null;
};

function ownKeys$w(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$w(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$w(Object(t), true).forEach(function (r) { _defineProperty$A(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$w(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$A(e, r, t) { return (r = _toPropertyKey$A(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$A(t) { var i = _toPrimitive$A(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$A(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/*
 * @description: convert camel case to dash case
 * string => string
 */
var getDashCase = name => name.replace(/([A-Z])/g, v => "-".concat(v.toLowerCase()));
var getTransitionVal = (props, duration, easing) => props.map(prop => "".concat(getDashCase(prop), " ").concat(duration, "ms ").concat(easing)).join(',');

/**
 * Finds the intersection of keys between two objects
 * @param {object} preObj previous object
 * @param {object} nextObj next object
 * @returns an array of keys that exist in both objects
 */
var getIntersectionKeys = (preObj, nextObj) => [Object.keys(preObj), Object.keys(nextObj)].reduce((a, b) => a.filter(c => b.includes(c)));

/**
 * Maps an object to another object
 * @param {function} fn function to map
 * @param {object} obj object to map
 * @returns mapped object
 */
var mapObject = (fn, obj) => Object.keys(obj).reduce((res, key) => _objectSpread$w(_objectSpread$w({}, res), {}, {
  [key]: fn(key, obj[key])
}), {});

function ownKeys$v(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$v(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$v(Object(t), true).forEach(function (r) { _defineProperty$z(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$v(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$z(e, r, t) { return (r = _toPropertyKey$z(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$z(t) { var i = _toPrimitive$z(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$z(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var alpha = (begin, end, k) => begin + (end - begin) * k;
var needContinue = _ref => {
  var {
    from,
    to
  } = _ref;
  return from !== to;
};
/*
 * @description: cal new from value and velocity in each stepper
 * @return: { [styleProperty]: { from, to, velocity } }
 */
var calStepperVals = (easing, preVals, steps) => {
  var nextStepVals = mapObject((key, val) => {
    if (needContinue(val)) {
      var [newX, newV] = easing(val.from, val.to, val.velocity);
      return _objectSpread$v(_objectSpread$v({}, val), {}, {
        from: newX,
        velocity: newV
      });
    }
    return val;
  }, preVals);
  if (steps < 1) {
    return mapObject((key, val) => {
      if (needContinue(val)) {
        return _objectSpread$v(_objectSpread$v({}, val), {}, {
          velocity: alpha(val.velocity, nextStepVals[key].velocity, steps),
          from: alpha(val.from, nextStepVals[key].from, steps)
        });
      }
      return val;
    }, preVals);
  }
  return calStepperVals(easing, nextStepVals, steps - 1);
};
function createStepperUpdate(from, to, easing, interKeys, render, timeoutController) {
  var preTime;
  var stepperStyle = interKeys.reduce((res, key) => _objectSpread$v(_objectSpread$v({}, res), {}, {
    [key]: {
      from: from[key],
      velocity: 0,
      to: to[key]
    }
  }), {});
  var getCurrStyle = () => mapObject((key, val) => val.from, stepperStyle);
  var shouldStopAnimation = () => !Object.values(stepperStyle).filter(needContinue).length;
  var stopAnimation = null;
  var stepperUpdate = now => {
    if (!preTime) {
      preTime = now;
    }
    var deltaTime = now - preTime;
    var steps = deltaTime / easing.dt;
    stepperStyle = calStepperVals(easing, stepperStyle, steps);
    // get union set and add compatible prefix
    render(_objectSpread$v(_objectSpread$v(_objectSpread$v({}, from), to), getCurrStyle()));
    preTime = now;
    if (!shouldStopAnimation()) {
      stopAnimation = timeoutController.setTimeout(stepperUpdate);
    }
  };

  // return start animation method
  return () => {
    stopAnimation = timeoutController.setTimeout(stepperUpdate);

    // return stop animation method
    return () => {
      stopAnimation();
    };
  };
}
function createTimingUpdate(from, to, easing, duration, interKeys, render, timeoutController) {
  var stopAnimation = null;
  var timingStyle = interKeys.reduce((res, key) => _objectSpread$v(_objectSpread$v({}, res), {}, {
    [key]: [from[key], to[key]]
  }), {});
  var beginTime;
  var timingUpdate = now => {
    if (!beginTime) {
      beginTime = now;
    }
    var t = (now - beginTime) / duration;
    var currStyle = mapObject((key, val) => alpha(...val, easing(t)), timingStyle);

    // get union set and add compatible prefix
    render(_objectSpread$v(_objectSpread$v(_objectSpread$v({}, from), to), currStyle));
    if (t < 1) {
      stopAnimation = timeoutController.setTimeout(timingUpdate);
    } else {
      var finalStyle = mapObject((key, val) => alpha(...val, easing(1)), timingStyle);
      render(_objectSpread$v(_objectSpread$v(_objectSpread$v({}, from), to), finalStyle));
    }
  };

  // return start animation method
  return () => {
    stopAnimation = timeoutController.setTimeout(timingUpdate);

    // return stop animation method
    return () => {
      stopAnimation();
    };
  };
}

// configure update function
// eslint-disable-next-line import/no-default-export
const configUpdate = (from, to, easing, duration, render, timeoutController) => {
  var interKeys = getIntersectionKeys(from, to);
  return easing.isStepper === true ? createStepperUpdate(from, to, easing, interKeys, render, timeoutController) : createTimingUpdate(from, to, easing, duration, interKeys, render, timeoutController);
};

/**
 * Callback type for the timeout function.
 * Receives current time in milliseconds as an argument.
 */

/**
 * A function that, when called, cancels the timeout.
 */

class RequestAnimationFrameTimeoutController {
  setTimeout(callback) {
    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var startTime = performance.now();
    var requestId = null;
    var executeCallback = now => {
      if (now - startTime >= delay) {
        callback(now);
        // tests fail without the extra if, even when five lines below it's not needed
        // TODO finish transition to the mocked timeout controller and then remove this condition
      } else if (typeof requestAnimationFrame === 'function') {
        requestId = requestAnimationFrame(executeCallback);
      }
    };
    requestId = requestAnimationFrame(executeCallback);
    return () => {
      cancelAnimationFrame(requestId);
    };
  }
}

var _excluded$n = ["children", "begin", "duration", "attributeName", "easing", "isActive", "from", "to", "canBegin", "onAnimationEnd", "shouldReAnimate", "onAnimationReStart", "animationManager"];
function _extends$q() { return _extends$q = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$q.apply(null, arguments); }
function _objectWithoutProperties$n(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$n(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$n(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
function ownKeys$u(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$u(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$u(Object(t), true).forEach(function (r) { _defineProperty$y(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$u(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$y(e, r, t) { return (r = _toPropertyKey$y(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$y(t) { var i = _toPrimitive$y(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$y(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function createDefaultAnimationManager() {
  return createAnimateManager(new RequestAnimationFrameTimeoutController());
}
class AnimateImpl extends reactExports.PureComponent {
  constructor(props, context) {
    super(props, context);
    _defineProperty$y(this, "mounted", false);
    _defineProperty$y(this, "manager", null);
    _defineProperty$y(this, "stopJSAnimation", null);
    _defineProperty$y(this, "unSubscribe", null);
    var {
      isActive,
      attributeName,
      from,
      to,
      children,
      duration,
      animationManager
    } = this.props;
    this.manager = animationManager;
    this.handleStyleChange = this.handleStyleChange.bind(this);
    this.changeStyle = this.changeStyle.bind(this);
    if (!isActive || duration <= 0) {
      this.state = {
        style: {}
      };

      // if children is a function and animation is not active, set style to 'to'
      if (typeof children === 'function') {
        this.state = {
          style: to
        };
      }
      return;
    }
    if (from) {
      if (typeof children === 'function') {
        this.state = {
          style: from
        };
        return;
      }
      this.state = {
        style: attributeName ? {
          [attributeName]: from
        } : from
      };
    } else {
      this.state = {
        style: {}
      };
    }
  }
  componentDidMount() {
    var {
      isActive,
      canBegin
    } = this.props;
    this.mounted = true;
    if (!isActive || !canBegin) {
      return;
    }
    this.runAnimation(this.props);
  }
  componentDidUpdate(prevProps) {
    var {
      isActive,
      canBegin,
      attributeName,
      shouldReAnimate,
      to,
      from: currentFrom
    } = this.props;
    var {
      style
    } = this.state;
    if (!canBegin) {
      return;
    }
    if (!isActive) {
      var newState = {
        style: attributeName ? {
          [attributeName]: to
        } : to
      };
      if (this.state && style) {
        if (attributeName && style[attributeName] !== to || !attributeName && style !== to) {
          this.setState(newState);
        }
      }
      return;
    }
    if (isEqual$1(prevProps.to, to) && prevProps.canBegin && prevProps.isActive) {
      return;
    }
    var isTriggered = !prevProps.canBegin || !prevProps.isActive;
    this.manager.stop();
    if (this.stopJSAnimation) {
      this.stopJSAnimation();
    }
    var from = isTriggered || shouldReAnimate ? currentFrom : prevProps.to;
    if (this.state && style) {
      var _newState = {
        style: attributeName ? {
          [attributeName]: from
        } : from
      };
      if (attributeName && style[attributeName] !== from || !attributeName && style !== from) {
        this.setState(_newState);
      }
    }
    this.runAnimation(_objectSpread$u(_objectSpread$u({}, this.props), {}, {
      from,
      begin: 0
    }));
  }
  componentWillUnmount() {
    this.mounted = false;
    var {
      onAnimationEnd
    } = this.props;
    if (this.unSubscribe) {
      this.unSubscribe();
    }
    this.manager.stop();
    if (this.stopJSAnimation) {
      this.stopJSAnimation();
    }
    if (onAnimationEnd) {
      onAnimationEnd();
    }
  }
  handleStyleChange(style) {
    this.changeStyle(style);
  }
  changeStyle(style) {
    if (this.mounted) {
      this.setState({
        style
      });
    }
  }
  runJSAnimation(props) {
    var {
      from,
      to,
      duration,
      easing,
      begin,
      onAnimationEnd,
      onAnimationStart
    } = props;
    var startAnimation = configUpdate(from, to, configEasing(easing), duration, this.changeStyle, this.manager.getTimeoutController());
    var finalStartAnimation = () => {
      this.stopJSAnimation = startAnimation();
    };
    this.manager.start([onAnimationStart, begin, finalStartAnimation, duration, onAnimationEnd]);
  }
  runAnimation(props) {
    var {
      begin,
      duration,
      attributeName,
      to: propsTo,
      easing,
      onAnimationStart,
      onAnimationEnd,
      children
    } = props;
    this.unSubscribe = this.manager.subscribe(this.handleStyleChange);
    if (typeof easing === 'function' || typeof children === 'function' || easing === 'spring') {
      this.runJSAnimation(props);
      return;
    }
    var to = attributeName ? {
      [attributeName]: propsTo
    } : propsTo;
    var transition = getTransitionVal(Object.keys(to), duration, easing);
    this.manager.start([onAnimationStart, begin, _objectSpread$u(_objectSpread$u({}, to), {}, {
      transition
    }), duration, onAnimationEnd]);
  }
  render() {
    var _this$props = this.props,
      {
        children,
        begin,
        duration,
        attributeName,
        easing,
        isActive,
        from,
        to,
        canBegin,
        onAnimationEnd,
        shouldReAnimate,
        onAnimationReStart,
        animationManager
      } = _this$props,
      others = _objectWithoutProperties$n(_this$props, _excluded$n);
    var count = reactExports.Children.count(children);
    var stateStyle = this.state.style;
    if (typeof children === 'function') {
      return children(stateStyle);
    }
    if (!isActive || count === 0 || duration <= 0) {
      return children;
    }
    var cloneContainer = container => {
      var {
        style = {},
        className
      } = container.props;
      var res = /*#__PURE__*/reactExports.cloneElement(container, _objectSpread$u(_objectSpread$u({}, others), {}, {
        style: _objectSpread$u(_objectSpread$u({}, style), stateStyle),
        className
      }));
      return res;
    };
    if (count === 1) {
      // @ts-expect-error TODO - fix the type error
      return cloneContainer(reactExports.Children.only(children));
    }

    // @ts-expect-error TODO - fix the type error
    return /*#__PURE__*/reactExports.createElement("div", null, reactExports.Children.map(children, child => cloneContainer(child)));
  }
}
_defineProperty$y(AnimateImpl, "displayName", 'Animate');
_defineProperty$y(AnimateImpl, "defaultProps", {
  begin: 0,
  duration: 1000,
  attributeName: '',
  easing: 'ease',
  isActive: true,
  canBegin: true,
  onAnimationEnd: () => {},
  onAnimationStart: () => {}
});
var AnimationManagerContext = /*#__PURE__*/reactExports.createContext(null);
function Animate(props) {
  var _ref, _props$animationManag;
  var contextAnimationManager = reactExports.useContext(AnimationManagerContext);
  return /*#__PURE__*/reactExports.createElement(AnimateImpl, _extends$q({}, props, {
    animationManager: (_ref = (_props$animationManag = props.animationManager) !== null && _props$animationManag !== void 0 ? _props$animationManag : contextAnimationManager) !== null && _ref !== void 0 ? _ref : createDefaultAnimationManager()
  }));
}

function _extends$p() { return _extends$p = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$p.apply(null, arguments); }
var getRectanglePath = (x, y, width, height, radius) => {
  var maxRadius = Math.min(Math.abs(width) / 2, Math.abs(height) / 2);
  var ySign = height >= 0 ? 1 : -1;
  var xSign = width >= 0 ? 1 : -1;
  var clockWise = height >= 0 && width >= 0 || height < 0 && width < 0 ? 1 : 0;
  var path;
  if (maxRadius > 0 && radius instanceof Array) {
    var newRadius = [0, 0, 0, 0];
    for (var i = 0, len = 4; i < len; i++) {
      newRadius[i] = radius[i] > maxRadius ? maxRadius : radius[i];
    }
    path = "M".concat(x, ",").concat(y + ySign * newRadius[0]);
    if (newRadius[0] > 0) {
      path += "A ".concat(newRadius[0], ",").concat(newRadius[0], ",0,0,").concat(clockWise, ",").concat(x + xSign * newRadius[0], ",").concat(y);
    }
    path += "L ".concat(x + width - xSign * newRadius[1], ",").concat(y);
    if (newRadius[1] > 0) {
      path += "A ".concat(newRadius[1], ",").concat(newRadius[1], ",0,0,").concat(clockWise, ",\n        ").concat(x + width, ",").concat(y + ySign * newRadius[1]);
    }
    path += "L ".concat(x + width, ",").concat(y + height - ySign * newRadius[2]);
    if (newRadius[2] > 0) {
      path += "A ".concat(newRadius[2], ",").concat(newRadius[2], ",0,0,").concat(clockWise, ",\n        ").concat(x + width - xSign * newRadius[2], ",").concat(y + height);
    }
    path += "L ".concat(x + xSign * newRadius[3], ",").concat(y + height);
    if (newRadius[3] > 0) {
      path += "A ".concat(newRadius[3], ",").concat(newRadius[3], ",0,0,").concat(clockWise, ",\n        ").concat(x, ",").concat(y + height - ySign * newRadius[3]);
    }
    path += 'Z';
  } else if (maxRadius > 0 && radius === +radius && radius > 0) {
    var _newRadius = Math.min(maxRadius, radius);
    path = "M ".concat(x, ",").concat(y + ySign * _newRadius, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x + xSign * _newRadius, ",").concat(y, "\n            L ").concat(x + width - xSign * _newRadius, ",").concat(y, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x + width, ",").concat(y + ySign * _newRadius, "\n            L ").concat(x + width, ",").concat(y + height - ySign * _newRadius, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x + width - xSign * _newRadius, ",").concat(y + height, "\n            L ").concat(x + xSign * _newRadius, ",").concat(y + height, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x, ",").concat(y + height - ySign * _newRadius, " Z");
  } else {
    path = "M ".concat(x, ",").concat(y, " h ").concat(width, " v ").concat(height, " h ").concat(-width, " Z");
  }
  return path;
};
var defaultProps$7 = {
  x: 0,
  y: 0,
  width: 0,
  height: 0,
  // The radius of border
  // The radius of four corners when radius is a number
  // The radius of left-top, right-top, right-bottom, left-bottom when radius is an array
  radius: 0,
  isAnimationActive: false,
  isUpdateAnimationActive: false,
  animationBegin: 0,
  animationDuration: 1500,
  animationEasing: 'ease'
};
var Rectangle = rectangleProps => {
  var props = resolveDefaultProps(rectangleProps, defaultProps$7);
  var pathRef = reactExports.useRef(null);
  var [totalLength, setTotalLength] = reactExports.useState(-1);
  reactExports.useEffect(() => {
    if (pathRef.current && pathRef.current.getTotalLength) {
      try {
        var pathTotalLength = pathRef.current.getTotalLength();
        if (pathTotalLength) {
          setTotalLength(pathTotalLength);
        }
      } catch (_unused) {
        // calculate total length error
      }
    }
  }, []);
  var {
    x,
    y,
    width,
    height,
    radius,
    className
  } = props;
  var {
    animationEasing,
    animationDuration,
    animationBegin,
    isAnimationActive,
    isUpdateAnimationActive
  } = props;
  if (x !== +x || y !== +y || width !== +width || height !== +height || width === 0 || height === 0) {
    return null;
  }
  var layerClass = clsx('recharts-rectangle', className);
  if (!isUpdateAnimationActive) {
    return /*#__PURE__*/reactExports.createElement("path", _extends$p({}, filterProps(props, true), {
      className: layerClass,
      d: getRectanglePath(x, y, width, height, radius)
    }));
  }
  return /*#__PURE__*/reactExports.createElement(Animate, {
    canBegin: totalLength > 0,
    from: {
      width,
      height,
      x,
      y
    },
    to: {
      width,
      height,
      x,
      y
    },
    duration: animationDuration
    // @ts-expect-error TODO - fix the type error
    ,
    animationEasing: animationEasing,
    isActive: isUpdateAnimationActive
  }, _ref => {
    var {
      width: currWidth,
      height: currHeight,
      x: currX,
      y: currY
    } = _ref;
    return /*#__PURE__*/reactExports.createElement(Animate, {
      canBegin: totalLength > 0
      // @ts-expect-error TODO - fix the type error
      ,
      from: "0px ".concat(totalLength === -1 ? 1 : totalLength, "px")
      // @ts-expect-error TODO - fix the type error
      ,
      to: "".concat(totalLength, "px 0px"),
      attributeName: "strokeDasharray",
      begin: animationBegin,
      duration: animationDuration,
      isActive: isAnimationActive,
      easing: animationEasing
    }, /*#__PURE__*/reactExports.createElement("path", _extends$p({}, filterProps(props, true), {
      className: layerClass,
      d: getRectanglePath(currX, currY, currWidth, currHeight, radius),
      ref: pathRef
    })));
  });
};

/**
 * Only applicable for radial layouts
 * @param {Object} activeCoordinate ChartCoordinate
 * @returns {Object} RadialCursorPoints
 */
function getRadialCursorPoints(activeCoordinate) {
  var {
    cx,
    cy,
    radius,
    startAngle,
    endAngle
  } = activeCoordinate;
  var startPoint = polarToCartesian(cx, cy, radius, startAngle);
  var endPoint = polarToCartesian(cx, cy, radius, endAngle);
  return {
    points: [startPoint, endPoint],
    cx,
    cy,
    radius,
    startAngle,
    endAngle
  };
}

function _extends$o() { return _extends$o = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$o.apply(null, arguments); }
var getDeltaAngle$1 = (startAngle, endAngle) => {
  var sign = mathSign(endAngle - startAngle);
  var deltaAngle = Math.min(Math.abs(endAngle - startAngle), 359.999);
  return sign * deltaAngle;
};
var getTangentCircle = _ref => {
  var {
    cx,
    cy,
    radius,
    angle,
    sign,
    isExternal,
    cornerRadius,
    cornerIsExternal
  } = _ref;
  var centerRadius = cornerRadius * (isExternal ? 1 : -1) + radius;
  var theta = Math.asin(cornerRadius / centerRadius) / RADIAN$1;
  var centerAngle = cornerIsExternal ? angle : angle + sign * theta;
  var center = polarToCartesian(cx, cy, centerRadius, centerAngle);
  // The coordinate of point which is tangent to the circle
  var circleTangency = polarToCartesian(cx, cy, radius, centerAngle);
  // The coordinate of point which is tangent to the radius line
  var lineTangencyAngle = cornerIsExternal ? angle - sign * theta : angle;
  var lineTangency = polarToCartesian(cx, cy, centerRadius * Math.cos(theta * RADIAN$1), lineTangencyAngle);
  return {
    center,
    circleTangency,
    lineTangency,
    theta
  };
};
var getSectorPath = _ref2 => {
  var {
    cx,
    cy,
    innerRadius,
    outerRadius,
    startAngle,
    endAngle
  } = _ref2;
  var angle = getDeltaAngle$1(startAngle, endAngle);

  // When the angle of sector equals to 360, star point and end point coincide
  var tempEndAngle = startAngle + angle;
  var outerStartPoint = polarToCartesian(cx, cy, outerRadius, startAngle);
  var outerEndPoint = polarToCartesian(cx, cy, outerRadius, tempEndAngle);
  var path = "M ".concat(outerStartPoint.x, ",").concat(outerStartPoint.y, "\n    A ").concat(outerRadius, ",").concat(outerRadius, ",0,\n    ").concat(+(Math.abs(angle) > 180), ",").concat(+(startAngle > tempEndAngle), ",\n    ").concat(outerEndPoint.x, ",").concat(outerEndPoint.y, "\n  ");
  if (innerRadius > 0) {
    var innerStartPoint = polarToCartesian(cx, cy, innerRadius, startAngle);
    var innerEndPoint = polarToCartesian(cx, cy, innerRadius, tempEndAngle);
    path += "L ".concat(innerEndPoint.x, ",").concat(innerEndPoint.y, "\n            A ").concat(innerRadius, ",").concat(innerRadius, ",0,\n            ").concat(+(Math.abs(angle) > 180), ",").concat(+(startAngle <= tempEndAngle), ",\n            ").concat(innerStartPoint.x, ",").concat(innerStartPoint.y, " Z");
  } else {
    path += "L ".concat(cx, ",").concat(cy, " Z");
  }
  return path;
};
var getSectorWithCorner = _ref3 => {
  var {
    cx,
    cy,
    innerRadius,
    outerRadius,
    cornerRadius,
    forceCornerRadius,
    cornerIsExternal,
    startAngle,
    endAngle
  } = _ref3;
  var sign = mathSign(endAngle - startAngle);
  var {
    circleTangency: soct,
    lineTangency: solt,
    theta: sot
  } = getTangentCircle({
    cx,
    cy,
    radius: outerRadius,
    angle: startAngle,
    sign,
    cornerRadius,
    cornerIsExternal
  });
  var {
    circleTangency: eoct,
    lineTangency: eolt,
    theta: eot
  } = getTangentCircle({
    cx,
    cy,
    radius: outerRadius,
    angle: endAngle,
    sign: -sign,
    cornerRadius,
    cornerIsExternal
  });
  var outerArcAngle = cornerIsExternal ? Math.abs(startAngle - endAngle) : Math.abs(startAngle - endAngle) - sot - eot;
  if (outerArcAngle < 0) {
    if (forceCornerRadius) {
      return "M ".concat(solt.x, ",").concat(solt.y, "\n        a").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,1,").concat(cornerRadius * 2, ",0\n        a").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,1,").concat(-cornerRadius * 2, ",0\n      ");
    }
    return getSectorPath({
      cx,
      cy,
      innerRadius,
      outerRadius,
      startAngle,
      endAngle
    });
  }
  var path = "M ".concat(solt.x, ",").concat(solt.y, "\n    A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign < 0), ",").concat(soct.x, ",").concat(soct.y, "\n    A").concat(outerRadius, ",").concat(outerRadius, ",0,").concat(+(outerArcAngle > 180), ",").concat(+(sign < 0), ",").concat(eoct.x, ",").concat(eoct.y, "\n    A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign < 0), ",").concat(eolt.x, ",").concat(eolt.y, "\n  ");
  if (innerRadius > 0) {
    var {
      circleTangency: sict,
      lineTangency: silt,
      theta: sit
    } = getTangentCircle({
      cx,
      cy,
      radius: innerRadius,
      angle: startAngle,
      sign,
      isExternal: true,
      cornerRadius,
      cornerIsExternal
    });
    var {
      circleTangency: eict,
      lineTangency: eilt,
      theta: eit
    } = getTangentCircle({
      cx,
      cy,
      radius: innerRadius,
      angle: endAngle,
      sign: -sign,
      isExternal: true,
      cornerRadius,
      cornerIsExternal
    });
    var innerArcAngle = cornerIsExternal ? Math.abs(startAngle - endAngle) : Math.abs(startAngle - endAngle) - sit - eit;
    if (innerArcAngle < 0 && cornerRadius === 0) {
      return "".concat(path, "L").concat(cx, ",").concat(cy, "Z");
    }
    path += "L".concat(eilt.x, ",").concat(eilt.y, "\n      A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign < 0), ",").concat(eict.x, ",").concat(eict.y, "\n      A").concat(innerRadius, ",").concat(innerRadius, ",0,").concat(+(innerArcAngle > 180), ",").concat(+(sign > 0), ",").concat(sict.x, ",").concat(sict.y, "\n      A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign < 0), ",").concat(silt.x, ",").concat(silt.y, "Z");
  } else {
    path += "L".concat(cx, ",").concat(cy, "Z");
  }
  return path;
};
var defaultProps$6 = {
  cx: 0,
  cy: 0,
  innerRadius: 0,
  outerRadius: 0,
  startAngle: 0,
  endAngle: 0,
  cornerRadius: 0,
  forceCornerRadius: false,
  cornerIsExternal: false
};
var Sector = sectorProps => {
  var props = resolveDefaultProps(sectorProps, defaultProps$6);
  var {
    cx,
    cy,
    innerRadius,
    outerRadius,
    cornerRadius,
    forceCornerRadius,
    cornerIsExternal,
    startAngle,
    endAngle,
    className
  } = props;
  if (outerRadius < innerRadius || startAngle === endAngle) {
    return null;
  }
  var layerClass = clsx('recharts-sector', className);
  var deltaRadius = outerRadius - innerRadius;
  var cr = getPercentValue(cornerRadius, deltaRadius, 0, true);
  var path;
  if (cr > 0 && Math.abs(startAngle - endAngle) < 360) {
    path = getSectorWithCorner({
      cx,
      cy,
      innerRadius,
      outerRadius,
      cornerRadius: Math.min(cr, deltaRadius / 2),
      forceCornerRadius,
      cornerIsExternal,
      startAngle,
      endAngle
    });
  } else {
    path = getSectorPath({
      cx,
      cy,
      innerRadius,
      outerRadius,
      startAngle,
      endAngle
    });
  }
  return /*#__PURE__*/reactExports.createElement("path", _extends$o({}, filterProps(props, true), {
    className: layerClass,
    d: path
  }));
};

function getCursorPoints(layout, activeCoordinate, offset) {
  var x1, y1, x2, y2;
  if (layout === 'horizontal') {
    x1 = activeCoordinate.x;
    x2 = x1;
    y1 = offset.top;
    y2 = offset.top + offset.height;
  } else if (layout === 'vertical') {
    y1 = activeCoordinate.y;
    y2 = y1;
    x1 = offset.left;
    x2 = offset.left + offset.width;
  } else if (activeCoordinate.cx != null && activeCoordinate.cy != null) {
    if (layout === 'centric') {
      var {
        cx,
        cy,
        innerRadius,
        outerRadius,
        angle
      } = activeCoordinate;
      var innerPoint = polarToCartesian(cx, cy, innerRadius, angle);
      var outerPoint = polarToCartesian(cx, cy, outerRadius, angle);
      x1 = innerPoint.x;
      y1 = innerPoint.y;
      x2 = outerPoint.x;
      y2 = outerPoint.y;
    } else {
      // @ts-expect-error TODO the state is marked as containing Coordinate but actually in polar charts it contains PolarCoordinate, we should keep the polar state separate
      return getRadialCursorPoints(activeCoordinate);
    }
  }
  return [{
    x: x1,
    y: y1
  }, {
    x: x2,
    y: y2
  }];
}

var range$4 = {};

var toFinite = {};

var toNumber = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const isSymbol$1 = isSymbol;

	function toNumber(value) {
	    if (isSymbol$1.isSymbol(value)) {
	        return NaN;
	    }
	    return Number(value);
	}

	exports.toNumber = toNumber; 
} (toNumber));

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const toNumber$1 = toNumber;

	function toFinite(value) {
	    if (!value) {
	        return value === 0 ? value : 0;
	    }
	    value = toNumber$1.toNumber(value);
	    if (value === Infinity || value === -Infinity) {
	        const sign = value < 0 ? -1 : 1;
	        return sign * Number.MAX_VALUE;
	    }
	    return value === value ? value : 0;
	}

	exports.toFinite = toFinite; 
} (toFinite));

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const isIterateeCall$1 = isIterateeCall;
	const toFinite$1 = toFinite;

	function range(start, end, step) {
	    if (step && typeof step !== 'number' && isIterateeCall$1.isIterateeCall(start, end, step)) {
	        end = step = undefined;
	    }
	    start = toFinite$1.toFinite(start);
	    if (end === undefined) {
	        end = start;
	        start = 0;
	    }
	    else {
	        end = toFinite$1.toFinite(end);
	    }
	    step = step === undefined ? (start < end ? 1 : -1) : toFinite$1.toFinite(step);
	    const length = Math.max(Math.ceil((end - start) / (step || 1)), 0);
	    const result = new Array(length);
	    for (let index = 0; index < length; index++) {
	        result[index] = start;
	        start += step;
	    }
	    return result;
	}

	exports.range = range; 
} (range$4));

var range$2 = range$4.range;

const range$3 = /*@__PURE__*/getDefaultExportFromCjs(range$2);

function ascending(a, b) {
  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

function descending(a, b) {
  return a == null || b == null ? NaN
    : b < a ? -1
    : b > a ? 1
    : b >= a ? 0
    : NaN;
}

function bisector(f) {
  let compare1, compare2, delta;

  // If an accessor is specified, promote it to a comparator. In this case we
  // can test whether the search value is (self-) comparable. We can’t do this
  // for a comparator (except for specific, known comparators) because we can’t
  // tell if the comparator is symmetric, and an asymmetric comparator can’t be
  // used to test whether a single value is comparable.
  if (f.length !== 2) {
    compare1 = ascending;
    compare2 = (d, x) => ascending(f(d), x);
    delta = (d, x) => f(d) - x;
  } else {
    compare1 = f === ascending || f === descending ? f : zero$1;
    compare2 = f;
    delta = f;
  }

  function left(a, x, lo = 0, hi = a.length) {
    if (lo < hi) {
      if (compare1(x, x) !== 0) return hi;
      do {
        const mid = (lo + hi) >>> 1;
        if (compare2(a[mid], x) < 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }

  function right(a, x, lo = 0, hi = a.length) {
    if (lo < hi) {
      if (compare1(x, x) !== 0) return hi;
      do {
        const mid = (lo + hi) >>> 1;
        if (compare2(a[mid], x) <= 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }

  function center(a, x, lo = 0, hi = a.length) {
    const i = left(a, x, lo, hi - 1);
    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
  }

  return {left, center, right};
}

function zero$1() {
  return 0;
}

function number$2(x) {
  return x === null ? NaN : +x;
}

function* numbers(values, valueof) {
  {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        yield value;
      }
    }
  }
}

const ascendingBisect = bisector(ascending);
const bisectRight = ascendingBisect.right;
bisector(number$2).center;

class InternMap extends Map {
  constructor(entries, key = keyof) {
    super();
    Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});
    if (entries != null) for (const [key, value] of entries) this.set(key, value);
  }
  get(key) {
    return super.get(intern_get(this, key));
  }
  has(key) {
    return super.has(intern_get(this, key));
  }
  set(key, value) {
    return super.set(intern_set(this, key), value);
  }
  delete(key) {
    return super.delete(intern_delete(this, key));
  }
}

function intern_get({_intern, _key}, value) {
  const key = _key(value);
  return _intern.has(key) ? _intern.get(key) : value;
}

function intern_set({_intern, _key}, value) {
  const key = _key(value);
  if (_intern.has(key)) return _intern.get(key);
  _intern.set(key, value);
  return value;
}

function intern_delete({_intern, _key}, value) {
  const key = _key(value);
  if (_intern.has(key)) {
    value = _intern.get(key);
    _intern.delete(key);
  }
  return value;
}

function keyof(value) {
  return value !== null && typeof value === "object" ? value.valueOf() : value;
}

function compareDefined(compare = ascending) {
  if (compare === ascending) return ascendingDefined;
  if (typeof compare !== "function") throw new TypeError("compare is not a function");
  return (a, b) => {
    const x = compare(a, b);
    if (x || x === 0) return x;
    return (compare(b, b) === 0) - (compare(a, a) === 0);
  };
}

function ascendingDefined(a, b) {
  return (a == null || !(a >= a)) - (b == null || !(b >= b)) || (a < b ? -1 : a > b ? 1 : 0);
}

const e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2);

function tickSpec(start, stop, count) {
  const step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log10(step)),
      error = step / Math.pow(10, power),
      factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;
  let i1, i2, inc;
  if (power < 0) {
    inc = Math.pow(10, -power) / factor;
    i1 = Math.round(start * inc);
    i2 = Math.round(stop * inc);
    if (i1 / inc < start) ++i1;
    if (i2 / inc > stop) --i2;
    inc = -inc;
  } else {
    inc = Math.pow(10, power) * factor;
    i1 = Math.round(start / inc);
    i2 = Math.round(stop / inc);
    if (i1 * inc < start) ++i1;
    if (i2 * inc > stop) --i2;
  }
  if (i2 < i1 && 0.5 <= count && count < 2) return tickSpec(start, stop, count * 2);
  return [i1, i2, inc];
}

function ticks(start, stop, count) {
  stop = +stop, start = +start, count = +count;
  if (!(count > 0)) return [];
  if (start === stop) return [start];
  const reverse = stop < start, [i1, i2, inc] = reverse ? tickSpec(stop, start, count) : tickSpec(start, stop, count);
  if (!(i2 >= i1)) return [];
  const n = i2 - i1 + 1, ticks = new Array(n);
  if (reverse) {
    if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) / -inc;
    else for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) * inc;
  } else {
    if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) / -inc;
    else for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) * inc;
  }
  return ticks;
}

function tickIncrement(start, stop, count) {
  stop = +stop, start = +start, count = +count;
  return tickSpec(start, stop, count)[2];
}

function tickStep(start, stop, count) {
  stop = +stop, start = +start, count = +count;
  const reverse = stop < start, inc = reverse ? tickIncrement(stop, start, count) : tickIncrement(start, stop, count);
  return (reverse ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
}

function max(values, valueof) {
  let max;
  {
    for (const value of values) {
      if (value != null
          && (max < value || (max === undefined && value >= value))) {
        max = value;
      }
    }
  }
  return max;
}

function min(values, valueof) {
  let min;
  {
    for (const value of values) {
      if (value != null
          && (min > value || (min === undefined && value >= value))) {
        min = value;
      }
    }
  }
  return min;
}

// Based on https://github.com/mourner/quickselect
// ISC license, Copyright 2018 Vladimir Agafonkin.
function quickselect(array, k, left = 0, right = Infinity, compare) {
  k = Math.floor(k);
  left = Math.floor(Math.max(0, left));
  right = Math.floor(Math.min(array.length - 1, right));

  if (!(left <= k && k <= right)) return array;

  compare = compare === undefined ? ascendingDefined : compareDefined(compare);

  while (right > left) {
    if (right - left > 600) {
      const n = right - left + 1;
      const m = k - left + 1;
      const z = Math.log(n);
      const s = 0.5 * Math.exp(2 * z / 3);
      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
      quickselect(array, k, newLeft, newRight, compare);
    }

    const t = array[k];
    let i = left;
    let j = right;

    swap(array, left, k);
    if (compare(array[right], t) > 0) swap(array, left, right);

    while (i < j) {
      swap(array, i, j), ++i, --j;
      while (compare(array[i], t) < 0) ++i;
      while (compare(array[j], t) > 0) --j;
    }

    if (compare(array[left], t) === 0) swap(array, left, j);
    else ++j, swap(array, j, right);

    if (j <= k) left = j + 1;
    if (k <= j) right = j - 1;
  }

  return array;
}

function swap(array, i, j) {
  const t = array[i];
  array[i] = array[j];
  array[j] = t;
}

function quantile$1(values, p, valueof) {
  values = Float64Array.from(numbers(values));
  if (!(n = values.length) || isNaN(p = +p)) return;
  if (p <= 0 || n < 2) return min(values);
  if (p >= 1) return max(values);
  var n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),
      value1 = min(values.subarray(i0 + 1));
  return value0 + (value1 - value0) * (i - i0);
}

function quantileSorted(values, p, valueof = number$2) {
  if (!(n = values.length) || isNaN(p = +p)) return;
  if (p <= 0 || n < 2) return +valueof(values[0], 0, values);
  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
  var n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      value0 = +valueof(values[i0], i0, values),
      value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i - i0);
}

function range$1(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
}

function initRange(domain, range) {
  switch (arguments.length) {
    case 0: break;
    case 1: this.range(domain); break;
    default: this.range(range).domain(domain); break;
  }
  return this;
}

function initInterpolator(domain, interpolator) {
  switch (arguments.length) {
    case 0: break;
    case 1: {
      if (typeof domain === "function") this.interpolator(domain);
      else this.range(domain);
      break;
    }
    default: {
      this.domain(domain);
      if (typeof interpolator === "function") this.interpolator(interpolator);
      else this.range(interpolator);
      break;
    }
  }
  return this;
}

const implicit = Symbol("implicit");

function ordinal() {
  var index = new InternMap(),
      domain = [],
      range = [],
      unknown = implicit;

  function scale(d) {
    let i = index.get(d);
    if (i === undefined) {
      if (unknown !== implicit) return unknown;
      index.set(d, i = domain.push(d) - 1);
    }
    return range[i % range.length];
  }

  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [], index = new InternMap();
    for (const value of _) {
      if (index.has(value)) continue;
      index.set(value, domain.push(value) - 1);
    }
    return scale;
  };

  scale.range = function(_) {
    return arguments.length ? (range = Array.from(_), scale) : range.slice();
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function() {
    return ordinal(domain, range).unknown(unknown);
  };

  initRange.apply(scale, arguments);

  return scale;
}

function band() {
  var scale = ordinal().unknown(undefined),
      domain = scale.domain,
      ordinalRange = scale.range,
      r0 = 0,
      r1 = 1,
      step,
      bandwidth,
      round = false,
      paddingInner = 0,
      paddingOuter = 0,
      align = 0.5;

  delete scale.unknown;

  function rescale() {
    var n = domain().length,
        reverse = r1 < r0,
        start = reverse ? r1 : r0,
        stop = reverse ? r0 : r1;
    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round) step = Math.floor(step);
    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = range$1(n).map(function(i) { return start + step * i; });
    return ordinalRange(reverse ? values.reverse() : values);
  }

  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.range = function(_) {
    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
  };

  scale.rangeRound = function(_) {
    return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();
  };

  scale.bandwidth = function() {
    return bandwidth;
  };

  scale.step = function() {
    return step;
  };

  scale.round = function(_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };

  scale.padding = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
  };

  scale.paddingInner = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
  };

  scale.paddingOuter = function(_) {
    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
  };

  scale.align = function(_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };

  scale.copy = function() {
    return band(domain(), [r0, r1])
        .round(round)
        .paddingInner(paddingInner)
        .paddingOuter(paddingOuter)
        .align(align);
  };

  return initRange.apply(rescale(), arguments);
}

function pointish(scale) {
  var copy = scale.copy;

  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;

  scale.copy = function() {
    return pointish(copy());
  };

  return scale;
}

function point() {
  return pointish(band.apply(null, arguments).paddingInner(1));
}

function define(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}

function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition) prototype[key] = definition[key];
  return prototype;
}

function Color() {}

var darker = 0.7;
var brighter = 1 / darker;

var reI = "\\s*([+-]?\\d+)\\s*",
    reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",
    reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
    reHex = /^#([0-9a-f]{3,8})$/,
    reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`),
    reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`),
    reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`),
    reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`),
    reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`),
    reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);

var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};

define(Color, color, {
  copy(channels) {
    return Object.assign(new this.constructor, this, channels);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: color_formatHex, // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHex8: color_formatHex8,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});

function color_formatHex() {
  return this.rgb().formatHex();
}

function color_formatHex8() {
  return this.rgb().formatHex8();
}

function color_formatHsl() {
  return hslConvert(this).formatHsl();
}

function color_formatRgb() {
  return this.rgb().formatRgb();
}

function color(format) {
  var m, l;
  format = (format + "").trim().toLowerCase();
  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00
      : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
      : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000
      : null) // invalid hex
      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
      : null;
}

function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}

function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb;
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}

function rgb$1(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}

function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}

define(Rgb, rgb$1, extend(Color, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
  },
  displayable() {
    return (-0.5 <= this.r && this.r < 255.5)
        && (-0.5 <= this.g && this.g < 255.5)
        && (-0.5 <= this.b && this.b < 255.5)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex, // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatHex8: rgb_formatHex8,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));

function rgb_formatHex() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}

function rgb_formatHex8() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}

function rgb_formatRgb() {
  const a = clampa(this.opacity);
  return `${a === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a === 1 ? ")" : `, ${a})`}`;
}

function clampa(opacity) {
  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}

function clampi(value) {
  return Math.max(0, Math.min(255, Math.round(value) || 0));
}

function hex(value) {
  value = clampi(value);
  return (value < 16 ? "0" : "") + value.toString(16);
}

function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;
  else if (l <= 0 || l >= 1) h = s = NaN;
  else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}

function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl;
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;
  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;
    else if (g === max) h = (b - r) / s + 2;
    else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}

function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

define(Hsl, hsl, extend(Color, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb() {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
      hsl2rgb(h, m1, m2),
      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
      this.opacity
    );
  },
  clamp() {
    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
        && (0 <= this.l && this.l <= 1)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl() {
    const a = clampa(this.opacity);
    return `${a === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a === 1 ? ")" : `, ${a})`}`;
  }
}));

function clamph(value) {
  value = (value || 0) % 360;
  return value < 0 ? value + 360 : value;
}

function clampt(value) {
  return Math.max(0, Math.min(1, value || 0));
}

/* From FvD 13.37, CSS Color Module Level 3 */
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60
      : h < 180 ? m2
      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
      : m1) * 255;
}

const constant = x => () => x;

function linear$1(a, d) {
  return function(t) {
    return a + t * d;
  };
}

function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
    return Math.pow(a + t * b, y);
  };
}

function gamma(y) {
  return (y = +y) === 1 ? nogamma : function(a, b) {
    return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);
  };
}

function nogamma(a, b) {
  var d = b - a;
  return d ? linear$1(a, d) : constant(isNaN(a) ? b : a);
}

const rgb = (function rgbGamma(y) {
  var color = gamma(y);

  function rgb(start, end) {
    var r = color((start = rgb$1(start)).r, (end = rgb$1(end)).r),
        g = color(start.g, end.g),
        b = color(start.b, end.b),
        opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb.gamma = rgbGamma;

  return rgb;
})(1);

function numberArray(a, b) {
  if (!b) b = [];
  var n = a ? Math.min(b.length, a.length) : 0,
      c = b.slice(),
      i;
  return function(t) {
    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;
    return c;
  };
}

function isNumberArray(x) {
  return ArrayBuffer.isView(x) && !(x instanceof DataView);
}

function genericArray(a, b) {
  var nb = b ? b.length : 0,
      na = a ? Math.min(nb, a.length) : 0,
      x = new Array(na),
      c = new Array(nb),
      i;

  for (i = 0; i < na; ++i) x[i] = interpolate(a[i], b[i]);
  for (; i < nb; ++i) c[i] = b[i];

  return function(t) {
    for (i = 0; i < na; ++i) c[i] = x[i](t);
    return c;
  };
}

function date$1(a, b) {
  var d = new Date;
  return a = +a, b = +b, function(t) {
    return d.setTime(a * (1 - t) + b * t), d;
  };
}

function interpolateNumber(a, b) {
  return a = +a, b = +b, function(t) {
    return a * (1 - t) + b * t;
  };
}

function object(a, b) {
  var i = {},
      c = {},
      k;

  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};

  for (k in b) {
    if (k in a) {
      i[k] = interpolate(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }

  return function(t) {
    for (k in i) c[k] = i[k](t);
    return c;
  };
}

var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    reB = new RegExp(reA.source, "g");

function zero(b) {
  return function() {
    return b;
  };
}

function one(b) {
  return function(t) {
    return b(t) + "";
  };
}

function string(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
      am, // current match in a
      bm, // current match in b
      bs, // string preceding current number in b, if any
      i = -1, // index in s
      s = [], // string constants and placeholders
      q = []; // number interpolators

  // Coerce inputs to strings.
  a = a + "", b = b + "";

  // Interpolate pairs of numbers in a & b.
  while ((am = reA.exec(a))
      && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) { // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else { // interpolate non-matching numbers
      s[++i] = null;
      q.push({i: i, x: interpolateNumber(am, bm)});
    }
    bi = reB.lastIndex;
  }

  // Add remains of b.
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  }

  // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.
  return s.length < 2 ? (q[0]
      ? one(q[0].x)
      : zero(b))
      : (b = q.length, function(t) {
          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
          return s.join("");
        });
}

function interpolate(a, b) {
  var t = typeof b, c;
  return b == null || t === "boolean" ? constant(b)
      : (t === "number" ? interpolateNumber
      : t === "string" ? ((c = color(b)) ? (b = c, rgb) : string)
      : b instanceof color ? rgb
      : b instanceof Date ? date$1
      : isNumberArray(b) ? numberArray
      : Array.isArray(b) ? genericArray
      : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object
      : interpolateNumber)(a, b);
}

function interpolateRound(a, b) {
  return a = +a, b = +b, function(t) {
    return Math.round(a * (1 - t) + b * t);
  };
}

function piecewise(interpolate$1, values) {
  if (values === undefined) values = interpolate$1, interpolate$1 = interpolate;
  var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);
  while (i < n) I[i] = interpolate$1(v, v = values[++i]);
  return function(t) {
    var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
    return I[i](t - i);
  };
}

function constants(x) {
  return function() {
    return x;
  };
}

function number$1(x) {
  return +x;
}

var unit = [0, 1];

function identity$3(x) {
  return x;
}

function normalize(a, b) {
  return (b -= (a = +a))
      ? function(x) { return (x - a) / b; }
      : constants(isNaN(b) ? NaN : 0.5);
}

function clamper(a, b) {
  var t;
  if (a > b) t = a, a = b, b = t;
  return function(x) { return Math.max(a, Math.min(b, x)); };
}

// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
function bimap(domain, range, interpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function(x) { return r0(d0(x)); };
}

function polymap(domain, range, interpolate) {
  var j = Math.min(domain.length, range.length) - 1,
      d = new Array(j),
      r = new Array(j),
      i = -1;

  // Reverse descending domains.
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }

  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range[i], range[i + 1]);
  }

  return function(x) {
    var i = bisectRight(domain, x, 1, j) - 1;
    return r[i](d[i](x));
  };
}

function copy$1(source, target) {
  return target
      .domain(source.domain())
      .range(source.range())
      .interpolate(source.interpolate())
      .clamp(source.clamp())
      .unknown(source.unknown());
}

function transformer$2() {
  var domain = unit,
      range = unit,
      interpolate$1 = interpolate,
      transform,
      untransform,
      unknown,
      clamp = identity$3,
      piecewise,
      output,
      input;

  function rescale() {
    var n = Math.min(domain.length, range.length);
    if (clamp !== identity$3) clamp = clamper(domain[0], domain[n - 1]);
    piecewise = n > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }

  function scale(x) {
    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate$1)))(transform(clamp(x)));
  }

  scale.invert = function(y) {
    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));
  };

  scale.domain = function(_) {
    return arguments.length ? (domain = Array.from(_, number$1), rescale()) : domain.slice();
  };

  scale.range = function(_) {
    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
  };

  scale.rangeRound = function(_) {
    return range = Array.from(_), interpolate$1 = interpolateRound, rescale();
  };

  scale.clamp = function(_) {
    return arguments.length ? (clamp = _ ? true : identity$3, rescale()) : clamp !== identity$3;
  };

  scale.interpolate = function(_) {
    return arguments.length ? (interpolate$1 = _, rescale()) : interpolate$1;
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function(t, u) {
    transform = t, untransform = u;
    return rescale();
  };
}

function continuous() {
  return transformer$2()(identity$3, identity$3);
}

function formatDecimal(x) {
  return Math.abs(x = Math.round(x)) >= 1e21
      ? x.toLocaleString("en").replace(/,/g, "")
      : x.toString(10);
}

// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimalParts(1.23) returns ["123", 0].
function formatDecimalParts(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
  var i, coefficient = x.slice(0, i);

  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x.slice(i + 1)
  ];
}

function exponent(x) {
  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
}

function formatGroup(grouping, thousands) {
  return function(value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
}

function formatNumerals(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}

// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}

formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

function FormatSpecifier(specifier) {
  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
  this.align = specifier.align === undefined ? ">" : specifier.align + "";
  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === undefined ? undefined : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === undefined ? "" : specifier.type + "";
}

FormatSpecifier.prototype.toString = function() {
  return this.fill
      + this.align
      + this.sign
      + this.symbol
      + (this.zero ? "0" : "")
      + (this.width === undefined ? "" : Math.max(1, this.width | 0))
      + (this.comma ? "," : "")
      + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0))
      + (this.trim ? "~" : "")
      + this.type;
};

// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
function formatTrim(s) {
  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s[i]) {
      case ".": i0 = i1 = i; break;
      case "0": if (i0 === 0) i0 = i; i1 = i; break;
      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;
    }
  }
  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}

var prefixExponent;

function formatPrefixAuto(x, p) {
  var d = formatDecimalParts(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1],
      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length;
  return i === n ? coefficient
      : i > n ? coefficient + new Array(i - n + 1).join("0")
      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
      : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!
}

function formatRounded(x, p) {
  var d = formatDecimalParts(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
      : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

const formatTypes = {
  "%": (x, p) => (x * 100).toFixed(p),
  "b": (x) => Math.round(x).toString(2),
  "c": (x) => x + "",
  "d": formatDecimal,
  "e": (x, p) => x.toExponential(p),
  "f": (x, p) => x.toFixed(p),
  "g": (x, p) => x.toPrecision(p),
  "o": (x) => Math.round(x).toString(8),
  "p": (x, p) => formatRounded(x * 100, p),
  "r": formatRounded,
  "s": formatPrefixAuto,
  "X": (x) => Math.round(x).toString(16).toUpperCase(),
  "x": (x) => Math.round(x).toString(16)
};

function identity$2(x) {
  return x;
}

var map$1 = Array.prototype.map,
    prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

function formatLocale$1(locale) {
  var group = locale.grouping === undefined || locale.thousands === undefined ? identity$2 : formatGroup(map$1.call(locale.grouping, Number), locale.thousands + ""),
      currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
      currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
      decimal = locale.decimal === undefined ? "." : locale.decimal + "",
      numerals = locale.numerals === undefined ? identity$2 : formatNumerals(map$1.call(locale.numerals, String)),
      percent = locale.percent === undefined ? "%" : locale.percent + "",
      minus = locale.minus === undefined ? "−" : locale.minus + "",
      nan = locale.nan === undefined ? "NaN" : locale.nan + "";

  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);

    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        trim = specifier.trim,
        type = specifier.type;

    // The "n" type is an alias for ",g".
    if (type === "n") comma = true, type = "g";

    // The "" type, and any invalid type, is an alias for ".12~g".
    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g";

    // If zero fill is specified, padding goes after sign and before digits.
    if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

    // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";

    // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?
    var formatType = formatTypes[type],
        maybeSuffix = /[defgprs%]/.test(type);

    // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].
    precision = precision === undefined ? 6
        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
        : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i, n, c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;

        // Determine the sign. -0 is not less than 0, but 1 / -0 is!
        var valueNegative = value < 0 || 1 / value < 0;

        // Perform the initial formatting.
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);

        // Trim insignificant zeros.
        if (trim) value = formatTrim(value);

        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
        if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;

        // Compute the prefix and suffix.
        valuePrefix = (valueNegative ? (sign === "(" ? sign : minus) : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

        // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }

      // If the fill character is not "0", grouping is applied before padding.
      if (comma && !zero) value = group(value, Infinity);

      // Compute the padding.
      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : "";

      // If the fill character is "0", grouping is applied after padding.
      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

      // Reconstruct the final output based on the desired alignment.
      switch (align) {
        case "<": value = valuePrefix + value + valueSuffix + padding; break;
        case "=": value = valuePrefix + padding + value + valueSuffix; break;
        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
        default: value = padding + valuePrefix + value + valueSuffix; break;
      }

      return numerals(value);
    }

    format.toString = function() {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function(value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
}

var locale$1;
var format;
var formatPrefix;

defaultLocale$1({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});

function defaultLocale$1(definition) {
  locale$1 = formatLocale$1(definition);
  format = locale$1.format;
  formatPrefix = locale$1.formatPrefix;
  return locale$1;
}

function precisionFixed(step) {
  return Math.max(0, -exponent(Math.abs(step)));
}

function precisionPrefix(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
}

function precisionRound(step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, exponent(max) - exponent(step)) + 1;
}

function tickFormat(start, stop, count, specifier) {
  var step = tickStep(start, stop, count),
      precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}

function linearish(scale) {
  var domain = scale.domain;

  scale.ticks = function(count) {
    var d = domain();
    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
  };

  scale.tickFormat = function(count, specifier) {
    var d = domain();
    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
  };

  scale.nice = function(count) {
    if (count == null) count = 10;

    var d = domain();
    var i0 = 0;
    var i1 = d.length - 1;
    var start = d[i0];
    var stop = d[i1];
    var prestep;
    var step;
    var maxIter = 10;

    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }
    
    while (maxIter-- > 0) {
      step = tickIncrement(start, stop, count);
      if (step === prestep) {
        d[i0] = start;
        d[i1] = stop;
        return domain(d);
      } else if (step > 0) {
        start = Math.floor(start / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start = Math.ceil(start * step) / step;
        stop = Math.floor(stop * step) / step;
      } else {
        break;
      }
      prestep = step;
    }

    return scale;
  };

  return scale;
}

function linear() {
  var scale = continuous();

  scale.copy = function() {
    return copy$1(scale, linear());
  };

  initRange.apply(scale, arguments);

  return linearish(scale);
}

function identity$1(domain) {
  var unknown;

  function scale(x) {
    return x == null || isNaN(x = +x) ? unknown : x;
  }

  scale.invert = scale;

  scale.domain = scale.range = function(_) {
    return arguments.length ? (domain = Array.from(_, number$1), scale) : domain.slice();
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function() {
    return identity$1(domain).unknown(unknown);
  };

  domain = arguments.length ? Array.from(domain, number$1) : [0, 1];

  return linearish(scale);
}

function nice(domain, interval) {
  domain = domain.slice();

  var i0 = 0,
      i1 = domain.length - 1,
      x0 = domain[i0],
      x1 = domain[i1],
      t;

  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }

  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}

function transformLog(x) {
  return Math.log(x);
}

function transformExp(x) {
  return Math.exp(x);
}

function transformLogn(x) {
  return -Math.log(-x);
}

function transformExpn(x) {
  return -Math.exp(-x);
}

function pow10(x) {
  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}

function powp(base) {
  return base === 10 ? pow10
      : base === Math.E ? Math.exp
      : x => Math.pow(base, x);
}

function logp(base) {
  return base === Math.E ? Math.log
      : base === 10 && Math.log10
      || base === 2 && Math.log2
      || (base = Math.log(base), x => Math.log(x) / base);
}

function reflect(f) {
  return (x, k) => -f(-x, k);
}

function loggish(transform) {
  const scale = transform(transformLog, transformExp);
  const domain = scale.domain;
  let base = 10;
  let logs;
  let pows;

  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform(transformLogn, transformExpn);
    } else {
      transform(transformLog, transformExp);
    }
    return scale;
  }

  scale.base = function(_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };

  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.ticks = count => {
    const d = domain();
    let u = d[0];
    let v = d[d.length - 1];
    const r = v < u;

    if (r) ([u, v] = [v, u]);

    let i = logs(u);
    let j = logs(v);
    let k;
    let t;
    const n = count == null ? 10 : +count;
    let z = [];

    if (!(base % 1) && j - i < n) {
      i = Math.floor(i), j = Math.ceil(j);
      if (u > 0) for (; i <= j; ++i) {
        for (k = 1; k < base; ++k) {
          t = i < 0 ? k / pows(-i) : k * pows(i);
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      } else for (; i <= j; ++i) {
        for (k = base - 1; k >= 1; --k) {
          t = i > 0 ? k / pows(-i) : k * pows(i);
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      }
      if (z.length * 2 < n) z = ticks(u, v, n);
    } else {
      z = ticks(i, j, Math.min(j - i, n)).map(pows);
    }
    return r ? z.reverse() : z;
  };

  scale.tickFormat = (count, specifier) => {
    if (count == null) count = 10;
    if (specifier == null) specifier = base === 10 ? "s" : ",";
    if (typeof specifier !== "function") {
      if (!(base % 1) && (specifier = formatSpecifier(specifier)).precision == null) specifier.trim = true;
      specifier = format(specifier);
    }
    if (count === Infinity) return specifier;
    const k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
    return d => {
      let i = d / pows(Math.round(logs(d)));
      if (i * base < base - 0.5) i *= base;
      return i <= k ? specifier(d) : "";
    };
  };

  scale.nice = () => {
    return domain(nice(domain(), {
      floor: x => pows(Math.floor(logs(x))),
      ceil: x => pows(Math.ceil(logs(x)))
    }));
  };

  return scale;
}

function log() {
  const scale = loggish(transformer$2()).domain([1, 10]);
  scale.copy = () => copy$1(scale, log()).base(scale.base());
  initRange.apply(scale, arguments);
  return scale;
}

function transformSymlog(c) {
  return function(x) {
    return Math.sign(x) * Math.log1p(Math.abs(x / c));
  };
}

function transformSymexp(c) {
  return function(x) {
    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
  };
}

function symlogish(transform) {
  var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));

  scale.constant = function(_) {
    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
  };

  return linearish(scale);
}

function symlog() {
  var scale = symlogish(transformer$2());

  scale.copy = function() {
    return copy$1(scale, symlog()).constant(scale.constant());
  };

  return initRange.apply(scale, arguments);
}

function transformPow(exponent) {
  return function(x) {
    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
  };
}

function transformSqrt(x) {
  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
}

function transformSquare(x) {
  return x < 0 ? -x * x : x * x;
}

function powish(transform) {
  var scale = transform(identity$3, identity$3),
      exponent = 1;

  function rescale() {
    return exponent === 1 ? transform(identity$3, identity$3)
        : exponent === 0.5 ? transform(transformSqrt, transformSquare)
        : transform(transformPow(exponent), transformPow(1 / exponent));
  }

  scale.exponent = function(_) {
    return arguments.length ? (exponent = +_, rescale()) : exponent;
  };

  return linearish(scale);
}

function pow() {
  var scale = powish(transformer$2());

  scale.copy = function() {
    return copy$1(scale, pow()).exponent(scale.exponent());
  };

  initRange.apply(scale, arguments);

  return scale;
}

function sqrt() {
  return pow.apply(null, arguments).exponent(0.5);
}

function square(x) {
  return Math.sign(x) * x * x;
}

function unsquare(x) {
  return Math.sign(x) * Math.sqrt(Math.abs(x));
}

function radial() {
  var squared = continuous(),
      range = [0, 1],
      round = false,
      unknown;

  function scale(x) {
    var y = unsquare(squared(x));
    return isNaN(y) ? unknown : round ? Math.round(y) : y;
  }

  scale.invert = function(y) {
    return squared.invert(square(y));
  };

  scale.domain = function(_) {
    return arguments.length ? (squared.domain(_), scale) : squared.domain();
  };

  scale.range = function(_) {
    return arguments.length ? (squared.range((range = Array.from(_, number$1)).map(square)), scale) : range.slice();
  };

  scale.rangeRound = function(_) {
    return scale.range(_).round(true);
  };

  scale.round = function(_) {
    return arguments.length ? (round = !!_, scale) : round;
  };

  scale.clamp = function(_) {
    return arguments.length ? (squared.clamp(_), scale) : squared.clamp();
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function() {
    return radial(squared.domain(), range)
        .round(round)
        .clamp(squared.clamp())
        .unknown(unknown);
  };

  initRange.apply(scale, arguments);

  return linearish(scale);
}

function quantile() {
  var domain = [],
      range = [],
      thresholds = [],
      unknown;

  function rescale() {
    var i = 0, n = Math.max(1, range.length);
    thresholds = new Array(n - 1);
    while (++i < n) thresholds[i - 1] = quantileSorted(domain, i / n);
    return scale;
  }

  function scale(x) {
    return x == null || isNaN(x = +x) ? unknown : range[bisectRight(thresholds, x)];
  }

  scale.invertExtent = function(y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN] : [
      i > 0 ? thresholds[i - 1] : domain[0],
      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
    ];
  };

  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [];
    for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);
    domain.sort(ascending);
    return rescale();
  };

  scale.range = function(_) {
    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.quantiles = function() {
    return thresholds.slice();
  };

  scale.copy = function() {
    return quantile()
        .domain(domain)
        .range(range)
        .unknown(unknown);
  };

  return initRange.apply(scale, arguments);
}

function quantize() {
  var x0 = 0,
      x1 = 1,
      n = 1,
      domain = [0.5],
      range = [0, 1],
      unknown;

  function scale(x) {
    return x != null && x <= x ? range[bisectRight(domain, x, 0, n)] : unknown;
  }

  function rescale() {
    var i = -1;
    domain = new Array(n);
    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
    return scale;
  }

  scale.domain = function(_) {
    return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];
  };

  scale.range = function(_) {
    return arguments.length ? (n = (range = Array.from(_)).length - 1, rescale()) : range.slice();
  };

  scale.invertExtent = function(y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN]
        : i < 1 ? [x0, domain[0]]
        : i >= n ? [domain[n - 1], x1]
        : [domain[i - 1], domain[i]];
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : scale;
  };

  scale.thresholds = function() {
    return domain.slice();
  };

  scale.copy = function() {
    return quantize()
        .domain([x0, x1])
        .range(range)
        .unknown(unknown);
  };

  return initRange.apply(linearish(scale), arguments);
}

function threshold() {
  var domain = [0.5],
      range = [0, 1],
      unknown,
      n = 1;

  function scale(x) {
    return x != null && x <= x ? range[bisectRight(domain, x, 0, n)] : unknown;
  }

  scale.domain = function(_) {
    return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
  };

  scale.range = function(_) {
    return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
  };

  scale.invertExtent = function(y) {
    var i = range.indexOf(y);
    return [domain[i - 1], domain[i]];
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function() {
    return threshold()
        .domain(domain)
        .range(range)
        .unknown(unknown);
  };

  return initRange.apply(scale, arguments);
}

const t0 = new Date, t1 = new Date;

function timeInterval(floori, offseti, count, field) {

  function interval(date) {
    return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;
  }

  interval.floor = (date) => {
    return floori(date = new Date(+date)), date;
  };

  interval.ceil = (date) => {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };

  interval.round = (date) => {
    const d0 = interval(date), d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };

  interval.offset = (date, step) => {
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };

  interval.range = (start, stop, step) => {
    const range = [];
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
    let previous;
    do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
    while (previous < start && start < stop);
    return range;
  };

  interval.filter = (test) => {
    return timeInterval((date) => {
      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
    }, (date, step) => {
      if (date >= date) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
        } else while (--step >= 0) {
          while (offseti(date, 1), !test(date)) {} // eslint-disable-line no-empty
        }
      }
    });
  };

  if (count) {
    interval.count = (start, end) => {
      t0.setTime(+start), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count(t0, t1));
    };

    interval.every = (step) => {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null
          : !(step > 1) ? interval
          : interval.filter(field
              ? (d) => field(d) % step === 0
              : (d) => interval.count(0, d) % step === 0);
    };
  }

  return interval;
}

const millisecond = timeInterval(() => {
  // noop
}, (date, step) => {
  date.setTime(+date + step);
}, (start, end) => {
  return end - start;
});

// An optimized implementation for this simple case.
millisecond.every = (k) => {
  k = Math.floor(k);
  if (!isFinite(k) || !(k > 0)) return null;
  if (!(k > 1)) return millisecond;
  return timeInterval((date) => {
    date.setTime(Math.floor(date / k) * k);
  }, (date, step) => {
    date.setTime(+date + step * k);
  }, (start, end) => {
    return (end - start) / k;
  });
};

millisecond.range;

const durationSecond = 1000;
const durationMinute = durationSecond * 60;
const durationHour = durationMinute * 60;
const durationDay = durationHour * 24;
const durationWeek = durationDay * 7;
const durationMonth = durationDay * 30;
const durationYear = durationDay * 365;

const second = timeInterval((date) => {
  date.setTime(date - date.getMilliseconds());
}, (date, step) => {
  date.setTime(+date + step * durationSecond);
}, (start, end) => {
  return (end - start) / durationSecond;
}, (date) => {
  return date.getUTCSeconds();
});

second.range;

const timeMinute = timeInterval((date) => {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
}, (date, step) => {
  date.setTime(+date + step * durationMinute);
}, (start, end) => {
  return (end - start) / durationMinute;
}, (date) => {
  return date.getMinutes();
});

timeMinute.range;

const utcMinute = timeInterval((date) => {
  date.setUTCSeconds(0, 0);
}, (date, step) => {
  date.setTime(+date + step * durationMinute);
}, (start, end) => {
  return (end - start) / durationMinute;
}, (date) => {
  return date.getUTCMinutes();
});

utcMinute.range;

const timeHour = timeInterval((date) => {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
}, (date, step) => {
  date.setTime(+date + step * durationHour);
}, (start, end) => {
  return (end - start) / durationHour;
}, (date) => {
  return date.getHours();
});

timeHour.range;

const utcHour = timeInterval((date) => {
  date.setUTCMinutes(0, 0, 0);
}, (date, step) => {
  date.setTime(+date + step * durationHour);
}, (start, end) => {
  return (end - start) / durationHour;
}, (date) => {
  return date.getUTCHours();
});

utcHour.range;

const timeDay = timeInterval(
  date => date.setHours(0, 0, 0, 0),
  (date, step) => date.setDate(date.getDate() + step),
  (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,
  date => date.getDate() - 1
);

timeDay.range;

const utcDay = timeInterval((date) => {
  date.setUTCHours(0, 0, 0, 0);
}, (date, step) => {
  date.setUTCDate(date.getUTCDate() + step);
}, (start, end) => {
  return (end - start) / durationDay;
}, (date) => {
  return date.getUTCDate() - 1;
});

utcDay.range;

const unixDay = timeInterval((date) => {
  date.setUTCHours(0, 0, 0, 0);
}, (date, step) => {
  date.setUTCDate(date.getUTCDate() + step);
}, (start, end) => {
  return (end - start) / durationDay;
}, (date) => {
  return Math.floor(date / durationDay);
});

unixDay.range;

function timeWeekday(i) {
  return timeInterval((date) => {
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
    date.setHours(0, 0, 0, 0);
  }, (date, step) => {
    date.setDate(date.getDate() + step * 7);
  }, (start, end) => {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}

const timeSunday = timeWeekday(0);
const timeMonday = timeWeekday(1);
const timeTuesday = timeWeekday(2);
const timeWednesday = timeWeekday(3);
const timeThursday = timeWeekday(4);
const timeFriday = timeWeekday(5);
const timeSaturday = timeWeekday(6);

timeSunday.range;
timeMonday.range;
timeTuesday.range;
timeWednesday.range;
timeThursday.range;
timeFriday.range;
timeSaturday.range;

function utcWeekday(i) {
  return timeInterval((date) => {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, (date, step) => {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, (start, end) => {
    return (end - start) / durationWeek;
  });
}

const utcSunday = utcWeekday(0);
const utcMonday = utcWeekday(1);
const utcTuesday = utcWeekday(2);
const utcWednesday = utcWeekday(3);
const utcThursday = utcWeekday(4);
const utcFriday = utcWeekday(5);
const utcSaturday = utcWeekday(6);

utcSunday.range;
utcMonday.range;
utcTuesday.range;
utcWednesday.range;
utcThursday.range;
utcFriday.range;
utcSaturday.range;

const timeMonth = timeInterval((date) => {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, (date, step) => {
  date.setMonth(date.getMonth() + step);
}, (start, end) => {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, (date) => {
  return date.getMonth();
});

timeMonth.range;

const utcMonth = timeInterval((date) => {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, (date, step) => {
  date.setUTCMonth(date.getUTCMonth() + step);
}, (start, end) => {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, (date) => {
  return date.getUTCMonth();
});

utcMonth.range;

const timeYear = timeInterval((date) => {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, (date, step) => {
  date.setFullYear(date.getFullYear() + step);
}, (start, end) => {
  return end.getFullYear() - start.getFullYear();
}, (date) => {
  return date.getFullYear();
});

// An optimized implementation for this simple case.
timeYear.every = (k) => {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : timeInterval((date) => {
    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, (date, step) => {
    date.setFullYear(date.getFullYear() + step * k);
  });
};

timeYear.range;

const utcYear = timeInterval((date) => {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, (date, step) => {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, (start, end) => {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, (date) => {
  return date.getUTCFullYear();
});

// An optimized implementation for this simple case.
utcYear.every = (k) => {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : timeInterval((date) => {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, (date, step) => {
    date.setUTCFullYear(date.getUTCFullYear() + step * k);
  });
};

utcYear.range;

function ticker(year, month, week, day, hour, minute) {

  const tickIntervals = [
    [second,  1,      durationSecond],
    [second,  5,  5 * durationSecond],
    [second, 15, 15 * durationSecond],
    [second, 30, 30 * durationSecond],
    [minute,  1,      durationMinute],
    [minute,  5,  5 * durationMinute],
    [minute, 15, 15 * durationMinute],
    [minute, 30, 30 * durationMinute],
    [  hour,  1,      durationHour  ],
    [  hour,  3,  3 * durationHour  ],
    [  hour,  6,  6 * durationHour  ],
    [  hour, 12, 12 * durationHour  ],
    [   day,  1,      durationDay   ],
    [   day,  2,  2 * durationDay   ],
    [  week,  1,      durationWeek  ],
    [ month,  1,      durationMonth ],
    [ month,  3,  3 * durationMonth ],
    [  year,  1,      durationYear  ]
  ];

  function ticks(start, stop, count) {
    const reverse = stop < start;
    if (reverse) [start, stop] = [stop, start];
    const interval = count && typeof count.range === "function" ? count : tickInterval(start, stop, count);
    const ticks = interval ? interval.range(start, +stop + 1) : []; // inclusive stop
    return reverse ? ticks.reverse() : ticks;
  }

  function tickInterval(start, stop, count) {
    const target = Math.abs(stop - start) / count;
    const i = bisector(([,, step]) => step).right(tickIntervals, target);
    if (i === tickIntervals.length) return year.every(tickStep(start / durationYear, stop / durationYear, count));
    if (i === 0) return millisecond.every(Math.max(tickStep(start, stop, count), 1));
    const [t, step] = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
    return t.every(step);
  }

  return [ticks, tickInterval];
}

const [utcTicks, utcTickInterval] = ticker(utcYear, utcMonth, utcSunday, unixDay, utcHour, utcMinute);
const [timeTicks, timeTickInterval] = ticker(timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute);

function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}

function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}

function newDate(y, m, d) {
  return {y: y, m: m, d: d, H: 0, M: 0, S: 0, L: 0};
}

function formatLocale(locale) {
  var locale_dateTime = locale.dateTime,
      locale_date = locale.date,
      locale_time = locale.time,
      locale_periods = locale.periods,
      locale_weekdays = locale.days,
      locale_shortWeekdays = locale.shortDays,
      locale_months = locale.months,
      locale_shortMonths = locale.shortMonths;

  var periodRe = formatRe(locale_periods),
      periodLookup = formatLookup(locale_periods),
      weekdayRe = formatRe(locale_weekdays),
      weekdayLookup = formatLookup(locale_weekdays),
      shortWeekdayRe = formatRe(locale_shortWeekdays),
      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
      monthRe = formatRe(locale_months),
      monthLookup = formatLookup(locale_months),
      shortMonthRe = formatRe(locale_shortMonths),
      shortMonthLookup = formatLookup(locale_shortMonths);

  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };

  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };

  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };

  // These recursive directive definitions must be deferred.
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);

  function newFormat(specifier, formats) {
    return function(date) {
      var string = [],
          i = -1,
          j = 0,
          n = specifier.length,
          c,
          pad,
          format;

      if (!(date instanceof Date)) date = new Date(+date);

      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
          else pad = c === "e" ? " " : "0";
          if (format = formats[c]) c = format(date, pad);
          string.push(c);
          j = i + 1;
        }
      }

      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }

  function newParse(specifier, Z) {
    return function(string) {
      var d = newDate(1900, undefined, 1),
          i = parseSpecifier(d, specifier, string += "", 0),
          week, day;
      if (i != string.length) return null;

      // If a UNIX timestamp is specified, return it.
      if ("Q" in d) return new Date(d.Q);
      if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0));

      // If this is utcParse, never use the local timezone.
      if (Z && !("Z" in d)) d.Z = 0;

      // The am-pm flag is 0 for AM, and 1 for PM.
      if ("p" in d) d.H = d.H % 12 + d.p * 12;

      // If the month was not specified, inherit from the quarter.
      if (d.m === undefined) d.m = "q" in d ? d.q : 0;

      // Convert day-of-week and week-of-year to day-of-year.
      if ("V" in d) {
        if (d.V < 1 || d.V > 53) return null;
        if (!("w" in d)) d.w = 1;
        if ("Z" in d) {
          week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
          week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);
          week = utcDay.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
          week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week);
          week = timeDay.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
      }

      // If a time zone is specified, all fields are interpreted as UTC and then
      // offset according to the specified time zone.
      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      }

      // Otherwise, all fields are in local time.
      return localDate(d);
    };
  }

  function parseSpecifier(d, specifier, string, j) {
    var i = 0,
        n = specifier.length,
        m = string.length,
        c,
        parse;

    while (i < n) {
      if (j >= m) return -1;
      c = specifier.charCodeAt(i++);
      if (c === 37) {
        c = specifier.charAt(i++);
        parse = parses[c in pads ? specifier.charAt(i++) : c];
        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }

    return j;
  }

  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }

  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }

  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }

  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }

  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }

  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }

  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }

  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }

  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }

  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }

  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }

  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }

  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }

  function formatQuarter(d) {
    return 1 + ~~(d.getMonth() / 3);
  }

  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }

  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }

  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }

  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }

  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }

  function formatUTCQuarter(d) {
    return 1 + ~~(d.getUTCMonth() / 3);
  }

  return {
    format: function(specifier) {
      var f = newFormat(specifier += "", formats);
      f.toString = function() { return specifier; };
      return f;
    },
    parse: function(specifier) {
      var p = newParse(specifier += "", false);
      p.toString = function() { return specifier; };
      return p;
    },
    utcFormat: function(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function() { return specifier; };
      return f;
    },
    utcParse: function(specifier) {
      var p = newParse(specifier += "", true);
      p.toString = function() { return specifier; };
      return p;
    }
  };
}

var pads = {"-": "", "_": " ", "0": "0"},
    numberRe = /^\s*\d+/, // note: ignores next directive
    percentRe = /^%/,
    requoteRe = /[\\^$*+?|[\]().{}]/g;

function pad(value, fill, width) {
  var sign = value < 0 ? "-" : "",
      string = (sign ? -value : value) + "",
      length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}

function requote(s) {
  return s.replace(requoteRe, "\\$&");
}

function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}

function formatLookup(names) {
  return new Map(names.map((name, i) => [name.toLowerCase(), i]));
}

function parseWeekdayNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}

function parseWeekdayNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberISO(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}

function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}

function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
}

function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}

function parseQuarter(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
}

function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}

function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}

function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}

function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}

function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}

function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}

function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}

function parseMicroseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
}

function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}

function parseUnixTimestamp(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}

function parseUnixTimestampSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.s = +n[0], i + n[0].length) : -1;
}

function formatDayOfMonth(d, p) {
  return pad(d.getDate(), p, 2);
}

function formatHour24(d, p) {
  return pad(d.getHours(), p, 2);
}

function formatHour12(d, p) {
  return pad(d.getHours() % 12 || 12, p, 2);
}

function formatDayOfYear(d, p) {
  return pad(1 + timeDay.count(timeYear(d), d), p, 3);
}

function formatMilliseconds(d, p) {
  return pad(d.getMilliseconds(), p, 3);
}

function formatMicroseconds(d, p) {
  return formatMilliseconds(d, p) + "000";
}

function formatMonthNumber(d, p) {
  return pad(d.getMonth() + 1, p, 2);
}

function formatMinutes(d, p) {
  return pad(d.getMinutes(), p, 2);
}

function formatSeconds(d, p) {
  return pad(d.getSeconds(), p, 2);
}

function formatWeekdayNumberMonday(d) {
  var day = d.getDay();
  return day === 0 ? 7 : day;
}

function formatWeekNumberSunday(d, p) {
  return pad(timeSunday.count(timeYear(d) - 1, d), p, 2);
}

function dISO(d) {
  var day = d.getDay();
  return (day >= 4 || day === 0) ? timeThursday(d) : timeThursday.ceil(d);
}

function formatWeekNumberISO(d, p) {
  d = dISO(d);
  return pad(timeThursday.count(timeYear(d), d) + (timeYear(d).getDay() === 4), p, 2);
}

function formatWeekdayNumberSunday(d) {
  return d.getDay();
}

function formatWeekNumberMonday(d, p) {
  return pad(timeMonday.count(timeYear(d) - 1, d), p, 2);
}

function formatYear(d, p) {
  return pad(d.getFullYear() % 100, p, 2);
}

function formatYearISO(d, p) {
  d = dISO(d);
  return pad(d.getFullYear() % 100, p, 2);
}

function formatFullYear(d, p) {
  return pad(d.getFullYear() % 10000, p, 4);
}

function formatFullYearISO(d, p) {
  var day = d.getDay();
  d = (day >= 4 || day === 0) ? timeThursday(d) : timeThursday.ceil(d);
  return pad(d.getFullYear() % 10000, p, 4);
}

function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+"))
      + pad(z / 60 | 0, "0", 2)
      + pad(z % 60, "0", 2);
}

function formatUTCDayOfMonth(d, p) {
  return pad(d.getUTCDate(), p, 2);
}

function formatUTCHour24(d, p) {
  return pad(d.getUTCHours(), p, 2);
}

function formatUTCHour12(d, p) {
  return pad(d.getUTCHours() % 12 || 12, p, 2);
}

function formatUTCDayOfYear(d, p) {
  return pad(1 + utcDay.count(utcYear(d), d), p, 3);
}

function formatUTCMilliseconds(d, p) {
  return pad(d.getUTCMilliseconds(), p, 3);
}

function formatUTCMicroseconds(d, p) {
  return formatUTCMilliseconds(d, p) + "000";
}

function formatUTCMonthNumber(d, p) {
  return pad(d.getUTCMonth() + 1, p, 2);
}

function formatUTCMinutes(d, p) {
  return pad(d.getUTCMinutes(), p, 2);
}

function formatUTCSeconds(d, p) {
  return pad(d.getUTCSeconds(), p, 2);
}

function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}

function formatUTCWeekNumberSunday(d, p) {
  return pad(utcSunday.count(utcYear(d) - 1, d), p, 2);
}

function UTCdISO(d) {
  var day = d.getUTCDay();
  return (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);
}

function formatUTCWeekNumberISO(d, p) {
  d = UTCdISO(d);
  return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);
}

function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}

function formatUTCWeekNumberMonday(d, p) {
  return pad(utcMonday.count(utcYear(d) - 1, d), p, 2);
}

function formatUTCYear(d, p) {
  return pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCYearISO(d, p) {
  d = UTCdISO(d);
  return pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCFullYear(d, p) {
  return pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCFullYearISO(d, p) {
  var day = d.getUTCDay();
  d = (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);
  return pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCZone() {
  return "+0000";
}

function formatLiteralPercent() {
  return "%";
}

function formatUnixTimestamp(d) {
  return +d;
}

function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1000);
}

var locale;
var timeFormat;
var utcFormat;

defaultLocale({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});

function defaultLocale(definition) {
  locale = formatLocale(definition);
  timeFormat = locale.format;
  locale.parse;
  utcFormat = locale.utcFormat;
  locale.utcParse;
  return locale;
}

function date(t) {
  return new Date(t);
}

function number(t) {
  return t instanceof Date ? +t : +new Date(+t);
}

function calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format) {
  var scale = continuous(),
      invert = scale.invert,
      domain = scale.domain;

  var formatMillisecond = format(".%L"),
      formatSecond = format(":%S"),
      formatMinute = format("%I:%M"),
      formatHour = format("%I %p"),
      formatDay = format("%a %d"),
      formatWeek = format("%b %d"),
      formatMonth = format("%B"),
      formatYear = format("%Y");

  function tickFormat(date) {
    return (second(date) < date ? formatMillisecond
        : minute(date) < date ? formatSecond
        : hour(date) < date ? formatMinute
        : day(date) < date ? formatHour
        : month(date) < date ? (week(date) < date ? formatDay : formatWeek)
        : year(date) < date ? formatMonth
        : formatYear)(date);
  }

  scale.invert = function(y) {
    return new Date(invert(y));
  };

  scale.domain = function(_) {
    return arguments.length ? domain(Array.from(_, number)) : domain().map(date);
  };

  scale.ticks = function(interval) {
    var d = domain();
    return ticks(d[0], d[d.length - 1], interval == null ? 10 : interval);
  };

  scale.tickFormat = function(count, specifier) {
    return specifier == null ? tickFormat : format(specifier);
  };

  scale.nice = function(interval) {
    var d = domain();
    if (!interval || typeof interval.range !== "function") interval = tickInterval(d[0], d[d.length - 1], interval == null ? 10 : interval);
    return interval ? domain(nice(d, interval)) : scale;
  };

  scale.copy = function() {
    return copy$1(scale, calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format));
  };

  return scale;
}

function time() {
  return initRange.apply(calendar(timeTicks, timeTickInterval, timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute, second, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);
}

function utcTime() {
  return initRange.apply(calendar(utcTicks, utcTickInterval, utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);
}

function transformer$1() {
  var x0 = 0,
      x1 = 1,
      t0,
      t1,
      k10,
      transform,
      interpolator = identity$3,
      clamp = false,
      unknown;

  function scale(x) {
    return x == null || isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
  }

  scale.domain = function(_) {
    return arguments.length ? ([x0, x1] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];
  };

  scale.clamp = function(_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function(_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  function range(interpolate) {
    return function(_) {
      var r0, r1;
      return arguments.length ? ([r0, r1] = _, interpolator = interpolate(r0, r1), scale) : [interpolator(0), interpolator(1)];
    };
  }

  scale.range = range(interpolate);

  scale.rangeRound = range(interpolateRound);

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function(t) {
    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
    return scale;
  };
}

function copy(source, target) {
  return target
      .domain(source.domain())
      .interpolator(source.interpolator())
      .clamp(source.clamp())
      .unknown(source.unknown());
}

function sequential() {
  var scale = linearish(transformer$1()(identity$3));

  scale.copy = function() {
    return copy(scale, sequential());
  };

  return initInterpolator.apply(scale, arguments);
}

function sequentialLog() {
  var scale = loggish(transformer$1()).domain([1, 10]);

  scale.copy = function() {
    return copy(scale, sequentialLog()).base(scale.base());
  };

  return initInterpolator.apply(scale, arguments);
}

function sequentialSymlog() {
  var scale = symlogish(transformer$1());

  scale.copy = function() {
    return copy(scale, sequentialSymlog()).constant(scale.constant());
  };

  return initInterpolator.apply(scale, arguments);
}

function sequentialPow() {
  var scale = powish(transformer$1());

  scale.copy = function() {
    return copy(scale, sequentialPow()).exponent(scale.exponent());
  };

  return initInterpolator.apply(scale, arguments);
}

function sequentialSqrt() {
  return sequentialPow.apply(null, arguments).exponent(0.5);
}

function sequentialQuantile() {
  var domain = [],
      interpolator = identity$3;

  function scale(x) {
    if (x != null && !isNaN(x = +x)) return interpolator((bisectRight(domain, x, 1) - 1) / (domain.length - 1));
  }

  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [];
    for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);
    domain.sort(ascending);
    return scale;
  };

  scale.interpolator = function(_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.range = function() {
    return domain.map((d, i) => interpolator(i / (domain.length - 1)));
  };

  scale.quantiles = function(n) {
    return Array.from({length: n + 1}, (_, i) => quantile$1(domain, i / n));
  };

  scale.copy = function() {
    return sequentialQuantile(interpolator).domain(domain);
  };

  return initInterpolator.apply(scale, arguments);
}

function transformer() {
  var x0 = 0,
      x1 = 0.5,
      x2 = 1,
      s = 1,
      t0,
      t1,
      t2,
      k10,
      k21,
      interpolator = identity$3,
      transform,
      clamp = false,
      unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (s * x < s * t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));
  }

  scale.domain = function(_) {
    return arguments.length ? ([x0, x1, x2] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1, scale) : [x0, x1, x2];
  };

  scale.clamp = function(_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function(_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  function range(interpolate) {
    return function(_) {
      var r0, r1, r2;
      return arguments.length ? ([r0, r1, r2] = _, interpolator = piecewise(interpolate, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];
    };
  }

  scale.range = range(interpolate);

  scale.rangeRound = range(interpolateRound);

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function(t) {
    transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1;
    return scale;
  };
}

function diverging() {
  var scale = linearish(transformer()(identity$3));

  scale.copy = function() {
    return copy(scale, diverging());
  };

  return initInterpolator.apply(scale, arguments);
}

function divergingLog() {
  var scale = loggish(transformer()).domain([0.1, 1, 10]);

  scale.copy = function() {
    return copy(scale, divergingLog()).base(scale.base());
  };

  return initInterpolator.apply(scale, arguments);
}

function divergingSymlog() {
  var scale = symlogish(transformer());

  scale.copy = function() {
    return copy(scale, divergingSymlog()).constant(scale.constant());
  };

  return initInterpolator.apply(scale, arguments);
}

function divergingPow() {
  var scale = powish(transformer());

  scale.copy = function() {
    return copy(scale, divergingPow()).exponent(scale.exponent());
  };

  return initInterpolator.apply(scale, arguments);
}

function divergingSqrt() {
  return divergingPow.apply(null, arguments).exponent(0.5);
}

const d3Scales = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  scaleBand: band,
  scaleDiverging: diverging,
  scaleDivergingLog: divergingLog,
  scaleDivergingPow: divergingPow,
  scaleDivergingSqrt: divergingSqrt,
  scaleDivergingSymlog: divergingSymlog,
  scaleIdentity: identity$1,
  scaleImplicit: implicit,
  scaleLinear: linear,
  scaleLog: log,
  scaleOrdinal: ordinal,
  scalePoint: point,
  scalePow: pow,
  scaleQuantile: quantile,
  scaleQuantize: quantize,
  scaleRadial: radial,
  scaleSequential: sequential,
  scaleSequentialLog: sequentialLog,
  scaleSequentialPow: sequentialPow,
  scaleSequentialQuantile: sequentialQuantile,
  scaleSequentialSqrt: sequentialSqrt,
  scaleSequentialSymlog: sequentialSymlog,
  scaleSqrt: sqrt,
  scaleSymlog: symlog,
  scaleThreshold: threshold,
  scaleTime: time,
  scaleUtc: utcTime,
  tickFormat
}, Symbol.toStringTag, { value: 'Module' }));

/**
 * This selector always returns the data with the indexes set by a Brush.
 * Trouble is, that might or might not be what you want.
 *
 * In charts with Brush, you will sometimes want to select the full range of data, and sometimes the one decided by the Brush
 * - even if the Brush is active, the panorama inside the Brush should show the full range of data.
 *
 * So instead of this selector, consider using either selectChartDataAndAlwaysIgnoreIndexes or selectChartDataWithIndexesIfNotInPanorama
 *
 * @param state RechartsRootState
 * @returns data defined on the chart root element, such as BarChart or ScatterChart
 */
var selectChartDataWithIndexes = state => state.chartData;

/**
 * This selector will always return the full range of data, ignoring the indexes set by a Brush.
 * Useful for when you want to render the full range of data, even if a Brush is active.
 * For example: in the Brush panorama, in Legend, in Tooltip.
 */
var selectChartDataAndAlwaysIgnoreIndexes = createSelector([selectChartDataWithIndexes], dataState => {
  var dataEndIndex = dataState.chartData != null ? dataState.chartData.length - 1 : 0;
  return {
    chartData: dataState.chartData,
    computedData: dataState.computedData,
    dataEndIndex,
    dataStartIndex: 0
  };
});
var selectChartDataWithIndexesIfNotInPanorama = (state, _xAxisId, _yAxisId, isPanorama) => {
  if (isPanorama) {
    return selectChartDataAndAlwaysIgnoreIndexes(state);
  }
  return selectChartDataWithIndexes(state);
};

function isWellFormedNumberDomain(v) {
  if (Array.isArray(v) && v.length === 2) {
    var [min, max] = v;
    if (isWellBehavedNumber(min) && isWellBehavedNumber(max)) {
      return true;
    }
  }
  return false;
}
function extendDomain(providedDomain, boundaryDomain, allowDataOverflow) {
  if (allowDataOverflow) {
    // If the data are allowed to overflow - we're fine with whatever user provided
    return providedDomain;
  }
  /*
   * If the data are not allowed to overflow - we need to extend the domain.
   * Means that effectively the user is allowed to make the domain larger
   * but not smaller.
   */
  return [Math.min(providedDomain[0], boundaryDomain[0]), Math.max(providedDomain[1], boundaryDomain[1])];
}

/**
 * So Recharts allows users to provide their own domains,
 * but it also places some expectations on what the domain is.
 * We can improve on the typescript typing, but we also need a runtime test
 to observe that the user-provided domain is well-formed,
 * that is: an array with exactly two numbers.
 *
 * This function does not accept data as an argument.
 * This is to enable a performance optimization - if the domain is there,
 * and we know what it is without traversing all the data,
 * then we don't have to traverse all the data!
 *
 * If the user-provided domain is not well-formed,
 * this function will return undefined - in which case we should traverse the data to calculate the real domain.
 *
 * This function is for parsing the numerical domain only.
 *
 * @param userDomain external prop, user provided, before validation. Can have various shapes: array, function, special magical strings inside too.
 * @param allowDataOverflow boolean, provided by users. If true then the data domain wins
 *
 * @return [min, max] domain if it's well-formed; undefined if the domain is invalid
 */
function numericalDomainSpecifiedWithoutRequiringData(userDomain, allowDataOverflow) {
  if (!allowDataOverflow) {
    // Cannot compute data overflow if the data is not provided
    return undefined;
  }
  if (typeof userDomain === 'function') {
    // The user function expects the data to be provided as an argument
    return undefined;
  }
  if (Array.isArray(userDomain) && userDomain.length === 2) {
    var [providedMin, providedMax] = userDomain;
    var finalMin, finalMax;
    if (isWellBehavedNumber(providedMin)) {
      finalMin = providedMin;
    } else if (typeof providedMin === 'function') {
      // The user function expects the data to be provided as an argument
      return undefined;
    }
    if (isWellBehavedNumber(providedMax)) {
      finalMax = providedMax;
    } else if (typeof providedMax === 'function') {
      // The user function expects the data to be provided as an argument
      return undefined;
    }
    var candidate = [finalMin, finalMax];
    if (isWellFormedNumberDomain(candidate)) {
      return candidate;
    }
  }
  return undefined;
}

/**
 * So Recharts allows users to provide their own domains,
 * but it also places some expectations on what the domain is.
 * We can improve on the typescript typing, but we also need a runtime test
 * to observe that the user-provided domain is well-formed,
 * that is: an array with exactly two numbers.
 * If the user-provided domain is not well-formed,
 * this function will return undefined - in which case we should traverse the data to calculate the real domain.
 *
 * This function is for parsing the numerical domain only.
 *
 * You are probably thinking, why does domain need tick count?
 * Well it adjusts the domain based on where the "nice ticks" land, and nice ticks depend on the tick count.
 *
 * @param userDomain external prop, user provided, before validation. Can have various shapes: array, function, special magical strings inside too.
 * @param dataDomain calculated from data. Can be undefined, as an option for performance optimization
 * @param allowDataOverflow provided by users. If true then the data domain wins
 *
 * @return [min, max] domain if it's well-formed; undefined if the domain is invalid
 */
function parseNumericalUserDomain(userDomain, dataDomain, allowDataOverflow) {
  if (!allowDataOverflow && dataDomain == null) {
    // Cannot compute data overflow if the data is not provided
    return undefined;
  }
  if (typeof userDomain === 'function' && dataDomain != null) {
    try {
      var result = userDomain(dataDomain, allowDataOverflow);
      if (isWellFormedNumberDomain(result)) {
        return extendDomain(result, dataDomain, allowDataOverflow);
      }
    } catch (_unused) {
      /* ignore the exception and compute domain from data later */
    }
  }
  if (Array.isArray(userDomain) && userDomain.length === 2) {
    var [providedMin, providedMax] = userDomain;
    var finalMin, finalMax;
    if (providedMin === 'auto') {
      if (dataDomain != null) {
        finalMin = Math.min(...dataDomain);
      }
    } else if (isNumber(providedMin)) {
      finalMin = providedMin;
    } else if (typeof providedMin === 'function') {
      try {
        if (dataDomain != null) {
          finalMin = providedMin(dataDomain === null || dataDomain === void 0 ? void 0 : dataDomain[0]);
        }
      } catch (_unused2) {
        /* ignore the exception and compute domain from data later */
      }
    } else if (typeof providedMin === 'string' && MIN_VALUE_REG.test(providedMin)) {
      var match = MIN_VALUE_REG.exec(providedMin);
      if (match == null || dataDomain == null) {
        finalMin = undefined;
      } else {
        var value = +match[1];
        finalMin = dataDomain[0] - value;
      }
    } else {
      finalMin = dataDomain === null || dataDomain === void 0 ? void 0 : dataDomain[0];
    }
    if (providedMax === 'auto') {
      if (dataDomain != null) {
        finalMax = Math.max(...dataDomain);
      }
    } else if (isNumber(providedMax)) {
      finalMax = providedMax;
    } else if (typeof providedMax === 'function') {
      try {
        if (dataDomain != null) {
          finalMax = providedMax(dataDomain === null || dataDomain === void 0 ? void 0 : dataDomain[1]);
        }
      } catch (_unused3) {
        /* ignore the exception and compute domain from data later */
      }
    } else if (typeof providedMax === 'string' && MAX_VALUE_REG.test(providedMax)) {
      var _match = MAX_VALUE_REG.exec(providedMax);
      if (_match == null || dataDomain == null) {
        finalMax = undefined;
      } else {
        var _value = +_match[1];
        finalMax = dataDomain[1] + _value;
      }
    } else {
      finalMax = dataDomain === null || dataDomain === void 0 ? void 0 : dataDomain[1];
    }
    var candidate = [finalMin, finalMax];
    if (isWellFormedNumberDomain(candidate)) {
      if (dataDomain == null) {
        return candidate;
      }
      return extendDomain(candidate, dataDomain, allowDataOverflow);
    }
  }
  return undefined;
}

/*
 *  decimal.js-light v2.5.1
 *  An arbitrary-precision Decimal type for JavaScript.
 *  https://github.com/MikeMcl/decimal.js-light
 *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>
 *  MIT Expat Licence
 */


// ------------------------------------  EDITABLE DEFAULTS  ------------------------------------- //


// The limit on the value of `precision`, and on the value of the first argument to
// `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
var MAX_DIGITS = 1e9,                        // 0 to 1e9


  // The initial configuration properties of the Decimal constructor.
  defaults = {

    // These values must be integers within the stated ranges (inclusive).
    // Most of these values can be changed during run-time using `Decimal.config`.

    // The maximum number of significant digits of the result of a calculation or base conversion.
    // E.g. `Decimal.config({ precision: 20 });`
    precision: 20,                         // 1 to MAX_DIGITS

    // The rounding mode used by default by `toInteger`, `toDecimalPlaces`, `toExponential`,
    // `toFixed`, `toPrecision` and `toSignificantDigits`.
    //
    // ROUND_UP         0 Away from zero.
    // ROUND_DOWN       1 Towards zero.
    // ROUND_CEIL       2 Towards +Infinity.
    // ROUND_FLOOR      3 Towards -Infinity.
    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
    //
    // E.g.
    // `Decimal.rounding = 4;`
    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
    rounding: 4,                           // 0 to 8

    // The exponent value at and beneath which `toString` returns exponential notation.
    // JavaScript numbers: -7
    toExpNeg: -7,                          // 0 to -MAX_E

    // The exponent value at and above which `toString` returns exponential notation.
    // JavaScript numbers: 21
    toExpPos:  21,                         // 0 to MAX_E

    // The natural logarithm of 10.
    // 115 digits
    LN10: '2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286'
  },


// ------------------------------------ END OF EDITABLE DEFAULTS -------------------------------- //


  Decimal,
  external = true,

  decimalError = '[DecimalError] ',
  invalidArgument = decimalError + 'Invalid argument: ',
  exponentOutOfRange = decimalError + 'Exponent out of range: ',

  mathfloor = Math.floor,
  mathpow = Math.pow,

  isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,

  ONE,
  BASE = 1e7,
  LOG_BASE = 7,
  MAX_SAFE_INTEGER = 9007199254740991,
  MAX_E = mathfloor(MAX_SAFE_INTEGER / LOG_BASE),    // 1286742750677284

  // Decimal.prototype object
  P = {};


// Decimal prototype methods


/*
 *  absoluteValue                       abs
 *  comparedTo                          cmp
 *  decimalPlaces                       dp
 *  dividedBy                           div
 *  dividedToIntegerBy                  idiv
 *  equals                              eq
 *  exponent
 *  greaterThan                         gt
 *  greaterThanOrEqualTo                gte
 *  isInteger                           isint
 *  isNegative                          isneg
 *  isPositive                          ispos
 *  isZero
 *  lessThan                            lt
 *  lessThanOrEqualTo                   lte
 *  logarithm                           log
 *  minus                               sub
 *  modulo                              mod
 *  naturalExponential                  exp
 *  naturalLogarithm                    ln
 *  negated                             neg
 *  plus                                add
 *  precision                           sd
 *  squareRoot                          sqrt
 *  times                               mul
 *  toDecimalPlaces                     todp
 *  toExponential
 *  toFixed
 *  toInteger                           toint
 *  toNumber
 *  toPower                             pow
 *  toPrecision
 *  toSignificantDigits                 tosd
 *  toString
 *  valueOf                             val
 */


/*
 * Return a new Decimal whose value is the absolute value of this Decimal.
 *
 */
P.absoluteValue = P.abs = function () {
  var x = new this.constructor(this);
  if (x.s) x.s = 1;
  return x;
};


/*
 * Return
 *   1    if the value of this Decimal is greater than the value of `y`,
 *  -1    if the value of this Decimal is less than the value of `y`,
 *   0    if they have the same value
 *
 */
P.comparedTo = P.cmp = function (y) {
  var i, j, xdL, ydL,
    x = this;

  y = new x.constructor(y);

  // Signs differ?
  if (x.s !== y.s) return x.s || -y.s;

  // Compare exponents.
  if (x.e !== y.e) return x.e > y.e ^ x.s < 0 ? 1 : -1;

  xdL = x.d.length;
  ydL = y.d.length;

  // Compare digit by digit.
  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
    if (x.d[i] !== y.d[i]) return x.d[i] > y.d[i] ^ x.s < 0 ? 1 : -1;
  }

  // Compare lengths.
  return xdL === ydL ? 0 : xdL > ydL ^ x.s < 0 ? 1 : -1;
};


/*
 * Return the number of decimal places of the value of this Decimal.
 *
 */
P.decimalPlaces = P.dp = function () {
  var x = this,
    w = x.d.length - 1,
    dp = (w - x.e) * LOG_BASE;

  // Subtract the number of trailing zeros of the last word.
  w = x.d[w];
  if (w) for (; w % 10 == 0; w /= 10) dp--;

  return dp < 0 ? 0 : dp;
};


/*
 * Return a new Decimal whose value is the value of this Decimal divided by `y`, truncated to
 * `precision` significant digits.
 *
 */
P.dividedBy = P.div = function (y) {
  return divide(this, new this.constructor(y));
};


/*
 * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
 * by the value of `y`, truncated to `precision` significant digits.
 *
 */
P.dividedToIntegerBy = P.idiv = function (y) {
  var x = this,
    Ctor = x.constructor;
  return round(divide(x, new Ctor(y), 0, 1), Ctor.precision);
};


/*
 * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
 *
 */
P.equals = P.eq = function (y) {
  return !this.cmp(y);
};


/*
 * Return the (base 10) exponent value of this Decimal (this.e is the base 10000000 exponent).
 *
 */
P.exponent = function () {
  return getBase10Exponent(this);
};


/*
 * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
 * false.
 *
 */
P.greaterThan = P.gt = function (y) {
  return this.cmp(y) > 0;
};


/*
 * Return true if the value of this Decimal is greater than or equal to the value of `y`,
 * otherwise return false.
 *
 */
P.greaterThanOrEqualTo = P.gte = function (y) {
  return this.cmp(y) >= 0;
};


/*
 * Return true if the value of this Decimal is an integer, otherwise return false.
 *
 */
P.isInteger = P.isint = function () {
  return this.e > this.d.length - 2;
};


/*
 * Return true if the value of this Decimal is negative, otherwise return false.
 *
 */
P.isNegative = P.isneg = function () {
  return this.s < 0;
};


/*
 * Return true if the value of this Decimal is positive, otherwise return false.
 *
 */
P.isPositive = P.ispos = function () {
  return this.s > 0;
};


/*
 * Return true if the value of this Decimal is 0, otherwise return false.
 *
 */
P.isZero = function () {
  return this.s === 0;
};


/*
 * Return true if the value of this Decimal is less than `y`, otherwise return false.
 *
 */
P.lessThan = P.lt = function (y) {
  return this.cmp(y) < 0;
};


/*
 * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
 *
 */
P.lessThanOrEqualTo = P.lte = function (y) {
  return this.cmp(y) < 1;
};


/*
 * Return the logarithm of the value of this Decimal to the specified base, truncated to
 * `precision` significant digits.
 *
 * If no base is specified, return log[10](x).
 *
 * log[base](x) = ln(x) / ln(base)
 *
 * The maximum error of the result is 1 ulp (unit in the last place).
 *
 * [base] {number|string|Decimal} The base of the logarithm.
 *
 */
P.logarithm = P.log = function (base) {
  var r,
    x = this,
    Ctor = x.constructor,
    pr = Ctor.precision,
    wpr = pr + 5;

  // Default base is 10.
  if (base === void 0) {
    base = new Ctor(10);
  } else {
    base = new Ctor(base);

    // log[-b](x) = NaN
    // log[0](x)  = NaN
    // log[1](x)  = NaN
    if (base.s < 1 || base.eq(ONE)) throw Error(decimalError + 'NaN');
  }

  // log[b](-x) = NaN
  // log[b](0) = -Infinity
  if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));

  // log[b](1) = 0
  if (x.eq(ONE)) return new Ctor(0);

  external = false;
  r = divide(ln(x, wpr), ln(base, wpr), wpr);
  external = true;

  return round(r, pr);
};


/*
 * Return a new Decimal whose value is the value of this Decimal minus `y`, truncated to
 * `precision` significant digits.
 *
 */
P.minus = P.sub = function (y) {
  var x = this;
  y = new x.constructor(y);
  return x.s == y.s ? subtract(x, y) : add(x, (y.s = -y.s, y));
};


/*
 * Return a new Decimal whose value is the value of this Decimal modulo `y`, truncated to
 * `precision` significant digits.
 *
 */
P.modulo = P.mod = function (y) {
  var q,
    x = this,
    Ctor = x.constructor,
    pr = Ctor.precision;

  y = new Ctor(y);

  // x % 0 = NaN
  if (!y.s) throw Error(decimalError + 'NaN');

  // Return x if x is 0.
  if (!x.s) return round(new Ctor(x), pr);

  // Prevent rounding of intermediate calculations.
  external = false;
  q = divide(x, y, 0, 1).times(y);
  external = true;

  return x.minus(q);
};


/*
 * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
 * i.e. the base e raised to the power the value of this Decimal, truncated to `precision`
 * significant digits.
 *
 */
P.naturalExponential = P.exp = function () {
  return exp(this);
};


/*
 * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
 * truncated to `precision` significant digits.
 *
 */
P.naturalLogarithm = P.ln = function () {
  return ln(this);
};


/*
 * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
 * -1.
 *
 */
P.negated = P.neg = function () {
  var x = new this.constructor(this);
  x.s = -x.s || 0;
  return x;
};


/*
 * Return a new Decimal whose value is the value of this Decimal plus `y`, truncated to
 * `precision` significant digits.
 *
 */
P.plus = P.add = function (y) {
  var x = this;
  y = new x.constructor(y);
  return x.s == y.s ? add(x, y) : subtract(x, (y.s = -y.s, y));
};


/*
 * Return the number of significant digits of the value of this Decimal.
 *
 * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
 *
 */
P.precision = P.sd = function (z) {
  var e, sd, w,
    x = this;

  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);

  e = getBase10Exponent(x) + 1;
  w = x.d.length - 1;
  sd = w * LOG_BASE + 1;
  w = x.d[w];

  // If non-zero...
  if (w) {

    // Subtract the number of trailing zeros of the last word.
    for (; w % 10 == 0; w /= 10) sd--;

    // Add the number of digits of the first word.
    for (w = x.d[0]; w >= 10; w /= 10) sd++;
  }

  return z && e > sd ? e : sd;
};


/*
 * Return a new Decimal whose value is the square root of this Decimal, truncated to `precision`
 * significant digits.
 *
 */
P.squareRoot = P.sqrt = function () {
  var e, n, pr, r, s, t, wpr,
    x = this,
    Ctor = x.constructor;

  // Negative or zero?
  if (x.s < 1) {
    if (!x.s) return new Ctor(0);

    // sqrt(-x) = NaN
    throw Error(decimalError + 'NaN');
  }

  e = getBase10Exponent(x);
  external = false;

  // Initial estimate.
  s = Math.sqrt(+x);

  // Math.sqrt underflow/overflow?
  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
  if (s == 0 || s == 1 / 0) {
    n = digitsToString(x.d);
    if ((n.length + e) % 2 == 0) n += '0';
    s = Math.sqrt(n);
    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);

    if (s == 1 / 0) {
      n = '5e' + e;
    } else {
      n = s.toExponential();
      n = n.slice(0, n.indexOf('e') + 1) + e;
    }

    r = new Ctor(n);
  } else {
    r = new Ctor(s.toString());
  }

  pr = Ctor.precision;
  s = wpr = pr + 3;

  // Newton-Raphson iteration.
  for (;;) {
    t = r;
    r = t.plus(divide(x, t, wpr + 2)).times(0.5);

    if (digitsToString(t.d).slice(0, wpr) === (n = digitsToString(r.d)).slice(0, wpr)) {
      n = n.slice(wpr - 3, wpr + 1);

      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
      // 4999, i.e. approaching a rounding boundary, continue the iteration.
      if (s == wpr && n == '4999') {

        // On the first iteration only, check to see if rounding up gives the exact result as the
        // nines may infinitely repeat.
        round(t, pr + 1, 0);

        if (t.times(t).eq(x)) {
          r = t;
          break;
        }
      } else if (n != '9999') {
        break;
      }

      wpr += 4;
    }
  }

  external = true;

  return round(r, pr);
};


/*
 * Return a new Decimal whose value is the value of this Decimal times `y`, truncated to
 * `precision` significant digits.
 *
 */
P.times = P.mul = function (y) {
  var carry, e, i, k, r, rL, t, xdL, ydL,
    x = this,
    Ctor = x.constructor,
    xd = x.d,
    yd = (y = new Ctor(y)).d;

  // Return 0 if either is 0.
  if (!x.s || !y.s) return new Ctor(0);

  y.s *= x.s;
  e = x.e + y.e;
  xdL = xd.length;
  ydL = yd.length;

  // Ensure xd points to the longer array.
  if (xdL < ydL) {
    r = xd;
    xd = yd;
    yd = r;
    rL = xdL;
    xdL = ydL;
    ydL = rL;
  }

  // Initialise the result array with zeros.
  r = [];
  rL = xdL + ydL;
  for (i = rL; i--;) r.push(0);

  // Multiply!
  for (i = ydL; --i >= 0;) {
    carry = 0;
    for (k = xdL + i; k > i;) {
      t = r[k] + yd[i] * xd[k - i - 1] + carry;
      r[k--] = t % BASE | 0;
      carry = t / BASE | 0;
    }

    r[k] = (r[k] + carry) % BASE | 0;
  }

  // Remove trailing zeros.
  for (; !r[--rL];) r.pop();

  if (carry) ++e;
  else r.shift();

  y.d = r;
  y.e = e;

  return external ? round(y, Ctor.precision) : y;
};


/*
 * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
 * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
 *
 * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
 *
 * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
 *
 */
P.toDecimalPlaces = P.todp = function (dp, rm) {
  var x = this,
    Ctor = x.constructor;

  x = new Ctor(x);
  if (dp === void 0) return x;

  checkInt32(dp, 0, MAX_DIGITS);

  if (rm === void 0) rm = Ctor.rounding;
  else checkInt32(rm, 0, 8);

  return round(x, dp + getBase10Exponent(x) + 1, rm);
};


/*
 * Return a string representing the value of this Decimal in exponential notation rounded to
 * `dp` fixed decimal places using rounding mode `rounding`.
 *
 * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
 *
 */
P.toExponential = function (dp, rm) {
  var str,
    x = this,
    Ctor = x.constructor;

  if (dp === void 0) {
    str = toString(x, true);
  } else {
    checkInt32(dp, 0, MAX_DIGITS);

    if (rm === void 0) rm = Ctor.rounding;
    else checkInt32(rm, 0, 8);

    x = round(new Ctor(x), dp + 1, rm);
    str = toString(x, true, dp + 1);
  }

  return str;
};


/*
 * Return a string representing the value of this Decimal in normal (fixed-point) notation to
 * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
 * omitted.
 *
 * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
 *
 * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
 *
 * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
 * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
 * (-0).toFixed(3) is '0.000'.
 * (-0.5).toFixed(0) is '-0'.
 *
 */
P.toFixed = function (dp, rm) {
  var str, y,
    x = this,
    Ctor = x.constructor;

  if (dp === void 0) return toString(x);

  checkInt32(dp, 0, MAX_DIGITS);

  if (rm === void 0) rm = Ctor.rounding;
  else checkInt32(rm, 0, 8);

  y = round(new Ctor(x), dp + getBase10Exponent(x) + 1, rm);
  str = toString(y.abs(), false, dp + getBase10Exponent(y) + 1);

  // To determine whether to add the minus sign look at the value before it was rounded,
  // i.e. look at `x` rather than `y`.
  return x.isneg() && !x.isZero() ? '-' + str : str;
};


/*
 * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
 * rounding mode `rounding`.
 *
 */
P.toInteger = P.toint = function () {
  var x = this,
    Ctor = x.constructor;
  return round(new Ctor(x), getBase10Exponent(x) + 1, Ctor.rounding);
};


/*
 * Return the value of this Decimal converted to a number primitive.
 *
 */
P.toNumber = function () {
  return +this;
};


/*
 * Return a new Decimal whose value is the value of this Decimal raised to the power `y`,
 * truncated to `precision` significant digits.
 *
 * For non-integer or very large exponents pow(x, y) is calculated using
 *
 *   x^y = exp(y*ln(x))
 *
 * The maximum error is 1 ulp (unit in last place).
 *
 * y {number|string|Decimal} The power to which to raise this Decimal.
 *
 */
P.toPower = P.pow = function (y) {
  var e, k, pr, r, sign, yIsInt,
    x = this,
    Ctor = x.constructor,
    guard = 12,
    yn = +(y = new Ctor(y));

  // pow(x, 0) = 1
  if (!y.s) return new Ctor(ONE);

  x = new Ctor(x);

  // pow(0, y > 0) = 0
  // pow(0, y < 0) = Infinity
  if (!x.s) {
    if (y.s < 1) throw Error(decimalError + 'Infinity');
    return x;
  }

  // pow(1, y) = 1
  if (x.eq(ONE)) return x;

  pr = Ctor.precision;

  // pow(x, 1) = x
  if (y.eq(ONE)) return round(x, pr);

  e = y.e;
  k = y.d.length - 1;
  yIsInt = e >= k;
  sign = x.s;

  if (!yIsInt) {

    // pow(x < 0, y non-integer) = NaN
    if (sign < 0) throw Error(decimalError + 'NaN');

  // If y is a small integer use the 'exponentiation by squaring' algorithm.
  } else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
    r = new Ctor(ONE);

    // Max k of 9007199254740991 takes 53 loop iterations.
    // Maximum digits array length; leaves [28, 34] guard digits.
    e = Math.ceil(pr / LOG_BASE + 4);

    external = false;

    for (;;) {
      if (k % 2) {
        r = r.times(x);
        truncate(r.d, e);
      }

      k = mathfloor(k / 2);
      if (k === 0) break;

      x = x.times(x);
      truncate(x.d, e);
    }

    external = true;

    return y.s < 0 ? new Ctor(ONE).div(r) : round(r, pr);
  }

  // Result is negative if x is negative and the last digit of integer y is odd.
  sign = sign < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;

  x.s = 1;
  external = false;
  r = y.times(ln(x, pr + guard));
  external = true;
  r = exp(r);
  r.s = sign;

  return r;
};


/*
 * Return a string representing the value of this Decimal rounded to `sd` significant digits
 * using rounding mode `rounding`.
 *
 * Return exponential notation if `sd` is less than the number of digits necessary to represent
 * the integer part of the value in normal notation.
 *
 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
 *
 */
P.toPrecision = function (sd, rm) {
  var e, str,
    x = this,
    Ctor = x.constructor;

  if (sd === void 0) {
    e = getBase10Exponent(x);
    str = toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);
  } else {
    checkInt32(sd, 1, MAX_DIGITS);

    if (rm === void 0) rm = Ctor.rounding;
    else checkInt32(rm, 0, 8);

    x = round(new Ctor(x), sd, rm);
    e = getBase10Exponent(x);
    str = toString(x, sd <= e || e <= Ctor.toExpNeg, sd);
  }

  return str;
};


/*
 * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
 * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
 * omitted.
 *
 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
 *
 */
P.toSignificantDigits = P.tosd = function (sd, rm) {
  var x = this,
    Ctor = x.constructor;

  if (sd === void 0) {
    sd = Ctor.precision;
    rm = Ctor.rounding;
  } else {
    checkInt32(sd, 1, MAX_DIGITS);

    if (rm === void 0) rm = Ctor.rounding;
    else checkInt32(rm, 0, 8);
  }

  return round(new Ctor(x), sd, rm);
};


/*
 * Return a string representing the value of this Decimal.
 *
 * Return exponential notation if this Decimal has a positive exponent equal to or greater than
 * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
 *
 */
P.toString = P.valueOf = P.val = P.toJSON = P[Symbol.for('nodejs.util.inspect.custom')] = function () {
  var x = this,
    e = getBase10Exponent(x),
    Ctor = x.constructor;

  return toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);
};


// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.


/*
 *  add                 P.minus, P.plus
 *  checkInt32          P.todp, P.toExponential, P.toFixed, P.toPrecision, P.tosd
 *  digitsToString      P.log, P.sqrt, P.pow, toString, exp, ln
 *  divide              P.div, P.idiv, P.log, P.mod, P.sqrt, exp, ln
 *  exp                 P.exp, P.pow
 *  getBase10Exponent   P.exponent, P.sd, P.toint, P.sqrt, P.todp, P.toFixed, P.toPrecision,
 *                      P.toString, divide, round, toString, exp, ln
 *  getLn10             P.log, ln
 *  getZeroString       digitsToString, toString
 *  ln                  P.log, P.ln, P.pow, exp
 *  parseDecimal        Decimal
 *  round               P.abs, P.idiv, P.log, P.minus, P.mod, P.neg, P.plus, P.toint, P.sqrt,
 *                      P.times, P.todp, P.toExponential, P.toFixed, P.pow, P.toPrecision, P.tosd,
 *                      divide, getLn10, exp, ln
 *  subtract            P.minus, P.plus
 *  toString            P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf
 *  truncate            P.pow
 *
 *  Throws:             P.log, P.mod, P.sd, P.sqrt, P.pow,  checkInt32, divide, round,
 *                      getLn10, exp, ln, parseDecimal, Decimal, config
 */


function add(x, y) {
  var carry, d, e, i, k, len, xd, yd,
    Ctor = x.constructor,
    pr = Ctor.precision;

  // If either is zero...
  if (!x.s || !y.s) {

    // Return x if y is zero.
    // Return y if y is non-zero.
    if (!y.s) y = new Ctor(x);
    return external ? round(y, pr) : y;
  }

  xd = x.d;
  yd = y.d;

  // x and y are finite, non-zero numbers with the same sign.

  k = x.e;
  e = y.e;
  xd = xd.slice();
  i = k - e;

  // If base 1e7 exponents differ...
  if (i) {
    if (i < 0) {
      d = xd;
      i = -i;
      len = yd.length;
    } else {
      d = yd;
      e = k;
      len = xd.length;
    }

    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.
    k = Math.ceil(pr / LOG_BASE);
    len = k > len ? k + 1 : len + 1;

    if (i > len) {
      i = len;
      d.length = 1;
    }

    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.
    d.reverse();
    for (; i--;) d.push(0);
    d.reverse();
  }

  len = xd.length;
  i = yd.length;

  // If yd is longer than xd, swap xd and yd so xd points to the longer array.
  if (len - i < 0) {
    i = len;
    d = yd;
    yd = xd;
    xd = d;
  }

  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.
  for (carry = 0; i;) {
    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
    xd[i] %= BASE;
  }

  if (carry) {
    xd.unshift(carry);
    ++e;
  }

  // Remove trailing zeros.
  // No need to check for zero, as +x + +y != 0 && -x + -y != 0
  for (len = xd.length; xd[--len] == 0;) xd.pop();

  y.d = xd;
  y.e = e;

  return external ? round(y, pr) : y;
}


function checkInt32(i, min, max) {
  if (i !== ~~i || i < min || i > max) {
    throw Error(invalidArgument + i);
  }
}


function digitsToString(d) {
  var i, k, ws,
    indexOfLastWord = d.length - 1,
    str = '',
    w = d[0];

  if (indexOfLastWord > 0) {
    str += w;
    for (i = 1; i < indexOfLastWord; i++) {
      ws = d[i] + '';
      k = LOG_BASE - ws.length;
      if (k) str += getZeroString(k);
      str += ws;
    }

    w = d[i];
    ws = w + '';
    k = LOG_BASE - ws.length;
    if (k) str += getZeroString(k);
  } else if (w === 0) {
    return '0';
  }

  // Remove trailing zeros of last w.
  for (; w % 10 === 0;) w /= 10;

  return str + w;
}


var divide = (function () {

  // Assumes non-zero x and k, and hence non-zero result.
  function multiplyInteger(x, k) {
    var temp,
      carry = 0,
      i = x.length;

    for (x = x.slice(); i--;) {
      temp = x[i] * k + carry;
      x[i] = temp % BASE | 0;
      carry = temp / BASE | 0;
    }

    if (carry) x.unshift(carry);

    return x;
  }

  function compare(a, b, aL, bL) {
    var i, r;

    if (aL != bL) {
      r = aL > bL ? 1 : -1;
    } else {
      for (i = r = 0; i < aL; i++) {
        if (a[i] != b[i]) {
          r = a[i] > b[i] ? 1 : -1;
          break;
        }
      }
    }

    return r;
  }

  function subtract(a, b, aL) {
    var i = 0;

    // Subtract b from a.
    for (; aL--;) {
      a[aL] -= i;
      i = a[aL] < b[aL] ? 1 : 0;
      a[aL] = i * BASE + a[aL] - b[aL];
    }

    // Remove leading zeros.
    for (; !a[0] && a.length > 1;) a.shift();
  }

  return function (x, y, pr, dp) {
    var cmp, e, i, k, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz,
      Ctor = x.constructor,
      sign = x.s == y.s ? 1 : -1,
      xd = x.d,
      yd = y.d;

    // Either 0?
    if (!x.s) return new Ctor(x);
    if (!y.s) throw Error(decimalError + 'Division by zero');

    e = x.e - y.e;
    yL = yd.length;
    xL = xd.length;
    q = new Ctor(sign);
    qd = q.d = [];

    // Result exponent may be one less than e.
    for (i = 0; yd[i] == (xd[i] || 0); ) ++i;
    if (yd[i] > (xd[i] || 0)) --e;

    if (pr == null) {
      sd = pr = Ctor.precision;
    } else if (dp) {
      sd = pr + (getBase10Exponent(x) - getBase10Exponent(y)) + 1;
    } else {
      sd = pr;
    }

    if (sd < 0) return new Ctor(0);

    // Convert precision in number of base 10 digits to base 1e7 digits.
    sd = sd / LOG_BASE + 2 | 0;
    i = 0;

    // divisor < 1e7
    if (yL == 1) {
      k = 0;
      yd = yd[0];
      sd++;

      // k is the carry.
      for (; (i < xL || k) && sd--; i++) {
        t = k * BASE + (xd[i] || 0);
        qd[i] = t / yd | 0;
        k = t % yd | 0;
      }

    // divisor >= 1e7
    } else {

      // Normalise xd and yd so highest order digit of yd is >= BASE/2
      k = BASE / (yd[0] + 1) | 0;

      if (k > 1) {
        yd = multiplyInteger(yd, k);
        xd = multiplyInteger(xd, k);
        yL = yd.length;
        xL = xd.length;
      }

      xi = yL;
      rem = xd.slice(0, yL);
      remL = rem.length;

      // Add zeros to make remainder as long as divisor.
      for (; remL < yL;) rem[remL++] = 0;

      yz = yd.slice();
      yz.unshift(0);
      yd0 = yd[0];

      if (yd[1] >= BASE / 2) ++yd0;

      do {
        k = 0;

        // Compare divisor and remainder.
        cmp = compare(yd, rem, yL, remL);

        // If divisor < remainder.
        if (cmp < 0) {

          // Calculate trial digit, k.
          rem0 = rem[0];
          if (yL != remL) rem0 = rem0 * BASE + (rem[1] || 0);

          // k will be how many times the divisor goes into the current remainder.
          k = rem0 / yd0 | 0;

          //  Algorithm:
          //  1. product = divisor * trial digit (k)
          //  2. if product > remainder: product -= divisor, k--
          //  3. remainder -= product
          //  4. if product was < remainder at 2:
          //    5. compare new remainder and divisor
          //    6. If remainder > divisor: remainder -= divisor, k++

          if (k > 1) {
            if (k >= BASE) k = BASE - 1;

            // product = divisor * trial digit.
            prod = multiplyInteger(yd, k);
            prodL = prod.length;
            remL = rem.length;

            // Compare product and remainder.
            cmp = compare(prod, rem, prodL, remL);

            // product > remainder.
            if (cmp == 1) {
              k--;

              // Subtract divisor from product.
              subtract(prod, yL < prodL ? yz : yd, prodL);
            }
          } else {

            // cmp is -1.
            // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
            // to avoid it. If k is 1 there is a need to compare yd and rem again below.
            if (k == 0) cmp = k = 1;
            prod = yd.slice();
          }

          prodL = prod.length;
          if (prodL < remL) prod.unshift(0);

          // Subtract product from remainder.
          subtract(rem, prod, remL);

          // If product was < previous remainder.
          if (cmp == -1) {
            remL = rem.length;

            // Compare divisor and new remainder.
            cmp = compare(yd, rem, yL, remL);

            // If divisor < new remainder, subtract divisor from remainder.
            if (cmp < 1) {
              k++;

              // Subtract divisor from remainder.
              subtract(rem, yL < remL ? yz : yd, remL);
            }
          }

          remL = rem.length;
        } else if (cmp === 0) {
          k++;
          rem = [0];
        }    // if cmp === 1, k will be 0

        // Add the next digit, k, to the result array.
        qd[i++] = k;

        // Update the remainder.
        if (cmp && rem[0]) {
          rem[remL++] = xd[xi] || 0;
        } else {
          rem = [xd[xi]];
          remL = 1;
        }

      } while ((xi++ < xL || rem[0] !== void 0) && sd--);
    }

    // Leading zero?
    if (!qd[0]) qd.shift();

    q.e = e;

    return round(q, dp ? pr + getBase10Exponent(q) + 1 : pr);
  };
})();


/*
 * Return a new Decimal whose value is the natural exponential of `x` truncated to `sd`
 * significant digits.
 *
 * Taylor/Maclaurin series.
 *
 * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
 *
 * Argument reduction:
 *   Repeat x = x / 32, k += 5, until |x| < 0.1
 *   exp(x) = exp(x / 2^k)^(2^k)
 *
 * Previously, the argument was initially reduced by
 * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
 * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
 * found to be slower than just dividing repeatedly by 32 as above.
 *
 * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
 *
 *  exp(x) is non-terminating for any finite, non-zero x.
 *
 */
function exp(x, sd) {
  var denominator, guard, pow, sum, t, wpr,
    i = 0,
    k = 0,
    Ctor = x.constructor,
    pr = Ctor.precision;

  if (getBase10Exponent(x) > 16) throw Error(exponentOutOfRange + getBase10Exponent(x));

  // exp(0) = 1
  if (!x.s) return new Ctor(ONE);

  {
    external = false;
    wpr = pr;
  }

  t = new Ctor(0.03125);

  while (x.abs().gte(0.1)) {
    x = x.times(t);    // x = x / 2^5
    k += 5;
  }

  // Estimate the precision increase necessary to ensure the first 4 rounding digits are correct.
  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
  wpr += guard;
  denominator = pow = sum = new Ctor(ONE);
  Ctor.precision = wpr;

  for (;;) {
    pow = round(pow.times(x), wpr);
    denominator = denominator.times(++i);
    t = sum.plus(divide(pow, denominator, wpr));

    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
      while (k--) sum = round(sum.times(sum), wpr);
      Ctor.precision = pr;
      return sd == null ? (external = true, round(sum, pr)) : sum;
    }

    sum = t;
  }
}


// Calculate the base 10 exponent from the base 1e7 exponent.
function getBase10Exponent(x) {
  var e = x.e * LOG_BASE,
    w = x.d[0];

  // Add the number of digits of the first word of the digits array.
  for (; w >= 10; w /= 10) e++;
  return e;
}


function getLn10(Ctor, sd, pr) {

  if (sd > Ctor.LN10.sd()) {


    // Reset global state in case the exception is caught.
    external = true;
    if (pr) Ctor.precision = pr;
    throw Error(decimalError + 'LN10 precision limit exceeded');
  }

  return round(new Ctor(Ctor.LN10), sd);
}


function getZeroString(k) {
  var zs = '';
  for (; k--;) zs += '0';
  return zs;
}


/*
 * Return a new Decimal whose value is the natural logarithm of `x` truncated to `sd` significant
 * digits.
 *
 *  ln(n) is non-terminating (n != 1)
 *
 */
function ln(y, sd) {
  var c, c0, denominator, e, numerator, sum, t, wpr, x2,
    n = 1,
    guard = 10,
    x = y,
    xd = x.d,
    Ctor = x.constructor,
    pr = Ctor.precision;

  // ln(-x) = NaN
  // ln(0) = -Infinity
  if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));

  // ln(1) = 0
  if (x.eq(ONE)) return new Ctor(0);

  if (sd == null) {
    external = false;
    wpr = pr;
  } else {
    wpr = sd;
  }

  if (x.eq(10)) {
    if (sd == null) external = true;
    return getLn10(Ctor, wpr);
  }

  wpr += guard;
  Ctor.precision = wpr;
  c = digitsToString(xd);
  c0 = c.charAt(0);
  e = getBase10Exponent(x);

  if (Math.abs(e) < 1.5e15) {

    // Argument reduction.
    // The series converges faster the closer the argument is to 1, so using
    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
    // later be divided by this number, then separate out the power of 10 using
    // ln(a*10^b) = ln(a) + b*ln(10).

    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
    // max n is 6 (gives 0.7 - 1.3)
    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
      x = x.times(y);
      c = digitsToString(x.d);
      c0 = c.charAt(0);
      n++;
    }

    e = getBase10Exponent(x);

    if (c0 > 1) {
      x = new Ctor('0.' + c);
      e++;
    } else {
      x = new Ctor(c0 + '.' + c.slice(1));
    }
  } else {

    // The argument reduction method above may result in overflow if the argument y is a massive
    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
    // function using ln(x*10^e) = ln(x) + e*ln(10).
    t = getLn10(Ctor, wpr + 2, pr).times(e + '');
    x = ln(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);

    Ctor.precision = pr;
    return sd == null ? (external = true, round(x, pr)) : x;
  }

  // x is reduced to a value near 1.

  // Taylor series.
  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
  // where x = (y - 1)/(y + 1)    (|x| < 1)
  sum = numerator = x = divide(x.minus(ONE), x.plus(ONE), wpr);
  x2 = round(x.times(x), wpr);
  denominator = 3;

  for (;;) {
    numerator = round(numerator.times(x2), wpr);
    t = sum.plus(divide(numerator, new Ctor(denominator), wpr));

    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
      sum = sum.times(2);

      // Reverse the argument reduction.
      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
      sum = divide(sum, new Ctor(n), wpr);

      Ctor.precision = pr;
      return sd == null ? (external = true, round(sum, pr)) : sum;
    }

    sum = t;
    denominator += 2;
  }
}


/*
 * Parse the value of a new Decimal `x` from string `str`.
 */
function parseDecimal(x, str) {
  var e, i, len;

  // Decimal point?
  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

  // Exponential form?
  if ((i = str.search(/e/i)) > 0) {

    // Determine exponent.
    if (e < 0) e = i;
    e += +str.slice(i + 1);
    str = str.substring(0, i);
  } else if (e < 0) {

    // Integer.
    e = str.length;
  }

  // Determine leading zeros.
  for (i = 0; str.charCodeAt(i) === 48;) ++i;

  // Determine trailing zeros.
  for (len = str.length; str.charCodeAt(len - 1) === 48;) --len;
  str = str.slice(i, len);

  if (str) {
    len -= i;
    e = e - i - 1;
    x.e = mathfloor(e / LOG_BASE);
    x.d = [];

    // Transform base

    // e is the base 10 exponent.
    // i is where to slice str to get the first word of the digits array.
    i = (e + 1) % LOG_BASE;
    if (e < 0) i += LOG_BASE;

    if (i < len) {
      if (i) x.d.push(+str.slice(0, i));
      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));
      str = str.slice(i);
      i = LOG_BASE - str.length;
    } else {
      i -= len;
    }

    for (; i--;) str += '0';
    x.d.push(+str);

    if (external && (x.e > MAX_E || x.e < -MAX_E)) throw Error(exponentOutOfRange + e);
  } else {

    // Zero.
    x.s = 0;
    x.e = 0;
    x.d = [0];
  }

  return x;
}


/*
 * Round `x` to `sd` significant digits, using rounding mode `rm` if present (truncate otherwise).
 */
 function round(x, sd, rm) {
  var i, j, k, n, rd, doRound, w, xdi,
    xd = x.d;

  // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
  // w: the word of xd which contains the rounding digit, a base 1e7 number.
  // xdi: the index of w within xd.
  // n: the number of digits of w.
  // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
  // they had leading zeros)
  // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).

  // Get the length of the first word of the digits array xd.
  for (n = 1, k = xd[0]; k >= 10; k /= 10) n++;
  i = sd - n;

  // Is the rounding digit in the first word of xd?
  if (i < 0) {
    i += LOG_BASE;
    j = sd;
    w = xd[xdi = 0];
  } else {
    xdi = Math.ceil((i + 1) / LOG_BASE);
    k = xd.length;
    if (xdi >= k) return x;
    w = k = xd[xdi];

    // Get the number of digits of w.
    for (n = 1; k >= 10; k /= 10) n++;

    // Get the index of rd within w.
    i %= LOG_BASE;

    // Get the index of rd within w, adjusted for leading zeros.
    // The number of leading zeros of w is given by LOG_BASE - n.
    j = i - LOG_BASE + n;
  }

  if (rm !== void 0) {
    k = mathpow(10, n - j - 1);

    // Get the rounding digit at index j of w.
    rd = w / k % 10 | 0;

    // Are there any non-zero digits after the rounding digit?
    doRound = sd < 0 || xd[xdi + 1] !== void 0 || w % k;

    // The expression `w % mathpow(10, n - j - 1)` returns all the digits of w to the right of the
    // digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression will give
    // 714.

    doRound = rm < 4
      ? (rd || doRound) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
      : rd > 5 || rd == 5 && (rm == 4 || doRound || rm == 6 &&

        // Check whether the digit to the left of the rounding digit is odd.
        ((i > 0 ? j > 0 ? w / mathpow(10, n - j) : 0 : xd[xdi - 1]) % 10) & 1 ||
          rm == (x.s < 0 ? 8 : 7));
  }

  if (sd < 1 || !xd[0]) {
    if (doRound) {
      k = getBase10Exponent(x);
      xd.length = 1;

      // Convert sd to decimal places.
      sd = sd - k - 1;

      // 1, 0.1, 0.01, 0.001, 0.0001 etc.
      xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
      x.e = mathfloor(-sd / LOG_BASE) || 0;
    } else {
      xd.length = 1;

      // Zero.
      xd[0] = x.e = x.s = 0;
    }

    return x;
  }

  // Remove excess digits.
  if (i == 0) {
    xd.length = xdi;
    k = 1;
    xdi--;
  } else {
    xd.length = xdi + 1;
    k = mathpow(10, LOG_BASE - i);

    // E.g. 56700 becomes 56000 if 7 is the rounding digit.
    // j > 0 means i > number of leading zeros of w.
    xd[xdi] = j > 0 ? (w / mathpow(10, n - j) % mathpow(10, j) | 0) * k : 0;
  }

  if (doRound) {
    for (;;) {

      // Is the digit to be rounded up in the first word of xd?
      if (xdi == 0) {
        if ((xd[0] += k) == BASE) {
          xd[0] = 1;
          ++x.e;
        }

        break;
      } else {
        xd[xdi] += k;
        if (xd[xdi] != BASE) break;
        xd[xdi--] = 0;
        k = 1;
      }
    }
  }

  // Remove trailing zeros.
  for (i = xd.length; xd[--i] === 0;) xd.pop();

  if (external && (x.e > MAX_E || x.e < -MAX_E)) {
    throw Error(exponentOutOfRange + getBase10Exponent(x));
  }

  return x;
}


function subtract(x, y) {
  var d, e, i, j, k, len, xd, xe, xLTy, yd,
    Ctor = x.constructor,
    pr = Ctor.precision;

  // Return y negated if x is zero.
  // Return x if y is zero and x is non-zero.
  if (!x.s || !y.s) {
    if (y.s) y.s = -y.s;
    else y = new Ctor(x);
    return external ? round(y, pr) : y;
  }

  xd = x.d;
  yd = y.d;

  // x and y are non-zero numbers with the same sign.

  e = y.e;
  xe = x.e;
  xd = xd.slice();
  k = xe - e;

  // If exponents differ...
  if (k) {
    xLTy = k < 0;

    if (xLTy) {
      d = xd;
      k = -k;
      len = yd.length;
    } else {
      d = yd;
      e = xe;
      len = xd.length;
    }

    // Numbers with massively different exponents would result in a very high number of zeros
    // needing to be prepended, but this can be avoided while still ensuring correct rounding by
    // limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.
    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;

    if (k > i) {
      k = i;
      d.length = 1;
    }

    // Prepend zeros to equalise exponents.
    d.reverse();
    for (i = k; i--;) d.push(0);
    d.reverse();

  // Base 1e7 exponents equal.
  } else {

    // Check digits to determine which is the bigger number.

    i = xd.length;
    len = yd.length;
    xLTy = i < len;
    if (xLTy) len = i;

    for (i = 0; i < len; i++) {
      if (xd[i] != yd[i]) {
        xLTy = xd[i] < yd[i];
        break;
      }
    }

    k = 0;
  }

  if (xLTy) {
    d = xd;
    xd = yd;
    yd = d;
    y.s = -y.s;
  }

  len = xd.length;

  // Append zeros to xd if shorter.
  // Don't add zeros to yd if shorter as subtraction only needs to start at yd length.
  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;

  // Subtract yd from xd.
  for (i = yd.length; i > k;) {
    if (xd[--i] < yd[i]) {
      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;
      --xd[j];
      xd[i] += BASE;
    }

    xd[i] -= yd[i];
  }

  // Remove trailing zeros.
  for (; xd[--len] === 0;) xd.pop();

  // Remove leading zeros and adjust exponent accordingly.
  for (; xd[0] === 0; xd.shift()) --e;

  // Zero?
  if (!xd[0]) return new Ctor(0);

  y.d = xd;
  y.e = e;

  //return external && xd.length >= pr / LOG_BASE ? round(y, pr) : y;
  return external ? round(y, pr) : y;
}


function toString(x, isExp, sd) {
  var k,
    e = getBase10Exponent(x),
    str = digitsToString(x.d),
    len = str.length;

  if (isExp) {
    if (sd && (k = sd - len) > 0) {
      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
    } else if (len > 1) {
      str = str.charAt(0) + '.' + str.slice(1);
    }

    str = str + (e < 0 ? 'e' : 'e+') + e;
  } else if (e < 0) {
    str = '0.' + getZeroString(-e - 1) + str;
    if (sd && (k = sd - len) > 0) str += getZeroString(k);
  } else if (e >= len) {
    str += getZeroString(e + 1 - len);
    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);
  } else {
    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);
    if (sd && (k = sd - len) > 0) {
      if (e + 1 === len) str += '.';
      str += getZeroString(k);
    }
  }

  return x.s < 0 ? '-' + str : str;
}


// Does not strip trailing zeros.
function truncate(arr, len) {
  if (arr.length > len) {
    arr.length = len;
    return true;
  }
}


// Decimal methods


/*
 *  clone
 *  config/set
 */


/*
 * Create and return a Decimal constructor with the same configuration properties as this Decimal
 * constructor.
 *
 */
function clone(obj) {
  var i, p, ps;

  /*
   * The Decimal constructor and exported function.
   * Return a new Decimal instance.
   *
   * value {number|string|Decimal} A numeric value.
   *
   */
  function Decimal(value) {
    var x = this;

    // Decimal called without new.
    if (!(x instanceof Decimal)) return new Decimal(value);

    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
    // which points to Object.
    x.constructor = Decimal;

    // Duplicate.
    if (value instanceof Decimal) {
      x.s = value.s;
      x.e = value.e;
      x.d = (value = value.d) ? value.slice() : value;
      return;
    }

    if (typeof value === 'number') {

      // Reject Infinity/NaN.
      if (value * 0 !== 0) {
        throw Error(invalidArgument + value);
      }

      if (value > 0) {
        x.s = 1;
      } else if (value < 0) {
        value = -value;
        x.s = -1;
      } else {
        x.s = 0;
        x.e = 0;
        x.d = [0];
        return;
      }

      // Fast path for small integers.
      if (value === ~~value && value < 1e7) {
        x.e = 0;
        x.d = [value];
        return;
      }

      return parseDecimal(x, value.toString());
    } else if (typeof value !== 'string') {
      throw Error(invalidArgument + value);
    }

    // Minus sign?
    if (value.charCodeAt(0) === 45) {
      value = value.slice(1);
      x.s = -1;
    } else {
      x.s = 1;
    }

    if (isDecimal.test(value)) parseDecimal(x, value);
    else throw Error(invalidArgument + value);
  }

  Decimal.prototype = P;

  Decimal.ROUND_UP = 0;
  Decimal.ROUND_DOWN = 1;
  Decimal.ROUND_CEIL = 2;
  Decimal.ROUND_FLOOR = 3;
  Decimal.ROUND_HALF_UP = 4;
  Decimal.ROUND_HALF_DOWN = 5;
  Decimal.ROUND_HALF_EVEN = 6;
  Decimal.ROUND_HALF_CEIL = 7;
  Decimal.ROUND_HALF_FLOOR = 8;

  Decimal.clone = clone;
  Decimal.config = Decimal.set = config;

  if (obj === void 0) obj = {};
  if (obj) {
    ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'LN10'];
    for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
  }

  Decimal.config(obj);

  return Decimal;
}


/*
 * Configure global settings for a Decimal constructor.
 *
 * `obj` is an object with one or more of the following properties,
 *
 *   precision  {number}
 *   rounding   {number}
 *   toExpNeg   {number}
 *   toExpPos   {number}
 *
 * E.g. Decimal.config({ precision: 20, rounding: 4 })
 *
 */
function config(obj) {
  if (!obj || typeof obj !== 'object') {
    throw Error(decimalError + 'Object expected');
  }
  var i, p, v,
    ps = [
      'precision', 1, MAX_DIGITS,
      'rounding', 0, 8,
      'toExpNeg', -1 / 0, 0,
      'toExpPos', 0, 1 / 0
    ];

  for (i = 0; i < ps.length; i += 3) {
    if ((v = obj[p = ps[i]]) !== void 0) {
      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;
      else throw Error(invalidArgument + p + ': ' + v);
    }
  }

  if ((v = obj[p = 'LN10']) !== void 0) {
      if (v == Math.LN10) this[p] = new this(v);
      else throw Error(invalidArgument + p + ': ' + v);
  }

  return this;
}


// Create and configure initial Decimal constructor.
var Decimal = clone(defaults);

// Internal constant.
ONE = new Decimal(1);

const Decimal$1 = Decimal;

var identity = i => i;
var PLACE_HOLDER = {
  };
var isPlaceHolder = val => val === PLACE_HOLDER;
var curry0 = fn => function _curried() {
  if (arguments.length === 0 || arguments.length === 1 && isPlaceHolder(arguments.length <= 0 ? undefined : arguments[0])) {
    return _curried;
  }
  return fn(...arguments);
};
var curryN = (n, fn) => {
  if (n === 1) {
    return fn;
  }
  return curry0(function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var argsLength = args.filter(arg => arg !== PLACE_HOLDER).length;
    if (argsLength >= n) {
      return fn(...args);
    }
    return curryN(n - argsLength, curry0(function () {
      for (var _len2 = arguments.length, restArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        restArgs[_key2] = arguments[_key2];
      }
      var newArgs = args.map(arg => isPlaceHolder(arg) ? restArgs.shift() : arg);
      return fn(...newArgs, ...restArgs);
    }));
  });
};
var curry = fn => curryN(fn.length, fn);
var range = (begin, end) => {
  var arr = [];
  for (var i = begin; i < end; ++i) {
    arr[i - begin] = i;
  }
  return arr;
};
var map = curry((fn, arr) => {
  if (Array.isArray(arr)) {
    return arr.map(fn);
  }
  return Object.keys(arr).map(key => arr[key]).map(fn);
});
var compose = function compose() {
  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }
  if (!args.length) {
    return identity;
  }
  var fns = args.reverse();
  // first function can receive multiply arguments
  var firstFn = fns[0];
  var tailsFn = fns.slice(1);
  return function () {
    return tailsFn.reduce((res, fn) => fn(res), firstFn(...arguments));
  };
};
var reverse = arr => {
  if (Array.isArray(arr)) {
    return arr.reverse();
  }

  // can be string
  return arr.split('').reverse().join('');
};
var memoize = fn => {
  var lastArgs = null;
  var lastResult = null;
  return function () {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    if (lastArgs && args.every((val, i) => {
      var _lastArgs;
      return val === ((_lastArgs = lastArgs) === null || _lastArgs === void 0 ? void 0 : _lastArgs[i]);
    })) {
      return lastResult;
    }
    lastArgs = args;
    lastResult = fn(...args);
    return lastResult;
  };
};

/**
 * @fileOverview Some common arithmetic methods
 * @author xile611
 * @date 2015-09-17
 */

/**
 * Get the digit count of a number.
 * If the absolute value is in the interval [0.1, 1), the result is 0.
 * If the absolute value is in the interval [0.01, 0.1), the digit count is -1.
 * If the absolute value is in the interval [0.001, 0.01), the digit count is -2.
 *
 * @param  {Number} value The number
 * @return {Integer}      Digit count
 */
function getDigitCount(value) {
  var result;
  if (value === 0) {
    result = 1;
  } else {
    result = Math.floor(new Decimal$1(value).abs().log(10).toNumber()) + 1;
  }
  return result;
}

/**
 * Get the data in the interval [start, end) with a fixed step.
 * Also handles JS calculation precision issues.
 *
 * @param  {Decimal} start Start point
 * @param  {Decimal} end   End point, not included
 * @param  {Decimal} step  Step size
 * @return {Array}         Array of numbers
 */
function rangeStep(start, end, step) {
  var num = new Decimal$1(start);
  var i = 0;
  var result = [];

  // magic number to prevent infinite loop
  while (num.lt(end) && i < 100000) {
    result.push(num.toNumber());
    num = num.add(step);
    i++;
  }
  return result;
}

/**
 * Linear interpolation of numbers.
 *
 * @param  {Number} a  Endpoint of the domain
 * @param  {Number} b  Endpoint of the domain
 * @param  {Number} t  A value in [0, 1]
 * @return {Number}    A value in the domain
 */
curry((a, b, t) => {
  var newA = +a;
  var newB = +b;
  return newA + t * (newB - newA);
});

/**
 * Inverse operation of linear interpolation.
 *
 * @param  {Number} a Endpoint of the domain
 * @param  {Number} b Endpoint of the domain
 * @param  {Number} x Can be considered as an output value after interpolation
 * @return {Number}   When x is in the range a ~ b, the return value is in [0, 1]
 */
curry((a, b, x) => {
  var diff = b - +a;
  diff = diff || Infinity;
  return (x - a) / diff;
});

/**
 * Inverse operation of linear interpolation with truncation.
 *
 * @param  {Number} a Endpoint of the domain
 * @param  {Number} b Endpoint of the domain
 * @param  {Number} x Can be considered as an output value after interpolation
 * @return {Number}   When x is in the interval a ~ b, the return value is in [0, 1].
 *                    When x is not in the interval a ~ b, it will be truncated to the interval a ~ b.
 */
curry((a, b, x) => {
  var diff = b - +a;
  diff = diff || Infinity;
  return Math.max(0, Math.min(1, (x - a) / diff));
});

/**
 * @fileOverview calculate tick values of scale
 * @author xile611, arcthur
 * @date 2015-09-17
 */

/**
 * Calculate a interval of a minimum value and a maximum value
 *
 * @param  {Number} min       The minimum value
 * @param  {Number} max       The maximum value
 * @return {Array} An interval
 */
var getValidInterval = _ref => {
  var [min, max] = _ref;
  var [validMin, validMax] = [min, max];

  // exchange
  if (min > max) {
    [validMin, validMax] = [max, min];
  }
  return [validMin, validMax];
};

/**
 * Calculate the step which is easy to understand between ticks, like 10, 20, 25
 *
 * @param  roughStep        The rough step calculated by dividing the difference by the tickCount
 * @param  allowDecimals    Allow the ticks to be decimals or not
 * @param  correctionFactor A correction factor
 * @return The step which is easy to understand between two ticks
 */
var getFormatStep = (roughStep, allowDecimals, correctionFactor) => {
  if (roughStep.lte(0)) {
    return new Decimal$1(0);
  }
  var digitCount = getDigitCount(roughStep.toNumber());
  // The ratio between the rough step and the smallest number which has a bigger
  // order of magnitudes than the rough step
  var digitCountValue = new Decimal$1(10).pow(digitCount);
  var stepRatio = roughStep.div(digitCountValue);
  // When an integer and a float multiplied, the accuracy of result may be wrong
  var stepRatioScale = digitCount !== 1 ? 0.05 : 0.1;
  var amendStepRatio = new Decimal$1(Math.ceil(stepRatio.div(stepRatioScale).toNumber())).add(correctionFactor).mul(stepRatioScale);
  var formatStep = amendStepRatio.mul(digitCountValue);
  return allowDecimals ? new Decimal$1(formatStep.toNumber()) : new Decimal$1(Math.ceil(formatStep.toNumber()));
};

/**
 * calculate the ticks when the minimum value equals to the maximum value
 *
 * @param  value         The minimum value which is also the maximum value
 * @param  tickCount     The count of ticks
 * @param  allowDecimals Allow the ticks to be decimals or not
 * @return array of ticks
 */
var getTickOfSingleValue = (value, tickCount, allowDecimals) => {
  var step = new Decimal$1(1);
  // calculate the middle value of ticks
  var middle = new Decimal$1(value);
  if (!middle.isint() && allowDecimals) {
    var absVal = Math.abs(value);
    if (absVal < 1) {
      // The step should be a float number when the difference is smaller than 1
      step = new Decimal$1(10).pow(getDigitCount(value) - 1);
      middle = new Decimal$1(Math.floor(middle.div(step).toNumber())).mul(step);
    } else if (absVal > 1) {
      // Return the maximum integer which is smaller than 'value' when 'value' is greater than 1
      middle = new Decimal$1(Math.floor(value));
    }
  } else if (value === 0) {
    middle = new Decimal$1(Math.floor((tickCount - 1) / 2));
  } else if (!allowDecimals) {
    middle = new Decimal$1(Math.floor(value));
  }
  var middleIndex = Math.floor((tickCount - 1) / 2);
  var fn = compose(map(n => middle.add(new Decimal$1(n - middleIndex).mul(step)).toNumber()), range);
  return fn(0, tickCount);
};

/**
 * Calculate the step
 *
 * @param  min              The minimum value of an interval
 * @param  max              The maximum value of an interval
 * @param  tickCount        The count of ticks
 * @param  allowDecimals    Allow the ticks to be decimals or not
 * @param  correctionFactor A correction factor
 * @return The step, minimum value of ticks, maximum value of ticks
 */
var _calculateStep = function calculateStep(min, max, tickCount, allowDecimals) {
  var correctionFactor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  // dirty hack (for recharts' test)
  if (!Number.isFinite((max - min) / (tickCount - 1))) {
    return {
      step: new Decimal$1(0),
      tickMin: new Decimal$1(0),
      tickMax: new Decimal$1(0)
    };
  }

  // The step which is easy to understand between two ticks
  var step = getFormatStep(new Decimal$1(max).sub(min).div(tickCount - 1), allowDecimals, correctionFactor);

  // A medial value of ticks
  var middle;

  // When 0 is inside the interval, 0 should be a tick
  if (min <= 0 && max >= 0) {
    middle = new Decimal$1(0);
  } else {
    // calculate the middle value
    middle = new Decimal$1(min).add(max).div(2);
    // minus modulo value
    middle = middle.sub(new Decimal$1(middle).mod(step));
  }
  var belowCount = Math.ceil(middle.sub(min).div(step).toNumber());
  var upCount = Math.ceil(new Decimal$1(max).sub(middle).div(step).toNumber());
  var scaleCount = belowCount + upCount + 1;
  if (scaleCount > tickCount) {
    // When more ticks need to cover the interval, step should be bigger.
    return _calculateStep(min, max, tickCount, allowDecimals, correctionFactor + 1);
  }
  if (scaleCount < tickCount) {
    // When less ticks can cover the interval, we should add some additional ticks
    upCount = max > 0 ? upCount + (tickCount - scaleCount) : upCount;
    belowCount = max > 0 ? belowCount : belowCount + (tickCount - scaleCount);
  }
  return {
    step,
    tickMin: middle.sub(new Decimal$1(belowCount).mul(step)),
    tickMax: middle.add(new Decimal$1(upCount).mul(step))
  };
};
function getNiceTickValuesFn(_ref2) {
  var [min, max] = _ref2;
  var tickCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;
  var allowDecimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  // More than two ticks should be return
  var count = Math.max(tickCount, 2);
  var [cormin, cormax] = getValidInterval([min, max]);
  if (cormin === -Infinity || cormax === Infinity) {
    var _values = cormax === Infinity ? [cormin, ...range(0, tickCount - 1).map(() => Infinity)] : [...range(0, tickCount - 1).map(() => -Infinity), cormax];
    return min > max ? reverse(_values) : _values;
  }
  if (cormin === cormax) {
    return getTickOfSingleValue(cormin, tickCount, allowDecimals);
  }

  // Get the step between two ticks
  var {
    step,
    tickMin,
    tickMax
  } = _calculateStep(cormin, cormax, count, allowDecimals, 0);
  var values = rangeStep(tickMin, tickMax.add(new Decimal$1(0.1).mul(step)), step);
  return min > max ? reverse(values) : values;
}

/**
 * Calculate the ticks of an interval.
 * Ticks will be constrained to the interval [min, max] even if it makes them less rounded and nice.
 *
 * @param tuple of [min,max] min: The minimum value, max: The maximum value
 * @param tickCount     The count of ticks. This function may return less than tickCount ticks if the interval is too small.
 * @param allowDecimals Allow the ticks to be decimals or not
 * @return array of ticks
 */
function getTickValuesFixedDomainFn(_ref3, tickCount) {
  var [min, max] = _ref3;
  var allowDecimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  // More than two ticks should be return
  var [cormin, cormax] = getValidInterval([min, max]);
  if (cormin === -Infinity || cormax === Infinity) {
    return [min, max];
  }
  if (cormin === cormax) {
    return [cormin];
  }
  var count = Math.max(tickCount, 2);
  var step = getFormatStep(new Decimal$1(cormax).sub(cormin).div(count - 1), allowDecimals, 0);
  var values = [...rangeStep(new Decimal$1(cormin), new Decimal$1(cormax), step), cormax];
  if (allowDecimals === false) {
    /*
     * allowDecimals is false means that we want to have integer ticks.
     * The step is guaranteed to be an integer in the code above which is great start
     * but when the first step is not an integer, it will start stepping from a decimal value anyway.
     * So we need to round all the values to integers after the fact.
     */
    values = values.map(value => Math.round(value));
  }
  return min > max ? reverse(values) : values;
}
var getNiceTickValues = memoize(getNiceTickValuesFn);
var getTickValuesFixedDomain = memoize(getTickValuesFixedDomainFn);

var selectRootMaxBarSize = state => state.rootProps.maxBarSize;
var selectBarGap = state => state.rootProps.barGap;
var selectBarCategoryGap = state => state.rootProps.barCategoryGap;
var selectRootBarSize = state => state.rootProps.barSize;
var selectStackOffsetType = state => state.rootProps.stackOffset;
var selectChartName = state => state.options.chartName;
var selectSyncId = state => state.rootProps.syncId;
var selectSyncMethod = state => state.rootProps.syncMethod;
var selectEventEmitter = state => state.options.eventEmitter;

var defaultPolarAngleAxisProps = {
  allowDuplicatedCategory: true,
  // if I set this to false then Tooltip synchronisation stops working in Radar, wtf
  angleAxisId: 0,
  axisLine: true,
  cx: 0,
  cy: 0,
  orientation: 'outer',
  reversed: false,
  scale: 'auto',
  tick: true,
  tickLine: true,
  tickSize: 8,
  type: 'category'
};

var defaultPolarRadiusAxisProps = {
  allowDataOverflow: false,
  allowDuplicatedCategory: true,
  angle: 0,
  axisLine: true,
  cx: 0,
  cy: 0,
  orientation: 'right',
  radiusAxisId: 0,
  scale: 'auto',
  stroke: '#ccc',
  tick: true,
  tickCount: 5,
  type: 'number'
};

var combineAxisRangeWithReverse = (axisSettings, axisRange) => {
  if (!axisSettings || !axisRange) {
    return undefined;
  }
  if (axisSettings !== null && axisSettings !== void 0 && axisSettings.reversed) {
    return [axisRange[1], axisRange[0]];
  }
  return axisRange;
};

var implicitAngleAxis = {
  allowDataOverflow: false,
  allowDecimals: false,
  allowDuplicatedCategory: false,
  // defaultPolarAngleAxisProps.allowDuplicatedCategory has it set to true but the actual axis rendering ignores the prop because reasons,
  dataKey: undefined,
  domain: undefined,
  id: defaultPolarAngleAxisProps.angleAxisId,
  includeHidden: false,
  name: undefined,
  reversed: defaultPolarAngleAxisProps.reversed,
  scale: defaultPolarAngleAxisProps.scale,
  tick: defaultPolarAngleAxisProps.tick,
  tickCount: undefined,
  ticks: undefined,
  type: defaultPolarAngleAxisProps.type,
  unit: undefined
};
var implicitRadiusAxis = {
  allowDataOverflow: defaultPolarRadiusAxisProps.allowDataOverflow,
  allowDecimals: false,
  allowDuplicatedCategory: defaultPolarRadiusAxisProps.allowDuplicatedCategory,
  dataKey: undefined,
  domain: undefined,
  id: defaultPolarRadiusAxisProps.radiusAxisId,
  includeHidden: false,
  name: undefined,
  reversed: false,
  scale: defaultPolarRadiusAxisProps.scale,
  tick: defaultPolarRadiusAxisProps.tick,
  tickCount: defaultPolarRadiusAxisProps.tickCount,
  ticks: undefined,
  type: defaultPolarRadiusAxisProps.type,
  unit: undefined
};
var implicitRadialBarAngleAxis = {
  allowDataOverflow: false,
  allowDecimals: false,
  allowDuplicatedCategory: defaultPolarAngleAxisProps.allowDuplicatedCategory,
  dataKey: undefined,
  domain: undefined,
  id: defaultPolarAngleAxisProps.angleAxisId,
  includeHidden: false,
  name: undefined,
  reversed: false,
  scale: defaultPolarAngleAxisProps.scale,
  tick: defaultPolarAngleAxisProps.tick,
  tickCount: undefined,
  ticks: undefined,
  type: 'number',
  unit: undefined
};
var implicitRadialBarRadiusAxis = {
  allowDataOverflow: defaultPolarRadiusAxisProps.allowDataOverflow,
  allowDecimals: false,
  allowDuplicatedCategory: defaultPolarRadiusAxisProps.allowDuplicatedCategory,
  dataKey: undefined,
  domain: undefined,
  id: defaultPolarRadiusAxisProps.radiusAxisId,
  includeHidden: false,
  name: undefined,
  reversed: false,
  scale: defaultPolarRadiusAxisProps.scale,
  tick: defaultPolarRadiusAxisProps.tick,
  tickCount: defaultPolarRadiusAxisProps.tickCount,
  ticks: undefined,
  type: 'category',
  unit: undefined
};
var selectAngleAxis = (state, angleAxisId) => {
  if (state.polarAxis.angleAxis[angleAxisId] != null) {
    return state.polarAxis.angleAxis[angleAxisId];
  }
  if (state.layout.layoutType === 'radial') {
    return implicitRadialBarAngleAxis;
  }
  return implicitAngleAxis;
};
var selectRadiusAxis = (state, radiusAxisId) => {
  if (state.polarAxis.radiusAxis[radiusAxisId] != null) {
    return state.polarAxis.radiusAxis[radiusAxisId];
  }
  if (state.layout.layoutType === 'radial') {
    return implicitRadialBarRadiusAxis;
  }
  return implicitRadiusAxis;
};
var selectPolarOptions = state => state.polarOptions;
var selectMaxRadius = createSelector([selectChartWidth, selectChartHeight, selectChartOffsetInternal], getMaxRadius);
var selectInnerRadius = createSelector([selectPolarOptions, selectMaxRadius], (polarChartOptions, maxRadius) => {
  if (polarChartOptions == null) {
    return undefined;
  }
  return getPercentValue(polarChartOptions.innerRadius, maxRadius, 0);
});
var selectOuterRadius = createSelector([selectPolarOptions, selectMaxRadius], (polarChartOptions, maxRadius) => {
  if (polarChartOptions == null) {
    return undefined;
  }
  return getPercentValue(polarChartOptions.outerRadius, maxRadius, maxRadius * 0.8);
});
var combineAngleAxisRange = polarOptions => {
  if (polarOptions == null) {
    return [0, 0];
  }
  var {
    startAngle,
    endAngle
  } = polarOptions;
  return [startAngle, endAngle];
};
var selectAngleAxisRange = createSelector([selectPolarOptions], combineAngleAxisRange);
var selectAngleAxisRangeWithReversed = createSelector([selectAngleAxis, selectAngleAxisRange], combineAxisRangeWithReverse);
var selectRadiusAxisRange = createSelector([selectMaxRadius, selectInnerRadius, selectOuterRadius], (maxRadius, innerRadius, outerRadius) => {
  if (maxRadius == null || innerRadius == null || outerRadius == null) {
    return undefined;
  }
  return [innerRadius, outerRadius];
});
var selectRadiusAxisRangeWithReversed = createSelector([selectRadiusAxis, selectRadiusAxisRange], combineAxisRangeWithReverse);
var selectPolarViewBox = createSelector([selectChartLayout, selectPolarOptions, selectInnerRadius, selectOuterRadius, selectChartWidth, selectChartHeight], (layout, polarOptions, innerRadius, outerRadius, width, height) => {
  if (layout !== 'centric' && layout !== 'radial' || polarOptions == null || innerRadius == null || outerRadius == null) {
    return undefined;
  }
  var {
    cx,
    cy,
    startAngle,
    endAngle
  } = polarOptions;
  return {
    cx: getPercentValue(cx, width, width / 2),
    cy: getPercentValue(cy, height, height / 2),
    innerRadius,
    outerRadius,
    startAngle,
    endAngle,
    clockWise: false
  };
});

var pickAxisType = (_state, axisType) => axisType;

var pickAxisId = (_state, _axisType, axisId) => axisId;

function ownKeys$t(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$t(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$t(Object(t), true).forEach(function (r) { _defineProperty$x(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$t(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$x(e, r, t) { return (r = _toPropertyKey$x(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$x(t) { var i = _toPrimitive$x(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$x(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var defaultNumericDomain = [0, 'auto'];

/**
 * angle, radius, X, Y, and Z axes all have domain and range and scale and associated settings
 */

/**
 * X and Y axes have ticks. Z axis is never displayed and so it lacks ticks
 * and tick settings.
 */

/**
 * If an axis is not explicitly defined as an element,
 * we still need to render something in the chart and we need
 * some object to hold the domain and default settings.
 */
var implicitXAxis = {
  allowDataOverflow: false,
  allowDecimals: true,
  allowDuplicatedCategory: true,
  angle: 0,
  dataKey: undefined,
  domain: undefined,
  height: 30,
  hide: true,
  id: 0,
  includeHidden: false,
  interval: 'preserveEnd',
  minTickGap: 5,
  mirror: false,
  name: undefined,
  orientation: 'bottom',
  padding: {
    left: 0,
    right: 0
  },
  reversed: false,
  scale: 'auto',
  tick: true,
  tickCount: 5,
  tickFormatter: undefined,
  ticks: undefined,
  type: 'category',
  unit: undefined
};
var selectXAxisSettings = (state, axisId) => {
  var axis = state.cartesianAxis.xAxis[axisId];
  if (axis == null) {
    return implicitXAxis;
  }
  return axis;
};

/**
 * If an axis is not explicitly defined as an element,
 * we still need to render something in the chart and we need
 * some object to hold the domain and default settings.
 */
var implicitYAxis = {
  allowDataOverflow: false,
  allowDecimals: true,
  allowDuplicatedCategory: true,
  angle: 0,
  dataKey: undefined,
  domain: defaultNumericDomain,
  hide: true,
  id: 0,
  includeHidden: false,
  interval: 'preserveEnd',
  minTickGap: 5,
  mirror: false,
  name: undefined,
  orientation: 'left',
  padding: {
    top: 0,
    bottom: 0
  },
  reversed: false,
  scale: 'auto',
  tick: true,
  tickCount: 5,
  tickFormatter: undefined,
  ticks: undefined,
  type: 'number',
  unit: undefined,
  width: DEFAULT_Y_AXIS_WIDTH
};
var selectYAxisSettings = (state, axisId) => {
  var axis = state.cartesianAxis.yAxis[axisId];
  if (axis == null) {
    return implicitYAxis;
  }
  return axis;
};
var implicitZAxis = {
  domain: [0, 'auto'],
  includeHidden: false,
  reversed: false,
  allowDataOverflow: false,
  allowDuplicatedCategory: false,
  dataKey: undefined,
  id: 0,
  name: '',
  range: [64, 64],
  scale: 'auto',
  type: 'number',
  unit: ''
};
var selectZAxisSettings = (state, axisId) => {
  var axis = state.cartesianAxis.zAxis[axisId];
  if (axis == null) {
    return implicitZAxis;
  }
  return axis;
};
var selectBaseAxis = (state, axisType, axisId) => {
  switch (axisType) {
    case 'xAxis':
      {
        return selectXAxisSettings(state, axisId);
      }
    case 'yAxis':
      {
        return selectYAxisSettings(state, axisId);
      }
    case 'zAxis':
      {
        return selectZAxisSettings(state, axisId);
      }
    case 'angleAxis':
      {
        return selectAngleAxis(state, axisId);
      }
    case 'radiusAxis':
      {
        return selectRadiusAxis(state, axisId);
      }
    default:
      throw new Error("Unexpected axis type: ".concat(axisType));
  }
};
var selectCartesianAxisSettings = (state, axisType, axisId) => {
  switch (axisType) {
    case 'xAxis':
      {
        return selectXAxisSettings(state, axisId);
      }
    case 'yAxis':
      {
        return selectYAxisSettings(state, axisId);
      }
    default:
      throw new Error("Unexpected axis type: ".concat(axisType));
  }
};

/**
 * Selects either an X or Y axis. Doesn't work with Z axis - for that, instead use selectBaseAxis.
 * @param state Root state
 * @param axisType xAxis | yAxis
 * @param axisId xAxisId | yAxisId
 * @returns axis settings object
 */
var selectAxisSettings = (state, axisType, axisId) => {
  switch (axisType) {
    case 'xAxis':
      {
        return selectXAxisSettings(state, axisId);
      }
    case 'yAxis':
      {
        return selectYAxisSettings(state, axisId);
      }
    case 'angleAxis':
      {
        return selectAngleAxis(state, axisId);
      }
    case 'radiusAxis':
      {
        return selectRadiusAxis(state, axisId);
      }
    default:
      throw new Error("Unexpected axis type: ".concat(axisType));
  }
};

/**
 * @param state RechartsRootState
 * @return boolean true if there is at least one Bar or RadialBar
 */
var selectHasBar = state => state.graphicalItems.countOfBars > 0;

/**
 * Filters CartesianGraphicalItemSettings by the relevant axis ID
 * @param axisType 'xAxis' | 'yAxis' | 'zAxis' | 'radiusAxis' | 'angleAxis'
 * @param axisId from props, defaults to 0
 *
 * @returns Predicate function that return true for CartesianGraphicalItemSettings that are relevant to the specified axis
 */
function itemAxisPredicate(axisType, axisId) {
  return item => {
    switch (axisType) {
      case 'xAxis':
        // This is sensitive to the data type, as 0 !== '0'. I wonder if we should be more flexible. How does 2.x branch behave? TODO write test for that
        return 'xAxisId' in item && item.xAxisId === axisId;
      case 'yAxis':
        return 'yAxisId' in item && item.yAxisId === axisId;
      case 'zAxis':
        return 'zAxisId' in item && item.zAxisId === axisId;
      case 'angleAxis':
        return 'angleAxisId' in item && item.angleAxisId === axisId;
      case 'radiusAxis':
        return 'radiusAxisId' in item && item.radiusAxisId === axisId;
      default:
        return false;
    }
  };
}
var selectUnfilteredCartesianItems = state => state.graphicalItems.cartesianItems;
var selectAxisPredicate$1 = createSelector([pickAxisType, pickAxisId], itemAxisPredicate);
var combineGraphicalItemsSettings = (graphicalItems, axisSettings, axisPredicate) => graphicalItems.filter(axisPredicate).filter(item => {
  if ((axisSettings === null || axisSettings === void 0 ? void 0 : axisSettings.includeHidden) === true) {
    return true;
  }
  return !item.hide;
});
var selectCartesianItemsSettings = createSelector([selectUnfilteredCartesianItems, selectBaseAxis, selectAxisPredicate$1], combineGraphicalItemsSettings);
var filterGraphicalNotStackedItems = cartesianItems => cartesianItems.filter(item => item.stackId === undefined);
var selectCartesianItemsSettingsExceptStacked = createSelector([selectCartesianItemsSettings], filterGraphicalNotStackedItems);
var combineGraphicalItemsData = cartesianItems => cartesianItems.map(item => item.data).filter(Boolean).flat(1);

/**
 * This is a "cheap" selector - it returns the data but doesn't iterate them, so it is not sensitive on the array length.
 * Also does not apply dataKey yet.
 * @param state RechartsRootState
 * @returns data defined on the chart graphical items, such as Line or Scatter or Pie, and filtered with appropriate dataKey
 */
var selectCartesianGraphicalItemsData = createSelector([selectCartesianItemsSettings], combineGraphicalItemsData);
var combineDisplayedData = (graphicalItemsData, _ref) => {
  var {
    chartData = [],
    dataStartIndex,
    dataEndIndex
  } = _ref;
  if (graphicalItemsData.length > 0) {
    /*
     * There is no slicing when data is defined on graphical items. Why?
     * Because Brush ignores data defined on graphical items,
     * and does not render.
     * So Brush will never show up in a Scatter chart for example.
     * This is something we will need to fix.
     *
     * Now, when the root chart data is not defined, the dataEndIndex is 0,
     * which means the itemsData will be sliced to an empty array anyway.
     * But that's an implementation detail, and we can fix that too.
     *
     * Also, in absence of Axis dataKey, we use the dataKey from each item, respectively.
     * This is the usual pattern for numerical axis, that is the one where bars go up:
     * users don't specify any dataKey by default and expect the axis to "just match the data".
     */
    return graphicalItemsData;
  }
  return chartData.slice(dataStartIndex, dataEndIndex + 1);
};

/**
 * This selector will return all data there is in the chart: graphical items, chart root, all together.
 * Useful for figuring out an axis domain (because that needs to know of everything),
 * not useful for rendering individual graphical elements (because they need to know which data is theirs and which is not).
 *
 * This function will discard the original indexes, so it is also not useful for anything that depends on ordering.
 */
var selectDisplayedData$1 = createSelector([selectCartesianGraphicalItemsData, selectChartDataWithIndexesIfNotInPanorama], combineDisplayedData);
var combineAppliedValues = (data, axisSettings, items) => {
  if ((axisSettings === null || axisSettings === void 0 ? void 0 : axisSettings.dataKey) != null) {
    return data.map(item => ({
      value: getValueByDataKey(item, axisSettings.dataKey)
    }));
  }
  if (items.length > 0) {
    return items.map(item => item.dataKey).flatMap(dataKey => data.map(entry => ({
      value: getValueByDataKey(entry, dataKey)
    })));
  }
  return data.map(entry => ({
    value: entry
  }));
};

/**
 * This selector will return all values with the appropriate dataKey applied on them.
 * Which dataKey is appropriate depends on where it is defined.
 *
 * This is an expensive selector - it will iterate all data and compute their value using the provided dataKey.
 */
var selectAllAppliedValues = createSelector([selectDisplayedData$1, selectBaseAxis, selectCartesianItemsSettings], combineAppliedValues);
function isErrorBarRelevantForAxisType(axisType, errorBar) {
  switch (axisType) {
    case 'xAxis':
      return errorBar.direction === 'x';
    case 'yAxis':
      return errorBar.direction === 'y';
    default:
      return false;
  }
}
function onlyAllowNumbers(data) {
  return data.filter(v => isNumOrStr(v) || v instanceof Date).map(Number).filter(n => isNan(n) === false);
}

/**
 * @param entry One item in the 'data' array. Could be anything really - this is defined externally. This is the raw, before dataKey application
 * @param appliedValue This is the result of applying the 'main' dataKey on the `entry`.
 * @param relevantErrorBars Error bars that are relevant for the current axis and layout and all that.
 * @return either undefined or an array of ErrorValue
 */
function getErrorDomainByDataKey(entry, appliedValue, relevantErrorBars) {
  if (!relevantErrorBars || typeof appliedValue !== 'number' || isNan(appliedValue)) {
    return [];
  }
  if (!relevantErrorBars.length) {
    return [];
  }
  return onlyAllowNumbers(relevantErrorBars.flatMap(eb => {
    var errorValue = getValueByDataKey(entry, eb.dataKey);
    var lowBound, highBound;
    if (Array.isArray(errorValue)) {
      [lowBound, highBound] = errorValue;
    } else {
      lowBound = highBound = errorValue;
    }
    if (!isWellBehavedNumber(lowBound) || !isWellBehavedNumber(highBound)) {
      return undefined;
    }
    return [appliedValue - lowBound, appliedValue + highBound];
  }));
}
var combineStackGroups = (displayedData, items, stackOffsetType) => {
  var initialItemsGroups = {};
  var itemsGroup = items.reduce((acc, item) => {
    if (item.stackId == null) {
      return acc;
    }
    if (acc[item.stackId] == null) {
      acc[item.stackId] = [];
    }
    acc[item.stackId].push(item);
    return acc;
  }, initialItemsGroups);
  return Object.fromEntries(Object.entries(itemsGroup).map(_ref2 => {
    var [stackId, graphicalItems] = _ref2;
    var dataKeys = graphicalItems.map(i => i.dataKey);
    return [stackId, {
      // @ts-expect-error getStackedData requires that the input is array of objects, Recharts does not test for that
      stackedData: getStackedData(displayedData, dataKeys, stackOffsetType),
      graphicalItems
    }];
  }));
};
/**
 * Stack groups are groups of graphical items that stack on each other.
 * Stack is a function of axis type (X, Y), axis ID, and stack ID.
 * Graphical items that do not have a stack ID are not going to be present in stack groups.
 */
var selectStackGroups = createSelector([selectDisplayedData$1, selectCartesianItemsSettings, selectStackOffsetType], combineStackGroups);
var combineDomainOfStackGroups = (stackGroups, _ref3, axisType) => {
  var {
    dataStartIndex,
    dataEndIndex
  } = _ref3;
  if (axisType === 'zAxis') {
    // ZAxis ignores stacks
    return undefined;
  }
  var domainOfStackGroups = getDomainOfStackGroups(stackGroups, dataStartIndex, dataEndIndex);
  if (domainOfStackGroups != null && domainOfStackGroups[0] === 0 && domainOfStackGroups[1] === 0) {
    return undefined;
  }
  return domainOfStackGroups;
};
var selectDomainOfStackGroups = createSelector([selectStackGroups, selectChartDataWithIndexes, pickAxisType], combineDomainOfStackGroups);
var combineAppliedNumericalValuesIncludingErrorValues = (data, axisSettings, items, axisType) => {
  if (items.length > 0) {
    return data.flatMap(entry => {
      return items.flatMap(item => {
        var _item$errorBars, _axisSettings$dataKey;
        var relevantErrorBars = (_item$errorBars = item.errorBars) === null || _item$errorBars === void 0 ? void 0 : _item$errorBars.filter(errorBar => isErrorBarRelevantForAxisType(axisType, errorBar));
        var valueByDataKey = getValueByDataKey(entry, (_axisSettings$dataKey = axisSettings.dataKey) !== null && _axisSettings$dataKey !== void 0 ? _axisSettings$dataKey : item.dataKey);
        return {
          value: valueByDataKey,
          errorDomain: getErrorDomainByDataKey(entry, valueByDataKey, relevantErrorBars)
        };
      });
    }).filter(Boolean);
  }
  if ((axisSettings === null || axisSettings === void 0 ? void 0 : axisSettings.dataKey) != null) {
    return data.map(item => ({
      value: getValueByDataKey(item, axisSettings.dataKey),
      errorDomain: []
    }));
  }
  return data.map(entry => ({
    value: entry,
    errorDomain: []
  }));
};
var selectAllAppliedNumericalValuesIncludingErrorValues = createSelector(selectDisplayedData$1, selectBaseAxis, selectCartesianItemsSettingsExceptStacked, pickAxisType, combineAppliedNumericalValuesIncludingErrorValues);
function onlyAllowNumbersAndStringsAndDates(item) {
  var {
    value
  } = item;
  if (isNumOrStr(value) || value instanceof Date) {
    return value;
  }
  return undefined;
}
var computeNumericalDomain = dataWithErrorDomains => {
  var allDataSquished = dataWithErrorDomains
  // This flatMap has to be flat because we're creating a new array in the return value
  .flatMap(d => [d.value, d.errorDomain])
  // This flat is needed because a) errorDomain is an array, and b) value may be a number, or it may be a range (for Area, for example)
  .flat(1);
  var onlyNumbers = onlyAllowNumbers(allDataSquished);
  if (onlyNumbers.length === 0) {
    return undefined;
  }
  return [Math.min(...onlyNumbers), Math.max(...onlyNumbers)];
};
var computeDomainOfTypeCategory = (allDataSquished, axisSettings, isCategorical) => {
  var categoricalDomain = allDataSquished.map(onlyAllowNumbersAndStringsAndDates).filter(v => v != null);
  if (isCategorical && (axisSettings.dataKey == null || axisSettings.allowDuplicatedCategory && hasDuplicate(categoricalDomain))) {
    /*
     * 1. In an absence of dataKey, Recharts will use array indexes as its categorical domain
     * 2. When category axis has duplicated text, serial numbers are used to generate scale
     */
    return range$3(0, allDataSquished.length);
  }
  if (axisSettings.allowDuplicatedCategory) {
    return categoricalDomain;
  }
  return Array.from(new Set(categoricalDomain));
};
var getDomainDefinition = axisSettings => {
  var _axisSettings$domain;
  if (axisSettings == null || !('domain' in axisSettings)) {
    return defaultNumericDomain;
  }
  if (axisSettings.domain != null) {
    return axisSettings.domain;
  }
  if (axisSettings.ticks != null) {
    if (axisSettings.type === 'number') {
      var allValues = onlyAllowNumbers(axisSettings.ticks);
      return [Math.min(...allValues), Math.max(...allValues)];
    }
    if (axisSettings.type === 'category') {
      return axisSettings.ticks.map(String);
    }
  }
  return (_axisSettings$domain = axisSettings === null || axisSettings === void 0 ? void 0 : axisSettings.domain) !== null && _axisSettings$domain !== void 0 ? _axisSettings$domain : defaultNumericDomain;
};
var mergeDomains = function mergeDomains() {
  for (var _len = arguments.length, domains = new Array(_len), _key = 0; _key < _len; _key++) {
    domains[_key] = arguments[_key];
  }
  var allDomains = domains.filter(Boolean);
  if (allDomains.length === 0) {
    return undefined;
  }
  var allValues = allDomains.flat();
  var min = Math.min(...allValues);
  var max = Math.max(...allValues);
  return [min, max];
};
var selectReferenceDots = state => state.referenceElements.dots;
var filterReferenceElements = (elements, axisType, axisId) => {
  return elements.filter(el => el.ifOverflow === 'extendDomain').filter(el => {
    if (axisType === 'xAxis') {
      return el.xAxisId === axisId;
    }
    return el.yAxisId === axisId;
  });
};
var selectReferenceDotsByAxis = createSelector([selectReferenceDots, pickAxisType, pickAxisId], filterReferenceElements);
var selectReferenceAreas = state => state.referenceElements.areas;
var selectReferenceAreasByAxis = createSelector([selectReferenceAreas, pickAxisType, pickAxisId], filterReferenceElements);
var selectReferenceLines = state => state.referenceElements.lines;
var selectReferenceLinesByAxis = createSelector([selectReferenceLines, pickAxisType, pickAxisId], filterReferenceElements);
var combineDotsDomain = (dots, axisType) => {
  var allCoords = onlyAllowNumbers(dots.map(dot => axisType === 'xAxis' ? dot.x : dot.y));
  if (allCoords.length === 0) {
    return undefined;
  }
  return [Math.min(...allCoords), Math.max(...allCoords)];
};
var selectReferenceDotsDomain = createSelector(selectReferenceDotsByAxis, pickAxisType, combineDotsDomain);
var combineAreasDomain = (areas, axisType) => {
  var allCoords = onlyAllowNumbers(areas.flatMap(area => [axisType === 'xAxis' ? area.x1 : area.y1, axisType === 'xAxis' ? area.x2 : area.y2]));
  if (allCoords.length === 0) {
    return undefined;
  }
  return [Math.min(...allCoords), Math.max(...allCoords)];
};
var selectReferenceAreasDomain = createSelector([selectReferenceAreasByAxis, pickAxisType], combineAreasDomain);
var combineLinesDomain = (lines, axisType) => {
  var allCoords = onlyAllowNumbers(lines.map(line => axisType === 'xAxis' ? line.x : line.y));
  if (allCoords.length === 0) {
    return undefined;
  }
  return [Math.min(...allCoords), Math.max(...allCoords)];
};
var selectReferenceLinesDomain = createSelector(selectReferenceLinesByAxis, pickAxisType, combineLinesDomain);
var selectReferenceElementsDomain = createSelector(selectReferenceDotsDomain, selectReferenceLinesDomain, selectReferenceAreasDomain, (dotsDomain, linesDomain, areasDomain) => {
  return mergeDomains(dotsDomain, areasDomain, linesDomain);
});
var selectDomainDefinition = createSelector([selectBaseAxis], getDomainDefinition);
var combineNumericalDomain = (axisSettings, domainDefinition, domainOfStackGroups, allDataWithErrorDomains, referenceElementsDomain) => {
  var domainFromUserPreference = numericalDomainSpecifiedWithoutRequiringData(domainDefinition, axisSettings.allowDataOverflow);
  if (domainFromUserPreference != null) {
    // We're done! No need to compute anything else.
    return domainFromUserPreference;
  }
  return parseNumericalUserDomain(domainDefinition, mergeDomains(domainOfStackGroups, referenceElementsDomain, computeNumericalDomain(allDataWithErrorDomains)), axisSettings.allowDataOverflow);
};
var selectNumericalDomain = createSelector([selectBaseAxis, selectDomainDefinition, selectDomainOfStackGroups, selectAllAppliedNumericalValuesIncludingErrorValues, selectReferenceElementsDomain], combineNumericalDomain);

/**
 * Expand by design maps everything between 0 and 1,
 * there is nothing to compute.
 * See https://d3js.org/d3-shape/stack#stack-offsets
 */
var expandDomain = [0, 1];
var combineAxisDomain = (axisSettings, layout, displayedData, allAppliedValues, stackOffsetType, axisType, numericalDomain) => {
  if (axisSettings == null || displayedData == null || displayedData.length === 0) {
    return undefined;
  }
  var {
    dataKey,
    type
  } = axisSettings;
  var isCategorical = isCategoricalAxis(layout, axisType);
  if (isCategorical && dataKey == null) {
    return range$3(0, displayedData.length);
  }
  if (type === 'category') {
    return computeDomainOfTypeCategory(allAppliedValues, axisSettings, isCategorical);
  }
  if (stackOffsetType === 'expand') {
    return expandDomain;
  }
  return numericalDomain;
};
var selectAxisDomain = createSelector([selectBaseAxis, selectChartLayout, selectDisplayedData$1, selectAllAppliedValues, selectStackOffsetType, pickAxisType, selectNumericalDomain], combineAxisDomain);
var combineRealScaleType = (axisConfig, layout, hasBar, chartType, axisType) => {
  if (axisConfig == null) {
    return undefined;
  }
  var {
    scale,
    type
  } = axisConfig;
  if (scale === 'auto') {
    if (layout === 'radial' && axisType === 'radiusAxis') {
      return 'band';
    }
    if (layout === 'radial' && axisType === 'angleAxis') {
      return 'linear';
    }
    if (type === 'category' && chartType && (chartType.indexOf('LineChart') >= 0 || chartType.indexOf('AreaChart') >= 0 || chartType.indexOf('ComposedChart') >= 0 && !hasBar)) {
      return 'point';
    }
    if (type === 'category') {
      return 'band';
    }
    return 'linear';
  }
  if (typeof scale === 'string') {
    var name = "scale".concat(upperFirst(scale));
    return name in d3Scales ? name : 'point';
  }
  return undefined;
};
var selectRealScaleType = createSelector([selectBaseAxis, selectChartLayout, selectHasBar, selectChartName, pickAxisType], combineRealScaleType);
function getD3ScaleFromType(realScaleType) {
  if (realScaleType == null) {
    return undefined;
  }
  if (realScaleType in d3Scales) {
    // @ts-expect-error we should do better type verification here
    return d3Scales[realScaleType]();
  }
  var name = "scale".concat(upperFirst(realScaleType));
  if (name in d3Scales) {
    // @ts-expect-error we should do better type verification here
    return d3Scales[name]();
  }
  return undefined;
}
function combineScaleFunction(axis, realScaleType, axisDomain, axisRange) {
  if (axisDomain == null || axisRange == null) {
    return undefined;
  }
  if (typeof axis.scale === 'function') {
    // @ts-expect-error we're going to assume here that if axis.scale is a function then it is a d3Scale function
    return axis.scale.copy().domain(axisDomain).range(axisRange);
  }
  var d3ScaleFunction = getD3ScaleFromType(realScaleType);
  if (d3ScaleFunction == null) {
    return undefined;
  }
  var scale = d3ScaleFunction.domain(axisDomain).range(axisRange);
  // I don't like this function because it mutates the scale. We should come up with a way to compute the domain up front.
  checkDomainOfScale(scale);
  return scale;
}
var combineNiceTicks = (axisDomain, axisSettings, realScaleType) => {
  var domainDefinition = getDomainDefinition(axisSettings);
  if (realScaleType !== 'auto' && realScaleType !== 'linear') {
    return undefined;
  }
  if (axisSettings != null && axisSettings.tickCount && Array.isArray(domainDefinition) && (domainDefinition[0] === 'auto' || domainDefinition[1] === 'auto') && isWellFormedNumberDomain(axisDomain)) {
    return getNiceTickValues(axisDomain, axisSettings.tickCount, axisSettings.allowDecimals);
  }
  if (axisSettings != null && axisSettings.tickCount && axisSettings.type === 'number' && isWellFormedNumberDomain(axisDomain)) {
    return getTickValuesFixedDomain(axisDomain, axisSettings.tickCount, axisSettings.allowDecimals);
  }
  return undefined;
};
var selectNiceTicks = createSelector([selectAxisDomain, selectAxisSettings, selectRealScaleType], combineNiceTicks);
var combineAxisDomainWithNiceTicks = (axisSettings, domain, niceTicks, axisType) => {
  if (
  /*
   * Angle axis for some reason uses nice ticks when rendering axis tick labels,
   * but doesn't use nice ticks for extending domain like all the other axes do.
   * Not really sure why? Is there a good reason,
   * or is it just because someone added support for nice ticks to the other axes and forgot this one?
   */
  axisType !== 'angleAxis' && (axisSettings === null || axisSettings === void 0 ? void 0 : axisSettings.type) === 'number' && isWellFormedNumberDomain(domain) && Array.isArray(niceTicks) && niceTicks.length > 0) {
    var minFromDomain = domain[0];
    var minFromTicks = niceTicks[0];
    var maxFromDomain = domain[1];
    var maxFromTicks = niceTicks[niceTicks.length - 1];
    return [Math.min(minFromDomain, minFromTicks), Math.max(maxFromDomain, maxFromTicks)];
  }
  return domain;
};
var selectAxisDomainIncludingNiceTicks = createSelector([selectBaseAxis, selectAxisDomain, selectNiceTicks, pickAxisType], combineAxisDomainWithNiceTicks);

/**
 * Returns the smallest gap, between two numbers in the data, as a ratio of the whole range (max - min).
 * Ignores domain provided by user and only considers domain from data.
 *
 * The result is a number between 0 and 1.
 */
var selectSmallestDistanceBetweenValues = createSelector(selectAllAppliedValues, selectBaseAxis, (allDataSquished, axisSettings) => {
  if (!axisSettings || axisSettings.type !== 'number') {
    return undefined;
  }
  var smallestDistanceBetweenValues = Infinity;
  var sortedValues = Array.from(onlyAllowNumbers(allDataSquished.map(d => d.value))).sort((a, b) => a - b);
  if (sortedValues.length < 2) {
    return Infinity;
  }
  var diff = sortedValues[sortedValues.length - 1] - sortedValues[0];
  if (diff === 0) {
    return Infinity;
  }
  // Only do n - 1 distance calculations because there's only n - 1 distances between n values.
  for (var i = 0; i < sortedValues.length - 1; i++) {
    var distance = sortedValues[i + 1] - sortedValues[i];
    smallestDistanceBetweenValues = Math.min(smallestDistanceBetweenValues, distance);
  }
  return smallestDistanceBetweenValues / diff;
});
var selectCalculatedPadding = createSelector(selectSmallestDistanceBetweenValues, selectChartLayout, selectBarCategoryGap, selectChartOffsetInternal, (_1, _2, _3, padding) => padding, (smallestDistanceInPercent, layout, barCategoryGap, offset, padding) => {
  if (!isWellBehavedNumber(smallestDistanceInPercent)) {
    return 0;
  }
  var rangeWidth = layout === 'vertical' ? offset.height : offset.width;
  if (padding === 'gap') {
    return smallestDistanceInPercent * rangeWidth / 2;
  }
  if (padding === 'no-gap') {
    var gap = getPercentValue(barCategoryGap, smallestDistanceInPercent * rangeWidth);
    var halfBand = smallestDistanceInPercent * rangeWidth / 2;
    return halfBand - gap - (halfBand - gap) / rangeWidth * gap;
  }
  return 0;
});
var selectCalculatedXAxisPadding = (state, axisId) => {
  var xAxisSettings = selectXAxisSettings(state, axisId);
  if (xAxisSettings == null || typeof xAxisSettings.padding !== 'string') {
    return 0;
  }
  return selectCalculatedPadding(state, 'xAxis', axisId, xAxisSettings.padding);
};
var selectCalculatedYAxisPadding = (state, axisId) => {
  var yAxisSettings = selectYAxisSettings(state, axisId);
  if (yAxisSettings == null || typeof yAxisSettings.padding !== 'string') {
    return 0;
  }
  return selectCalculatedPadding(state, 'yAxis', axisId, yAxisSettings.padding);
};
var selectXAxisPadding = createSelector(selectXAxisSettings, selectCalculatedXAxisPadding, (xAxisSettings, calculated) => {
  var _padding$left, _padding$right;
  if (xAxisSettings == null) {
    return {
      left: 0,
      right: 0
    };
  }
  var {
    padding
  } = xAxisSettings;
  if (typeof padding === 'string') {
    return {
      left: calculated,
      right: calculated
    };
  }
  return {
    left: ((_padding$left = padding.left) !== null && _padding$left !== void 0 ? _padding$left : 0) + calculated,
    right: ((_padding$right = padding.right) !== null && _padding$right !== void 0 ? _padding$right : 0) + calculated
  };
});
var selectYAxisPadding = createSelector(selectYAxisSettings, selectCalculatedYAxisPadding, (yAxisSettings, calculated) => {
  var _padding$top, _padding$bottom;
  if (yAxisSettings == null) {
    return {
      top: 0,
      bottom: 0
    };
  }
  var {
    padding
  } = yAxisSettings;
  if (typeof padding === 'string') {
    return {
      top: calculated,
      bottom: calculated
    };
  }
  return {
    top: ((_padding$top = padding.top) !== null && _padding$top !== void 0 ? _padding$top : 0) + calculated,
    bottom: ((_padding$bottom = padding.bottom) !== null && _padding$bottom !== void 0 ? _padding$bottom : 0) + calculated
  };
});
var combineXAxisRange = createSelector([selectChartOffsetInternal, selectXAxisPadding, selectBrushDimensions, selectBrushSettings, (_state, _axisId, isPanorama) => isPanorama], (offset, padding, brushDimensions, _ref4, isPanorama) => {
  var {
    padding: brushPadding
  } = _ref4;
  if (isPanorama) {
    return [brushPadding.left, brushDimensions.width - brushPadding.right];
  }
  return [offset.left + padding.left, offset.left + offset.width - padding.right];
});
var combineYAxisRange = createSelector([selectChartOffsetInternal, selectChartLayout, selectYAxisPadding, selectBrushDimensions, selectBrushSettings, (_state, _axisId, isPanorama) => isPanorama], (offset, layout, padding, brushDimensions, _ref5, isPanorama) => {
  var {
    padding: brushPadding
  } = _ref5;
  if (isPanorama) {
    return [brushDimensions.height - brushPadding.bottom, brushPadding.top];
  }
  if (layout === 'horizontal') {
    return [offset.top + offset.height - padding.bottom, offset.top + padding.top];
  }
  return [offset.top + padding.top, offset.top + offset.height - padding.bottom];
});
var selectAxisRange = (state, axisType, axisId, isPanorama) => {
  var _selectZAxisSettings;
  switch (axisType) {
    case 'xAxis':
      return combineXAxisRange(state, axisId, isPanorama);
    case 'yAxis':
      return combineYAxisRange(state, axisId, isPanorama);
    case 'zAxis':
      return (_selectZAxisSettings = selectZAxisSettings(state, axisId)) === null || _selectZAxisSettings === void 0 ? void 0 : _selectZAxisSettings.range;
    case 'angleAxis':
      return selectAngleAxisRange(state);
    case 'radiusAxis':
      return selectRadiusAxisRange(state, axisId);
    default:
      return undefined;
  }
};
var selectAxisRangeWithReverse = createSelector([selectBaseAxis, selectAxisRange], combineAxisRangeWithReverse);
var selectAxisScale = createSelector([selectBaseAxis, selectRealScaleType, selectAxisDomainIncludingNiceTicks, selectAxisRangeWithReverse], combineScaleFunction);
createSelector(selectCartesianItemsSettings, pickAxisType, (items, axisType) => {
  return items.flatMap(item => {
    var _item$errorBars2;
    return (_item$errorBars2 = item.errorBars) !== null && _item$errorBars2 !== void 0 ? _item$errorBars2 : [];
  }).filter(e => {
    return isErrorBarRelevantForAxisType(axisType, e);
  });
});
function compareIds(a, b) {
  if (a.id < b.id) {
    return -1;
  }
  if (a.id > b.id) {
    return 1;
  }
  return 0;
}
var pickAxisOrientation = (_state, orientation) => orientation;
var pickMirror = (_state, _orientation, mirror) => mirror;
var selectAllXAxesWithOffsetType = createSelector(selectAllXAxes, pickAxisOrientation, pickMirror, (allAxes, orientation, mirror) => allAxes.filter(axis => axis.orientation === orientation).filter(axis => axis.mirror === mirror).sort(compareIds));
var selectAllYAxesWithOffsetType = createSelector(selectAllYAxes, pickAxisOrientation, pickMirror, (allAxes, orientation, mirror) => allAxes.filter(axis => axis.orientation === orientation).filter(axis => axis.mirror === mirror).sort(compareIds));
var getXAxisSize = (offset, axisSettings) => {
  return {
    width: offset.width,
    height: axisSettings.height
  };
};
var getYAxisSize = (offset, axisSettings) => {
  var width = typeof axisSettings.width === 'number' ? axisSettings.width : DEFAULT_Y_AXIS_WIDTH;
  return {
    width,
    height: offset.height
  };
};
var selectXAxisSize = createSelector(selectChartOffsetInternal, selectXAxisSettings, getXAxisSize);
var combineXAxisPositionStartingPoint = (offset, orientation, chartHeight) => {
  switch (orientation) {
    case 'top':
      return offset.top;
    case 'bottom':
      return chartHeight - offset.bottom;
    default:
      return 0;
  }
};
var combineYAxisPositionStartingPoint = (offset, orientation, chartWidth) => {
  switch (orientation) {
    case 'left':
      return offset.left;
    case 'right':
      return chartWidth - offset.right;
    default:
      return 0;
  }
};
var selectAllXAxesOffsetSteps = createSelector(selectChartHeight, selectChartOffsetInternal, selectAllXAxesWithOffsetType, pickAxisOrientation, pickMirror, (chartHeight, offset, allAxesWithSameOffsetType, orientation, mirror) => {
  var steps = {};
  var position;
  allAxesWithSameOffsetType.forEach(axis => {
    var axisSize = getXAxisSize(offset, axis);
    if (position == null) {
      position = combineXAxisPositionStartingPoint(offset, orientation, chartHeight);
    }
    var needSpace = orientation === 'top' && !mirror || orientation === 'bottom' && mirror;
    steps[axis.id] = position - Number(needSpace) * axisSize.height;
    position += (needSpace ? -1 : 1) * axisSize.height;
  });
  return steps;
});
var selectAllYAxesOffsetSteps = createSelector(selectChartWidth, selectChartOffsetInternal, selectAllYAxesWithOffsetType, pickAxisOrientation, pickMirror, (chartWidth, offset, allAxesWithSameOffsetType, orientation, mirror) => {
  var steps = {};
  var position;
  allAxesWithSameOffsetType.forEach(axis => {
    var axisSize = getYAxisSize(offset, axis);
    if (position == null) {
      position = combineYAxisPositionStartingPoint(offset, orientation, chartWidth);
    }
    var needSpace = orientation === 'left' && !mirror || orientation === 'right' && mirror;
    steps[axis.id] = position - Number(needSpace) * axisSize.width;
    position += (needSpace ? -1 : 1) * axisSize.width;
  });
  return steps;
});
var selectXAxisPosition = (state, axisId) => {
  var offset = selectChartOffsetInternal(state);
  var axisSettings = selectXAxisSettings(state, axisId);
  if (axisSettings == null) {
    return undefined;
  }
  var allSteps = selectAllXAxesOffsetSteps(state, axisSettings.orientation, axisSettings.mirror);
  var stepOfThisAxis = allSteps[axisId];
  if (stepOfThisAxis == null) {
    return {
      x: offset.left,
      y: 0
    };
  }
  return {
    x: offset.left,
    y: stepOfThisAxis
  };
};
var selectYAxisPosition = (state, axisId) => {
  var offset = selectChartOffsetInternal(state);
  var axisSettings = selectYAxisSettings(state, axisId);
  if (axisSettings == null) {
    return undefined;
  }
  var allSteps = selectAllYAxesOffsetSteps(state, axisSettings.orientation, axisSettings.mirror);
  var stepOfThisAxis = allSteps[axisId];
  if (stepOfThisAxis == null) {
    return {
      x: 0,
      y: offset.top
    };
  }
  return {
    x: stepOfThisAxis,
    y: offset.top
  };
};
var selectYAxisSize = createSelector(selectChartOffsetInternal, selectYAxisSettings, (offset, axisSettings) => {
  var width = typeof axisSettings.width === 'number' ? axisSettings.width : DEFAULT_Y_AXIS_WIDTH;
  return {
    width,
    height: offset.height
  };
});
var selectCartesianAxisSize = (state, axisType, axisId) => {
  switch (axisType) {
    case 'xAxis':
      {
        return selectXAxisSize(state, axisId).width;
      }
    case 'yAxis':
      {
        return selectYAxisSize(state, axisId).height;
      }
    default:
      {
        return undefined;
      }
  }
};
var combineDuplicateDomain = (chartLayout, appliedValues, axis, axisType) => {
  if (axis == null) {
    return undefined;
  }
  var {
    allowDuplicatedCategory,
    type,
    dataKey
  } = axis;
  var isCategorical = isCategoricalAxis(chartLayout, axisType);
  var allData = appliedValues.map(av => av.value);
  if (dataKey && isCategorical && type === 'category' && allowDuplicatedCategory && hasDuplicate(allData)) {
    return allData;
  }
  return undefined;
};
var selectDuplicateDomain = createSelector([selectChartLayout, selectAllAppliedValues, selectBaseAxis, pickAxisType], combineDuplicateDomain);
var combineCategoricalDomain = (layout, appliedValues, axis, axisType) => {
  if (axis == null || axis.dataKey == null) {
    return undefined;
  }
  var {
    type,
    scale
  } = axis;
  var isCategorical = isCategoricalAxis(layout, axisType);
  if (isCategorical && (type === 'number' || scale !== 'auto')) {
    return appliedValues.map(d => d.value);
  }
  return undefined;
};
var selectCategoricalDomain = createSelector([selectChartLayout, selectAllAppliedValues, selectAxisSettings, pickAxisType], combineCategoricalDomain);
var selectAxisPropsNeededForCartesianGridTicksGenerator = createSelector([selectChartLayout, selectCartesianAxisSettings, selectRealScaleType, selectAxisScale, selectDuplicateDomain, selectCategoricalDomain, selectAxisRange, selectNiceTicks, pickAxisType], (layout, axis, realScaleType, scale, duplicateDomain, categoricalDomain, axisRange, niceTicks, axisType) => {
  if (axis == null) {
    return null;
  }
  var isCategorical = isCategoricalAxis(layout, axisType);
  return {
    angle: axis.angle,
    interval: axis.interval,
    minTickGap: axis.minTickGap,
    orientation: axis.orientation,
    tick: axis.tick,
    tickCount: axis.tickCount,
    tickFormatter: axis.tickFormatter,
    ticks: axis.ticks,
    type: axis.type,
    unit: axis.unit,
    axisType,
    categoricalDomain,
    duplicateDomain,
    isCategorical,
    niceTicks,
    range: axisRange,
    realScaleType,
    scale
  };
});
var combineAxisTicks = (layout, axis, realScaleType, scale, niceTicks, axisRange, duplicateDomain, categoricalDomain, axisType) => {
  if (axis == null || scale == null) {
    return undefined;
  }
  var isCategorical = isCategoricalAxis(layout, axisType);
  var {
    type,
    ticks,
    tickCount
  } = axis;

  // This is testing for `scaleBand` but for band axis the type is reported as `band` so this looks like a dead code with a workaround elsewhere?
  var offsetForBand = realScaleType === 'scaleBand' && typeof scale.bandwidth === 'function' ? scale.bandwidth() / 2 : 2;
  var offset = type === 'category' && scale.bandwidth ? scale.bandwidth() / offsetForBand : 0;
  offset = axisType === 'angleAxis' && axisRange != null && axisRange.length >= 2 ? mathSign(axisRange[0] - axisRange[1]) * 2 * offset : offset;

  // The ticks set by user should only affect the ticks adjacent to axis line
  var ticksOrNiceTicks = ticks || niceTicks;
  if (ticksOrNiceTicks) {
    var result = ticksOrNiceTicks.map((entry, index) => {
      var scaleContent = duplicateDomain ? duplicateDomain.indexOf(entry) : entry;
      return {
        index,
        // If the scaleContent is not a number, the coordinate will be NaN.
        // That could be the case for example with a PointScale and a string as domain.
        coordinate: scale(scaleContent) + offset,
        value: entry,
        offset
      };
    });
    return result.filter(row => !isNan(row.coordinate));
  }

  // When axis is a categorical axis, but the type of axis is number or the scale of axis is not "auto"
  if (isCategorical && categoricalDomain) {
    return categoricalDomain.map((entry, index) => ({
      coordinate: scale(entry) + offset,
      value: entry,
      index,
      offset
    }));
  }
  if (scale.ticks) {
    return scale.ticks(tickCount)
    // @ts-expect-error why does the offset go here? The type does not require it
    .map(entry => ({
      coordinate: scale(entry) + offset,
      value: entry,
      offset
    }));
  }

  // When axis has duplicated text, serial numbers are used to generate scale
  return scale.domain().map((entry, index) => ({
    coordinate: scale(entry) + offset,
    value: duplicateDomain ? duplicateDomain[entry] : entry,
    index,
    offset
  }));
};
var selectTicksOfAxis = createSelector([selectChartLayout, selectAxisSettings, selectRealScaleType, selectAxisScale, selectNiceTicks, selectAxisRange, selectDuplicateDomain, selectCategoricalDomain, pickAxisType], combineAxisTicks);
var combineGraphicalItemTicks = (layout, axis, scale, axisRange, duplicateDomain, categoricalDomain, axisType) => {
  if (axis == null || scale == null || axisRange == null || axisRange[0] === axisRange[1]) {
    return undefined;
  }
  var isCategorical = isCategoricalAxis(layout, axisType);
  var {
    tickCount
  } = axis;
  var offset = 0;
  offset = axisType === 'angleAxis' && (axisRange === null || axisRange === void 0 ? void 0 : axisRange.length) >= 2 ? mathSign(axisRange[0] - axisRange[1]) * 2 * offset : offset;

  // When axis is a categorical axis, but the type of axis is number or the scale of axis is not "auto"
  if (isCategorical && categoricalDomain) {
    return categoricalDomain.map((entry, index) => ({
      coordinate: scale(entry) + offset,
      value: entry,
      index,
      offset
    }));
  }
  if (scale.ticks) {
    return scale.ticks(tickCount)
    // @ts-expect-error why does the offset go here? The type does not require it
    .map(entry => ({
      coordinate: scale(entry) + offset,
      value: entry,
      offset
    }));
  }

  // When axis has duplicated text, serial numbers are used to generate scale
  return scale.domain().map((entry, index) => ({
    coordinate: scale(entry) + offset,
    value: duplicateDomain ? duplicateDomain[entry] : entry,
    index,
    offset
  }));
};
var selectTicksOfGraphicalItem = createSelector([selectChartLayout, selectAxisSettings, selectAxisScale, selectAxisRange, selectDuplicateDomain, selectCategoricalDomain, pickAxisType], combineGraphicalItemTicks);
var selectAxisWithScale = createSelector(selectBaseAxis, selectAxisScale, (axis, scale) => {
  if (axis == null || scale == null) {
    return undefined;
  }
  return _objectSpread$t(_objectSpread$t({}, axis), {}, {
    scale
  });
});
var selectZAxisScale = createSelector([selectBaseAxis, selectRealScaleType, selectAxisDomain, selectAxisRangeWithReverse], combineScaleFunction);
createSelector((state, _axisType, axisId) => selectZAxisSettings(state, axisId), selectZAxisScale, (axis, scale) => {
  if (axis == null || scale == null) {
    return undefined;
  }
  return _objectSpread$t(_objectSpread$t({}, axis), {}, {
    scale
  });
});

/**
 * We are also going to need to implement polar chart directions if we want to support keyboard controls for those.
 */

var selectChartDirection = createSelector([selectChartLayout, selectAllXAxes, selectAllYAxes], (layout, allXAxes, allYAxes) => {
  switch (layout) {
    case 'horizontal':
      {
        return allXAxes.some(axis => axis.reversed) ? 'right-to-left' : 'left-to-right';
      }
    case 'vertical':
      {
        return allYAxes.some(axis => axis.reversed) ? 'bottom-to-top' : 'top-to-bottom';
      }
    // TODO: make this better. For now, right arrow triggers "forward", left arrow "back"
    // however, the tooltip moves an unintuitive direction because of how the indices are rendered
    case 'centric':
    case 'radial':
      {
        return 'left-to-right';
      }
    default:
      {
        return undefined;
      }
  }
});

var selectDefaultTooltipEventType = state => state.options.defaultTooltipEventType;
var selectValidateTooltipEventTypes = state => state.options.validateTooltipEventTypes;
function combineTooltipEventType(shared, defaultTooltipEventType, validateTooltipEventTypes) {
  if (shared == null) {
    return defaultTooltipEventType;
  }
  var eventType = shared ? 'axis' : 'item';
  if (validateTooltipEventTypes == null) {
    return defaultTooltipEventType;
  }
  return validateTooltipEventTypes.includes(eventType) ? eventType : defaultTooltipEventType;
}
function selectTooltipEventType$1(state, shared) {
  var defaultTooltipEventType = selectDefaultTooltipEventType(state);
  var validateTooltipEventTypes = selectValidateTooltipEventTypes(state);
  return combineTooltipEventType(shared, defaultTooltipEventType, validateTooltipEventTypes);
}
function useTooltipEventType(shared) {
  return useAppSelector(state => selectTooltipEventType$1(state, shared));
}

var combineActiveLabel = (tooltipTicks, activeIndex) => {
  var _tooltipTicks$n;
  var n = Number(activeIndex);
  if (isNan(n) || activeIndex == null) {
    return undefined;
  }
  return n >= 0 ? tooltipTicks === null || tooltipTicks === void 0 || (_tooltipTicks$n = tooltipTicks[n]) === null || _tooltipTicks$n === void 0 ? void 0 : _tooltipTicks$n.value : undefined;
};

var selectTooltipSettings = state => state.tooltip.settings;

/**
 * One Tooltip can display multiple TooltipPayloadEntries at a time.
 */

/**
 * So what happens is that the tooltip payload is decided based on the available data, and the dataKey.
 * The dataKey can either be defined on the graphical element (like Line, or Bar)
 * or on the tooltip itself.
 *
 * The data can be defined in the chart element, or in the graphical item.
 *
 * So this type is all the settings, other than the data + dataKey complications.
 */

/**
 * This is what Tooltip renders.
 */

/**
 * null means no active index
 * string means: whichever index from the chart data it is.
 * Different charts have different requirements on data shapes,
 * and are also responsible for providing a function that will accept this index
 * and return data.
 */

/**
 * Different items have different data shapes so the state has no opinion on what the data shape should be;
 * the only requirement is that the chart also provides a searcher function
 * that accepts the data, and a key, and returns whatever the payload in Tooltip should be.
 */

/**
 * So this informs the "tooltip event type". Tooltip event type can be either "axis" or "item"
 * and it is used for two things:
 * 1. Sets the active area
 * 2. Sets the background and cursor highlights
 *
 * Some charts only allow to have one type of tooltip event type, some allow both.
 * Those charts that allow both will have one default, and the "shared" prop will be used to switch between them.
 * Undefined means "use the chart default".
 *
 * Charts that only allow one tooltip event type, will ignore the shared prop.
 */

/**
 * A generic state for user interaction with the chart.
 * User interaction can come through multiple channels: mouse events, keyboard events, or hardcoded in props, or synchronised from other charts.
 *
 * Each of the interaction states is represented as TooltipInteractionState,
 * and then the selectors and Tooltip will decide which of the interaction states to use.
 */

var noInteraction = {
  active: false,
  index: null,
  dataKey: undefined,
  coordinate: undefined
};

/**
 * The tooltip interaction state stores:
 *
 * - Which graphical item is user interacting with at the moment,
 * - which axis (or, which part of chart background) is user interacting with at the moment
 * - The data that individual graphical items wish to be displayed in case the tooltip gets activated
 */

var initialState$7 = {
  itemInteraction: {
    click: noInteraction,
    hover: noInteraction
  },
  axisInteraction: {
    click: noInteraction,
    hover: noInteraction
  },
  keyboardInteraction: noInteraction,
  syncInteraction: {
    active: false,
    index: null,
    dataKey: undefined,
    label: undefined,
    coordinate: undefined
  },
  tooltipItemPayloads: [],
  settings: {
    shared: undefined,
    trigger: 'hover',
    axisId: 0,
    active: false,
    defaultIndex: undefined
  }
};
var tooltipSlice = createSlice({
  name: 'tooltip',
  initialState: initialState$7,
  reducers: {
    addTooltipEntrySettings(state, action) {
      state.tooltipItemPayloads.push(castDraft(action.payload));
    },
    removeTooltipEntrySettings(state, action) {
      var index = current(state).tooltipItemPayloads.indexOf(castDraft(action.payload));
      if (index > -1) {
        state.tooltipItemPayloads.splice(index, 1);
      }
    },
    setTooltipSettingsState(state, action) {
      state.settings = action.payload;
    },
    setActiveMouseOverItemIndex(state, action) {
      state.syncInteraction.active = false;
      state.keyboardInteraction.active = false;
      state.itemInteraction.hover.active = true;
      state.itemInteraction.hover.index = action.payload.activeIndex;
      state.itemInteraction.hover.dataKey = action.payload.activeDataKey;
      state.itemInteraction.hover.coordinate = action.payload.activeCoordinate;
    },
    mouseLeaveChart(state) {
      /*
       * Clear only the active flags. Why?
       * 1. Keep Coordinate to preserve animation - next time the Tooltip appears, we want to render it from
       * the last place where it was when it disappeared.
       * 2. We want to keep all the properties anyway just in case the tooltip has `active=true` prop
       * and continues being visible even after the mouse has left the chart.
       */
      state.itemInteraction.hover.active = false;
      state.axisInteraction.hover.active = false;
    },
    mouseLeaveItem(state) {
      state.itemInteraction.hover.active = false;
    },
    setActiveClickItemIndex(state, action) {
      state.syncInteraction.active = false;
      state.itemInteraction.click.active = true;
      state.keyboardInteraction.active = false;
      state.itemInteraction.click.index = action.payload.activeIndex;
      state.itemInteraction.click.dataKey = action.payload.activeDataKey;
      state.itemInteraction.click.coordinate = action.payload.activeCoordinate;
    },
    setMouseOverAxisIndex(state, action) {
      state.syncInteraction.active = false;
      state.axisInteraction.hover.active = true;
      state.keyboardInteraction.active = false;
      state.axisInteraction.hover.index = action.payload.activeIndex;
      state.axisInteraction.hover.dataKey = action.payload.activeDataKey;
      state.axisInteraction.hover.coordinate = action.payload.activeCoordinate;
    },
    setMouseClickAxisIndex(state, action) {
      state.syncInteraction.active = false;
      state.keyboardInteraction.active = false;
      state.axisInteraction.click.active = true;
      state.axisInteraction.click.index = action.payload.activeIndex;
      state.axisInteraction.click.dataKey = action.payload.activeDataKey;
      state.axisInteraction.click.coordinate = action.payload.activeCoordinate;
    },
    setSyncInteraction(state, action) {
      state.syncInteraction = action.payload;
    },
    setKeyboardInteraction(state, action) {
      state.keyboardInteraction.active = action.payload.active;
      state.keyboardInteraction.index = action.payload.activeIndex;
      state.keyboardInteraction.coordinate = action.payload.activeCoordinate;
      state.keyboardInteraction.dataKey = action.payload.activeDataKey;
    }
  }
});
var {
  addTooltipEntrySettings,
  removeTooltipEntrySettings,
  setTooltipSettingsState,
  setActiveMouseOverItemIndex,
  mouseLeaveItem,
  mouseLeaveChart,
  setActiveClickItemIndex,
  setMouseOverAxisIndex,
  setMouseClickAxisIndex,
  setSyncInteraction,
  setKeyboardInteraction
} = tooltipSlice.actions;
var tooltipReducer = tooltipSlice.reducer;

function ownKeys$s(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$s(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$s(Object(t), true).forEach(function (r) { _defineProperty$w(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$s(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$w(e, r, t) { return (r = _toPropertyKey$w(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$w(t) { var i = _toPrimitive$w(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$w(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function chooseAppropriateMouseInteraction(tooltipState, tooltipEventType, trigger) {
  if (tooltipEventType === 'axis') {
    if (trigger === 'click') {
      return tooltipState.axisInteraction.click;
    }
    return tooltipState.axisInteraction.hover;
  }
  if (trigger === 'click') {
    return tooltipState.itemInteraction.click;
  }
  return tooltipState.itemInteraction.hover;
}
function hasBeenActivePreviously(tooltipInteractionState) {
  return tooltipInteractionState.index != null;
}
var combineTooltipInteractionState = (tooltipState, tooltipEventType, trigger, defaultIndex) => {
  if (tooltipEventType == null) {
    return noInteraction;
  }
  var appropriateMouseInteraction = chooseAppropriateMouseInteraction(tooltipState, tooltipEventType, trigger);
  if (appropriateMouseInteraction == null) {
    return noInteraction;
  }
  if (appropriateMouseInteraction.active) {
    return appropriateMouseInteraction;
  }
  if (tooltipState.keyboardInteraction.active) {
    return tooltipState.keyboardInteraction;
  }
  if (tooltipState.syncInteraction.active && tooltipState.syncInteraction.index != null) {
    return tooltipState.syncInteraction;
  }
  var activeFromProps = tooltipState.settings.active === true;
  if (hasBeenActivePreviously(appropriateMouseInteraction)) {
    if (activeFromProps) {
      return _objectSpread$s(_objectSpread$s({}, appropriateMouseInteraction), {}, {
        active: true
      });
    }
  } else if (defaultIndex != null) {
    return {
      active: true,
      coordinate: undefined,
      dataKey: undefined,
      index: defaultIndex
    };
  }
  return _objectSpread$s(_objectSpread$s({}, noInteraction), {}, {
    coordinate: appropriateMouseInteraction.coordinate
  });
};

var combineActiveTooltipIndex = (tooltipInteraction, chartData) => {
  var desiredIndex = tooltipInteraction === null || tooltipInteraction === void 0 ? void 0 : tooltipInteraction.index;
  if (desiredIndex == null) {
    return null;
  }
  var indexAsNumber = Number(desiredIndex);
  if (!isWellBehavedNumber(indexAsNumber)) {
    // this is for charts like Sankey and Treemap that do not support numerical indexes. We need a proper solution for this before we can start supporting keyboard events on these charts.
    return desiredIndex;
  }

  /*
   * Zero is a trivial limit for single-dimensional charts like Line and Area,
   * but this also needs a support for multidimensional charts like Sankey and Treemap! TODO
   */
  var lowerLimit = 0;
  var upperLimit = +Infinity;
  if (chartData.length > 0) {
    upperLimit = chartData.length - 1;
  }

  // now let's clamp the desiredIndex between the limits
  return String(Math.max(lowerLimit, Math.min(indexAsNumber, upperLimit)));
};

var combineCoordinateForDefaultIndex = (width, height, layout, offset, tooltipTicks, defaultIndex, tooltipConfigurations, tooltipPayloadSearcher) => {
  if (defaultIndex == null || tooltipPayloadSearcher == null) {
    return undefined;
  }
  // With defaultIndex alone, we don't have enough information to decide _which_ of the multiple tooltips to display. So we choose the first one.
  var firstConfiguration = tooltipConfigurations[0];
  // @ts-expect-error we need to rethink the tooltipPayloadSearcher type
  var maybePosition = firstConfiguration == null ? undefined : tooltipPayloadSearcher(firstConfiguration.positions, defaultIndex);
  if (maybePosition != null) {
    return maybePosition;
  }
  var tick = tooltipTicks === null || tooltipTicks === void 0 ? void 0 : tooltipTicks[Number(defaultIndex)];
  if (!tick) {
    return undefined;
  }
  switch (layout) {
    case 'horizontal':
      {
        return {
          x: tick.coordinate,
          y: (offset.top + height) / 2
        };
      }
    default:
      {
        // This logic is not super sound - it conflates vertical, radial, centric layouts into just one. TODO improve!
        return {
          x: (offset.left + width) / 2,
          y: tick.coordinate
        };
      }
  }
};

var combineTooltipPayloadConfigurations = (tooltipState, tooltipEventType, trigger, defaultIndex) => {
  // if tooltip reacts to axis interaction, then we display all items at the same time.
  if (tooltipEventType === 'axis') {
    return tooltipState.tooltipItemPayloads;
  }
  /*
   * By now we already know that tooltipEventType is 'item', so we can only search in itemInteractions.
   * item means that only the hovered or clicked item will be present in the tooltip.
   */
  if (tooltipState.tooltipItemPayloads.length === 0) {
    // No point filtering if the payload is empty
    return [];
  }
  var filterByDataKey;
  if (trigger === 'hover') {
    filterByDataKey = tooltipState.itemInteraction.hover.dataKey;
  } else {
    filterByDataKey = tooltipState.itemInteraction.click.dataKey;
  }
  if (filterByDataKey == null && defaultIndex != null) {
    /*
     * So when we use `defaultIndex` - we don't have a dataKey to filter by because user did not hover over anything yet.
     * In that case let's display the first item in the tooltip; after all, this is `item` interaction case,
     * so we should display only one item at a time instead of all.
     */
    return [tooltipState.tooltipItemPayloads[0]];
  }
  return tooltipState.tooltipItemPayloads.filter(tpc => {
    var _tpc$settings;
    return ((_tpc$settings = tpc.settings) === null || _tpc$settings === void 0 ? void 0 : _tpc$settings.dataKey) === filterByDataKey;
  });
};

var selectTooltipPayloadSearcher = state => state.options.tooltipPayloadSearcher;

var selectTooltipState = state => state.tooltip;

function ownKeys$r(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$r(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$r(Object(t), true).forEach(function (r) { _defineProperty$v(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$r(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$v(e, r, t) { return (r = _toPropertyKey$v(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$v(t) { var i = _toPrimitive$v(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$v(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function getSliced(arr, startIndex, endIndex) {
  if (!Array.isArray(arr)) {
    return arr;
  }
  if (arr && startIndex + endIndex !== 0) {
    return arr.slice(startIndex, endIndex + 1);
  }
  return arr;
}
function selectFinalData(dataDefinedOnItem, dataDefinedOnChart) {
  /*
   * If a payload has data specified directly from the graphical item, prefer that.
   * Otherwise, fill in data from the chart level, using the same index.
   */
  if (dataDefinedOnItem != null) {
    return dataDefinedOnItem;
  }
  return dataDefinedOnChart;
}
var combineTooltipPayload = (tooltipPayloadConfigurations, activeIndex, chartDataState, tooltipAxis, activeLabel, tooltipPayloadSearcher, tooltipEventType) => {
  if (activeIndex == null || tooltipPayloadSearcher == null) {
    return undefined;
  }
  var {
    chartData,
    computedData,
    dataStartIndex,
    dataEndIndex
  } = chartDataState;
  var init = [];
  return tooltipPayloadConfigurations.reduce((agg, _ref) => {
    var _settings$dataKey;
    var {
      dataDefinedOnItem,
      settings
    } = _ref;
    var finalData = selectFinalData(dataDefinedOnItem, chartData);
    var sliced = getSliced(finalData, dataStartIndex, dataEndIndex);
    var finalDataKey = (_settings$dataKey = settings === null || settings === void 0 ? void 0 : settings.dataKey) !== null && _settings$dataKey !== void 0 ? _settings$dataKey : tooltipAxis === null || tooltipAxis === void 0 ? void 0 : tooltipAxis.dataKey;
    // BaseAxisProps does not support nameKey but it could!
    var finalNameKey = settings === null || settings === void 0 ? void 0 : settings.nameKey; // ?? tooltipAxis?.nameKey;
    var tooltipPayload;
    if (tooltipAxis !== null && tooltipAxis !== void 0 && tooltipAxis.dataKey && Array.isArray(sliced) &&
    /*
     * findEntryInArray won't work for Scatter because Scatter provides an array of arrays
     * as tooltip payloads and findEntryInArray is not prepared to handle that.
     * Sad but also ScatterChart only allows 'item' tooltipEventType
     * and also this is only a problem if there are multiple Scatters and each has its own data array
     * so let's fix that some other time.
     */
    !Array.isArray(sliced[0]) &&
    /*
     * If the tooltipEventType is 'axis', we should search for the dataKey in the sliced data
     * because thanks to allowDuplicatedCategory=false, the order of elements in the array
     * no longer matches the order of elements in the original data
     * and so we need to search by the active dataKey + label rather than by index.
     *
     * The same happens if multiple graphical items are present in the chart
     * and each of them has its own data array. Those arrays get concatenated
     * and again the tooltip index no longer matches the original data.
     *
     * On the other hand the tooltipEventType 'item' should always search by index
     * because we get the index from interacting over the individual elements
     * which is always accurate, irrespective of the allowDuplicatedCategory setting.
     */
    tooltipEventType === 'axis') {
      tooltipPayload = findEntryInArray(sliced, tooltipAxis.dataKey, activeLabel);
    } else {
      /*
       * This is a problem because it assumes that the index is pointing to the displayed data
       * which it isn't because the index is pointing to the tooltip ticks array.
       * The above approach (with findEntryInArray) is the correct one, but it only works
       * if the axis dataKey is defined explicitly, and if the data is an array of objects.
       */
      tooltipPayload = tooltipPayloadSearcher(sliced, activeIndex, computedData, finalNameKey);
    }
    if (Array.isArray(tooltipPayload)) {
      tooltipPayload.forEach(item => {
        var newSettings = _objectSpread$r(_objectSpread$r({}, settings), {}, {
          name: item.name,
          unit: item.unit,
          // color and fill are erased to keep 100% the identical behaviour to recharts 2.x - but there's nothing stopping us from returning them here. It's technically a breaking change.
          color: undefined,
          // color and fill are erased to keep 100% the identical behaviour to recharts 2.x - but there's nothing stopping us from returning them here. It's technically a breaking change.
          fill: undefined
        });
        agg.push(getTooltipEntry({
          tooltipEntrySettings: newSettings,
          dataKey: item.dataKey,
          payload: item.payload,
          // @ts-expect-error getValueByDataKey does not validate the output type
          value: getValueByDataKey(item.payload, item.dataKey),
          name: item.name
        }));
      });
    } else {
      var _getValueByDataKey;
      // I am not quite sure why these two branches (Array vs Array of Arrays) have to behave differently - I imagine we should unify these. 3.x breaking change?
      agg.push(getTooltipEntry({
        tooltipEntrySettings: settings,
        dataKey: finalDataKey,
        payload: tooltipPayload,
        // @ts-expect-error getValueByDataKey does not validate the output type
        value: getValueByDataKey(tooltipPayload, finalDataKey),
        // @ts-expect-error getValueByDataKey does not validate the output type
        name: (_getValueByDataKey = getValueByDataKey(tooltipPayload, finalNameKey)) !== null && _getValueByDataKey !== void 0 ? _getValueByDataKey : settings === null || settings === void 0 ? void 0 : settings.name
      }));
    }
    return agg;
  }, init);
};

var selectTooltipAxisType = state => {
  var layout = selectChartLayout(state);
  if (layout === 'horizontal') {
    return 'xAxis';
  }
  if (layout === 'vertical') {
    return 'yAxis';
  }
  if (layout === 'centric') {
    return 'angleAxis';
  }
  return 'radiusAxis';
};
var selectTooltipAxisId = state => state.tooltip.settings.axisId;
var selectTooltipAxis = state => {
  var axisType = selectTooltipAxisType(state);
  var axisId = selectTooltipAxisId(state);
  return selectAxisSettings(state, axisType, axisId);
};
var selectTooltipAxisRealScaleType = createSelector([selectTooltipAxis, selectChartLayout, selectHasBar, selectChartName, selectTooltipAxisType], combineRealScaleType);
var selectAllUnfilteredGraphicalItems = createSelector([state => state.graphicalItems.cartesianItems, state => state.graphicalItems.polarItems], (cartesianItems, polarItems) => [...cartesianItems, ...polarItems]);
var selectTooltipAxisPredicate = createSelector([selectTooltipAxisType, selectTooltipAxisId], itemAxisPredicate);
var selectAllGraphicalItemsSettings = createSelector([selectAllUnfilteredGraphicalItems, selectTooltipAxis, selectTooltipAxisPredicate], combineGraphicalItemsSettings);
var selectTooltipGraphicalItemsData = createSelector([selectAllGraphicalItemsSettings], combineGraphicalItemsData);

/**
 * Data for tooltip always use the data with indexes set by a Brush,
 * and never accept the isPanorama flag:
 * because Tooltip never displays inside the panorama anyway
 * so we don't need to worry what would happen there.
 */
var selectTooltipDisplayedData = createSelector([selectTooltipGraphicalItemsData, selectChartDataWithIndexes], combineDisplayedData);
var selectAllTooltipAppliedValues = createSelector([selectTooltipDisplayedData, selectTooltipAxis, selectAllGraphicalItemsSettings], combineAppliedValues);
var selectTooltipAxisDomainDefinition = createSelector([selectTooltipAxis], getDomainDefinition);
var selectTooltipStackGroups = createSelector([selectTooltipDisplayedData, selectAllGraphicalItemsSettings, selectStackOffsetType], combineStackGroups);
var selectTooltipDomainOfStackGroups = createSelector([selectTooltipStackGroups, selectChartDataWithIndexes, selectTooltipAxisType], combineDomainOfStackGroups);
var selectTooltipItemsSettingsExceptStacked = createSelector([selectAllGraphicalItemsSettings], filterGraphicalNotStackedItems);
var selectTooltipAllAppliedNumericalValuesIncludingErrorValues = createSelector([selectTooltipDisplayedData, selectTooltipAxis, selectTooltipItemsSettingsExceptStacked, selectTooltipAxisType], combineAppliedNumericalValuesIncludingErrorValues);
var selectReferenceDotsByTooltipAxis = createSelector([selectReferenceDots, selectTooltipAxisType, selectTooltipAxisId], filterReferenceElements);
var selectTooltipReferenceDotsDomain = createSelector([selectReferenceDotsByTooltipAxis, selectTooltipAxisType], combineDotsDomain);
var selectReferenceAreasByTooltipAxis = createSelector([selectReferenceAreas, selectTooltipAxisType, selectTooltipAxisId], filterReferenceElements);
var selectTooltipReferenceAreasDomain = createSelector([selectReferenceAreasByTooltipAxis, selectTooltipAxisType], combineAreasDomain);
var selectReferenceLinesByTooltipAxis = createSelector([selectReferenceLines, selectTooltipAxisType, selectTooltipAxisId], filterReferenceElements);
var selectTooltipReferenceLinesDomain = createSelector([selectReferenceLinesByTooltipAxis, selectTooltipAxisType], combineLinesDomain);
var selectTooltipReferenceElementsDomain = createSelector([selectTooltipReferenceDotsDomain, selectTooltipReferenceLinesDomain, selectTooltipReferenceAreasDomain], mergeDomains);
var selectTooltipNumericalDomain = createSelector([selectTooltipAxis, selectTooltipAxisDomainDefinition, selectTooltipDomainOfStackGroups, selectTooltipAllAppliedNumericalValuesIncludingErrorValues, selectTooltipReferenceElementsDomain], combineNumericalDomain);
var selectTooltipAxisDomain = createSelector([selectTooltipAxis, selectChartLayout, selectTooltipDisplayedData, selectAllTooltipAppliedValues, selectStackOffsetType, selectTooltipAxisType, selectTooltipNumericalDomain], combineAxisDomain);
var selectTooltipNiceTicks = createSelector([selectTooltipAxisDomain, selectTooltipAxis, selectTooltipAxisRealScaleType], combineNiceTicks);
var selectTooltipAxisDomainIncludingNiceTicks = createSelector([selectTooltipAxis, selectTooltipAxisDomain, selectTooltipNiceTicks, selectTooltipAxisType], combineAxisDomainWithNiceTicks);
var selectTooltipAxisRange = state => {
  var axisType = selectTooltipAxisType(state);
  var axisId = selectTooltipAxisId(state);
  var isPanorama = false; // Tooltip never displays in panorama so this is safe to assume
  return selectAxisRange(state, axisType, axisId, isPanorama);
};
var selectTooltipAxisRangeWithReverse = createSelector([selectTooltipAxis, selectTooltipAxisRange], combineAxisRangeWithReverse);
var selectTooltipAxisScale = createSelector([selectTooltipAxis, selectTooltipAxisRealScaleType, selectTooltipAxisDomainIncludingNiceTicks, selectTooltipAxisRangeWithReverse], combineScaleFunction);
var selectTooltipDuplicateDomain = createSelector([selectChartLayout, selectAllTooltipAppliedValues, selectTooltipAxis, selectTooltipAxisType], combineDuplicateDomain);
var selectTooltipCategoricalDomain = createSelector([selectChartLayout, selectAllTooltipAppliedValues, selectTooltipAxis, selectTooltipAxisType], combineCategoricalDomain);
var combineTicksOfTooltipAxis = (layout, axis, realScaleType, scale, range, duplicateDomain, categoricalDomain, axisType) => {
  if (!axis) {
    return undefined;
  }
  var {
    type
  } = axis;
  var isCategorical = isCategoricalAxis(layout, axisType);
  if (!scale) {
    return undefined;
  }
  var offsetForBand = realScaleType === 'scaleBand' && scale.bandwidth ? scale.bandwidth() / 2 : 2;
  var offset = type === 'category' && scale.bandwidth ? scale.bandwidth() / offsetForBand : 0;
  offset = axisType === 'angleAxis' && range != null && (range === null || range === void 0 ? void 0 : range.length) >= 2 ? mathSign(range[0] - range[1]) * 2 * offset : offset;

  // When axis is a categorical axis, but the type of axis is number or the scale of axis is not "auto"
  if (isCategorical && categoricalDomain) {
    return categoricalDomain.map((entry, index) => ({
      coordinate: scale(entry) + offset,
      value: entry,
      index,
      offset
    }));
  }

  // When axis has duplicated text, serial numbers are used to generate scale
  return scale.domain().map((entry, index) => ({
    coordinate: scale(entry) + offset,
    value: duplicateDomain ? duplicateDomain[entry] : entry,
    index,
    offset
  }));
};
var selectTooltipAxisTicks = createSelector([selectChartLayout, selectTooltipAxis, selectTooltipAxisRealScaleType, selectTooltipAxisScale, selectTooltipAxisRange, selectTooltipDuplicateDomain, selectTooltipCategoricalDomain, selectTooltipAxisType], combineTicksOfTooltipAxis);
var selectTooltipEventType = createSelector([selectDefaultTooltipEventType, selectValidateTooltipEventTypes, selectTooltipSettings], (defaultTooltipEventType, validateTooltipEventType, settings) => combineTooltipEventType(settings.shared, defaultTooltipEventType, validateTooltipEventType));
var selectTooltipTrigger = state => state.tooltip.settings.trigger;
var selectDefaultIndex = state => state.tooltip.settings.defaultIndex;
var selectTooltipInteractionState$1 = createSelector([selectTooltipState, selectTooltipEventType, selectTooltipTrigger, selectDefaultIndex], combineTooltipInteractionState);
var selectActiveTooltipIndex = createSelector([selectTooltipInteractionState$1, selectTooltipDisplayedData], combineActiveTooltipIndex);
var selectActiveLabel$1 = createSelector([selectTooltipAxisTicks, selectActiveTooltipIndex], combineActiveLabel);
var selectActiveTooltipDataKey = createSelector([selectTooltipInteractionState$1], tooltipInteraction => {
  if (!tooltipInteraction) {
    return undefined;
  }
  return tooltipInteraction.dataKey;
});
var selectTooltipPayloadConfigurations$1 = createSelector([selectTooltipState, selectTooltipEventType, selectTooltipTrigger, selectDefaultIndex], combineTooltipPayloadConfigurations);
var selectTooltipCoordinateForDefaultIndex = createSelector([selectChartWidth, selectChartHeight, selectChartLayout, selectChartOffsetInternal, selectTooltipAxisTicks, selectDefaultIndex, selectTooltipPayloadConfigurations$1, selectTooltipPayloadSearcher], combineCoordinateForDefaultIndex);
var selectActiveTooltipCoordinate = createSelector([selectTooltipInteractionState$1, selectTooltipCoordinateForDefaultIndex], (tooltipInteractionState, defaultIndexCoordinate) => {
  if (tooltipInteractionState !== null && tooltipInteractionState !== void 0 && tooltipInteractionState.coordinate) {
    return tooltipInteractionState.coordinate;
  }
  return defaultIndexCoordinate;
});
var selectIsTooltipActive$1 = createSelector([selectTooltipInteractionState$1], tooltipInteractionState => tooltipInteractionState.active);
var selectActiveTooltipPayload = createSelector([selectTooltipPayloadConfigurations$1, selectActiveTooltipIndex, selectChartDataWithIndexes, selectTooltipAxis, selectActiveLabel$1, selectTooltipPayloadSearcher, selectTooltipEventType], combineTooltipPayload);
var selectActiveTooltipDataPoints = createSelector([selectActiveTooltipPayload], payload => {
  if (payload == null) {
    return undefined;
  }
  var dataPoints = payload.map(p => p.payload).filter(p => p != null);
  return Array.from(new Set(dataPoints));
});

function ownKeys$q(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$q(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$q(Object(t), true).forEach(function (r) { _defineProperty$u(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$q(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$u(e, r, t) { return (r = _toPropertyKey$u(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$u(t) { var i = _toPrimitive$u(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$u(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var useTooltipAxis = () => useAppSelector(selectTooltipAxis);
var useTooltipAxisBandSize = () => {
  var tooltipAxis = useTooltipAxis();
  var tooltipTicks = useAppSelector(selectTooltipAxisTicks);
  var tooltipAxisScale = useAppSelector(selectTooltipAxisScale);
  return getBandSizeOfAxis(_objectSpread$q(_objectSpread$q({}, tooltipAxis), {}, {
    scale: tooltipAxisScale
  }), tooltipTicks);
};

var useChartName = () => {
  return useAppSelector(selectChartName);
};
var pickTooltipEventType = (_state, tooltipEventType) => tooltipEventType;
var pickTrigger = (_state, _tooltipEventType, trigger) => trigger;
var pickDefaultIndex = (_state, _tooltipEventType, _trigger, defaultIndex) => defaultIndex;
var selectOrderedTooltipTicks = createSelector(selectTooltipAxisTicks, ticks => sortBy$1(ticks, o => o.coordinate));
var selectTooltipInteractionState = createSelector([selectTooltipState, pickTooltipEventType, pickTrigger, pickDefaultIndex], combineTooltipInteractionState);
var selectActiveIndex = createSelector([selectTooltipInteractionState, selectTooltipDisplayedData], combineActiveTooltipIndex);
var selectTooltipDataKey = (state, tooltipEventType, trigger) => {
  if (tooltipEventType == null) {
    return undefined;
  }
  var tooltipState = selectTooltipState(state);
  if (tooltipEventType === 'axis') {
    if (trigger === 'hover') {
      return tooltipState.axisInteraction.hover.dataKey;
    }
    return tooltipState.axisInteraction.click.dataKey;
  }
  if (trigger === 'hover') {
    return tooltipState.itemInteraction.hover.dataKey;
  }
  return tooltipState.itemInteraction.click.dataKey;
};
var selectTooltipPayloadConfigurations = createSelector([selectTooltipState, pickTooltipEventType, pickTrigger, pickDefaultIndex], combineTooltipPayloadConfigurations);
var selectCoordinateForDefaultIndex = createSelector([selectChartWidth, selectChartHeight, selectChartLayout, selectChartOffsetInternal, selectTooltipAxisTicks, pickDefaultIndex, selectTooltipPayloadConfigurations, selectTooltipPayloadSearcher], combineCoordinateForDefaultIndex);
var selectActiveCoordinate = createSelector([selectTooltipInteractionState, selectCoordinateForDefaultIndex], (tooltipInteractionState, defaultIndexCoordinate) => {
  var _tooltipInteractionSt;
  return (_tooltipInteractionSt = tooltipInteractionState.coordinate) !== null && _tooltipInteractionSt !== void 0 ? _tooltipInteractionSt : defaultIndexCoordinate;
});
var selectActiveLabel = createSelector(selectTooltipAxisTicks, selectActiveIndex, combineActiveLabel);
var selectTooltipPayload = createSelector([selectTooltipPayloadConfigurations, selectActiveIndex, selectChartDataWithIndexes, selectTooltipAxis, selectActiveLabel, selectTooltipPayloadSearcher, pickTooltipEventType], combineTooltipPayload);
var selectIsTooltipActive = createSelector([selectTooltipInteractionState], tooltipInteractionState => {
  return {
    isActive: tooltipInteractionState.active,
    activeIndex: tooltipInteractionState.index
  };
});
var combineActiveProps = (chartEvent, layout, polarViewBox, tooltipAxisType, tooltipAxisRange, tooltipTicks, orderedTooltipTicks, offset) => {
  if (!chartEvent || !layout || !tooltipAxisType || !tooltipAxisRange || !tooltipTicks) {
    return undefined;
  }
  var rangeObj = inRange(chartEvent.chartX, chartEvent.chartY, layout, polarViewBox, offset);
  if (!rangeObj) {
    return undefined;
  }
  var pos = calculateTooltipPos(rangeObj, layout);
  var activeIndex = calculateActiveTickIndex(pos, orderedTooltipTicks, tooltipTicks, tooltipAxisType, tooltipAxisRange);
  var activeCoordinate = getActiveCoordinate(layout, tooltipTicks, activeIndex, rangeObj);
  return {
    activeIndex: String(activeIndex),
    activeCoordinate
  };
};

function _extends$n() { return _extends$n = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$n.apply(null, arguments); }
function ownKeys$p(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$p(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$p(Object(t), true).forEach(function (r) { _defineProperty$t(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$p(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$t(e, r, t) { return (r = _toPropertyKey$t(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$t(t) { var i = _toPrimitive$t(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$t(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }

/**
 * If set false, no cursor will be drawn when tooltip is active.
 * If set an object, the option is the configuration of cursor.
 * If set a React element, the option is the custom react element of drawing cursor
 */

function CursorInternal(props) {
  var {
    coordinate,
    payload,
    index,
    offset,
    tooltipAxisBandSize,
    layout,
    cursor,
    tooltipEventType,
    chartName
  } = props;

  // The cursor is a part of the Tooltip, and it should be shown (by default) when the Tooltip is active.
  var activeCoordinate = coordinate;
  var activePayload = payload;
  var activeTooltipIndex = index;
  if (!cursor || !activeCoordinate || chartName !== 'ScatterChart' && tooltipEventType !== 'axis') {
    return null;
  }
  var restProps, cursorComp;
  if (chartName === 'ScatterChart') {
    restProps = activeCoordinate;
    cursorComp = Cross;
  } else if (chartName === 'BarChart') {
    restProps = getCursorRectangle(layout, activeCoordinate, offset, tooltipAxisBandSize);
    cursorComp = Rectangle;
  } else if (layout === 'radial') {
    // @ts-expect-error TODO the state is marked as containing Coordinate but actually in polar charts it contains PolarCoordinate, we should keep the polar state separate
    var {
      cx,
      cy,
      radius,
      startAngle,
      endAngle
    } = getRadialCursorPoints(activeCoordinate);
    restProps = {
      cx,
      cy,
      startAngle,
      endAngle,
      innerRadius: radius,
      outerRadius: radius
    };
    cursorComp = Sector;
  } else {
    restProps = {
      points: getCursorPoints(layout, activeCoordinate, offset)
    };
    cursorComp = Curve;
  }
  var extraClassName = typeof cursor === 'object' && 'className' in cursor ? cursor.className : undefined;
  var cursorProps = _objectSpread$p(_objectSpread$p(_objectSpread$p(_objectSpread$p({
    stroke: '#ccc',
    pointerEvents: 'none'
  }, offset), restProps), filterProps(cursor, false)), {}, {
    payload: activePayload,
    payloadIndex: activeTooltipIndex,
    className: clsx('recharts-tooltip-cursor', extraClassName)
  });
  return /*#__PURE__*/reactExports.isValidElement(cursor) ? /*#__PURE__*/reactExports.cloneElement(cursor, cursorProps) : /*#__PURE__*/reactExports.createElement(cursorComp, cursorProps);
}

/*
 * Cursor is the background, or a highlight,
 * that shows when user mouses over or activates
 * an area.
 *
 * It usually shows together with a tooltip
 * to emphasise which part of the chart does the tooltip refer to.
 */
function Cursor(props) {
  var tooltipAxisBandSize = useTooltipAxisBandSize();
  var offset = useOffsetInternal();
  var layout = useChartLayout();
  var chartName = useChartName();
  return /*#__PURE__*/reactExports.createElement(CursorInternal, _extends$n({}, props, {
    coordinate: props.coordinate,
    index: props.index,
    payload: props.payload,
    offset: offset,
    layout: layout,
    tooltipAxisBandSize: tooltipAxisBandSize,
    chartName: chartName
  }));
}

var TooltipPortalContext = /*#__PURE__*/reactExports.createContext(null);
var useTooltipPortal = () => reactExports.useContext(TooltipPortalContext);

var eventemitter3 = {exports: {}};

(function (module) {

	var has = Object.prototype.hasOwnProperty
	  , prefix = '~';

	/**
	 * Constructor to create a storage for our `EE` objects.
	 * An `Events` instance is a plain object whose properties are event names.
	 *
	 * @constructor
	 * @private
	 */
	function Events() {}

	//
	// We try to not inherit from `Object.prototype`. In some engines creating an
	// instance in this way is faster than calling `Object.create(null)` directly.
	// If `Object.create(null)` is not supported we prefix the event names with a
	// character to make sure that the built-in object properties are not
	// overridden or used as an attack vector.
	//
	if (Object.create) {
	  Events.prototype = Object.create(null);

	  //
	  // This hack is needed because the `__proto__` property is still inherited in
	  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
	  //
	  if (!new Events().__proto__) prefix = false;
	}

	/**
	 * Representation of a single event listener.
	 *
	 * @param {Function} fn The listener function.
	 * @param {*} context The context to invoke the listener with.
	 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
	 * @constructor
	 * @private
	 */
	function EE(fn, context, once) {
	  this.fn = fn;
	  this.context = context;
	  this.once = once || false;
	}

	/**
	 * Add a listener for a given event.
	 *
	 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} context The context to invoke the listener with.
	 * @param {Boolean} once Specify if the listener is a one-time listener.
	 * @returns {EventEmitter}
	 * @private
	 */
	function addListener(emitter, event, fn, context, once) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('The listener must be a function');
	  }

	  var listener = new EE(fn, context || emitter, once)
	    , evt = prefix ? prefix + event : event;

	  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
	  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
	  else emitter._events[evt] = [emitter._events[evt], listener];

	  return emitter;
	}

	/**
	 * Clear event by name.
	 *
	 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
	 * @param {(String|Symbol)} evt The Event name.
	 * @private
	 */
	function clearEvent(emitter, evt) {
	  if (--emitter._eventsCount === 0) emitter._events = new Events();
	  else delete emitter._events[evt];
	}

	/**
	 * Minimal `EventEmitter` interface that is molded against the Node.js
	 * `EventEmitter` interface.
	 *
	 * @constructor
	 * @public
	 */
	function EventEmitter() {
	  this._events = new Events();
	  this._eventsCount = 0;
	}

	/**
	 * Return an array listing the events for which the emitter has registered
	 * listeners.
	 *
	 * @returns {Array}
	 * @public
	 */
	EventEmitter.prototype.eventNames = function eventNames() {
	  var names = []
	    , events
	    , name;

	  if (this._eventsCount === 0) return names;

	  for (name in (events = this._events)) {
	    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
	  }

	  if (Object.getOwnPropertySymbols) {
	    return names.concat(Object.getOwnPropertySymbols(events));
	  }

	  return names;
	};

	/**
	 * Return the listeners registered for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Array} The registered listeners.
	 * @public
	 */
	EventEmitter.prototype.listeners = function listeners(event) {
	  var evt = prefix ? prefix + event : event
	    , handlers = this._events[evt];

	  if (!handlers) return [];
	  if (handlers.fn) return [handlers.fn];

	  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
	    ee[i] = handlers[i].fn;
	  }

	  return ee;
	};

	/**
	 * Return the number of listeners listening to a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Number} The number of listeners.
	 * @public
	 */
	EventEmitter.prototype.listenerCount = function listenerCount(event) {
	  var evt = prefix ? prefix + event : event
	    , listeners = this._events[evt];

	  if (!listeners) return 0;
	  if (listeners.fn) return 1;
	  return listeners.length;
	};

	/**
	 * Calls each of the listeners registered for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Boolean} `true` if the event had listeners, else `false`.
	 * @public
	 */
	EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
	  var evt = prefix ? prefix + event : event;

	  if (!this._events[evt]) return false;

	  var listeners = this._events[evt]
	    , len = arguments.length
	    , args
	    , i;

	  if (listeners.fn) {
	    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

	    switch (len) {
	      case 1: return listeners.fn.call(listeners.context), true;
	      case 2: return listeners.fn.call(listeners.context, a1), true;
	      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
	      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
	      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
	      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
	    }

	    for (i = 1, args = new Array(len -1); i < len; i++) {
	      args[i - 1] = arguments[i];
	    }

	    listeners.fn.apply(listeners.context, args);
	  } else {
	    var length = listeners.length
	      , j;

	    for (i = 0; i < length; i++) {
	      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

	      switch (len) {
	        case 1: listeners[i].fn.call(listeners[i].context); break;
	        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
	        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
	        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
	        default:
	          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
	            args[j - 1] = arguments[j];
	          }

	          listeners[i].fn.apply(listeners[i].context, args);
	      }
	    }
	  }

	  return true;
	};

	/**
	 * Add a listener for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} [context=this] The context to invoke the listener with.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.on = function on(event, fn, context) {
	  return addListener(this, event, fn, context, false);
	};

	/**
	 * Add a one-time listener for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} [context=this] The context to invoke the listener with.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.once = function once(event, fn, context) {
	  return addListener(this, event, fn, context, true);
	};

	/**
	 * Remove the listeners of a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn Only remove the listeners that match this function.
	 * @param {*} context Only remove the listeners that have this context.
	 * @param {Boolean} once Only remove one-time listeners.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
	  var evt = prefix ? prefix + event : event;

	  if (!this._events[evt]) return this;
	  if (!fn) {
	    clearEvent(this, evt);
	    return this;
	  }

	  var listeners = this._events[evt];

	  if (listeners.fn) {
	    if (
	      listeners.fn === fn &&
	      (!once || listeners.once) &&
	      (!context || listeners.context === context)
	    ) {
	      clearEvent(this, evt);
	    }
	  } else {
	    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
	      if (
	        listeners[i].fn !== fn ||
	        (once && !listeners[i].once) ||
	        (context && listeners[i].context !== context)
	      ) {
	        events.push(listeners[i]);
	      }
	    }

	    //
	    // Reset the array, or remove it completely if we have no more listeners.
	    //
	    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
	    else clearEvent(this, evt);
	  }

	  return this;
	};

	/**
	 * Remove all listeners, or those of the specified event.
	 *
	 * @param {(String|Symbol)} [event] The event name.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
	  var evt;

	  if (event) {
	    evt = prefix ? prefix + event : event;
	    if (this._events[evt]) clearEvent(this, evt);
	  } else {
	    this._events = new Events();
	    this._eventsCount = 0;
	  }

	  return this;
	};

	//
	// Alias methods names because people roll like that.
	//
	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
	EventEmitter.prototype.addListener = EventEmitter.prototype.on;

	//
	// Expose the prefix.
	//
	EventEmitter.prefixed = prefix;

	//
	// Allow `EventEmitter` to be imported as module namespace.
	//
	EventEmitter.EventEmitter = EventEmitter;

	//
	// Expose the module.
	//
	{
	  module.exports = EventEmitter;
	} 
} (eventemitter3));

var eventemitter3Exports = eventemitter3.exports;
const EventEmitter = /*@__PURE__*/getDefaultExportFromCjs(eventemitter3Exports);

var eventCenter = new EventEmitter();
var TOOLTIP_SYNC_EVENT = 'recharts.syncEvent.tooltip';
var BRUSH_SYNC_EVENT = 'recharts.syncEvent.brush';

/**
 * These chart options are decided internally, by Recharts,
 * and will not change during the lifetime of the chart.
 *
 * Changing these options can be done by swapping the root element
 * which will make a brand-new Redux store.
 *
 * If you want to store options that can be changed by the user,
 * use UpdatableChartOptions in rootPropsSlice.ts.
 */

function arrayTooltipSearcher(data, strIndex) {
  if (!strIndex) return undefined;
  var numIndex = Number.parseInt(strIndex, 10);
  if (isNan(numIndex)) {
    return undefined;
  }
  return data === null || data === void 0 ? void 0 : data[numIndex];
}
var initialState$6 = {
  chartName: '',
  tooltipPayloadSearcher: undefined,
  eventEmitter: undefined,
  defaultTooltipEventType: 'axis'
};
var optionsSlice = createSlice({
  name: 'options',
  initialState: initialState$6,
  reducers: {
    createEventEmitter: state => {
      if (state.eventEmitter == null) {
        state.eventEmitter = Symbol('rechartsEventEmitter');
      }
    }
  }
});
var optionsReducer = optionsSlice.reducer;
var {
  createEventEmitter
} = optionsSlice.actions;

function selectSynchronisedTooltipState(state) {
  return state.tooltip.syncInteraction;
}

/**
 * This is the data that's coming through main chart `data` prop
 * Recharts is very flexible in what it accepts so the type is very flexible too.
 * This will typically be an object, and various components will provide various `dataKey`
 * that dictates how to pull data from that object.
 *
 * TL;DR: before dataKey
 */

/**
 * So this is the same unknown type as ChartData but this is after the dataKey has been applied.
 * We still don't know what the type is - that depends on what exactly it was before the dataKey application,
 * and the dataKey can return whatever anyway - but let's keep it separate as a form of documentation.
 *
 * TL;DR: ChartData after dataKey.
 */

var initialChartDataState = {
  chartData: undefined,
  computedData: undefined,
  dataStartIndex: 0,
  dataEndIndex: 0
};
var chartDataSlice = createSlice({
  name: 'chartData',
  initialState: initialChartDataState,
  reducers: {
    setChartData(state, action) {
      state.chartData = action.payload;
      if (action.payload == null) {
        state.dataStartIndex = 0;
        state.dataEndIndex = 0;
        return;
      }
      if (action.payload.length > 0 && state.dataEndIndex !== action.payload.length - 1) {
        state.dataEndIndex = action.payload.length - 1;
      }
    },
    setComputedData(state, action) {
      state.computedData = action.payload;
    },
    setDataStartEndIndexes(state, action) {
      var {
        startIndex,
        endIndex
      } = action.payload;
      if (startIndex != null) {
        state.dataStartIndex = startIndex;
      }
      if (endIndex != null) {
        state.dataEndIndex = endIndex;
      }
    }
  }
});
var {
  setChartData,
  setDataStartEndIndexes,
  setComputedData
} = chartDataSlice.actions;
var chartDataReducer = chartDataSlice.reducer;

var noop$2 = () => {};
function useTooltipSyncEventsListener() {
  var mySyncId = useAppSelector(selectSyncId);
  var myEventEmitter = useAppSelector(selectEventEmitter);
  var dispatch = useAppDispatch();
  var syncMethod = useAppSelector(selectSyncMethod);
  var tooltipTicks = useAppSelector(selectTooltipAxisTicks);
  var layout = useChartLayout();
  var viewBox = useViewBox();
  var className = useAppSelector(state => state.rootProps.className);
  reactExports.useEffect(() => {
    if (mySyncId == null) {
      // This chart is not synchronised with any other chart so we don't need to listen for any events.
      return noop$2;
    }
    var listener = (incomingSyncId, action, emitter) => {
      if (myEventEmitter === emitter) {
        // We don't want to dispatch actions that we sent ourselves.
        return;
      }
      if (mySyncId !== incomingSyncId) {
        // This event is not for this chart
        return;
      }
      if (syncMethod === 'index') {
        dispatch(action);
        // This is the default behaviour, we don't need to do anything else.
        return;
      }
      if (tooltipTicks == null) {
        // for the other two sync methods, we need the ticks to be available
        return;
      }
      var activeTick;
      if (typeof syncMethod === 'function') {
        /*
         * This is what the data shape in 2.x CategoricalChartState used to look like.
         * In 3.x we store things differently but let's try to keep the old shape for compatibility.
         */
        var syncMethodParam = {
          activeTooltipIndex: action.payload.index == null ? undefined : Number(action.payload.index),
          isTooltipActive: action.payload.active,
          activeIndex: action.payload.index == null ? undefined : Number(action.payload.index),
          activeLabel: action.payload.label,
          activeDataKey: action.payload.dataKey,
          activeCoordinate: action.payload.coordinate
        };
        // Call a callback function. If there is an application specific algorithm
        var activeTooltipIndex = syncMethod(tooltipTicks, syncMethodParam);
        activeTick = tooltipTicks[activeTooltipIndex];
      } else if (syncMethod === 'value') {
        // labels are always strings, tick.value might be a string or a number, depending on axis type
        activeTick = tooltipTicks.find(tick => String(tick.value) === action.payload.label);
      }
      var {
        coordinate
      } = action.payload;
      if (activeTick == null || action.payload.active === false || coordinate == null || viewBox == null) {
        dispatch(setSyncInteraction({
          active: false,
          coordinate: undefined,
          dataKey: undefined,
          index: null,
          label: undefined
        }));
        return;
      }
      var {
        x,
        y
      } = coordinate;
      var validateChartX = Math.min(x, viewBox.x + viewBox.width);
      var validateChartY = Math.min(y, viewBox.y + viewBox.height);
      var activeCoordinate = {
        x: layout === 'horizontal' ? activeTick.coordinate : validateChartX,
        y: layout === 'horizontal' ? validateChartY : activeTick.coordinate
      };
      var syncAction = setSyncInteraction({
        active: action.payload.active,
        coordinate: activeCoordinate,
        dataKey: action.payload.dataKey,
        index: String(activeTick.index),
        label: action.payload.label
      });
      dispatch(syncAction);
    };
    eventCenter.on(TOOLTIP_SYNC_EVENT, listener);
    return () => {
      eventCenter.off(TOOLTIP_SYNC_EVENT, listener);
    };
  }, [className, dispatch, myEventEmitter, mySyncId, syncMethod, tooltipTicks, layout, viewBox]);
}
function useBrushSyncEventsListener() {
  var mySyncId = useAppSelector(selectSyncId);
  var myEventEmitter = useAppSelector(selectEventEmitter);
  var dispatch = useAppDispatch();
  reactExports.useEffect(() => {
    if (mySyncId == null) {
      // This chart is not synchronised with any other chart so we don't need to listen for any events.
      return noop$2;
    }
    var listener = (incomingSyncId, action, emitter) => {
      if (myEventEmitter === emitter) {
        // We don't want to dispatch actions that we sent ourselves.
        return;
      }
      if (mySyncId === incomingSyncId) {
        dispatch(setDataStartEndIndexes(action));
      }
    };
    eventCenter.on(BRUSH_SYNC_EVENT, listener);
    return () => {
      eventCenter.off(BRUSH_SYNC_EVENT, listener);
    };
  }, [dispatch, myEventEmitter, mySyncId]);
}

/**
 * Will receive synchronisation events from other charts.
 *
 * Reads syncMethod from state and decides how to synchronise the tooltip based on that.
 *
 * @returns void
 */
function useSynchronisedEventsFromOtherCharts() {
  var dispatch = useAppDispatch();
  reactExports.useEffect(() => {
    dispatch(createEventEmitter());
  }, [dispatch]);
  useTooltipSyncEventsListener();
  useBrushSyncEventsListener();
}

/**
 * Will send events to other charts.
 * If syncId is undefined, no events will be sent.
 *
 * This ignores the syncMethod, because that is set and computed on the receiving end.
 *
 * @param tooltipEventType from Tooltip
 * @param trigger from Tooltip
 * @param activeCoordinate from state
 * @param activeLabel from state
 * @param activeIndex from state
 * @param isTooltipActive from state
 * @returns void
 */
function useTooltipChartSynchronisation(tooltipEventType, trigger, activeCoordinate, activeLabel, activeIndex, isTooltipActive) {
  var activeDataKey = useAppSelector(state => selectTooltipDataKey(state, tooltipEventType, trigger));
  var eventEmitterSymbol = useAppSelector(selectEventEmitter);
  var syncId = useAppSelector(selectSyncId);
  var syncMethod = useAppSelector(selectSyncMethod);
  var tooltipState = useAppSelector(selectSynchronisedTooltipState);
  var isReceivingSynchronisation = tooltipState === null || tooltipState === void 0 ? void 0 : tooltipState.active;
  reactExports.useEffect(() => {
    if (isReceivingSynchronisation) {
      /*
       * This chart currently has active tooltip, synchronised from another chart.
       * Let's not send any outgoing synchronisation events while that's happening
       * to avoid infinite loops.
       */
      return;
    }
    if (syncId == null) {
      /*
       * syncId is not set, means that this chart is not synchronised with any other chart,
       * means we don't need to send synchronisation events
       */
      return;
    }
    if (eventEmitterSymbol == null) {
      /*
       * When using Recharts internal hooks and selectors outside charts context,
       * these properties will be undefined. Let's return silently instead of throwing an error.
       */
      return;
    }
    var syncAction = setSyncInteraction({
      active: isTooltipActive,
      coordinate: activeCoordinate,
      dataKey: activeDataKey,
      index: activeIndex,
      label: typeof activeLabel === 'number' ? String(activeLabel) : activeLabel
    });
    eventCenter.emit(TOOLTIP_SYNC_EVENT, syncId, syncAction, eventEmitterSymbol);
  }, [isReceivingSynchronisation, activeCoordinate, activeDataKey, activeIndex, activeLabel, eventEmitterSymbol, syncId, syncMethod, isTooltipActive]);
}

function ownKeys$o(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$o(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$o(Object(t), true).forEach(function (r) { _defineProperty$s(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$o(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$s(e, r, t) { return (r = _toPropertyKey$s(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$s(t) { var i = _toPrimitive$s(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$s(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function defaultUniqBy(entry) {
  return entry.dataKey;
}
function renderContent(content, props) {
  if (/*#__PURE__*/reactExports.isValidElement(content)) {
    return /*#__PURE__*/reactExports.cloneElement(content, props);
  }
  if (typeof content === 'function') {
    return /*#__PURE__*/reactExports.createElement(content, props);
  }
  return /*#__PURE__*/reactExports.createElement(DefaultTooltipContent, props);
}
var emptyPayload = [];
var defaultTooltipProps = {
  allowEscapeViewBox: {
    x: false,
    y: false
  },
  animationDuration: 400,
  animationEasing: 'ease',
  axisId: 0,
  contentStyle: {},
  cursor: true,
  filterNull: true,
  isAnimationActive: !Global.isSsr,
  itemSorter: 'name',
  itemStyle: {},
  labelStyle: {},
  offset: 10,
  reverseDirection: {
    x: false,
    y: false
  },
  separator: ' : ',
  trigger: 'hover',
  useTranslate3d: false,
  wrapperStyle: {}
};
function Tooltip(outsideProps) {
  var props = resolveDefaultProps(outsideProps, defaultTooltipProps);
  var {
    active: activeFromProps,
    allowEscapeViewBox,
    animationDuration,
    animationEasing,
    content,
    filterNull,
    isAnimationActive,
    offset,
    payloadUniqBy,
    position,
    reverseDirection,
    useTranslate3d,
    wrapperStyle,
    cursor,
    shared,
    trigger,
    defaultIndex,
    portal: portalFromProps,
    axisId
  } = props;
  var dispatch = useAppDispatch();
  var defaultIndexAsString = typeof defaultIndex === 'number' ? String(defaultIndex) : defaultIndex;
  reactExports.useEffect(() => {
    dispatch(setTooltipSettingsState({
      shared,
      trigger,
      axisId,
      active: activeFromProps,
      defaultIndex: defaultIndexAsString
    }));
  }, [dispatch, shared, trigger, axisId, activeFromProps, defaultIndexAsString]);
  var viewBox = useViewBox();
  var accessibilityLayer = useAccessibilityLayer();
  var tooltipEventType = useTooltipEventType(shared);
  var {
    activeIndex,
    isActive
  } = useAppSelector(state => selectIsTooltipActive(state, tooltipEventType, trigger, defaultIndexAsString));
  var payloadFromRedux = useAppSelector(state => selectTooltipPayload(state, tooltipEventType, trigger, defaultIndexAsString));
  var labelFromRedux = useAppSelector(state => selectActiveLabel(state, tooltipEventType, trigger, defaultIndexAsString));
  var coordinate = useAppSelector(state => selectActiveCoordinate(state, tooltipEventType, trigger, defaultIndexAsString));
  var payload = payloadFromRedux;
  var tooltipPortalFromContext = useTooltipPortal();
  /*
   * The user can set `active=true` on the Tooltip in which case the Tooltip will stay always active,
   * or `active=false` in which case the Tooltip never shows.
   *
   * If the `active` prop is not defined then it will show and hide based on mouse or keyboard activity.
   */
  var finalIsActive = activeFromProps !== null && activeFromProps !== void 0 ? activeFromProps : isActive;
  var [lastBoundingBox, updateBoundingBox] = useElementOffset([payload, finalIsActive]);
  var finalLabel = tooltipEventType === 'axis' ? labelFromRedux : undefined;
  useTooltipChartSynchronisation(tooltipEventType, trigger, coordinate, finalLabel, activeIndex, finalIsActive);
  var tooltipPortal = portalFromProps !== null && portalFromProps !== void 0 ? portalFromProps : tooltipPortalFromContext;
  if (tooltipPortal == null) {
    return null;
  }
  var finalPayload = payload !== null && payload !== void 0 ? payload : emptyPayload;
  if (!finalIsActive) {
    finalPayload = emptyPayload;
  }
  if (filterNull && finalPayload.length) {
    finalPayload = getUniqPayload(payload.filter(entry => entry.value != null && (entry.hide !== true || props.includeHidden)), payloadUniqBy, defaultUniqBy);
  }
  var hasPayload = finalPayload.length > 0;
  var tooltipElement = /*#__PURE__*/reactExports.createElement(TooltipBoundingBox, {
    allowEscapeViewBox: allowEscapeViewBox,
    animationDuration: animationDuration,
    animationEasing: animationEasing,
    isAnimationActive: isAnimationActive,
    active: finalIsActive,
    coordinate: coordinate,
    hasPayload: hasPayload,
    offset: offset,
    position: position,
    reverseDirection: reverseDirection,
    useTranslate3d: useTranslate3d,
    viewBox: viewBox,
    wrapperStyle: wrapperStyle,
    lastBoundingBox: lastBoundingBox,
    innerRef: updateBoundingBox,
    hasPortalFromProps: Boolean(portalFromProps)
  }, renderContent(content, _objectSpread$o(_objectSpread$o({}, props), {}, {
    // @ts-expect-error renderContent method expects the payload to be mutable, TODO make it immutable
    payload: finalPayload,
    label: finalLabel,
    active: finalIsActive,
    coordinate,
    accessibilityLayer
  })));
  return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, /*#__PURE__*/reactDomExports.createPortal(tooltipElement, tooltipPortal), finalIsActive && /*#__PURE__*/reactExports.createElement(Cursor, {
    cursor: cursor,
    tooltipEventType: tooltipEventType,
    coordinate: coordinate,
    payload: payload,
    index: activeIndex
  }));
}

var throttle$2 = {};

var debounce = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	function debounce(func, wait = 0, options = {}) {
	    if (typeof options !== 'object') {
	        options = {};
	    }
	    let pendingArgs = null;
	    let pendingThis = null;
	    let lastCallTime = null;
	    let debounceStartTime = 0;
	    let timeoutId = null;
	    let lastResult;
	    const { leading = false, trailing = true, maxWait } = options;
	    const hasMaxWait = 'maxWait' in options;
	    const maxWaitMs = hasMaxWait ? Math.max(Number(maxWait) || 0, wait) : 0;
	    const invoke = (time) => {
	        if (pendingArgs !== null) {
	            lastResult = func.apply(pendingThis, pendingArgs);
	        }
	        pendingArgs = pendingThis = null;
	        debounceStartTime = time;
	        return lastResult;
	    };
	    const handleLeading = (time) => {
	        debounceStartTime = time;
	        timeoutId = setTimeout(handleTimeout, wait);
	        if (leading && pendingArgs !== null) {
	            return invoke(time);
	        }
	        return lastResult;
	    };
	    const handleTrailing = (time) => {
	        timeoutId = null;
	        if (trailing && pendingArgs !== null) {
	            return invoke(time);
	        }
	        return lastResult;
	    };
	    const checkCanInvoke = (time) => {
	        if (lastCallTime === null) {
	            return true;
	        }
	        const timeSinceLastCall = time - lastCallTime;
	        const hasDebounceDelayPassed = timeSinceLastCall >= wait || timeSinceLastCall < 0;
	        const hasMaxWaitPassed = hasMaxWait && time - debounceStartTime >= maxWaitMs;
	        return hasDebounceDelayPassed || hasMaxWaitPassed;
	    };
	    const calculateRemainingWait = (time) => {
	        const timeSinceLastCall = lastCallTime === null ? 0 : time - lastCallTime;
	        const remainingDebounceTime = wait - timeSinceLastCall;
	        const remainingMaxWaitTime = maxWaitMs - (time - debounceStartTime);
	        return hasMaxWait ? Math.min(remainingDebounceTime, remainingMaxWaitTime) : remainingDebounceTime;
	    };
	    const handleTimeout = () => {
	        const currentTime = Date.now();
	        if (checkCanInvoke(currentTime)) {
	            return handleTrailing(currentTime);
	        }
	        timeoutId = setTimeout(handleTimeout, calculateRemainingWait(currentTime));
	    };
	    const debouncedFunction = function (...args) {
	        const currentTime = Date.now();
	        const canInvoke = checkCanInvoke(currentTime);
	        pendingArgs = args;
	        pendingThis = this;
	        lastCallTime = currentTime;
	        if (canInvoke) {
	            if (timeoutId === null) {
	                return handleLeading(currentTime);
	            }
	            if (hasMaxWait) {
	                clearTimeout(timeoutId);
	                timeoutId = setTimeout(handleTimeout, wait);
	                return invoke(currentTime);
	            }
	        }
	        if (timeoutId === null) {
	            timeoutId = setTimeout(handleTimeout, wait);
	        }
	        return lastResult;
	    };
	    debouncedFunction.cancel = () => {
	        if (timeoutId !== null) {
	            clearTimeout(timeoutId);
	        }
	        debounceStartTime = 0;
	        lastCallTime = pendingArgs = pendingThis = timeoutId = null;
	    };
	    debouncedFunction.flush = () => {
	        return timeoutId === null ? lastResult : handleTrailing(Date.now());
	    };
	    return debouncedFunction;
	}

	exports.debounce = debounce; 
} (debounce));

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const debounce$1 = debounce;

	function throttle(func, throttleMs = 0, options = {}) {
	    const { leading = true, trailing = true } = options;
	    return debounce$1.debounce(func, throttleMs, {
	        leading,
	        maxWait: throttleMs,
	        trailing,
	    });
	}

	exports.throttle = throttle; 
} (throttle$2));

var throttle = throttle$2.throttle;

const throttle$1 = /*@__PURE__*/getDefaultExportFromCjs(throttle);

var warn = function warn2(condition, format) {
  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }
};

function ownKeys$n(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$n(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$n(Object(t), true).forEach(function (r) { _defineProperty$r(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$n(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$r(e, r, t) { return (r = _toPropertyKey$r(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$r(t) { var i = _toPrimitive$r(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$r(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var ResponsiveContainer = /*#__PURE__*/reactExports.forwardRef((_ref, ref) => {
  var {
    aspect,
    initialDimension = {
      width: -1,
      height: -1
    },
    width = '100%',
    height = '100%',
    /*
     * default min-width to 0 if not specified - 'auto' causes issues with flexbox
     * https://github.com/recharts/recharts/issues/172
     */
    minWidth = 0,
    minHeight,
    maxHeight,
    children,
    debounce = 0,
    id,
    className,
    onResize,
    style = {}
  } = _ref;
  var containerRef = reactExports.useRef(null);
  var onResizeRef = reactExports.useRef();
  onResizeRef.current = onResize;
  reactExports.useImperativeHandle(ref, () => containerRef.current);
  var [sizes, setSizes] = reactExports.useState({
    containerWidth: initialDimension.width,
    containerHeight: initialDimension.height
  });
  var setContainerSize = reactExports.useCallback((newWidth, newHeight) => {
    setSizes(prevState => {
      var roundedWidth = Math.round(newWidth);
      var roundedHeight = Math.round(newHeight);
      if (prevState.containerWidth === roundedWidth && prevState.containerHeight === roundedHeight) {
        return prevState;
      }
      return {
        containerWidth: roundedWidth,
        containerHeight: roundedHeight
      };
    });
  }, []);
  reactExports.useEffect(() => {
    var callback = entries => {
      var _onResizeRef$current;
      var {
        width: containerWidth,
        height: containerHeight
      } = entries[0].contentRect;
      setContainerSize(containerWidth, containerHeight);
      (_onResizeRef$current = onResizeRef.current) === null || _onResizeRef$current === void 0 || _onResizeRef$current.call(onResizeRef, containerWidth, containerHeight);
    };
    if (debounce > 0) {
      callback = throttle$1(callback, debounce, {
        trailing: true,
        leading: false
      });
    }
    var observer = new ResizeObserver(callback);
    var {
      width: containerWidth,
      height: containerHeight
    } = containerRef.current.getBoundingClientRect();
    setContainerSize(containerWidth, containerHeight);
    observer.observe(containerRef.current);
    return () => {
      observer.disconnect();
    };
  }, [setContainerSize, debounce]);
  var chartContent = reactExports.useMemo(() => {
    var {
      containerWidth,
      containerHeight
    } = sizes;
    if (containerWidth < 0 || containerHeight < 0) {
      return null;
    }
    warn(isPercent(width) || isPercent(height), "The width(%s) and height(%s) are both fixed numbers,\n       maybe you don't need to use a ResponsiveContainer.", width, height);
    warn(!aspect || aspect > 0, 'The aspect(%s) must be greater than zero.', aspect);
    var calculatedWidth = isPercent(width) ? containerWidth : width;
    var calculatedHeight = isPercent(height) ? containerHeight : height;
    if (aspect && aspect > 0) {
      // Preserve the desired aspect ratio
      if (calculatedWidth) {
        // Will default to using width for aspect ratio
        calculatedHeight = calculatedWidth / aspect;
      } else if (calculatedHeight) {
        // But we should also take height into consideration
        calculatedWidth = calculatedHeight * aspect;
      }

      // if maxHeight is set, overwrite if calculatedHeight is greater than maxHeight
      if (maxHeight && calculatedHeight > maxHeight) {
        calculatedHeight = maxHeight;
      }
    }
    warn(calculatedWidth > 0 || calculatedHeight > 0, "The width(%s) and height(%s) of chart should be greater than 0,\n       please check the style of container, or the props width(%s) and height(%s),\n       or add a minWidth(%s) or minHeight(%s) or use aspect(%s) to control the\n       height and width.", calculatedWidth, calculatedHeight, width, height, minWidth, minHeight, aspect);
    return reactExports.Children.map(children, child => {
      return /*#__PURE__*/reactExports.cloneElement(child, {
        width: calculatedWidth,
        height: calculatedHeight,
        // calculate the actual size and override it.
        style: _objectSpread$n({
          width: calculatedWidth,
          height: calculatedHeight
        }, child.props.style)
      });
    });
  }, [aspect, children, height, maxHeight, minHeight, minWidth, sizes, width]);
  return /*#__PURE__*/reactExports.createElement("div", {
    id: id ? "".concat(id) : undefined,
    className: clsx('recharts-responsive-container', className),
    style: _objectSpread$n(_objectSpread$n({}, style), {}, {
      width,
      height,
      minWidth,
      minHeight,
      maxHeight
    }),
    ref: containerRef
  }, /*#__PURE__*/reactExports.createElement("div", {
    style: {
      width: 0,
      height: 0,
      overflow: 'visible'
    }
  }, chartContent));
});

/**
 * @fileOverview Cross
 */

var Cell = _props => null;
Cell.displayName = 'Cell';

function ownKeys$m(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$m(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$m(Object(t), true).forEach(function (r) { _defineProperty$q(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$m(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$q(e, r, t) { return (r = _toPropertyKey$q(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$q(t) { var i = _toPrimitive$q(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$q(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var stringCache = {
  widthCache: {},
  cacheCount: 0
};
var MAX_CACHE_NUM = 2000;
var SPAN_STYLE = {
  position: 'absolute',
  top: '-20000px',
  left: 0,
  padding: 0,
  margin: 0,
  border: 'none',
  whiteSpace: 'pre'
};
var MEASUREMENT_SPAN_ID = 'recharts_measurement_span';
function removeInvalidKeys(obj) {
  var copyObj = _objectSpread$m({}, obj);
  Object.keys(copyObj).forEach(key => {
    if (!copyObj[key]) {
      delete copyObj[key];
    }
  });
  return copyObj;
}
var getStringSize = function getStringSize(text) {
  var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (text === undefined || text === null || Global.isSsr) {
    return {
      width: 0,
      height: 0
    };
  }
  var copyStyle = removeInvalidKeys(style);
  var cacheKey = JSON.stringify({
    text,
    copyStyle
  });
  if (stringCache.widthCache[cacheKey]) {
    return stringCache.widthCache[cacheKey];
  }
  try {
    var measurementSpan = document.getElementById(MEASUREMENT_SPAN_ID);
    if (!measurementSpan) {
      measurementSpan = document.createElement('span');
      measurementSpan.setAttribute('id', MEASUREMENT_SPAN_ID);
      measurementSpan.setAttribute('aria-hidden', 'true');
      document.body.appendChild(measurementSpan);
    }
    // Need to use CSS Object Model (CSSOM) to be able to comply with Content Security Policy (CSP)
    // https://en.wikipedia.org/wiki/Content_Security_Policy
    var measurementSpanStyle = _objectSpread$m(_objectSpread$m({}, SPAN_STYLE), copyStyle);
    Object.assign(measurementSpan.style, measurementSpanStyle);
    measurementSpan.textContent = "".concat(text);
    var rect = measurementSpan.getBoundingClientRect();
    var result = {
      width: rect.width,
      height: rect.height
    };
    stringCache.widthCache[cacheKey] = result;
    if (++stringCache.cacheCount > MAX_CACHE_NUM) {
      stringCache.cacheCount = 0;
      stringCache.widthCache = {};
    }
    return result;
  } catch (_unused) {
    return {
      width: 0,
      height: 0
    };
  }
};

var MULTIPLY_OR_DIVIDE_REGEX = /(-?\d+(?:\.\d+)?[a-zA-Z%]*)([*/])(-?\d+(?:\.\d+)?[a-zA-Z%]*)/;
var ADD_OR_SUBTRACT_REGEX = /(-?\d+(?:\.\d+)?[a-zA-Z%]*)([+-])(-?\d+(?:\.\d+)?[a-zA-Z%]*)/;
var CSS_LENGTH_UNIT_REGEX = /^px|cm|vh|vw|em|rem|%|mm|in|pt|pc|ex|ch|vmin|vmax|Q$/;
var NUM_SPLIT_REGEX = /(-?\d+(?:\.\d+)?)([a-zA-Z%]+)?/;
var CONVERSION_RATES = {
  cm: 96 / 2.54,
  mm: 96 / 25.4,
  pt: 96 / 72,
  pc: 96 / 6,
  in: 96,
  Q: 96 / (2.54 * 40),
  px: 1
};
var FIXED_CSS_LENGTH_UNITS = Object.keys(CONVERSION_RATES);
var STR_NAN = 'NaN';
function convertToPx(value, unit) {
  return value * CONVERSION_RATES[unit];
}
class DecimalCSS {
  static parse(str) {
    var _NUM_SPLIT_REGEX$exec;
    var [, numStr, unit] = (_NUM_SPLIT_REGEX$exec = NUM_SPLIT_REGEX.exec(str)) !== null && _NUM_SPLIT_REGEX$exec !== void 0 ? _NUM_SPLIT_REGEX$exec : [];
    return new DecimalCSS(parseFloat(numStr), unit !== null && unit !== void 0 ? unit : '');
  }
  constructor(num, unit) {
    this.num = num;
    this.unit = unit;
    this.num = num;
    this.unit = unit;
    if (isNan(num)) {
      this.unit = '';
    }
    if (unit !== '' && !CSS_LENGTH_UNIT_REGEX.test(unit)) {
      this.num = NaN;
      this.unit = '';
    }
    if (FIXED_CSS_LENGTH_UNITS.includes(unit)) {
      this.num = convertToPx(num, unit);
      this.unit = 'px';
    }
  }
  add(other) {
    if (this.unit !== other.unit) {
      return new DecimalCSS(NaN, '');
    }
    return new DecimalCSS(this.num + other.num, this.unit);
  }
  subtract(other) {
    if (this.unit !== other.unit) {
      return new DecimalCSS(NaN, '');
    }
    return new DecimalCSS(this.num - other.num, this.unit);
  }
  multiply(other) {
    if (this.unit !== '' && other.unit !== '' && this.unit !== other.unit) {
      return new DecimalCSS(NaN, '');
    }
    return new DecimalCSS(this.num * other.num, this.unit || other.unit);
  }
  divide(other) {
    if (this.unit !== '' && other.unit !== '' && this.unit !== other.unit) {
      return new DecimalCSS(NaN, '');
    }
    return new DecimalCSS(this.num / other.num, this.unit || other.unit);
  }
  toString() {
    return "".concat(this.num).concat(this.unit);
  }
  isNaN() {
    return isNan(this.num);
  }
}
function calculateArithmetic(expr) {
  if (expr.includes(STR_NAN)) {
    return STR_NAN;
  }
  var newExpr = expr;
  while (newExpr.includes('*') || newExpr.includes('/')) {
    var _MULTIPLY_OR_DIVIDE_R;
    var [, leftOperand, operator, rightOperand] = (_MULTIPLY_OR_DIVIDE_R = MULTIPLY_OR_DIVIDE_REGEX.exec(newExpr)) !== null && _MULTIPLY_OR_DIVIDE_R !== void 0 ? _MULTIPLY_OR_DIVIDE_R : [];
    var lTs = DecimalCSS.parse(leftOperand !== null && leftOperand !== void 0 ? leftOperand : '');
    var rTs = DecimalCSS.parse(rightOperand !== null && rightOperand !== void 0 ? rightOperand : '');
    var result = operator === '*' ? lTs.multiply(rTs) : lTs.divide(rTs);
    if (result.isNaN()) {
      return STR_NAN;
    }
    newExpr = newExpr.replace(MULTIPLY_OR_DIVIDE_REGEX, result.toString());
  }
  while (newExpr.includes('+') || /.-\d+(?:\.\d+)?/.test(newExpr)) {
    var _ADD_OR_SUBTRACT_REGE;
    var [, _leftOperand, _operator, _rightOperand] = (_ADD_OR_SUBTRACT_REGE = ADD_OR_SUBTRACT_REGEX.exec(newExpr)) !== null && _ADD_OR_SUBTRACT_REGE !== void 0 ? _ADD_OR_SUBTRACT_REGE : [];
    var _lTs = DecimalCSS.parse(_leftOperand !== null && _leftOperand !== void 0 ? _leftOperand : '');
    var _rTs = DecimalCSS.parse(_rightOperand !== null && _rightOperand !== void 0 ? _rightOperand : '');
    var _result = _operator === '+' ? _lTs.add(_rTs) : _lTs.subtract(_rTs);
    if (_result.isNaN()) {
      return STR_NAN;
    }
    newExpr = newExpr.replace(ADD_OR_SUBTRACT_REGEX, _result.toString());
  }
  return newExpr;
}
var PARENTHESES_REGEX = /\(([^()]*)\)/;
function calculateParentheses(expr) {
  var newExpr = expr;
  var match;
  // eslint-disable-next-line no-cond-assign
  while ((match = PARENTHESES_REGEX.exec(newExpr)) != null) {
    var [, parentheticalExpression] = match;
    newExpr = newExpr.replace(PARENTHESES_REGEX, calculateArithmetic(parentheticalExpression));
  }
  return newExpr;
}
function evaluateExpression(expression) {
  var newExpr = expression.replace(/\s+/g, '');
  newExpr = calculateParentheses(newExpr);
  newExpr = calculateArithmetic(newExpr);
  return newExpr;
}
function safeEvaluateExpression(expression) {
  try {
    return evaluateExpression(expression);
  } catch (_unused) {
    return STR_NAN;
  }
}
function reduceCSSCalc(expression) {
  var result = safeEvaluateExpression(expression.slice(5, -1));
  if (result === STR_NAN) {
    return '';
  }
  return result;
}

var _excluded$m = ["x", "y", "lineHeight", "capHeight", "scaleToFit", "textAnchor", "verticalAnchor", "fill"],
  _excluded2$9 = ["dx", "dy", "angle", "className", "breakAll"];
function _extends$m() { return _extends$m = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$m.apply(null, arguments); }
function _objectWithoutProperties$m(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$m(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$m(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
var BREAKING_SPACES = /[ \f\n\r\t\v\u2028\u2029]+/;
var calculateWordWidths = _ref => {
  var {
    children,
    breakAll,
    style
  } = _ref;
  try {
    var words = [];
    if (!isNullish(children)) {
      if (breakAll) {
        words = children.toString().split('');
      } else {
        words = children.toString().split(BREAKING_SPACES);
      }
    }
    var wordsWithComputedWidth = words.map(word => ({
      word,
      width: getStringSize(word, style).width
    }));
    var spaceWidth = breakAll ? 0 : getStringSize('\u00A0', style).width;
    return {
      wordsWithComputedWidth,
      spaceWidth
    };
  } catch (_unused) {
    return null;
  }
};
var calculateWordsByLines = (_ref2, initialWordsWithComputedWith, spaceWidth, lineWidth, scaleToFit) => {
  var {
    maxLines,
    children,
    style,
    breakAll
  } = _ref2;
  var shouldLimitLines = isNumber(maxLines);
  var text = children;
  var calculate = function calculate() {
    var words = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    return words.reduce((result, _ref3) => {
      var {
        word,
        width
      } = _ref3;
      var currentLine = result[result.length - 1];
      if (currentLine && (lineWidth == null || scaleToFit || currentLine.width + width + spaceWidth < Number(lineWidth))) {
        // Word can be added to an existing line
        currentLine.words.push(word);
        currentLine.width += width + spaceWidth;
      } else {
        // Add first word to line or word is too long to scaleToFit on existing line
        var newLine = {
          words: [word],
          width
        };
        result.push(newLine);
      }
      return result;
    }, []);
  };
  var originalResult = calculate(initialWordsWithComputedWith);
  var findLongestLine = words => words.reduce((a, b) => a.width > b.width ? a : b);
  if (!shouldLimitLines || scaleToFit) {
    return originalResult;
  }
  var overflows = originalResult.length > maxLines || findLongestLine(originalResult).width > Number(lineWidth);
  if (!overflows) {
    return originalResult;
  }
  var suffix = '…';
  var checkOverflow = index => {
    var tempText = text.slice(0, index);
    var words = calculateWordWidths({
      breakAll,
      style,
      children: tempText + suffix
    }).wordsWithComputedWidth;
    var result = calculate(words);
    var doesOverflow = result.length > maxLines || findLongestLine(result).width > Number(lineWidth);
    return [doesOverflow, result];
  };
  var start = 0;
  var end = text.length - 1;
  var iterations = 0;
  var trimmedResult;
  while (start <= end && iterations <= text.length - 1) {
    var middle = Math.floor((start + end) / 2);
    var prev = middle - 1;
    var [doesPrevOverflow, result] = checkOverflow(prev);
    var [doesMiddleOverflow] = checkOverflow(middle);
    if (!doesPrevOverflow && !doesMiddleOverflow) {
      start = middle + 1;
    }
    if (doesPrevOverflow && doesMiddleOverflow) {
      end = middle - 1;
    }
    if (!doesPrevOverflow && doesMiddleOverflow) {
      trimmedResult = result;
      break;
    }
    iterations++;
  }

  // Fallback to originalResult (result without trimming) if we cannot find the
  // where to trim.  This should not happen :tm:
  return trimmedResult || originalResult;
};
var getWordsWithoutCalculate = children => {
  var words = !isNullish(children) ? children.toString().split(BREAKING_SPACES) : [];
  return [{
    words
  }];
};
var getWordsByLines = _ref4 => {
  var {
    width,
    scaleToFit,
    children,
    style,
    breakAll,
    maxLines
  } = _ref4;
  // Only perform calculations if using features that require them (multiline, scaleToFit)
  if ((width || scaleToFit) && !Global.isSsr) {
    var wordsWithComputedWidth, spaceWidth;
    var wordWidths = calculateWordWidths({
      breakAll,
      children,
      style
    });
    if (wordWidths) {
      var {
        wordsWithComputedWidth: wcw,
        spaceWidth: sw
      } = wordWidths;
      wordsWithComputedWidth = wcw;
      spaceWidth = sw;
    } else {
      return getWordsWithoutCalculate(children);
    }
    return calculateWordsByLines({
      breakAll,
      children,
      maxLines,
      style
    }, wordsWithComputedWidth, spaceWidth, width, scaleToFit);
  }
  return getWordsWithoutCalculate(children);
};
var DEFAULT_FILL = '#808080';
var Text = /*#__PURE__*/reactExports.forwardRef((_ref5, ref) => {
  var {
      x: propsX = 0,
      y: propsY = 0,
      lineHeight = '1em',
      // Magic number from d3
      capHeight = '0.71em',
      scaleToFit = false,
      textAnchor = 'start',
      // Maintain compat with existing charts / default SVG behavior
      verticalAnchor = 'end',
      fill = DEFAULT_FILL
    } = _ref5,
    props = _objectWithoutProperties$m(_ref5, _excluded$m);
  var wordsByLines = reactExports.useMemo(() => {
    return getWordsByLines({
      breakAll: props.breakAll,
      children: props.children,
      maxLines: props.maxLines,
      scaleToFit,
      style: props.style,
      width: props.width
    });
  }, [props.breakAll, props.children, props.maxLines, scaleToFit, props.style, props.width]);
  var {
      dx,
      dy,
      angle,
      className,
      breakAll
    } = props,
    textProps = _objectWithoutProperties$m(props, _excluded2$9);
  if (!isNumOrStr(propsX) || !isNumOrStr(propsY)) {
    return null;
  }
  var x = propsX + (isNumber(dx) ? dx : 0);
  var y = propsY + (isNumber(dy) ? dy : 0);
  var startDy;
  switch (verticalAnchor) {
    case 'start':
      startDy = reduceCSSCalc("calc(".concat(capHeight, ")"));
      break;
    case 'middle':
      startDy = reduceCSSCalc("calc(".concat((wordsByLines.length - 1) / 2, " * -").concat(lineHeight, " + (").concat(capHeight, " / 2))"));
      break;
    default:
      startDy = reduceCSSCalc("calc(".concat(wordsByLines.length - 1, " * -").concat(lineHeight, ")"));
      break;
  }
  var transforms = [];
  if (scaleToFit) {
    var lineWidth = wordsByLines[0].width;
    var {
      width
    } = props;
    transforms.push("scale(".concat(isNumber(width) ? width / lineWidth : 1, ")"));
  }
  if (angle) {
    transforms.push("rotate(".concat(angle, ", ").concat(x, ", ").concat(y, ")"));
  }
  if (transforms.length) {
    textProps.transform = transforms.join(' ');
  }
  return /*#__PURE__*/reactExports.createElement("text", _extends$m({}, filterProps(textProps, true), {
    ref: ref,
    x: x,
    y: y,
    className: clsx('recharts-text', className),
    textAnchor: textAnchor,
    fill: fill.includes('url') ? DEFAULT_FILL : fill
  }), wordsByLines.map((line, index) => {
    var words = line.words.join(breakAll ? '' : ' ');
    return (
      /*#__PURE__*/
      // duplicate words will cause duplicate keys
      // eslint-disable-next-line react/no-array-index-key
      reactExports.createElement("tspan", {
        x: x,
        dy: index === 0 ? startDy : lineHeight,
        key: "".concat(words, "-").concat(index)
      }, words)
    );
  }));
});
Text.displayName = 'Text';

var _excluded$l = ["offset"],
  _excluded2$8 = ["labelRef"];
function _objectWithoutProperties$l(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$l(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$l(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
function ownKeys$l(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$l(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$l(Object(t), true).forEach(function (r) { _defineProperty$p(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$l(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$p(e, r, t) { return (r = _toPropertyKey$p(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$p(t) { var i = _toPrimitive$p(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$p(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _extends$l() { return _extends$l = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$l.apply(null, arguments); }
var getLabel = props => {
  var {
    value,
    formatter
  } = props;
  var label = isNullish(props.children) ? value : props.children;
  if (typeof formatter === 'function') {
    return formatter(label);
  }
  return label;
};
var isLabelContentAFunction = content => {
  return content != null && typeof content === 'function';
};
var getDeltaAngle = (startAngle, endAngle) => {
  var sign = mathSign(endAngle - startAngle);
  var deltaAngle = Math.min(Math.abs(endAngle - startAngle), 360);
  return sign * deltaAngle;
};
var renderRadialLabel = (labelProps, label, attrs) => {
  var {
    position,
    viewBox,
    offset,
    className
  } = labelProps;
  var {
    cx,
    cy,
    innerRadius,
    outerRadius,
    startAngle,
    endAngle,
    clockWise
  } = viewBox;
  var radius = (innerRadius + outerRadius) / 2;
  var deltaAngle = getDeltaAngle(startAngle, endAngle);
  var sign = deltaAngle >= 0 ? 1 : -1;
  var labelAngle, direction;
  if (position === 'insideStart') {
    labelAngle = startAngle + sign * offset;
    direction = clockWise;
  } else if (position === 'insideEnd') {
    labelAngle = endAngle - sign * offset;
    direction = !clockWise;
  } else if (position === 'end') {
    labelAngle = endAngle + sign * offset;
    direction = clockWise;
  }
  direction = deltaAngle <= 0 ? direction : !direction;
  var startPoint = polarToCartesian(cx, cy, radius, labelAngle);
  var endPoint = polarToCartesian(cx, cy, radius, labelAngle + (direction ? 1 : -1) * 359);
  var path = "M".concat(startPoint.x, ",").concat(startPoint.y, "\n    A").concat(radius, ",").concat(radius, ",0,1,").concat(direction ? 0 : 1, ",\n    ").concat(endPoint.x, ",").concat(endPoint.y);
  var id = isNullish(labelProps.id) ? uniqueId('recharts-radial-line-') : labelProps.id;
  return /*#__PURE__*/reactExports.createElement("text", _extends$l({}, attrs, {
    dominantBaseline: "central",
    className: clsx('recharts-radial-bar-label', className)
  }), /*#__PURE__*/reactExports.createElement("defs", null, /*#__PURE__*/reactExports.createElement("path", {
    id: id,
    d: path
  })), /*#__PURE__*/reactExports.createElement("textPath", {
    xlinkHref: "#".concat(id)
  }, label));
};
var getAttrsOfPolarLabel = props => {
  var {
    viewBox,
    offset,
    position
  } = props;
  var {
    cx,
    cy,
    innerRadius,
    outerRadius,
    startAngle,
    endAngle
  } = viewBox;
  var midAngle = (startAngle + endAngle) / 2;
  if (position === 'outside') {
    var {
      x: _x,
      y: _y
    } = polarToCartesian(cx, cy, outerRadius + offset, midAngle);
    return {
      x: _x,
      y: _y,
      textAnchor: _x >= cx ? 'start' : 'end',
      verticalAnchor: 'middle'
    };
  }
  if (position === 'center') {
    return {
      x: cx,
      y: cy,
      textAnchor: 'middle',
      verticalAnchor: 'middle'
    };
  }
  if (position === 'centerTop') {
    return {
      x: cx,
      y: cy,
      textAnchor: 'middle',
      verticalAnchor: 'start'
    };
  }
  if (position === 'centerBottom') {
    return {
      x: cx,
      y: cy,
      textAnchor: 'middle',
      verticalAnchor: 'end'
    };
  }
  var r = (innerRadius + outerRadius) / 2;
  var {
    x,
    y
  } = polarToCartesian(cx, cy, r, midAngle);
  return {
    x,
    y,
    textAnchor: 'middle',
    verticalAnchor: 'middle'
  };
};
var getAttrsOfCartesianLabel = (props, viewBox) => {
  var {
    parentViewBox,
    offset,
    position
  } = props;
  var {
    x,
    y,
    width,
    height
  } = viewBox;

  // Define vertical offsets and position inverts based on the value being positive or negative
  var verticalSign = height >= 0 ? 1 : -1;
  var verticalOffset = verticalSign * offset;
  var verticalEnd = verticalSign > 0 ? 'end' : 'start';
  var verticalStart = verticalSign > 0 ? 'start' : 'end';

  // Define horizontal offsets and position inverts based on the value being positive or negative
  var horizontalSign = width >= 0 ? 1 : -1;
  var horizontalOffset = horizontalSign * offset;
  var horizontalEnd = horizontalSign > 0 ? 'end' : 'start';
  var horizontalStart = horizontalSign > 0 ? 'start' : 'end';
  if (position === 'top') {
    var attrs = {
      x: x + width / 2,
      y: y - verticalSign * offset,
      textAnchor: 'middle',
      verticalAnchor: verticalEnd
    };
    return _objectSpread$l(_objectSpread$l({}, attrs), parentViewBox ? {
      height: Math.max(y - parentViewBox.y, 0),
      width
    } : {});
  }
  if (position === 'bottom') {
    var _attrs = {
      x: x + width / 2,
      y: y + height + verticalOffset,
      textAnchor: 'middle',
      verticalAnchor: verticalStart
    };
    return _objectSpread$l(_objectSpread$l({}, _attrs), parentViewBox ? {
      height: Math.max(parentViewBox.y + parentViewBox.height - (y + height), 0),
      width
    } : {});
  }
  if (position === 'left') {
    var _attrs2 = {
      x: x - horizontalOffset,
      y: y + height / 2,
      textAnchor: horizontalEnd,
      verticalAnchor: 'middle'
    };
    return _objectSpread$l(_objectSpread$l({}, _attrs2), parentViewBox ? {
      width: Math.max(_attrs2.x - parentViewBox.x, 0),
      height
    } : {});
  }
  if (position === 'right') {
    var _attrs3 = {
      x: x + width + horizontalOffset,
      y: y + height / 2,
      textAnchor: horizontalStart,
      verticalAnchor: 'middle'
    };
    return _objectSpread$l(_objectSpread$l({}, _attrs3), parentViewBox ? {
      width: Math.max(parentViewBox.x + parentViewBox.width - _attrs3.x, 0),
      height
    } : {});
  }
  var sizeAttrs = parentViewBox ? {
    width,
    height
  } : {};
  if (position === 'insideLeft') {
    return _objectSpread$l({
      x: x + horizontalOffset,
      y: y + height / 2,
      textAnchor: horizontalStart,
      verticalAnchor: 'middle'
    }, sizeAttrs);
  }
  if (position === 'insideRight') {
    return _objectSpread$l({
      x: x + width - horizontalOffset,
      y: y + height / 2,
      textAnchor: horizontalEnd,
      verticalAnchor: 'middle'
    }, sizeAttrs);
  }
  if (position === 'insideTop') {
    return _objectSpread$l({
      x: x + width / 2,
      y: y + verticalOffset,
      textAnchor: 'middle',
      verticalAnchor: verticalStart
    }, sizeAttrs);
  }
  if (position === 'insideBottom') {
    return _objectSpread$l({
      x: x + width / 2,
      y: y + height - verticalOffset,
      textAnchor: 'middle',
      verticalAnchor: verticalEnd
    }, sizeAttrs);
  }
  if (position === 'insideTopLeft') {
    return _objectSpread$l({
      x: x + horizontalOffset,
      y: y + verticalOffset,
      textAnchor: horizontalStart,
      verticalAnchor: verticalStart
    }, sizeAttrs);
  }
  if (position === 'insideTopRight') {
    return _objectSpread$l({
      x: x + width - horizontalOffset,
      y: y + verticalOffset,
      textAnchor: horizontalEnd,
      verticalAnchor: verticalStart
    }, sizeAttrs);
  }
  if (position === 'insideBottomLeft') {
    return _objectSpread$l({
      x: x + horizontalOffset,
      y: y + height - verticalOffset,
      textAnchor: horizontalStart,
      verticalAnchor: verticalEnd
    }, sizeAttrs);
  }
  if (position === 'insideBottomRight') {
    return _objectSpread$l({
      x: x + width - horizontalOffset,
      y: y + height - verticalOffset,
      textAnchor: horizontalEnd,
      verticalAnchor: verticalEnd
    }, sizeAttrs);
  }
  if (!!position && typeof position === 'object' && (isNumber(position.x) || isPercent(position.x)) && (isNumber(position.y) || isPercent(position.y))) {
    return _objectSpread$l({
      x: x + getPercentValue(position.x, width),
      y: y + getPercentValue(position.y, height),
      textAnchor: 'end',
      verticalAnchor: 'end'
    }, sizeAttrs);
  }
  return _objectSpread$l({
    x: x + width / 2,
    y: y + height / 2,
    textAnchor: 'middle',
    verticalAnchor: 'middle'
  }, sizeAttrs);
};
var isPolar = viewBox => 'cx' in viewBox && isNumber(viewBox.cx);
function Label(_ref) {
  var {
      offset = 5
    } = _ref,
    restProps = _objectWithoutProperties$l(_ref, _excluded$l);
  var props = _objectSpread$l({
    offset
  }, restProps);
  var {
    viewBox: viewBoxFromProps,
    position,
    value,
    children,
    content,
    className = '',
    textBreakAll,
    labelRef
  } = props;
  var viewBoxFromContext = useViewBox();
  var viewBox = viewBoxFromProps || viewBoxFromContext;
  if (!viewBox || isNullish(value) && isNullish(children) && ! /*#__PURE__*/reactExports.isValidElement(content) && typeof content !== 'function') {
    return null;
  }
  if (/*#__PURE__*/reactExports.isValidElement(content)) {
    var {
        labelRef: _
      } = props,
      propsWithoutLabelRef = _objectWithoutProperties$l(props, _excluded2$8);
    return /*#__PURE__*/reactExports.cloneElement(content, propsWithoutLabelRef);
  }
  var label;
  if (typeof content === 'function') {
    label = /*#__PURE__*/reactExports.createElement(content, props);
    if (/*#__PURE__*/reactExports.isValidElement(label)) {
      return label;
    }
  } else {
    label = getLabel(props);
  }
  var isPolarLabel = isPolar(viewBox);
  var attrs = filterProps(props, true);
  if (isPolarLabel && (position === 'insideStart' || position === 'insideEnd' || position === 'end')) {
    return renderRadialLabel(props, label, attrs);
  }

  // TODO handle the polar viewBox case - Pie chart works with cartesian viewBox, what about the other charts?
  var positionAttrs = isPolarLabel ? getAttrsOfPolarLabel(props) : getAttrsOfCartesianLabel(props, viewBox);
  return /*#__PURE__*/reactExports.createElement(Text, _extends$l({
    ref: labelRef,
    className: clsx('recharts-label', className)
  }, attrs, positionAttrs, {
    breakAll: textBreakAll
  }), label);
}
Label.displayName = 'Label';
var parseViewBox = props => {
  var {
    cx,
    cy,
    angle,
    startAngle,
    endAngle,
    r,
    radius,
    innerRadius,
    outerRadius,
    x,
    y,
    top,
    left,
    width,
    height,
    clockWise,
    labelViewBox
  } = props;
  if (labelViewBox) {
    return labelViewBox;
  }
  if (isNumber(width) && isNumber(height)) {
    if (isNumber(x) && isNumber(y)) {
      return {
        x,
        y,
        width,
        height
      };
    }
    if (isNumber(top) && isNumber(left)) {
      return {
        x: top,
        y: left,
        width,
        height
      };
    }
  }
  if (isNumber(x) && isNumber(y)) {
    return {
      x,
      y,
      width: 0,
      height: 0
    };
  }
  if (isNumber(cx) && isNumber(cy)) {
    return {
      cx,
      cy,
      startAngle: startAngle || angle || 0,
      endAngle: endAngle || angle || 0,
      innerRadius: innerRadius || 0,
      outerRadius: outerRadius || radius || r || 0,
      clockWise
    };
  }
  if (props.viewBox) {
    return props.viewBox;
  }
  return undefined;
};
var parseLabel = (label, viewBox, labelRef) => {
  if (!label) {
    return null;
  }
  var commonProps = {
    viewBox,
    labelRef
  };
  if (label === true) {
    return /*#__PURE__*/reactExports.createElement(Label, _extends$l({
      key: "label-implicit"
    }, commonProps));
  }
  if (isNumOrStr(label)) {
    return /*#__PURE__*/reactExports.createElement(Label, _extends$l({
      key: "label-implicit",
      value: label
    }, commonProps));
  }
  if (/*#__PURE__*/reactExports.isValidElement(label)) {
    if (label.type === Label) {
      return /*#__PURE__*/reactExports.cloneElement(label, _objectSpread$l({
        key: 'label-implicit'
      }, commonProps));
    }
    return /*#__PURE__*/reactExports.createElement(Label, _extends$l({
      key: "label-implicit",
      content: label
    }, commonProps));
  }
  if (isLabelContentAFunction(label)) {
    return /*#__PURE__*/reactExports.createElement(Label, _extends$l({
      key: "label-implicit",
      content: label
    }, commonProps));
  }
  if (label && typeof label === 'object') {
    return /*#__PURE__*/reactExports.createElement(Label, _extends$l({}, label, {
      key: "label-implicit"
    }, commonProps));
  }
  return null;
};
var renderCallByParent$1 = function renderCallByParent(parentProps, viewBox) {
  var checkPropsLabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  if (!parentProps || !parentProps.children && checkPropsLabel && !parentProps.label) {
    return null;
  }
  var {
    children,
    labelRef
  } = parentProps;
  var parentViewBox = parseViewBox(parentProps);
  var explicitChildren = findAllByType(children, Label).map((child, index) => {
    return /*#__PURE__*/reactExports.cloneElement(child, {
      viewBox: viewBox || parentViewBox,
      // eslint-disable-next-line react/no-array-index-key
      key: "label-".concat(index)
    });
  });
  if (!checkPropsLabel) {
    return explicitChildren;
  }
  var implicitLabel = parseLabel(parentProps.label, viewBox || parentViewBox, labelRef);
  return [implicitLabel, ...explicitChildren];
};
Label.parseViewBox = parseViewBox;
Label.renderCallByParent = renderCallByParent$1;

var last$3 = {};

var last$2 = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	function last(arr) {
	    return arr[arr.length - 1];
	}

	exports.last = last; 
} (last$2));

var toArray = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	function toArray(value) {
	    return Array.isArray(value) ? value : Array.from(value);
	}

	exports.toArray = toArray; 
} (toArray));

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const last$1 = last$2;
	const toArray$1 = toArray;
	const isArrayLike$1 = isArrayLike;

	function last(array) {
	    if (!isArrayLike$1.isArrayLike(array)) {
	        return undefined;
	    }
	    return last$1.last(toArray$1.toArray(array));
	}

	exports.last = last; 
} (last$3));

var last = last$3.last;

const last$1 = /*@__PURE__*/getDefaultExportFromCjs(last);

var _excluded$k = ["valueAccessor"],
  _excluded2$7 = ["data", "dataKey", "clockWise", "id", "textBreakAll"];
function _extends$k() { return _extends$k = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$k.apply(null, arguments); }
function ownKeys$k(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$k(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$k(Object(t), true).forEach(function (r) { _defineProperty$o(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$k(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$o(e, r, t) { return (r = _toPropertyKey$o(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$o(t) { var i = _toPrimitive$o(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$o(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties$k(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$k(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$k(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
var defaultAccessor = entry => Array.isArray(entry.value) ? last$1(entry.value) : entry.value;
function LabelList(_ref) {
  var {
      valueAccessor = defaultAccessor
    } = _ref,
    restProps = _objectWithoutProperties$k(_ref, _excluded$k);
  var {
      data,
      dataKey,
      clockWise,
      id,
      textBreakAll
    } = restProps,
    others = _objectWithoutProperties$k(restProps, _excluded2$7);
  if (!data || !data.length) {
    return null;
  }
  return /*#__PURE__*/reactExports.createElement(Layer, {
    className: "recharts-label-list"
  }, data.map((entry, index) => {
    var value = isNullish(dataKey) ? valueAccessor(entry, index) : getValueByDataKey(entry && entry.payload, dataKey);
    var idProps = isNullish(id) ? {} : {
      id: "".concat(id, "-").concat(index)
    };
    return /*#__PURE__*/reactExports.createElement(Label, _extends$k({}, filterProps(entry, true), others, idProps, {
      parentViewBox: entry.parentViewBox,
      value: value,
      textBreakAll: textBreakAll,
      viewBox: Label.parseViewBox(isNullish(clockWise) ? entry : _objectSpread$k(_objectSpread$k({}, entry), {}, {
        clockWise
      })),
      key: "label-".concat(index) // eslint-disable-line react/no-array-index-key
      ,
      index: index
    }));
  }));
}
LabelList.displayName = 'LabelList';
function parseLabelList(label, data) {
  if (!label) {
    return null;
  }
  if (label === true) {
    return /*#__PURE__*/reactExports.createElement(LabelList, {
      key: "labelList-implicit",
      data: data
    });
  }
  if (/*#__PURE__*/reactExports.isValidElement(label) || isLabelContentAFunction(label)) {
    return /*#__PURE__*/reactExports.createElement(LabelList, {
      key: "labelList-implicit",
      data: data,
      content: label
    });
  }
  if (typeof label === 'object') {
    return /*#__PURE__*/reactExports.createElement(LabelList, _extends$k({
      data: data
    }, label, {
      key: "labelList-implicit"
    }));
  }
  return null;
}
function renderCallByParent(parentProps, data) {
  var checkPropsLabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  if (!parentProps || !parentProps.children && checkPropsLabel && !parentProps.label) {
    return null;
  }
  var {
    children
  } = parentProps;
  var explicitChildren = findAllByType(children, LabelList).map((child, index) => /*#__PURE__*/reactExports.cloneElement(child, {
    data,
    // eslint-disable-next-line react/no-array-index-key
    key: "labelList-".concat(index)
  }));
  if (!checkPropsLabel) {
    return explicitChildren;
  }
  var implicitLabelList = parseLabelList(parentProps.label, data);
  return [implicitLabelList, ...explicitChildren];
}
LabelList.renderCallByParent = renderCallByParent;

var _excluded$j = ["points", "className", "baseLinePoints", "connectNulls"];
function _extends$j() { return _extends$j = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$j.apply(null, arguments); }
function _objectWithoutProperties$j(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$j(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$j(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
var isValidatePoint = point => {
  return point && point.x === +point.x && point.y === +point.y;
};
var getParsedPoints = function getParsedPoints() {
  var points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var segmentPoints = [[]];
  points.forEach(entry => {
    if (isValidatePoint(entry)) {
      segmentPoints[segmentPoints.length - 1].push(entry);
    } else if (segmentPoints[segmentPoints.length - 1].length > 0) {
      // add another path
      segmentPoints.push([]);
    }
  });
  if (isValidatePoint(points[0])) {
    segmentPoints[segmentPoints.length - 1].push(points[0]);
  }
  if (segmentPoints[segmentPoints.length - 1].length <= 0) {
    segmentPoints = segmentPoints.slice(0, -1);
  }
  return segmentPoints;
};
var getSinglePolygonPath = (points, connectNulls) => {
  var segmentPoints = getParsedPoints(points);
  if (connectNulls) {
    segmentPoints = [segmentPoints.reduce((res, segPoints) => {
      return [...res, ...segPoints];
    }, [])];
  }
  var polygonPath = segmentPoints.map(segPoints => {
    return segPoints.reduce((path, point, index) => {
      return "".concat(path).concat(index === 0 ? 'M' : 'L').concat(point.x, ",").concat(point.y);
    }, '');
  }).join('');
  return segmentPoints.length === 1 ? "".concat(polygonPath, "Z") : polygonPath;
};
var getRanglePath = (points, baseLinePoints, connectNulls) => {
  var outerPath = getSinglePolygonPath(points, connectNulls);
  return "".concat(outerPath.slice(-1) === 'Z' ? outerPath.slice(0, -1) : outerPath, "L").concat(getSinglePolygonPath(baseLinePoints.reverse(), connectNulls).slice(1));
};
var Polygon = props => {
  var {
      points,
      className,
      baseLinePoints,
      connectNulls
    } = props,
    others = _objectWithoutProperties$j(props, _excluded$j);
  if (!points || !points.length) {
    return null;
  }
  var layerClass = clsx('recharts-polygon', className);
  if (baseLinePoints && baseLinePoints.length) {
    var hasStroke = others.stroke && others.stroke !== 'none';
    var rangePath = getRanglePath(points, baseLinePoints, connectNulls);
    return /*#__PURE__*/reactExports.createElement("g", {
      className: layerClass
    }, /*#__PURE__*/reactExports.createElement("path", _extends$j({}, filterProps(others, true), {
      fill: rangePath.slice(-1) === 'Z' ? others.fill : 'none',
      stroke: "none",
      d: rangePath
    })), hasStroke ? /*#__PURE__*/reactExports.createElement("path", _extends$j({}, filterProps(others, true), {
      fill: "none",
      d: getSinglePolygonPath(points, connectNulls)
    })) : null, hasStroke ? /*#__PURE__*/reactExports.createElement("path", _extends$j({}, filterProps(others, true), {
      fill: "none",
      d: getSinglePolygonPath(baseLinePoints, connectNulls)
    })) : null);
  }
  var singlePath = getSinglePolygonPath(points, connectNulls);
  return /*#__PURE__*/reactExports.createElement("path", _extends$j({}, filterProps(others, true), {
    fill: singlePath.slice(-1) === 'Z' ? others.fill : 'none',
    className: layerClass,
    d: singlePath
  }));
};

function _extends$i() { return _extends$i = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$i.apply(null, arguments); }
var Dot = props => {
  var {
    cx,
    cy,
    r,
    className
  } = props;
  var layerClass = clsx('recharts-dot', className);
  if (cx === +cx && cy === +cy && r === +r) {
    return /*#__PURE__*/reactExports.createElement("circle", _extends$i({}, filterProps(props, false), adaptEventHandlers(props), {
      className: layerClass,
      cx: cx,
      cy: cy,
      r: r
    }));
  }
  return null;
};

var selectUnfilteredPolarItems = state => state.graphicalItems.polarItems;
var selectAxisPredicate = createSelector([pickAxisType, pickAxisId], itemAxisPredicate);
var selectPolarItemsSettings = createSelector([selectUnfilteredPolarItems, selectBaseAxis, selectAxisPredicate], combineGraphicalItemsSettings);
var selectPolarGraphicalItemsData = createSelector([selectPolarItemsSettings], combineGraphicalItemsData);
var selectPolarDisplayedData = createSelector([selectPolarGraphicalItemsData, selectChartDataAndAlwaysIgnoreIndexes], combineDisplayedData);
var selectPolarAppliedValues = createSelector([selectPolarDisplayedData, selectBaseAxis, selectPolarItemsSettings], combineAppliedValues);
var selectAllPolarAppliedNumericalValues = createSelector([selectPolarDisplayedData, selectBaseAxis, selectPolarItemsSettings], (data, axisSettings, items) => {
  if (items.length > 0) {
    return data.flatMap(entry => {
      return items.flatMap(item => {
        var _axisSettings$dataKey;
        var valueByDataKey = getValueByDataKey(entry, (_axisSettings$dataKey = axisSettings.dataKey) !== null && _axisSettings$dataKey !== void 0 ? _axisSettings$dataKey : item.dataKey);
        return {
          value: valueByDataKey,
          errorDomain: [] // polar charts do not have error bars
        };
      });
    }).filter(Boolean);
  }
  if ((axisSettings === null || axisSettings === void 0 ? void 0 : axisSettings.dataKey) != null) {
    return data.map(item => ({
      value: getValueByDataKey(item, axisSettings.dataKey),
      errorDomain: []
    }));
  }
  return data.map(entry => ({
    value: entry,
    errorDomain: []
  }));
});
var unsupportedInPolarChart = () => undefined;
var selectPolarNumericalDomain = createSelector([selectBaseAxis, selectDomainDefinition, unsupportedInPolarChart, selectAllPolarAppliedNumericalValues, unsupportedInPolarChart], combineNumericalDomain);
var selectPolarAxisDomain = createSelector([selectBaseAxis, selectChartLayout, selectPolarDisplayedData, selectPolarAppliedValues, selectStackOffsetType, pickAxisType, selectPolarNumericalDomain], combineAxisDomain);
var selectPolarNiceTicks = createSelector([selectPolarAxisDomain, selectBaseAxis, selectRealScaleType], combineNiceTicks);
var selectPolarAxisDomainIncludingNiceTicks = createSelector([selectBaseAxis, selectPolarAxisDomain, selectPolarNiceTicks, pickAxisType], combineAxisDomainWithNiceTicks);

var selectPolarAxis = (state, axisType, axisId) => {
  switch (axisType) {
    case 'angleAxis':
      {
        return selectAngleAxis(state, axisId);
      }
    case 'radiusAxis':
      {
        return selectRadiusAxis(state, axisId);
      }
    default:
      {
        throw new Error("Unexpected axis type: ".concat(axisType));
      }
  }
};
var selectPolarAxisRangeWithReversed = (state, axisType, axisId) => {
  switch (axisType) {
    case 'angleAxis':
      {
        return selectAngleAxisRangeWithReversed(state, axisId);
      }
    case 'radiusAxis':
      {
        return selectRadiusAxisRangeWithReversed(state, axisId);
      }
    default:
      {
        throw new Error("Unexpected axis type: ".concat(axisType));
      }
  }
};
var selectPolarAxisScale = createSelector([selectPolarAxis, selectRealScaleType, selectPolarAxisDomainIncludingNiceTicks, selectPolarAxisRangeWithReversed], combineScaleFunction);
var selectPolarCategoricalDomain = createSelector([selectChartLayout, selectPolarAppliedValues, selectAxisSettings, pickAxisType], combineCategoricalDomain);
var selectPolarAxisTicks = createSelector([selectChartLayout, selectPolarAxis, selectRealScaleType, selectPolarAxisScale, selectPolarNiceTicks, selectPolarAxisRangeWithReversed, selectDuplicateDomain, selectPolarCategoricalDomain, pickAxisType], combineAxisTicks);
createSelector([selectChartLayout, selectPolarAxis, selectPolarAxisScale, selectPolarAxisRangeWithReversed, selectDuplicateDomain, selectPolarCategoricalDomain, pickAxisType], combineGraphicalItemTicks);

var selectAngleAxisTicks$1 = (state, anglexisId) => selectPolarAxisTicks(state, 'angleAxis', anglexisId, false);
var selectPolarGridAngles = createSelector([selectAngleAxisTicks$1], ticks => {
  if (!ticks) {
    return undefined;
  }
  return ticks.map(tick => tick.coordinate);
});
var selectRadiusAxisTicks$1 = (state, radiusAxisId) => selectPolarAxisTicks(state, 'radiusAxis', radiusAxisId, false);
var selectPolarGridRadii = createSelector([selectRadiusAxisTicks$1], ticks => {
  if (!ticks) {
    return undefined;
  }
  return ticks.map(tick => tick.coordinate);
});

var _excluded$i = ["gridType", "radialLines", "angleAxisId", "radiusAxisId", "cx", "cy", "innerRadius", "outerRadius"];
function _objectWithoutProperties$i(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$i(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$i(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
function _extends$h() { return _extends$h = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$h.apply(null, arguments); }
function ownKeys$j(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$j(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$j(Object(t), true).forEach(function (r) { _defineProperty$n(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$j(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$n(e, r, t) { return (r = _toPropertyKey$n(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$n(t) { var i = _toPrimitive$n(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$n(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var getPolygonPath = (radius, cx, cy, polarAngles) => {
  var path = '';
  polarAngles.forEach((angle, i) => {
    var point = polarToCartesian(cx, cy, radius, angle);
    if (i) {
      path += "L ".concat(point.x, ",").concat(point.y);
    } else {
      path += "M ".concat(point.x, ",").concat(point.y);
    }
  });
  path += 'Z';
  return path;
};

// Draw axis of radial line
var PolarAngles = props => {
  var {
    cx,
    cy,
    innerRadius,
    outerRadius,
    polarAngles,
    radialLines
  } = props;
  if (!polarAngles || !polarAngles.length || !radialLines) {
    return null;
  }
  var polarAnglesProps = _objectSpread$j({
    stroke: '#ccc'
  }, filterProps(props, false));
  return /*#__PURE__*/reactExports.createElement("g", {
    className: "recharts-polar-grid-angle"
  }, polarAngles.map(entry => {
    var start = polarToCartesian(cx, cy, innerRadius, entry);
    var end = polarToCartesian(cx, cy, outerRadius, entry);
    return /*#__PURE__*/reactExports.createElement("line", _extends$h({}, polarAnglesProps, {
      key: "line-".concat(entry),
      x1: start.x,
      y1: start.y,
      x2: end.x,
      y2: end.y
    }));
  }));
};

// Draw concentric circles
var ConcentricCircle = props => {
  var {
    cx,
    cy,
    radius,
    index
  } = props;
  var concentricCircleProps = _objectSpread$j(_objectSpread$j({
    stroke: '#ccc'
  }, filterProps(props, false)), {}, {
    fill: 'none'
  });
  return /*#__PURE__*/reactExports.createElement("circle", _extends$h({}, concentricCircleProps, {
    className: clsx('recharts-polar-grid-concentric-circle', props.className),
    key: "circle-".concat(index),
    cx: cx,
    cy: cy,
    r: radius
  }));
};

// Draw concentric polygons
var ConcentricPolygon = props => {
  var {
    radius,
    index
  } = props;
  var concentricPolygonProps = _objectSpread$j(_objectSpread$j({
    stroke: '#ccc'
  }, filterProps(props, false)), {}, {
    fill: 'none'
  });
  return /*#__PURE__*/reactExports.createElement("path", _extends$h({}, concentricPolygonProps, {
    className: clsx('recharts-polar-grid-concentric-polygon', props.className),
    key: "path-".concat(index),
    d: getPolygonPath(radius, props.cx, props.cy, props.polarAngles)
  }));
};

// Draw concentric axis
var ConcentricGridPath = props => {
  var {
    polarRadius,
    gridType
  } = props;
  if (!polarRadius || !polarRadius.length) {
    return null;
  }
  return /*#__PURE__*/reactExports.createElement("g", {
    className: "recharts-polar-grid-concentric"
  }, polarRadius.map((entry, i) => {
    var key = i;
    if (gridType === 'circle') return /*#__PURE__*/reactExports.createElement(ConcentricCircle, _extends$h({
      key: key
    }, props, {
      radius: entry,
      index: i
    }));
    return /*#__PURE__*/reactExports.createElement(ConcentricPolygon, _extends$h({
      key: key
    }, props, {
      radius: entry,
      index: i
    }));
  }));
};
var PolarGrid = _ref => {
  var _ref2, _polarViewBox$cx, _ref3, _polarViewBox$cy, _ref4, _polarViewBox$innerRa, _ref5, _polarViewBox$outerRa;
  var {
      gridType = 'polygon',
      radialLines = true,
      angleAxisId = 0,
      radiusAxisId = 0,
      cx: cxFromOutside,
      cy: cyFromOutside,
      innerRadius: innerRadiusFromOutside,
      outerRadius: outerRadiusFromOutside
    } = _ref,
    inputs = _objectWithoutProperties$i(_ref, _excluded$i);
  var polarViewBox = useAppSelector(selectPolarViewBox);
  var props = _objectSpread$j({
    cx: (_ref2 = (_polarViewBox$cx = polarViewBox === null || polarViewBox === void 0 ? void 0 : polarViewBox.cx) !== null && _polarViewBox$cx !== void 0 ? _polarViewBox$cx : cxFromOutside) !== null && _ref2 !== void 0 ? _ref2 : 0,
    cy: (_ref3 = (_polarViewBox$cy = polarViewBox === null || polarViewBox === void 0 ? void 0 : polarViewBox.cy) !== null && _polarViewBox$cy !== void 0 ? _polarViewBox$cy : cyFromOutside) !== null && _ref3 !== void 0 ? _ref3 : 0,
    innerRadius: (_ref4 = (_polarViewBox$innerRa = polarViewBox === null || polarViewBox === void 0 ? void 0 : polarViewBox.innerRadius) !== null && _polarViewBox$innerRa !== void 0 ? _polarViewBox$innerRa : innerRadiusFromOutside) !== null && _ref4 !== void 0 ? _ref4 : 0,
    outerRadius: (_ref5 = (_polarViewBox$outerRa = polarViewBox === null || polarViewBox === void 0 ? void 0 : polarViewBox.outerRadius) !== null && _polarViewBox$outerRa !== void 0 ? _polarViewBox$outerRa : outerRadiusFromOutside) !== null && _ref5 !== void 0 ? _ref5 : 0
  }, inputs);
  var {
    polarAngles: polarAnglesInput,
    polarRadius: polarRadiusInput,
    cx,
    cy,
    innerRadius,
    outerRadius
  } = props;
  var polarAnglesFromRedux = useAppSelector(state => selectPolarGridAngles(state, angleAxisId));
  var polarRadiiFromRedux = useAppSelector(state => selectPolarGridRadii(state, radiusAxisId));
  var polarAngles = Array.isArray(polarAnglesInput) ? polarAnglesInput : polarAnglesFromRedux;
  var polarRadius = Array.isArray(polarRadiusInput) ? polarRadiusInput : polarRadiiFromRedux;
  if (outerRadius <= 0 || polarAngles == null || polarRadius == null) {
    return null;
  }
  return /*#__PURE__*/reactExports.createElement("g", {
    className: "recharts-polar-grid"
  }, /*#__PURE__*/reactExports.createElement(PolarAngles, _extends$h({
    cx: cx,
    cy: cy,
    innerRadius: innerRadius,
    outerRadius: outerRadius,
    gridType: gridType,
    radialLines: radialLines
  }, props, {
    polarAngles: polarAngles,
    polarRadius: polarRadius
  })), /*#__PURE__*/reactExports.createElement(ConcentricGridPath, _extends$h({
    cx: cx,
    cy: cy,
    innerRadius: innerRadius,
    outerRadius: outerRadius,
    gridType: gridType,
    radialLines: radialLines
  }, props, {
    polarAngles: polarAngles,
    polarRadius: polarRadius
  })));
};
PolarGrid.displayName = 'PolarGrid';

var maxBy$3 = {};

var maxBy$2 = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	function maxBy(items, getValue) {
	    if (items.length === 0) {
	        return undefined;
	    }
	    let maxElement = items[0];
	    let max = getValue(maxElement);
	    for (let i = 1; i < items.length; i++) {
	        const element = items[i];
	        const value = getValue(element);
	        if (value > max) {
	            max = value;
	            maxElement = element;
	        }
	    }
	    return maxElement;
	}

	exports.maxBy = maxBy; 
} (maxBy$2));

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const maxBy$1 = maxBy$2;
	const identity = identity$4;
	const iteratee$1 = iteratee;

	function maxBy(items, iteratee$1$1) {
	    if (items == null) {
	        return undefined;
	    }
	    return maxBy$1.maxBy(Array.from(items), iteratee$1.iteratee(iteratee$1$1 ?? identity.identity));
	}

	exports.maxBy = maxBy; 
} (maxBy$3));

var maxBy = maxBy$3.maxBy;

const maxBy$1 = /*@__PURE__*/getDefaultExportFromCjs(maxBy);

var minBy$3 = {};

var minBy$2 = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	function minBy(items, getValue) {
	    if (items.length === 0) {
	        return undefined;
	    }
	    let minElement = items[0];
	    let min = getValue(minElement);
	    for (let i = 1; i < items.length; i++) {
	        const element = items[i];
	        const value = getValue(element);
	        if (value < min) {
	            min = value;
	            minElement = element;
	        }
	    }
	    return minElement;
	}

	exports.minBy = minBy; 
} (minBy$2));

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	const minBy$1 = minBy$2;
	const identity = identity$4;
	const iteratee$1 = iteratee;

	function minBy(items, iteratee$1$1) {
	    if (items == null) {
	        return undefined;
	    }
	    return minBy$1.minBy(Array.from(items), iteratee$1.iteratee(iteratee$1$1 ?? identity.identity));
	}

	exports.minBy = minBy; 
} (minBy$3));

var minBy = minBy$3.minBy;

const minBy$1 = /*@__PURE__*/getDefaultExportFromCjs(minBy);

var initialState$5 = {
  radiusAxis: {},
  angleAxis: {}
};
var polarAxisSlice = createSlice({
  name: 'polarAxis',
  initialState: initialState$5,
  reducers: {
    addRadiusAxis(state, action) {
      state.radiusAxis[action.payload.id] = castDraft(action.payload);
    },
    removeRadiusAxis(state, action) {
      delete state.radiusAxis[action.payload.id];
    },
    addAngleAxis(state, action) {
      state.angleAxis[action.payload.id] = castDraft(action.payload);
    },
    removeAngleAxis(state, action) {
      delete state.angleAxis[action.payload.id];
    }
  }
});
var {
  addRadiusAxis,
  removeRadiusAxis,
  addAngleAxis,
  removeAngleAxis
} = polarAxisSlice.actions;
var polarAxisReducer = polarAxisSlice.reducer;

var _excluded$h = ["cx", "cy", "angle", "axisLine"],
  _excluded2$6 = ["angle", "tickFormatter", "stroke", "tick"];
function _extends$g() { return _extends$g = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$g.apply(null, arguments); }
function ownKeys$i(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$i(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$i(Object(t), true).forEach(function (r) { _defineProperty$m(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$i(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$m(e, r, t) { return (r = _toPropertyKey$m(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$m(t) { var i = _toPrimitive$m(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$m(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties$h(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$h(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$h(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
var AXIS_TYPE$1 = 'radiusAxis';
function SetRadiusAxisSettings(settings) {
  var dispatch = useAppDispatch();
  reactExports.useEffect(() => {
    dispatch(addRadiusAxis(settings));
    return () => {
      dispatch(removeRadiusAxis(settings));
    };
  });
  return null;
}

/**
 * Calculate the coordinate of tick
 * @param coordinate The radius of tick
 * @param angle from props
 * @param cx from chart
 * @param cy from chart
 * @return (x, y)
 */
var getTickValueCoord = (_ref, angle, cx, cy) => {
  var {
    coordinate
  } = _ref;
  return polarToCartesian(cx, cy, coordinate, angle);
};
var getTickTextAnchor$1 = orientation => {
  var textAnchor;
  switch (orientation) {
    case 'left':
      textAnchor = 'end';
      break;
    case 'right':
      textAnchor = 'start';
      break;
    default:
      textAnchor = 'middle';
      break;
  }
  return textAnchor;
};
var getViewBox = (angle, cx, cy, ticks) => {
  var maxRadiusTick = maxBy$1(ticks, entry => entry.coordinate || 0);
  var minRadiusTick = minBy$1(ticks, entry => entry.coordinate || 0);
  return {
    cx,
    cy,
    startAngle: angle,
    endAngle: angle,
    innerRadius: minRadiusTick.coordinate || 0,
    outerRadius: maxRadiusTick.coordinate || 0
  };
};
var renderAxisLine = (props, ticks) => {
  var {
      cx,
      cy,
      angle,
      axisLine
    } = props,
    others = _objectWithoutProperties$h(props, _excluded$h);
  var extent = ticks.reduce((result, entry) => [Math.min(result[0], entry.coordinate), Math.max(result[1], entry.coordinate)], [Infinity, -Infinity]);
  var point0 = polarToCartesian(cx, cy, extent[0], angle);
  var point1 = polarToCartesian(cx, cy, extent[1], angle);
  var axisLineProps = _objectSpread$i(_objectSpread$i(_objectSpread$i({}, filterProps(others, false)), {}, {
    fill: 'none'
  }, filterProps(axisLine, false)), {}, {
    x1: point0.x,
    y1: point0.y,
    x2: point1.x,
    y2: point1.y
  });
  return /*#__PURE__*/reactExports.createElement("line", _extends$g({
    className: "recharts-polar-radius-axis-line"
  }, axisLineProps));
};
var renderTickItem = (option, tickProps, value) => {
  var tickItem;
  if (/*#__PURE__*/reactExports.isValidElement(option)) {
    tickItem = /*#__PURE__*/reactExports.cloneElement(option, tickProps);
  } else if (typeof option === 'function') {
    tickItem = option(tickProps);
  } else {
    tickItem = /*#__PURE__*/reactExports.createElement(Text, _extends$g({}, tickProps, {
      className: "recharts-polar-radius-axis-tick-value"
    }), value);
  }
  return tickItem;
};
var renderTicks = (props, ticks) => {
  var {
      angle,
      tickFormatter,
      stroke,
      tick
    } = props,
    others = _objectWithoutProperties$h(props, _excluded2$6);
  var textAnchor = getTickTextAnchor$1(props.orientation);
  var axisProps = filterProps(others, false);
  var customTickProps = filterProps(tick, false);
  var items = ticks.map((entry, i) => {
    var coord = getTickValueCoord(entry, props.angle, props.cx, props.cy);
    var tickProps = _objectSpread$i(_objectSpread$i(_objectSpread$i(_objectSpread$i({
      textAnchor,
      transform: "rotate(".concat(90 - angle, ", ").concat(coord.x, ", ").concat(coord.y, ")")
    }, axisProps), {}, {
      stroke: 'none',
      fill: stroke
    }, customTickProps), {}, {
      index: i
    }, coord), {}, {
      payload: entry
    });
    return /*#__PURE__*/reactExports.createElement(Layer, _extends$g({
      className: clsx('recharts-polar-radius-axis-tick', getTickClassName(tick)),
      key: "tick-".concat(entry.coordinate)
    }, adaptEventsOfChild(props, entry, i)), renderTickItem(tick, tickProps, tickFormatter ? tickFormatter(entry.value, i) : entry.value));
  });
  return /*#__PURE__*/reactExports.createElement(Layer, {
    className: "recharts-polar-radius-axis-ticks"
  }, items);
};
var PolarRadiusAxisWrapper = defaultsAndInputs => {
  var {
    radiusAxisId
  } = defaultsAndInputs;
  var viewBox = useAppSelector(selectPolarViewBox);
  var scale = useAppSelector(state => selectPolarAxisScale(state, 'radiusAxis', radiusAxisId));
  var ticks = useAppSelector(state => selectPolarAxisTicks(state, 'radiusAxis', radiusAxisId, false));
  if (viewBox == null || !ticks || !ticks.length) {
    return null;
  }
  var props = _objectSpread$i(_objectSpread$i(_objectSpread$i({}, defaultsAndInputs), {}, {
    scale
  }, viewBox), {}, {
    radius: viewBox.outerRadius
  });
  var {
    tick,
    axisLine
  } = props;
  return /*#__PURE__*/reactExports.createElement(Layer, {
    className: clsx('recharts-polar-radius-axis', AXIS_TYPE$1, props.className)
  }, axisLine && renderAxisLine(props, ticks), tick && renderTicks(props, ticks), Label.renderCallByParent(props, getViewBox(props.angle, props.cx, props.cy, ticks)));
};
class PolarRadiusAxis extends reactExports.PureComponent {
  render() {
    return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, /*#__PURE__*/reactExports.createElement(SetRadiusAxisSettings, {
      domain: this.props.domain,
      id: this.props.radiusAxisId,
      scale: this.props.scale,
      type: this.props.type,
      dataKey: this.props.dataKey,
      unit: undefined,
      name: this.props.name,
      allowDuplicatedCategory: this.props.allowDuplicatedCategory,
      allowDataOverflow: this.props.allowDataOverflow,
      reversed: this.props.reversed,
      includeHidden: this.props.includeHidden,
      allowDecimals: this.props.allowDecimals,
      tickCount: this.props.tickCount
      // @ts-expect-error the type does not match. Is RadiusAxis really expecting what it says?
      ,
      ticks: this.props.ticks,
      tick: this.props.tick
    }), /*#__PURE__*/reactExports.createElement(PolarRadiusAxisWrapper, this.props));
  }
}
_defineProperty$m(PolarRadiusAxis, "displayName", 'PolarRadiusAxis');
_defineProperty$m(PolarRadiusAxis, "axisType", AXIS_TYPE$1);
_defineProperty$m(PolarRadiusAxis, "defaultProps", defaultPolarRadiusAxisProps);

var _excluded$g = ["children"];
function _extends$f() { return _extends$f = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$f.apply(null, arguments); }
function ownKeys$h(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$h(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$h(Object(t), true).forEach(function (r) { _defineProperty$l(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$h(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$l(e, r, t) { return (r = _toPropertyKey$l(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$l(t) { var i = _toPrimitive$l(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$l(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties$g(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$g(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$g(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
var RADIAN = Math.PI / 180;
var eps = 1e-5;

/**
 * These are injected from Redux, are required, but cannot be set by user.
 */

var AXIS_TYPE = 'angleAxis';
function SetAngleAxisSettings(props) {
  var dispatch = useAppDispatch();
  var settings = reactExports.useMemo(() => {
    var {
        children
      } = props,
      rest = _objectWithoutProperties$g(props, _excluded$g);
    return rest;
  }, [props]);
  var synchronizedSettings = useAppSelector(state => selectAngleAxis(state, settings.id));
  var settingsAreSynchronized = settings === synchronizedSettings;
  reactExports.useEffect(() => {
    dispatch(addAngleAxis(settings));
    return () => {
      dispatch(removeAngleAxis(settings));
    };
  }, [dispatch, settings]);
  if (settingsAreSynchronized) {
    return props.children;
  }
  return null;
}

/**
 * Calculate the coordinate of line endpoint
 * @param data The data if there are ticks
 * @param props axis settings
 * @return (x1, y1): The point close to text,
 *         (x2, y2): The point close to axis
 */
var getTickLineCoord = (data, props) => {
  var {
    cx,
    cy,
    radius,
    orientation,
    tickSize
  } = props;
  var tickLineSize = tickSize || 8;
  var p1 = polarToCartesian(cx, cy, radius, data.coordinate);
  var p2 = polarToCartesian(cx, cy, radius + (orientation === 'inner' ? -1 : 1) * tickLineSize, data.coordinate);
  return {
    x1: p1.x,
    y1: p1.y,
    x2: p2.x,
    y2: p2.y
  };
};

/**
 * Get the text-anchor of each tick
 * @param data Data of ticks
 * @param orientation of the axis ticks
 * @return text-anchor
 */
var getTickTextAnchor = (data, orientation) => {
  var cos = Math.cos(-data.coordinate * RADIAN);
  if (cos > eps) {
    return orientation === 'outer' ? 'start' : 'end';
  }
  if (cos < -eps) {
    return orientation === 'outer' ? 'end' : 'start';
  }
  return 'middle';
};
var AxisLine = props => {
  var {
    cx,
    cy,
    radius,
    axisLineType,
    axisLine,
    ticks
  } = props;
  if (!axisLine) {
    return null;
  }
  var axisLineProps = _objectSpread$h(_objectSpread$h({}, filterProps(props, false)), {}, {
    fill: 'none'
  }, filterProps(axisLine, false));
  if (axisLineType === 'circle') {
    return /*#__PURE__*/reactExports.createElement(Dot, _extends$f({
      className: "recharts-polar-angle-axis-line"
    }, axisLineProps, {
      cx: cx,
      cy: cy,
      r: radius
    }));
  }
  var points = ticks.map(entry => polarToCartesian(cx, cy, radius, entry.coordinate));
  return /*#__PURE__*/reactExports.createElement(Polygon, _extends$f({
    className: "recharts-polar-angle-axis-line"
  }, axisLineProps, {
    points: points
  }));
};
var TickItemText = _ref => {
  var {
    tick,
    tickProps,
    value
  } = _ref;
  if (!tick) {
    return null;
  }
  if (/*#__PURE__*/reactExports.isValidElement(tick)) {
    // @ts-expect-error element cloning makes typescript unhappy and me too
    return /*#__PURE__*/reactExports.cloneElement(tick, tickProps);
  }
  if (typeof tick === 'function') {
    return tick(tickProps);
  }
  return /*#__PURE__*/reactExports.createElement(Text, _extends$f({}, tickProps, {
    className: "recharts-polar-angle-axis-tick-value"
  }), value);
};
var Ticks = props => {
  var {
    tick,
    tickLine,
    tickFormatter,
    stroke,
    ticks
  } = props;
  var axisProps = filterProps(props, false);
  var customTickProps = filterProps(tick, false);
  var tickLineProps = _objectSpread$h(_objectSpread$h({}, axisProps), {}, {
    fill: 'none'
  }, filterProps(tickLine, false));
  var items = ticks.map((entry, i) => {
    var lineCoord = getTickLineCoord(entry, props);
    var textAnchor = getTickTextAnchor(entry, props.orientation);
    var tickProps = _objectSpread$h(_objectSpread$h(_objectSpread$h({
      textAnchor
    }, axisProps), {}, {
      stroke: 'none',
      fill: stroke
    }, customTickProps), {}, {
      index: i,
      payload: entry,
      x: lineCoord.x2,
      y: lineCoord.y2
    });
    return /*#__PURE__*/reactExports.createElement(Layer, _extends$f({
      className: clsx('recharts-polar-angle-axis-tick', getTickClassName(tick)),
      key: "tick-".concat(entry.coordinate)
    }, adaptEventsOfChild(props, entry, i)), tickLine && /*#__PURE__*/reactExports.createElement("line", _extends$f({
      className: "recharts-polar-angle-axis-tick-line"
    }, tickLineProps, lineCoord)), /*#__PURE__*/reactExports.createElement(TickItemText, {
      tick: tick,
      tickProps: tickProps,
      value: tickFormatter ? tickFormatter(entry.value, i) : entry.value
    }));
  });
  return /*#__PURE__*/reactExports.createElement(Layer, {
    className: "recharts-polar-angle-axis-ticks"
  }, items);
};
var PolarAngleAxisWrapper = defaultsAndInputs => {
  var {
    angleAxisId
  } = defaultsAndInputs;
  var viewBox = useAppSelector(selectPolarViewBox);
  var scale = useAppSelector(state => selectPolarAxisScale(state, 'angleAxis', angleAxisId));
  var isPanorama = useIsPanorama();
  var ticks = useAppSelector(state => selectPolarAxisTicks(state, 'angleAxis', angleAxisId, isPanorama));
  if (viewBox == null || !ticks || !ticks.length) {
    return null;
  }
  var props = _objectSpread$h(_objectSpread$h(_objectSpread$h({}, defaultsAndInputs), {}, {
    scale
  }, viewBox), {}, {
    radius: viewBox.outerRadius
  });
  return /*#__PURE__*/reactExports.createElement(Layer, {
    className: clsx('recharts-polar-angle-axis', AXIS_TYPE, props.className)
  }, /*#__PURE__*/reactExports.createElement(AxisLine, _extends$f({}, props, {
    ticks: ticks
  })), /*#__PURE__*/reactExports.createElement(Ticks, _extends$f({}, props, {
    ticks: ticks
  })));
};
class PolarAngleAxis extends reactExports.PureComponent {
  render() {
    if (this.props.radius <= 0) return null;
    return /*#__PURE__*/reactExports.createElement(SetAngleAxisSettings, {
      id: this.props.angleAxisId,
      scale: this.props.scale,
      type: this.props.type,
      dataKey: this.props.dataKey,
      unit: undefined,
      name: this.props.name,
      allowDuplicatedCategory: false // Ignoring the prop on purpose because axis calculation behaves as if it was false and Tooltip requires it to be true.
      ,
      allowDataOverflow: false,
      reversed: this.props.reversed,
      includeHidden: false,
      allowDecimals: this.props.allowDecimals,
      tickCount: this.props.tickCount
      // @ts-expect-error the type does not match. Is RadiusAxis really expecting what it says?
      ,
      ticks: this.props.ticks,
      tick: this.props.tick,
      domain: this.props.domain
    }, /*#__PURE__*/reactExports.createElement(PolarAngleAxisWrapper, this.props));
  }
}
_defineProperty$l(PolarAngleAxis, "displayName", 'PolarAngleAxis');
_defineProperty$l(PolarAngleAxis, "axisType", AXIS_TYPE);
_defineProperty$l(PolarAngleAxis, "defaultProps", defaultPolarAngleAxisProps);

function ownKeys$g(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$g(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$g(Object(t), true).forEach(function (r) { _defineProperty$k(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$g(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$k(e, r, t) { return (r = _toPropertyKey$k(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$k(t) { var i = _toPrimitive$k(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$k(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var pickPieSettings = (_state, pieSettings) => pieSettings;

// Keep stable reference to an empty array to prevent re-renders
var emptyArray = [];
var pickCells$1 = (_state, _pieSettings, cells) => {
  if ((cells === null || cells === void 0 ? void 0 : cells.length) === 0) {
    return emptyArray;
  }
  return cells;
};
var selectDisplayedData = createSelector([selectChartDataAndAlwaysIgnoreIndexes, pickPieSettings, pickCells$1], (_ref, pieSettings, cells) => {
  var {
    chartData
  } = _ref;
  var displayedData;
  if ((pieSettings === null || pieSettings === void 0 ? void 0 : pieSettings.data) != null && pieSettings.data.length > 0) {
    displayedData = pieSettings.data;
  } else {
    displayedData = chartData;
  }
  if ((!displayedData || !displayedData.length) && cells != null) {
    displayedData = cells.map(cell => _objectSpread$g(_objectSpread$g({}, pieSettings.presentationProps), cell.props));
  }
  if (displayedData == null) {
    return undefined;
  }
  return displayedData;
});
var selectPieLegend = createSelector([selectDisplayedData, pickPieSettings, pickCells$1], (displayedData, pieSettings, cells) => {
  if (displayedData == null) {
    return undefined;
  }
  return displayedData.map((entry, i) => {
    var _cells$i;
    var name = getValueByDataKey(entry, pieSettings.nameKey, pieSettings.name);
    var color;
    if (cells !== null && cells !== void 0 && (_cells$i = cells[i]) !== null && _cells$i !== void 0 && (_cells$i = _cells$i.props) !== null && _cells$i !== void 0 && _cells$i.fill) {
      color = cells[i].props.fill;
    } else if (typeof entry === 'object' && entry != null && 'fill' in entry) {
      color = entry.fill;
    } else {
      color = pieSettings.fill;
    }
    return {
      value: getTooltipNameProp(name, pieSettings.dataKey),
      color,
      payload: entry,
      type: pieSettings.legendType
    };
  });
});
var selectSynchronisedPieSettings = createSelector([selectUnfilteredPolarItems, pickPieSettings], (graphicalItems, pieSettingsFromProps) => {
  if (graphicalItems.some(pgis => pgis.type === 'pie' && pieSettingsFromProps.dataKey === pgis.dataKey && pieSettingsFromProps.data === pgis.data)) {
    return pieSettingsFromProps;
  }
  return undefined;
});
var selectPieSectors = createSelector([selectDisplayedData, selectSynchronisedPieSettings, pickCells$1, selectChartOffsetInternal], (displayedData, pieSettings, cells, offset) => {
  if (pieSettings == null || displayedData == null) {
    return undefined;
  }
  return computePieSectors({
    offset,
    pieSettings,
    displayedData,
    cells
  });
});

/**
 * ErrorBars have lot more settings but all the others are scoped to the component itself.
 * Only some of them required to be reported to the global store because XAxis and YAxis need to know
 * if the error bar is contributing to extending the axis domain.
 */

var initialState$4 = {
  countOfBars: 0,
  cartesianItems: [],
  polarItems: []
};
var graphicalItemsSlice = createSlice({
  name: 'graphicalItems',
  initialState: initialState$4,
  reducers: {
    addBar(state) {
      state.countOfBars += 1;
    },
    removeBar(state) {
      state.countOfBars -= 1;
    },
    addCartesianGraphicalItem(state, action) {
      state.cartesianItems.push(castDraft(action.payload));
    },
    replaceCartesianGraphicalItem(state, action) {
      var {
        prev,
        next
      } = action.payload;
      var index = current(state).cartesianItems.indexOf(castDraft(prev));
      if (index > -1) {
        state.cartesianItems[index] = castDraft(next);
      }
    },
    removeCartesianGraphicalItem(state, action) {
      var index = current(state).cartesianItems.indexOf(castDraft(action.payload));
      if (index > -1) {
        state.cartesianItems.splice(index, 1);
      }
    },
    addPolarGraphicalItem(state, action) {
      state.polarItems.push(castDraft(action.payload));
    },
    removePolarGraphicalItem(state, action) {
      var index = current(state).polarItems.indexOf(castDraft(action.payload));
      if (index > -1) {
        state.polarItems.splice(index, 1);
      }
    }
  }
});
var {
  addBar,
  removeBar,
  addCartesianGraphicalItem,
  replaceCartesianGraphicalItem,
  removeCartesianGraphicalItem,
  addPolarGraphicalItem,
  removePolarGraphicalItem
} = graphicalItemsSlice.actions;
var graphicalItemsReducer = graphicalItemsSlice.reducer;

function ownKeys$f(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$f(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$f(Object(t), true).forEach(function (r) { _defineProperty$j(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$f(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$j(e, r, t) { return (r = _toPropertyKey$j(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$j(t) { var i = _toPrimitive$j(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$j(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function SetCartesianGraphicalItem(props) {
  var dispatch = useAppDispatch();
  var prevPropsRef = reactExports.useRef(null);
  reactExports.useEffect(() => {
    var settings = _objectSpread$f(_objectSpread$f({}, props), {}, {
      stackId: getNormalizedStackId(props.stackId)
    });
    if (prevPropsRef.current === null) {
      dispatch(addCartesianGraphicalItem(settings));
    } else if (prevPropsRef.current !== settings) {
      dispatch(replaceCartesianGraphicalItem({
        prev: prevPropsRef.current,
        next: settings
      }));
    }
    prevPropsRef.current = settings;
  }, [dispatch, props]);
  reactExports.useEffect(() => {
    return () => {
      if (prevPropsRef.current) {
        dispatch(removeCartesianGraphicalItem(prevPropsRef.current));
        /*
         * Here we have to reset the ref to null because in StrictMode, the effect will run twice,
         * but it will keep the same ref value from the first render.
         *
         * In browser, React will clear the ref after the first effect cleanup,
         * so that wouldn't be an issue.
         *
         * In StrictMode, however, the ref is kept,
         * and in the hook above the code checks for `prevPropsRef.current === null`
         * which would be false so it would not dispatch the `addCartesianGraphicalItem` action again.
         *
         * https://github.com/recharts/recharts/issues/6022
         */
        prevPropsRef.current = null;
      }
    };
  }, [dispatch]);
  return null;
}
function SetPolarGraphicalItem(props) {
  var dispatch = useAppDispatch();
  reactExports.useEffect(() => {
    dispatch(addPolarGraphicalItem(props));
    return () => {
      dispatch(removePolarGraphicalItem(props));
    };
  }, [dispatch, props]);
  return null;
}

var isPlainObject$2 = {};

(function (exports) {

	Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

	function isPlainObject(object) {
	    if (typeof object !== 'object') {
	        return false;
	    }
	    if (object == null) {
	        return false;
	    }
	    if (Object.getPrototypeOf(object) === null) {
	        return true;
	    }
	    if (Object.prototype.toString.call(object) !== '[object Object]') {
	        const tag = object[Symbol.toStringTag];
	        if (tag == null) {
	            return false;
	        }
	        const isTagReadonly = !Object.getOwnPropertyDescriptor(object, Symbol.toStringTag)?.writable;
	        if (isTagReadonly) {
	            return false;
	        }
	        return object.toString() === `[object ${tag}]`;
	    }
	    let proto = object;
	    while (Object.getPrototypeOf(proto) !== null) {
	        proto = Object.getPrototypeOf(proto);
	    }
	    return Object.getPrototypeOf(object) === proto;
	}

	exports.isPlainObject = isPlainObject; 
} (isPlainObject$2));

var isPlainObject = isPlainObject$2.isPlainObject;

const isPlainObject$1 = /*@__PURE__*/getDefaultExportFromCjs(isPlainObject);

function _extends$e() { return _extends$e = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$e.apply(null, arguments); }
var getTrapezoidPath = (x, y, upperWidth, lowerWidth, height) => {
  var widthGap = upperWidth - lowerWidth;
  var path;
  path = "M ".concat(x, ",").concat(y);
  path += "L ".concat(x + upperWidth, ",").concat(y);
  path += "L ".concat(x + upperWidth - widthGap / 2, ",").concat(y + height);
  path += "L ".concat(x + upperWidth - widthGap / 2 - lowerWidth, ",").concat(y + height);
  path += "L ".concat(x, ",").concat(y, " Z");
  return path;
};
var defaultProps$5 = {
  x: 0,
  y: 0,
  upperWidth: 0,
  lowerWidth: 0,
  height: 0,
  isUpdateAnimationActive: false,
  animationBegin: 0,
  animationDuration: 1500,
  animationEasing: 'ease'
};
var Trapezoid = props => {
  var trapezoidProps = resolveDefaultProps(props, defaultProps$5);
  var pathRef = reactExports.useRef();
  var [totalLength, setTotalLength] = reactExports.useState(-1);
  reactExports.useEffect(() => {
    if (pathRef.current && pathRef.current.getTotalLength) {
      try {
        var pathTotalLength = pathRef.current.getTotalLength();
        if (pathTotalLength) {
          setTotalLength(pathTotalLength);
        }
      } catch (_unused) {
        // calculate total length error
      }
    }
  }, []);
  var {
    x,
    y,
    upperWidth,
    lowerWidth,
    height,
    className
  } = trapezoidProps;
  var {
    animationEasing,
    animationDuration,
    animationBegin,
    isUpdateAnimationActive
  } = trapezoidProps;
  if (x !== +x || y !== +y || upperWidth !== +upperWidth || lowerWidth !== +lowerWidth || height !== +height || upperWidth === 0 && lowerWidth === 0 || height === 0) {
    return null;
  }
  var layerClass = clsx('recharts-trapezoid', className);
  if (!isUpdateAnimationActive) {
    return /*#__PURE__*/reactExports.createElement("g", null, /*#__PURE__*/reactExports.createElement("path", _extends$e({}, filterProps(trapezoidProps, true), {
      className: layerClass,
      d: getTrapezoidPath(x, y, upperWidth, lowerWidth, height)
    })));
  }
  return /*#__PURE__*/reactExports.createElement(Animate, {
    canBegin: totalLength > 0,
    from: {
      upperWidth: 0,
      lowerWidth: 0,
      height,
      x,
      y
    },
    to: {
      upperWidth,
      lowerWidth,
      height,
      x,
      y
    },
    duration: animationDuration
    // @ts-expect-error TODO - fix the type error
    ,
    animationEasing: animationEasing,
    isActive: isUpdateAnimationActive
  }, _ref => {
    var {
      upperWidth: currUpperWidth,
      lowerWidth: currLowerWidth,
      height: currHeight,
      x: currX,
      y: currY
    } = _ref;
    return /*#__PURE__*/reactExports.createElement(Animate, {
      canBegin: totalLength > 0
      // @ts-expect-error TODO - fix the type error
      ,
      from: "0px ".concat(totalLength === -1 ? 1 : totalLength, "px")
      // @ts-expect-error TODO - fix the type error
      ,
      to: "".concat(totalLength, "px 0px"),
      attributeName: "strokeDasharray",
      begin: animationBegin,
      duration: animationDuration,
      easing: animationEasing
    }, /*#__PURE__*/reactExports.createElement("path", _extends$e({}, filterProps(trapezoidProps, true), {
      className: layerClass,
      d: getTrapezoidPath(currX, currY, currUpperWidth, currLowerWidth, currHeight),
      ref: pathRef
    })));
  });
};

var _excluded$f = ["option", "shapeType", "propTransformer", "activeClassName", "isActive"];
function _objectWithoutProperties$f(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$f(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$f(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
function ownKeys$e(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$e(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$e(Object(t), true).forEach(function (r) { _defineProperty$i(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$e(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$i(e, r, t) { return (r = _toPropertyKey$i(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$i(t) { var i = _toPrimitive$i(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$i(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }

/**
 * This is an abstraction for rendering a user defined prop for a customized shape in several forms.
 *
 * <Shape /> is the root and will handle taking in:
 *  - an object of svg properties
 *  - a boolean
 *  - a render prop(inline function that returns jsx)
 *  - a React element
 *
 * <ShapeSelector /> is a subcomponent of <Shape /> and used to match a component
 * to the value of props.shapeType that is passed to the root.
 *
 */

function defaultPropTransformer(option, props) {
  return _objectSpread$e(_objectSpread$e({}, props), option);
}
function isSymbolsProps(shapeType, _elementProps) {
  return shapeType === 'symbols';
}
function ShapeSelector(_ref) {
  var {
    shapeType,
    elementProps
  } = _ref;
  switch (shapeType) {
    case 'rectangle':
      return /*#__PURE__*/reactExports.createElement(Rectangle, elementProps);
    case 'trapezoid':
      return /*#__PURE__*/reactExports.createElement(Trapezoid, elementProps);
    case 'sector':
      return /*#__PURE__*/reactExports.createElement(Sector, elementProps);
    case 'symbols':
      if (isSymbolsProps(shapeType)) {
        return /*#__PURE__*/reactExports.createElement(Symbols, elementProps);
      }
      break;
    default:
      return null;
  }
}
function getPropsFromShapeOption(option) {
  if (/*#__PURE__*/reactExports.isValidElement(option)) {
    return option.props;
  }
  return option;
}
function Shape(_ref2) {
  var {
      option,
      shapeType,
      propTransformer = defaultPropTransformer,
      activeClassName = 'recharts-active-shape',
      isActive
    } = _ref2,
    props = _objectWithoutProperties$f(_ref2, _excluded$f);
  var shape;
  if (/*#__PURE__*/reactExports.isValidElement(option)) {
    shape = /*#__PURE__*/reactExports.cloneElement(option, _objectSpread$e(_objectSpread$e({}, props), getPropsFromShapeOption(option)));
  } else if (typeof option === 'function') {
    shape = option(props);
  } else if (isPlainObject$1(option) && typeof option !== 'boolean') {
    var nextProps = propTransformer(option, props);
    shape = /*#__PURE__*/reactExports.createElement(ShapeSelector, {
      shapeType: shapeType,
      elementProps: nextProps
    });
  } else {
    var elementProps = props;
    shape = /*#__PURE__*/reactExports.createElement(ShapeSelector, {
      shapeType: shapeType,
      elementProps: elementProps
    });
  }
  if (isActive) {
    return /*#__PURE__*/reactExports.createElement(Layer, {
      className: activeClassName
    }, shape);
  }
  return shape;
}

var useMouseEnterItemDispatch = (onMouseEnterFromProps, dataKey) => {
  var dispatch = useAppDispatch();
  return (data, index) => event => {
    onMouseEnterFromProps === null || onMouseEnterFromProps === void 0 || onMouseEnterFromProps(data, index, event);
    dispatch(setActiveMouseOverItemIndex({
      activeIndex: String(index),
      activeDataKey: dataKey,
      activeCoordinate: data.tooltipPosition
    }));
  };
};
var useMouseLeaveItemDispatch = onMouseLeaveFromProps => {
  var dispatch = useAppDispatch();
  return (data, index) => event => {
    onMouseLeaveFromProps === null || onMouseLeaveFromProps === void 0 || onMouseLeaveFromProps(data, index, event);
    dispatch(mouseLeaveItem());
  };
};
var useMouseClickItemDispatch = (onMouseClickFromProps, dataKey) => {
  var dispatch = useAppDispatch();
  return (data, index) => event => {
    onMouseClickFromProps === null || onMouseClickFromProps === void 0 || onMouseClickFromProps(data, index, event);
    dispatch(setActiveClickItemIndex({
      activeIndex: String(index),
      activeDataKey: dataKey,
      activeCoordinate: data.tooltipPosition
    }));
  };
};

function SetTooltipEntrySettings(_ref) {
  var {
    fn,
    args
  } = _ref;
  var dispatch = useAppDispatch();
  var isPanorama = useIsPanorama();
  reactExports.useEffect(() => {
    if (isPanorama) {
      // Panorama graphical items should never contribute to Tooltip payload.
      return undefined;
    }
    var tooltipEntrySettings = fn(args);
    dispatch(addTooltipEntrySettings(tooltipEntrySettings));
    return () => {
      dispatch(removeTooltipEntrySettings(tooltipEntrySettings));
    };
  }, [fn, args, dispatch, isPanorama]);
  return null;
}

var noop$1 = () => {};
function SetLegendPayload(_ref) {
  var {
    legendPayload
  } = _ref;
  var dispatch = useAppDispatch();
  var isPanorama = useIsPanorama();
  reactExports.useEffect(() => {
    if (isPanorama) {
      return noop$1;
    }
    dispatch(addLegendPayload(legendPayload));
    return () => {
      dispatch(removeLegendPayload(legendPayload));
    };
  }, [dispatch, isPanorama, legendPayload]);
  return null;
}
function SetPolarLegendPayload(_ref2) {
  var {
    legendPayload
  } = _ref2;
  var dispatch = useAppDispatch();
  var layout = useAppSelector(selectChartLayout);
  reactExports.useEffect(() => {
    if (layout !== 'centric' && layout !== 'radial') {
      return noop$1;
    }
    dispatch(addLegendPayload(legendPayload));
    return () => {
      dispatch(removeLegendPayload(legendPayload));
    };
  }, [dispatch, layout, legendPayload]);
  return null;
}

/**
 * This hook returns a unique animation id for the object input.
 * If input changes (as in, reference equality is different), the animation id will change.
 * If input does not change, the animation id will not change.
 *
 * This is useful for animations. The Animate component
 * does have a `shouldReAnimate` prop but that doesn't seem to be doing what the name implies.
 * Also, we don't always want to re-animate on every render;
 * we only want to re-animate when the input changes. Not the internal state (e.g. `isAnimating`).
 *
 * @param input The object to check for changes. Uses reference equality (=== operator)
 * @param prefix Optional prefix to use for the animation id
 * @returns A unique animation id
 */
function useAnimationId(input) {
  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'animation-';
  var animationId = reactExports.useRef(uniqueId(prefix));
  var prevProps = reactExports.useRef(input);
  if (prevProps.current !== input) {
    animationId.current = uniqueId(prefix);
    prevProps.current = input;
  }
  return animationId.current;
}

var _excluded$e = ["onMouseEnter", "onClick", "onMouseLeave"];
function _objectWithoutProperties$e(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$e(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$e(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
function ownKeys$d(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$d(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$d(Object(t), true).forEach(function (r) { _defineProperty$h(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$d(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$h(e, r, t) { return (r = _toPropertyKey$h(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$h(t) { var i = _toPrimitive$h(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$h(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _extends$d() { return _extends$d = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$d.apply(null, arguments); }

/**
 * Internal props, combination of external props + defaultProps + private Recharts state
 */

function SetPiePayloadLegend(props) {
  var presentationProps = reactExports.useMemo(() => filterProps(props, false), [props]);
  var cells = reactExports.useMemo(() => findAllByType(props.children, Cell), [props.children]);
  var pieSettings = reactExports.useMemo(() => ({
    name: props.name,
    nameKey: props.nameKey,
    tooltipType: props.tooltipType,
    data: props.data,
    dataKey: props.dataKey,
    cx: props.cx,
    cy: props.cy,
    startAngle: props.startAngle,
    endAngle: props.endAngle,
    minAngle: props.minAngle,
    paddingAngle: props.paddingAngle,
    innerRadius: props.innerRadius,
    outerRadius: props.outerRadius,
    cornerRadius: props.cornerRadius,
    legendType: props.legendType,
    fill: props.fill,
    presentationProps
  }), [props.cornerRadius, props.cx, props.cy, props.data, props.dataKey, props.endAngle, props.innerRadius, props.minAngle, props.name, props.nameKey, props.outerRadius, props.paddingAngle, props.startAngle, props.tooltipType, props.legendType, props.fill, presentationProps]);
  var legendPayload = useAppSelector(state => selectPieLegend(state, pieSettings, cells));
  return /*#__PURE__*/reactExports.createElement(SetPolarLegendPayload, {
    legendPayload: legendPayload
  });
}
function getTooltipEntrySettings$4(props) {
  var {
    dataKey,
    nameKey,
    sectors,
    stroke,
    strokeWidth,
    fill,
    name,
    hide,
    tooltipType
  } = props;
  return {
    dataDefinedOnItem: sectors === null || sectors === void 0 ? void 0 : sectors.map(p => p.tooltipPayload),
    positions: sectors === null || sectors === void 0 ? void 0 : sectors.map(p => p.tooltipPosition),
    settings: {
      stroke,
      strokeWidth,
      fill,
      dataKey,
      nameKey,
      name: getTooltipNameProp(name, dataKey),
      hide,
      type: tooltipType,
      color: fill,
      unit: '' // why doesn't Pie support unit?
    }
  };
}
var getTextAnchor = (x, cx) => {
  if (x > cx) {
    return 'start';
  }
  if (x < cx) {
    return 'end';
  }
  return 'middle';
};
var getOuterRadius = (dataPoint, outerRadius, maxPieRadius) => {
  if (typeof outerRadius === 'function') {
    return outerRadius(dataPoint);
  }
  return getPercentValue(outerRadius, maxPieRadius, maxPieRadius * 0.8);
};
var parseCoordinateOfPie = (item, offset, dataPoint) => {
  var {
    top,
    left,
    width,
    height
  } = offset;
  var maxPieRadius = getMaxRadius(width, height);
  var cx = left + getPercentValue(item.cx, width, width / 2);
  var cy = top + getPercentValue(item.cy, height, height / 2);
  var innerRadius = getPercentValue(item.innerRadius, maxPieRadius, 0);
  var outerRadius = getOuterRadius(dataPoint, item.outerRadius, maxPieRadius);
  var maxRadius = item.maxRadius || Math.sqrt(width * width + height * height) / 2;
  return {
    cx,
    cy,
    innerRadius,
    outerRadius,
    maxRadius
  };
};
var parseDeltaAngle = (startAngle, endAngle) => {
  var sign = mathSign(endAngle - startAngle);
  var deltaAngle = Math.min(Math.abs(endAngle - startAngle), 360);
  return sign * deltaAngle;
};
var renderLabelLineItem = (option, props) => {
  if (/*#__PURE__*/reactExports.isValidElement(option)) {
    return /*#__PURE__*/reactExports.cloneElement(option, props);
  }
  if (typeof option === 'function') {
    return option(props);
  }
  var className = clsx('recharts-pie-label-line', typeof option !== 'boolean' ? option.className : '');
  return /*#__PURE__*/reactExports.createElement(Curve, _extends$d({}, props, {
    type: "linear",
    className: className
  }));
};
var renderLabelItem = (option, props, value) => {
  if (/*#__PURE__*/reactExports.isValidElement(option)) {
    return /*#__PURE__*/reactExports.cloneElement(option, props);
  }
  var label = value;
  if (typeof option === 'function') {
    label = option(props);
    if (/*#__PURE__*/reactExports.isValidElement(label)) {
      return label;
    }
  }
  var className = clsx('recharts-pie-label-text', typeof option !== 'boolean' && typeof option !== 'function' ? option.className : '');
  return /*#__PURE__*/reactExports.createElement(Text, _extends$d({}, props, {
    alignmentBaseline: "middle",
    className: className
  }), label);
};
function PieLabels(_ref) {
  var {
    sectors,
    props,
    showLabels
  } = _ref;
  var {
    label,
    labelLine,
    dataKey
  } = props;
  if (!showLabels || !label || !sectors) {
    return null;
  }
  var pieProps = filterProps(props, false);
  var customLabelProps = filterProps(label, false);
  var customLabelLineProps = filterProps(labelLine, false);
  var offsetRadius = typeof label === 'object' && 'offsetRadius' in label && label.offsetRadius || 20;
  var labels = sectors.map((entry, i) => {
    var midAngle = (entry.startAngle + entry.endAngle) / 2;
    var endPoint = polarToCartesian(entry.cx, entry.cy, entry.outerRadius + offsetRadius, midAngle);
    var labelProps = _objectSpread$d(_objectSpread$d(_objectSpread$d(_objectSpread$d({}, pieProps), entry), {}, {
      stroke: 'none'
    }, customLabelProps), {}, {
      index: i,
      textAnchor: getTextAnchor(endPoint.x, entry.cx)
    }, endPoint);
    var lineProps = _objectSpread$d(_objectSpread$d(_objectSpread$d(_objectSpread$d({}, pieProps), entry), {}, {
      fill: 'none',
      stroke: entry.fill
    }, customLabelLineProps), {}, {
      index: i,
      points: [polarToCartesian(entry.cx, entry.cy, entry.outerRadius, midAngle), endPoint],
      key: 'line'
    });
    return (
      /*#__PURE__*/
      // eslint-disable-next-line react/no-array-index-key
      reactExports.createElement(Layer, {
        key: "label-".concat(entry.startAngle, "-").concat(entry.endAngle, "-").concat(entry.midAngle, "-").concat(i)
      }, labelLine && renderLabelLineItem(labelLine, lineProps), renderLabelItem(label, labelProps, getValueByDataKey(entry, dataKey)))
    );
  });
  return /*#__PURE__*/reactExports.createElement(Layer, {
    className: "recharts-pie-labels"
  }, labels);
}
function PieSectors(props) {
  var {
    sectors,
    activeShape,
    inactiveShape: inactiveShapeProp,
    allOtherPieProps,
    showLabels
  } = props;
  var activeIndex = useAppSelector(selectActiveTooltipIndex);
  var {
      onMouseEnter: onMouseEnterFromProps,
      onClick: onItemClickFromProps,
      onMouseLeave: onMouseLeaveFromProps
    } = allOtherPieProps,
    restOfAllOtherProps = _objectWithoutProperties$e(allOtherPieProps, _excluded$e);
  var onMouseEnterFromContext = useMouseEnterItemDispatch(onMouseEnterFromProps, allOtherPieProps.dataKey);
  var onMouseLeaveFromContext = useMouseLeaveItemDispatch(onMouseLeaveFromProps);
  var onClickFromContext = useMouseClickItemDispatch(onItemClickFromProps, allOtherPieProps.dataKey);
  if (sectors == null) {
    return null;
  }
  return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, sectors.map((entry, i) => {
    if ((entry === null || entry === void 0 ? void 0 : entry.startAngle) === 0 && (entry === null || entry === void 0 ? void 0 : entry.endAngle) === 0 && sectors.length !== 1) return null;
    var isSectorActive = activeShape && String(i) === activeIndex;
    var inactiveShape = activeIndex ? inactiveShapeProp : null;
    var sectorOptions = isSectorActive ? activeShape : inactiveShape;
    var sectorProps = _objectSpread$d(_objectSpread$d({}, entry), {}, {
      stroke: entry.stroke,
      tabIndex: -1,
      [DATA_ITEM_INDEX_ATTRIBUTE_NAME]: i,
      [DATA_ITEM_DATAKEY_ATTRIBUTE_NAME]: allOtherPieProps.dataKey
    });
    return /*#__PURE__*/reactExports.createElement(Layer, _extends$d({
      tabIndex: -1,
      className: "recharts-pie-sector"
    }, adaptEventsOfChild(restOfAllOtherProps, entry, i), {
      // @ts-expect-error the types need a bit of attention
      onMouseEnter: onMouseEnterFromContext(entry, i)
      // @ts-expect-error the types need a bit of attention
      ,
      onMouseLeave: onMouseLeaveFromContext(entry, i)
      // @ts-expect-error the types need a bit of attention
      ,
      onClick: onClickFromContext(entry, i)
      // eslint-disable-next-line react/no-array-index-key
      ,
      key: "sector-".concat(entry === null || entry === void 0 ? void 0 : entry.startAngle, "-").concat(entry === null || entry === void 0 ? void 0 : entry.endAngle, "-").concat(entry.midAngle, "-").concat(i)
    }), /*#__PURE__*/reactExports.createElement(Shape, _extends$d({
      option: sectorOptions,
      isActive: isSectorActive,
      shapeType: "sector"
    }, sectorProps)));
  }), /*#__PURE__*/reactExports.createElement(PieLabels, {
    sectors: sectors,
    props: allOtherPieProps,
    showLabels: showLabels
  }));
}
function computePieSectors(_ref2) {
  var _pieSettings$paddingA;
  var {
    pieSettings,
    displayedData,
    cells,
    offset
  } = _ref2;
  var {
    cornerRadius,
    startAngle,
    endAngle,
    dataKey,
    nameKey,
    tooltipType
  } = pieSettings;
  var minAngle = Math.abs(pieSettings.minAngle);
  var deltaAngle = parseDeltaAngle(startAngle, endAngle);
  var absDeltaAngle = Math.abs(deltaAngle);
  var paddingAngle = displayedData.length <= 1 ? 0 : (_pieSettings$paddingA = pieSettings.paddingAngle) !== null && _pieSettings$paddingA !== void 0 ? _pieSettings$paddingA : 0;
  var notZeroItemCount = displayedData.filter(entry => getValueByDataKey(entry, dataKey, 0) !== 0).length;
  var totalPaddingAngle = (absDeltaAngle >= 360 ? notZeroItemCount : notZeroItemCount - 1) * paddingAngle;
  var realTotalAngle = absDeltaAngle - notZeroItemCount * minAngle - totalPaddingAngle;
  var sum = displayedData.reduce((result, entry) => {
    var val = getValueByDataKey(entry, dataKey, 0);
    return result + (isNumber(val) ? val : 0);
  }, 0);
  var sectors;
  if (sum > 0) {
    var prev;
    sectors = displayedData.map((entry, i) => {
      var val = getValueByDataKey(entry, dataKey, 0);
      var name = getValueByDataKey(entry, nameKey, i);
      var coordinate = parseCoordinateOfPie(pieSettings, offset, entry);
      var percent = (isNumber(val) ? val : 0) / sum;
      var tempStartAngle;
      var entryWithCellInfo = _objectSpread$d(_objectSpread$d({}, entry), cells && cells[i] && cells[i].props);
      if (i) {
        tempStartAngle = prev.endAngle + mathSign(deltaAngle) * paddingAngle * (val !== 0 ? 1 : 0);
      } else {
        tempStartAngle = startAngle;
      }
      var tempEndAngle = tempStartAngle + mathSign(deltaAngle) * ((val !== 0 ? minAngle : 0) + percent * realTotalAngle);
      var midAngle = (tempStartAngle + tempEndAngle) / 2;
      var middleRadius = (coordinate.innerRadius + coordinate.outerRadius) / 2;
      var tooltipPayload = [{
        // @ts-expect-error getValueByDataKey does not validate the output type
        name,
        // @ts-expect-error getValueByDataKey does not validate the output type
        value: val,
        payload: entryWithCellInfo,
        dataKey,
        type: tooltipType
      }];
      var tooltipPosition = polarToCartesian(coordinate.cx, coordinate.cy, middleRadius, midAngle);
      prev = _objectSpread$d(_objectSpread$d(_objectSpread$d(_objectSpread$d({}, pieSettings.presentationProps), {}, {
        percent,
        cornerRadius,
        name,
        tooltipPayload,
        midAngle,
        middleRadius,
        tooltipPosition
      }, entryWithCellInfo), coordinate), {}, {
        value: getValueByDataKey(entry, dataKey),
        startAngle: tempStartAngle,
        endAngle: tempEndAngle,
        payload: entryWithCellInfo,
        paddingAngle: mathSign(deltaAngle) * paddingAngle
      });
      return prev;
    });
  }
  return sectors;
}
function SectorsWithAnimation(_ref3) {
  var {
    props,
    previousSectorsRef
  } = _ref3;
  var {
    sectors,
    isAnimationActive,
    animationBegin,
    animationDuration,
    animationEasing,
    activeShape,
    inactiveShape,
    onAnimationStart,
    onAnimationEnd
  } = props;
  var animationId = useAnimationId(props, 'recharts-pie-');
  var prevSectors = previousSectorsRef.current;
  var [isAnimating, setIsAnimating] = reactExports.useState(true);
  var handleAnimationEnd = reactExports.useCallback(() => {
    if (typeof onAnimationEnd === 'function') {
      onAnimationEnd();
    }
    setIsAnimating(false);
  }, [onAnimationEnd]);
  var handleAnimationStart = reactExports.useCallback(() => {
    if (typeof onAnimationStart === 'function') {
      onAnimationStart();
    }
    setIsAnimating(true);
  }, [onAnimationStart]);
  return /*#__PURE__*/reactExports.createElement(Animate, {
    begin: animationBegin,
    duration: animationDuration,
    isActive: isAnimationActive,
    easing: animationEasing,
    from: {
      t: 0
    },
    to: {
      t: 1
    },
    onAnimationStart: handleAnimationStart,
    onAnimationEnd: handleAnimationEnd,
    key: animationId
  }, _ref4 => {
    var {
      t
    } = _ref4;
    var stepData = [];
    var first = sectors && sectors[0];
    var curAngle = first.startAngle;
    sectors.forEach((entry, index) => {
      var prev = prevSectors && prevSectors[index];
      var paddingAngle = index > 0 ? get$1(entry, 'paddingAngle', 0) : 0;
      if (prev) {
        var angleIp = interpolateNumber$1(prev.endAngle - prev.startAngle, entry.endAngle - entry.startAngle);
        var latest = _objectSpread$d(_objectSpread$d({}, entry), {}, {
          startAngle: curAngle + paddingAngle,
          endAngle: curAngle + angleIp(t) + paddingAngle
        });
        stepData.push(latest);
        curAngle = latest.endAngle;
      } else {
        var {
          endAngle,
          startAngle
        } = entry;
        var interpolatorAngle = interpolateNumber$1(0, endAngle - startAngle);
        var deltaAngle = interpolatorAngle(t);
        var _latest = _objectSpread$d(_objectSpread$d({}, entry), {}, {
          startAngle: curAngle + paddingAngle,
          endAngle: curAngle + deltaAngle + paddingAngle
        });
        stepData.push(_latest);
        curAngle = _latest.endAngle;
      }
    });

    // eslint-disable-next-line no-param-reassign
    previousSectorsRef.current = stepData;
    return /*#__PURE__*/reactExports.createElement(Layer, null, /*#__PURE__*/reactExports.createElement(PieSectors, {
      sectors: stepData,
      activeShape: activeShape,
      inactiveShape: inactiveShape,
      allOtherPieProps: props,
      showLabels: !isAnimating
    }));
  });
}
function RenderSectors(props) {
  var {
    sectors,
    isAnimationActive,
    activeShape,
    inactiveShape
  } = props;
  var previousSectorsRef = reactExports.useRef(null);
  var prevSectors = previousSectorsRef.current;
  if (isAnimationActive && sectors && sectors.length && (!prevSectors || prevSectors !== sectors)) {
    return /*#__PURE__*/reactExports.createElement(SectorsWithAnimation, {
      props: props,
      previousSectorsRef: previousSectorsRef
    });
  }
  return /*#__PURE__*/reactExports.createElement(PieSectors, {
    sectors: sectors,
    activeShape: activeShape,
    inactiveShape: inactiveShape,
    allOtherPieProps: props,
    showLabels: true
  });
}
function PieWithTouchMove(props) {
  var {
    hide,
    className,
    rootTabIndex
  } = props;
  var layerClass = clsx('recharts-pie', className);
  if (hide) {
    return null;
  }
  return /*#__PURE__*/reactExports.createElement(Layer, {
    tabIndex: rootTabIndex,
    className: layerClass
  }, /*#__PURE__*/reactExports.createElement(RenderSectors, props));
}
var defaultPieProps = {
  animationBegin: 400,
  animationDuration: 1500,
  animationEasing: 'ease',
  cx: '50%',
  cy: '50%',
  dataKey: 'value',
  endAngle: 360,
  fill: '#808080',
  hide: false,
  innerRadius: 0,
  isAnimationActive: !Global.isSsr,
  labelLine: true,
  legendType: 'rect',
  minAngle: 0,
  nameKey: 'name',
  outerRadius: '80%',
  paddingAngle: 0,
  rootTabIndex: 0,
  startAngle: 0,
  stroke: '#fff'
};
function PieImpl(props) {
  var propsWithDefaults = resolveDefaultProps(props, defaultPieProps);
  var cells = reactExports.useMemo(() => findAllByType(props.children, Cell), [props.children]);
  var presentationProps = filterProps(propsWithDefaults, false);
  var pieSettings = reactExports.useMemo(() => ({
    name: propsWithDefaults.name,
    nameKey: propsWithDefaults.nameKey,
    tooltipType: propsWithDefaults.tooltipType,
    data: propsWithDefaults.data,
    dataKey: propsWithDefaults.dataKey,
    cx: propsWithDefaults.cx,
    cy: propsWithDefaults.cy,
    startAngle: propsWithDefaults.startAngle,
    endAngle: propsWithDefaults.endAngle,
    minAngle: propsWithDefaults.minAngle,
    paddingAngle: propsWithDefaults.paddingAngle,
    innerRadius: propsWithDefaults.innerRadius,
    outerRadius: propsWithDefaults.outerRadius,
    cornerRadius: propsWithDefaults.cornerRadius,
    legendType: propsWithDefaults.legendType,
    fill: propsWithDefaults.fill,
    presentationProps
  }), [propsWithDefaults.cornerRadius, propsWithDefaults.cx, propsWithDefaults.cy, propsWithDefaults.data, propsWithDefaults.dataKey, propsWithDefaults.endAngle, propsWithDefaults.innerRadius, propsWithDefaults.minAngle, propsWithDefaults.name, propsWithDefaults.nameKey, propsWithDefaults.outerRadius, propsWithDefaults.paddingAngle, propsWithDefaults.startAngle, propsWithDefaults.tooltipType, propsWithDefaults.legendType, propsWithDefaults.fill, presentationProps]);
  var sectors = useAppSelector(state => selectPieSectors(state, pieSettings, cells));
  return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, /*#__PURE__*/reactExports.createElement(SetTooltipEntrySettings, {
    fn: getTooltipEntrySettings$4,
    args: _objectSpread$d(_objectSpread$d({}, propsWithDefaults), {}, {
      sectors
    })
  }), /*#__PURE__*/reactExports.createElement(PieWithTouchMove, _extends$d({}, propsWithDefaults, {
    sectors: sectors
  })));
}
class Pie extends reactExports.PureComponent {
  constructor() {
    super(...arguments);
    _defineProperty$h(this, "id", uniqueId('recharts-pie-'));
  }
  render() {
    return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, /*#__PURE__*/reactExports.createElement(SetPolarGraphicalItem, {
      data: this.props.data,
      dataKey: this.props.dataKey,
      hide: this.props.hide,
      angleAxisId: 0,
      radiusAxisId: 0,
      stackId: undefined,
      barSize: undefined,
      type: "pie"
    }), /*#__PURE__*/reactExports.createElement(SetPiePayloadLegend, this.props), /*#__PURE__*/reactExports.createElement(PieImpl, this.props), this.props.children);
  }
}
_defineProperty$h(Pie, "displayName", 'Pie');
_defineProperty$h(Pie, "defaultProps", defaultPieProps);

var selectChartOffset = createSelector([selectChartOffsetInternal], offsetInternal => {
  if (!offsetInternal) {
    return undefined;
  }
  return {
    top: offsetInternal.top,
    bottom: offsetInternal.bottom,
    left: offsetInternal.left,
    right: offsetInternal.right
  };
});

var selectPlotArea = createSelector([selectChartOffset, selectChartWidth, selectChartHeight], (offset, chartWidth, chartHeight) => {
  if (!offset || chartWidth == null || chartHeight == null) {
    return undefined;
  }
  return {
    x: offset.left,
    y: offset.top,
    width: Math.max(0, chartWidth - offset.left - offset.right),
    height: Math.max(0, chartHeight - offset.top - offset.bottom)
  };
});

var useXAxis = xAxisId => {
  var isPanorama = useIsPanorama();
  return useAppSelector(state => selectAxisWithScale(state, 'xAxis', xAxisId, isPanorama));
};
var useYAxis = yAxisId => {
  var isPanorama = useIsPanorama();
  return useAppSelector(state => selectAxisWithScale(state, 'yAxis', yAxisId, isPanorama));
};

/**
 * Plot area is the area where the actual chart data is rendered.
 * This means: bars, lines, scatter points, etc.
 *
 * The plot area is calculated based on the chart dimensions and the offset.
 *
 * @returns Plot area of the chart in pixels, or undefined if used outside a chart context.
 */
var usePlotArea = () => {
  return useAppSelector(selectPlotArea);
};

/**
 * Returns the currently active data points being displayed in the Tooltip.
 * Active means that it is currently visible; this hook will return `undefined` if there is no current interaction.
 *
 * This follows the `<Tooltip />` props, if the Tooltip element is present in the chart.
 * If there is no `<Tooltip />` then this hook will follow the default Tooltip props.
 *
 * Data point is whatever you pass as an input to the chart using the `data={}` prop.
 *
 * This returns an array because a chart can have multiple graphical items in it (multiple Lines for example)
 * and tooltip with `shared={true}` will display all items at the same time.
 *
 * Returns undefined when used outside a chart context.
 *
 * @returns Data points that are currently visible in a Tooltip
 */
var useActiveTooltipDataPoints = () => {
  return useAppSelector(selectActiveTooltipDataPoints);
};

function ownKeys$c(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$c(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$c(Object(t), true).forEach(function (r) { _defineProperty$g(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$c(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$g(e, r, t) { return (r = _toPropertyKey$g(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$g(t) { var i = _toPrimitive$g(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$g(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var renderActivePoint = _ref => {
  var {
    point,
    childIndex,
    mainColor,
    activeDot,
    dataKey
  } = _ref;
  if (activeDot === false || point.x == null || point.y == null) {
    return null;
  }
  var dotProps = _objectSpread$c(_objectSpread$c({
    index: childIndex,
    dataKey,
    cx: point.x,
    cy: point.y,
    r: 4,
    fill: mainColor !== null && mainColor !== void 0 ? mainColor : 'none',
    strokeWidth: 2,
    stroke: '#fff',
    payload: point.payload,
    value: point.value
  }, filterProps(activeDot, false)), adaptEventHandlers(activeDot));
  var dot;
  if (/*#__PURE__*/reactExports.isValidElement(activeDot)) {
    // @ts-expect-error element cloning does not have types
    dot = /*#__PURE__*/reactExports.cloneElement(activeDot, dotProps);
  } else if (typeof activeDot === 'function') {
    dot = activeDot(dotProps);
  } else {
    dot = /*#__PURE__*/reactExports.createElement(Dot, dotProps);
  }
  return /*#__PURE__*/reactExports.createElement(Layer, {
    className: "recharts-active-dot"
  }, dot);
};
function ActivePoints(_ref2) {
  var {
    points,
    mainColor,
    activeDot,
    itemDataKey
  } = _ref2;
  var activeTooltipIndex = useAppSelector(selectActiveTooltipIndex);
  var activeDataPoints = useActiveTooltipDataPoints();
  if (points == null || activeDataPoints == null) {
    return null;
  }
  var activePoint = points.find(p => activeDataPoints.includes(p.payload));
  if (isNullish(activePoint)) {
    return null;
  }
  return renderActivePoint({
    point: activePoint,
    childIndex: Number(activeTooltipIndex),
    mainColor,
    dataKey: itemDataKey,
    activeDot
  });
}

var PolarGraphicalItemContext = props => {
  return /*#__PURE__*/reactExports.createElement(SetPolarGraphicalItem, props);
};

function ownKeys$b(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$b(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$b(Object(t), true).forEach(function (r) { _defineProperty$f(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$b(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$f(e, r, t) { return (r = _toPropertyKey$f(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$f(t) { var i = _toPrimitive$f(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$f(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var selectRadiusAxisScale = (state, radiusAxisId) => selectPolarAxisScale(state, 'radiusAxis', radiusAxisId);
var selectRadiusAxisForRadar = createSelector([selectRadiusAxisScale], scale => {
  if (scale == null) {
    return undefined;
  }
  return {
    scale
  };
});
var selectRadiusAxisForBandSize = createSelector([selectRadiusAxis, selectRadiusAxisScale], (axisSettings, scale) => {
  if (axisSettings == null || scale == null) {
    return undefined;
  }
  return _objectSpread$b(_objectSpread$b({}, axisSettings), {}, {
    scale
  });
});
var selectRadiusAxisTicks = (state, radiusAxisId, _angleAxisId, isPanorama) => {
  return selectPolarAxisTicks(state, 'radiusAxis', radiusAxisId, isPanorama);
};
var selectAngleAxisForRadar = (state, _radiusAxisId, angleAxisId) => selectAngleAxis(state, angleAxisId);
var selectPolarAxisScaleForRadar = (state, _radiusAxisId, angleAxisId) => selectPolarAxisScale(state, 'angleAxis', angleAxisId);
var selectAngleAxisForBandSize = createSelector([selectAngleAxisForRadar, selectPolarAxisScaleForRadar], (axisSettings, scale) => {
  if (axisSettings == null || scale == null) {
    return undefined;
  }
  return _objectSpread$b(_objectSpread$b({}, axisSettings), {}, {
    scale
  });
});
var selectAngleAxisTicks = (state, _radiusAxisId, angleAxisId, isPanorama) => {
  return selectPolarAxisTicks(state, 'angleAxis', angleAxisId, isPanorama);
};
var selectAngleAxisWithScaleAndViewport = createSelector([selectAngleAxisForRadar, selectPolarAxisScaleForRadar, selectPolarViewBox], (axisOptions, scale, polarViewBox) => {
  if (polarViewBox == null || scale == null) {
    return undefined;
  }
  return {
    scale,
    type: axisOptions.type,
    dataKey: axisOptions.dataKey,
    cx: polarViewBox.cx,
    cy: polarViewBox.cy
  };
});
var pickDataKey = (_state, _radiusAxisId, _angleAxisId, _isPanorama, radarDataKey) => radarDataKey;
var selectBandSizeOfAxis = createSelector([selectChartLayout, selectRadiusAxisForBandSize, selectRadiusAxisTicks, selectAngleAxisForBandSize, selectAngleAxisTicks], (layout, radiusAxis, radiusAxisTicks, angleAxis, angleAxisTicks) => {
  if (isCategoricalAxis(layout, 'radiusAxis')) {
    return getBandSizeOfAxis(radiusAxis, radiusAxisTicks, false);
  }
  return getBandSizeOfAxis(angleAxis, angleAxisTicks, false);
});
var selectSynchronisedRadarDataKey = createSelector([selectUnfilteredPolarItems, pickDataKey], (graphicalItems, radarDataKey) => {
  if (graphicalItems.some(pgis => pgis.type === 'radar' && radarDataKey === pgis.dataKey)) {
    return radarDataKey;
  }
  return undefined;
});
var selectRadarPoints = createSelector([selectRadiusAxisForRadar, selectAngleAxisWithScaleAndViewport, selectChartDataAndAlwaysIgnoreIndexes, selectSynchronisedRadarDataKey, selectBandSizeOfAxis], (radiusAxis, angleAxis, _ref, dataKey, bandSize) => {
  var {
    chartData,
    dataStartIndex,
    dataEndIndex
  } = _ref;
  if (radiusAxis == null || angleAxis == null || chartData == null || bandSize == null || dataKey == null) {
    return undefined;
  }
  var displayedData = chartData.slice(dataStartIndex, dataEndIndex + 1);
  return computeRadarPoints({
    radiusAxis,
    angleAxis,
    displayedData,
    dataKey,
    bandSize
  });
});

function ownKeys$a(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$a(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$a(Object(t), true).forEach(function (r) { _defineProperty$e(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$a(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$e(e, r, t) { return (r = _toPropertyKey$e(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$e(t) { var i = _toPrimitive$e(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$e(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _extends$c() { return _extends$c = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$c.apply(null, arguments); }
function getLegendItemColor$1(stroke, fill) {
  return stroke && stroke !== 'none' ? stroke : fill;
}
var computeLegendPayloadFromRadarSectors = props => {
  var {
    dataKey,
    name,
    stroke,
    fill,
    legendType,
    hide
  } = props;
  return [{
    inactive: hide,
    dataKey,
    type: legendType,
    color: getLegendItemColor$1(stroke, fill),
    value: getTooltipNameProp(name, dataKey),
    payload: props
  }];
};
function getTooltipEntrySettings$3(props) {
  var {
    dataKey,
    stroke,
    strokeWidth,
    fill,
    name,
    hide,
    tooltipType
  } = props;
  return {
    /*
     * I suppose this here _could_ return props.points
     * because while Radar does not support item tooltip mode, it _could_ support it.
     * But when I actually do return the points here, a defaultIndex test starts failing.
     * So, undefined it is.
     */
    dataDefinedOnItem: undefined,
    positions: undefined,
    settings: {
      stroke,
      strokeWidth,
      fill,
      nameKey: undefined,
      // RadarChart does not have nameKey unfortunately
      dataKey,
      name: getTooltipNameProp(name, dataKey),
      hide,
      type: tooltipType,
      color: getLegendItemColor$1(stroke, fill),
      unit: '' // why doesn't Radar support unit?
    }
  };
}
function renderDotItem$2(option, props) {
  var dotItem;
  if (/*#__PURE__*/reactExports.isValidElement(option)) {
    // @ts-expect-error typescript is unhappy with cloned props type
    dotItem = /*#__PURE__*/reactExports.cloneElement(option, props);
  } else if (typeof option === 'function') {
    dotItem = option(props);
  } else {
    dotItem = /*#__PURE__*/reactExports.createElement(Dot, _extends$c({}, props, {
      className: clsx('recharts-radar-dot', typeof option !== 'boolean' ? option.className : '')
    }));
  }
  return dotItem;
}
function computeRadarPoints(_ref) {
  var {
    radiusAxis,
    angleAxis,
    displayedData,
    dataKey,
    bandSize
  } = _ref;
  var {
    cx,
    cy
  } = angleAxis;
  var isRange = false;
  var points = [];
  var angleBandSize = angleAxis.type !== 'number' ? bandSize !== null && bandSize !== void 0 ? bandSize : 0 : 0;
  displayedData.forEach((entry, i) => {
    var name = getValueByDataKey(entry, angleAxis.dataKey, i);
    var value = getValueByDataKey(entry, dataKey);
    var angle = angleAxis.scale(name) + angleBandSize;
    var pointValue = Array.isArray(value) ? last$1(value) : value;
    var radius = isNullish(pointValue) ? undefined : radiusAxis.scale(pointValue);
    if (Array.isArray(value) && value.length >= 2) {
      isRange = true;
    }
    points.push(_objectSpread$a(_objectSpread$a({}, polarToCartesian(cx, cy, radius, angle)), {}, {
      // @ts-expect-error getValueByDataKey does not validate the output type
      name,
      // @ts-expect-error getValueByDataKey does not validate the output type
      value,
      cx,
      cy,
      radius,
      angle,
      payload: entry
    }));
  });
  var baseLinePoints = [];
  if (isRange) {
    points.forEach(point => {
      if (Array.isArray(point.value)) {
        var baseValue = point.value[0];
        var radius = isNullish(baseValue) ? undefined : radiusAxis.scale(baseValue);
        baseLinePoints.push(_objectSpread$a(_objectSpread$a({}, point), {}, {
          radius
        }, polarToCartesian(cx, cy, radius, point.angle)));
      } else {
        baseLinePoints.push(point);
      }
    });
  }
  return {
    points,
    isRange,
    baseLinePoints
  };
}
function Dots$2(_ref2) {
  var {
    points,
    props
  } = _ref2;
  var {
    dot,
    dataKey
  } = props;
  if (!dot) {
    return null;
  }
  var baseProps = filterProps(props, false);
  var customDotProps = filterProps(dot, true);
  var dots = points.map((entry, i) => {
    var dotProps = _objectSpread$a(_objectSpread$a(_objectSpread$a({
      key: "dot-".concat(i),
      r: 3
    }, baseProps), customDotProps), {}, {
      dataKey,
      cx: entry.x,
      cy: entry.y,
      index: i,
      payload: entry
    });
    return renderDotItem$2(dot, dotProps);
  });
  return /*#__PURE__*/reactExports.createElement(Layer, {
    className: "recharts-radar-dots"
  }, dots);
}
function StaticPolygon(_ref3) {
  var {
    points,
    props,
    showLabels
  } = _ref3;
  if (points == null) {
    return null;
  }
  var {
    shape,
    isRange,
    baseLinePoints,
    connectNulls
  } = props;
  var handleMouseEnter = e => {
    var {
      onMouseEnter
    } = props;
    if (onMouseEnter) {
      onMouseEnter(props, e);
    }
  };
  var handleMouseLeave = e => {
    var {
      onMouseLeave
    } = props;
    if (onMouseLeave) {
      onMouseLeave(props, e);
    }
  };
  var radar;
  if (/*#__PURE__*/reactExports.isValidElement(shape)) {
    radar = /*#__PURE__*/reactExports.cloneElement(shape, _objectSpread$a(_objectSpread$a({}, props), {}, {
      points
    }));
  } else if (typeof shape === 'function') {
    radar = shape(_objectSpread$a(_objectSpread$a({}, props), {}, {
      points
    }));
  } else {
    radar = /*#__PURE__*/reactExports.createElement(Polygon, _extends$c({}, filterProps(props, true), {
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave,
      points: points,
      baseLinePoints: isRange ? baseLinePoints : null,
      connectNulls: connectNulls
    }));
  }
  return /*#__PURE__*/reactExports.createElement(Layer, {
    className: "recharts-radar-polygon"
  }, radar, /*#__PURE__*/reactExports.createElement(Dots$2, {
    props: props,
    points: points
  }), showLabels && LabelList.renderCallByParent(props, points));
}
function PolygonWithAnimation(_ref4) {
  var {
    props,
    previousPointsRef
  } = _ref4;
  var {
    points,
    isAnimationActive,
    animationBegin,
    animationDuration,
    animationEasing,
    onAnimationEnd,
    onAnimationStart
  } = props;
  var prevPoints = previousPointsRef.current;
  var animationId = useAnimationId(props, 'recharts-radar-');
  var [isAnimating, setIsAnimating] = reactExports.useState(true);
  var handleAnimationEnd = reactExports.useCallback(() => {
    if (typeof onAnimationEnd === 'function') {
      onAnimationEnd();
    }
    setIsAnimating(false);
  }, [onAnimationEnd]);
  var handleAnimationStart = reactExports.useCallback(() => {
    if (typeof onAnimationStart === 'function') {
      onAnimationStart();
    }
    setIsAnimating(true);
  }, [onAnimationStart]);
  return /*#__PURE__*/reactExports.createElement(Animate, {
    begin: animationBegin,
    duration: animationDuration,
    isActive: isAnimationActive,
    easing: animationEasing,
    from: {
      t: 0
    },
    to: {
      t: 1
    },
    key: "radar-".concat(animationId),
    onAnimationEnd: handleAnimationEnd,
    onAnimationStart: handleAnimationStart
  }, _ref5 => {
    var {
      t
    } = _ref5;
    var prevPointsDiffFactor = prevPoints && prevPoints.length / points.length;
    var stepData = t === 1 ? points : points.map((entry, index) => {
      var prev = prevPoints && prevPoints[Math.floor(index * prevPointsDiffFactor)];
      if (prev) {
        var _interpolatorX = interpolateNumber$1(prev.x, entry.x);
        var _interpolatorY = interpolateNumber$1(prev.y, entry.y);
        return _objectSpread$a(_objectSpread$a({}, entry), {}, {
          x: _interpolatorX(t),
          y: _interpolatorY(t)
        });
      }
      var interpolatorX = interpolateNumber$1(entry.cx, entry.x);
      var interpolatorY = interpolateNumber$1(entry.cy, entry.y);
      return _objectSpread$a(_objectSpread$a({}, entry), {}, {
        x: interpolatorX(t),
        y: interpolatorY(t)
      });
    });
    if (t > 0) {
      // eslint-disable-next-line no-param-reassign
      previousPointsRef.current = stepData;
    }
    return /*#__PURE__*/reactExports.createElement(StaticPolygon, {
      points: stepData,
      props: props,
      showLabels: !isAnimating
    });
  });
}
function RenderPolygon(props) {
  var {
    points,
    isAnimationActive,
    isRange
  } = props;
  var previousPointsRef = reactExports.useRef(undefined);
  var prevPoints = previousPointsRef.current;
  if (isAnimationActive && points && points.length && !isRange && (!prevPoints || prevPoints !== points)) {
    return /*#__PURE__*/reactExports.createElement(PolygonWithAnimation, {
      props: props,
      previousPointsRef: previousPointsRef
    });
  }
  return /*#__PURE__*/reactExports.createElement(StaticPolygon, {
    points: points,
    props: props,
    showLabels: true
  });
}
var defaultRadarProps = {
  angleAxisId: 0,
  radiusAxisId: 0,
  hide: false,
  activeDot: true,
  dot: false,
  legendType: 'rect',
  isAnimationActive: !Global.isSsr,
  animationBegin: 0,
  animationDuration: 1500,
  animationEasing: 'ease'
};
class RadarWithState extends reactExports.PureComponent {
  render() {
    var {
      hide,
      className,
      points
    } = this.props;
    if (hide) {
      return null;
    }
    var layerClass = clsx('recharts-radar', className);
    return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, /*#__PURE__*/reactExports.createElement(Layer, {
      className: layerClass
    }, /*#__PURE__*/reactExports.createElement(RenderPolygon, this.props)), /*#__PURE__*/reactExports.createElement(ActivePoints, {
      points: points,
      mainColor: getLegendItemColor$1(this.props.stroke, this.props.fill),
      itemDataKey: this.props.dataKey,
      activeDot: this.props.activeDot
    }));
  }
}
function RadarImpl(props) {
  var isPanorama = useIsPanorama();
  var radarPoints = useAppSelector(state => selectRadarPoints(state, props.radiusAxisId, props.angleAxisId, isPanorama, props.dataKey));
  return /*#__PURE__*/reactExports.createElement(RadarWithState, _extends$c({}, props, {
    points: radarPoints === null || radarPoints === void 0 ? void 0 : radarPoints.points,
    baseLinePoints: radarPoints === null || radarPoints === void 0 ? void 0 : radarPoints.baseLinePoints,
    isRange: radarPoints === null || radarPoints === void 0 ? void 0 : radarPoints.isRange
  }));
}
class Radar extends reactExports.PureComponent {
  render() {
    return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, /*#__PURE__*/reactExports.createElement(PolarGraphicalItemContext, {
      data: undefined // Radar does not have data prop, why?
      ,
      dataKey: this.props.dataKey,
      hide: this.props.hide,
      angleAxisId: this.props.angleAxisId,
      radiusAxisId: this.props.radiusAxisId,
      stackId: undefined,
      barSize: undefined,
      type: "radar"
    }), /*#__PURE__*/reactExports.createElement(SetPolarLegendPayload, {
      legendPayload: computeLegendPayloadFromRadarSectors(this.props)
    }), /*#__PURE__*/reactExports.createElement(SetTooltipEntrySettings, {
      fn: getTooltipEntrySettings$3,
      args: this.props
    }), /*#__PURE__*/reactExports.createElement(RadarImpl, this.props));
  }
}
_defineProperty$e(Radar, "displayName", 'Radar');
_defineProperty$e(Radar, "defaultProps", defaultRadarProps);

var ReportBar = () => {
  var dispatch = useAppDispatch();
  reactExports.useEffect(() => {
    dispatch(addBar());
    return () => {
      dispatch(removeBar());
    };
  });
  return null;
};

var _excluded$d = ["children"];
function _objectWithoutProperties$d(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$d(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$d(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
var noop = () => {};
var ErrorBarDirectionDispatchContext = /*#__PURE__*/reactExports.createContext({
  addErrorBar: noop,
  removeErrorBar: noop
});
var initialContextState = {
  data: [],
  xAxisId: 'xAxis-0',
  yAxisId: 'yAxis-0',
  dataPointFormatter: () => ({
    x: 0,
    y: 0,
    value: 0
  }),
  errorBarOffset: 0
};
var ErrorBarContext = /*#__PURE__*/reactExports.createContext(initialContextState);
function SetErrorBarContext(props) {
  var {
      children
    } = props,
    rest = _objectWithoutProperties$d(props, _excluded$d);
  return /*#__PURE__*/reactExports.createElement(ErrorBarContext.Provider, {
    value: rest
  }, children);
}
var useErrorBarContext = () => reactExports.useContext(ErrorBarContext);
var CartesianGraphicalItemContext = _ref => {
  var {
    children,
    xAxisId,
    yAxisId,
    zAxisId,
    dataKey,
    data,
    stackId,
    hide,
    type,
    barSize
  } = _ref;
  var [errorBars, updateErrorBars] = reactExports.useState([]);
  // useCallback is necessary in these two because without it, the new function reference causes an infinite render loop
  var addErrorBar = reactExports.useCallback(errorBar => {
    updateErrorBars(prev => [...prev, errorBar]);
  }, [updateErrorBars]);
  var removeErrorBar = reactExports.useCallback(errorBar => {
    updateErrorBars(prev => prev.filter(eb => eb !== errorBar));
  }, [updateErrorBars]);
  var isPanorama = useIsPanorama();
  return /*#__PURE__*/reactExports.createElement(ErrorBarDirectionDispatchContext.Provider, {
    value: {
      addErrorBar,
      removeErrorBar
    }
  }, /*#__PURE__*/reactExports.createElement(SetCartesianGraphicalItem, {
    type: type,
    data: data,
    xAxisId: xAxisId,
    yAxisId: yAxisId,
    zAxisId: zAxisId,
    dataKey: dataKey,
    errorBars: errorBars,
    stackId: stackId,
    hide: hide,
    barSize: barSize,
    isPanorama: isPanorama
  }), children);
};
function ReportErrorBarSettings(props) {
  var {
    addErrorBar,
    removeErrorBar
  } = reactExports.useContext(ErrorBarDirectionDispatchContext);
  reactExports.useEffect(() => {
    addErrorBar(props);
    return () => {
      removeErrorBar(props);
    };
  }, [addErrorBar, removeErrorBar, props]);
  return null;
}

var _excluded$c = ["direction", "width", "dataKey", "isAnimationActive", "animationBegin", "animationDuration", "animationEasing"];
function _defineProperty$d(e, r, t) { return (r = _toPropertyKey$d(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$d(t) { var i = _toPrimitive$d(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$d(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _extends$b() { return _extends$b = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$b.apply(null, arguments); }
function _objectWithoutProperties$c(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$c(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$c(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }

/**
 * So usually the direction is decided by the chart layout.
 * Horizontal layout means error bars are vertical means direction=y
 * Vertical layout means error bars are horizontal means direction=x
 *
 * Except! In Scatter chart, error bars can go both ways.
 *
 * So this property is only ever used in Scatter chart, and ignored elsewhere.
 */

/**
 * External ErrorBar props, visible for users of the library
 */

/**
 * Props after defaults, and required props have been applied.
 */

function ErrorBarImpl(props) {
  var {
      direction,
      width,
      dataKey,
      isAnimationActive,
      animationBegin,
      animationDuration,
      animationEasing
    } = props,
    others = _objectWithoutProperties$c(props, _excluded$c);
  var svgProps = filterProps(others, false);
  var {
    data,
    dataPointFormatter,
    xAxisId,
    yAxisId,
    errorBarOffset: offset
  } = useErrorBarContext();
  var xAxis = useXAxis(xAxisId);
  var yAxis = useYAxis(yAxisId);
  if ((xAxis === null || xAxis === void 0 ? void 0 : xAxis.scale) == null || (yAxis === null || yAxis === void 0 ? void 0 : yAxis.scale) == null || data == null) {
    return null;
  }

  // ErrorBar requires type number XAxis, why?
  if (direction === 'x' && xAxis.type !== 'number') {
    return null;
  }
  var errorBars = data.map(entry => {
    var {
      x,
      y,
      value,
      errorVal
    } = dataPointFormatter(entry, dataKey, direction);
    if (!errorVal) {
      return null;
    }
    var lineCoordinates = [];
    var lowBound, highBound;
    if (Array.isArray(errorVal)) {
      [lowBound, highBound] = errorVal;
    } else {
      lowBound = highBound = errorVal;
    }
    if (direction === 'x') {
      // error bar for horizontal charts, the y is fixed, x is a range value
      var {
        scale
      } = xAxis;
      var yMid = y + offset;
      var yMin = yMid + width;
      var yMax = yMid - width;
      var xMin = scale(value - lowBound);
      var xMax = scale(value + highBound);

      // the right line of |--|
      lineCoordinates.push({
        x1: xMax,
        y1: yMin,
        x2: xMax,
        y2: yMax
      });
      // the middle line of |--|
      lineCoordinates.push({
        x1: xMin,
        y1: yMid,
        x2: xMax,
        y2: yMid
      });
      // the left line of |--|
      lineCoordinates.push({
        x1: xMin,
        y1: yMin,
        x2: xMin,
        y2: yMax
      });
    } else if (direction === 'y') {
      // error bar for horizontal charts, the x is fixed, y is a range value
      var {
        scale: _scale
      } = yAxis;
      var xMid = x + offset;
      var _xMin = xMid - width;
      var _xMax = xMid + width;
      var _yMin = _scale(value - lowBound);
      var _yMax = _scale(value + highBound);

      // the top line
      lineCoordinates.push({
        x1: _xMin,
        y1: _yMax,
        x2: _xMax,
        y2: _yMax
      });
      // the middle line
      lineCoordinates.push({
        x1: xMid,
        y1: _yMin,
        x2: xMid,
        y2: _yMax
      });
      // the bottom line
      lineCoordinates.push({
        x1: _xMin,
        y1: _yMin,
        x2: _xMax,
        y2: _yMin
      });
    }
    var transformOrigin = "".concat(x + offset, "px ").concat(y + offset, "px");
    return /*#__PURE__*/reactExports.createElement(Layer, _extends$b({
      className: "recharts-errorBar",
      key: "bar-".concat(lineCoordinates.map(c => "".concat(c.x1, "-").concat(c.x2, "-").concat(c.y1, "-").concat(c.y2)))
    }, svgProps), lineCoordinates.map(coordinates => {
      var lineStyle = isAnimationActive ? {
        transformOrigin: "".concat(coordinates.x1 - 5, "px")
      } : undefined;
      return /*#__PURE__*/reactExports.createElement(Animate, {
        from: {
          transform: 'scaleY(0)',
          transformOrigin
        },
        to: {
          transform: 'scaleY(1)',
          transformOrigin
        },
        begin: animationBegin,
        easing: animationEasing,
        isActive: isAnimationActive,
        duration: animationDuration,
        key: "line-".concat(coordinates.x1, "-").concat(coordinates.x2, "-").concat(coordinates.y1, "-").concat(coordinates.y2)
        // @ts-expect-error TODO - fix the type error
        ,
        style: {
          transformOrigin
        }
      }, /*#__PURE__*/reactExports.createElement("line", _extends$b({}, coordinates, {
        style: lineStyle
      })));
    }));
  });
  return /*#__PURE__*/reactExports.createElement(Layer, {
    className: "recharts-errorBars"
  }, errorBars);
}
var ErrorBarPreferredDirection = /*#__PURE__*/reactExports.createContext(undefined);
function useErrorBarDirection(directionFromProps) {
  var preferredDirection = reactExports.useContext(ErrorBarPreferredDirection);
  if (directionFromProps != null) {
    return directionFromProps;
  }
  if (preferredDirection != null) {
    return preferredDirection;
  }
  return 'x';
}
function SetErrorBarPreferredDirection(_ref) {
  var {
    direction,
    children
  } = _ref;
  return /*#__PURE__*/reactExports.createElement(ErrorBarPreferredDirection.Provider, {
    value: direction
  }, children);
}
var errorBarDefaultProps = {
  stroke: 'black',
  strokeWidth: 1.5,
  width: 5,
  offset: 0,
  isAnimationActive: true,
  animationBegin: 0,
  animationDuration: 400,
  animationEasing: 'ease-in-out'
};
function ErrorBarInternal(props) {
  var realDirection = useErrorBarDirection(props.direction);
  var {
    width,
    isAnimationActive,
    animationBegin,
    animationDuration,
    animationEasing
  } = resolveDefaultProps(props, errorBarDefaultProps);
  return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, /*#__PURE__*/reactExports.createElement(ReportErrorBarSettings, {
    dataKey: props.dataKey,
    direction: realDirection
  }), /*#__PURE__*/reactExports.createElement(ErrorBarImpl, _extends$b({}, props, {
    direction: realDirection,
    width: width,
    isAnimationActive: isAnimationActive,
    animationBegin: animationBegin,
    animationDuration: animationDuration,
    animationEasing: animationEasing
  })));
}

// eslint-disable-next-line react/prefer-stateless-function
class ErrorBar extends reactExports.Component {
  render() {
    return /*#__PURE__*/reactExports.createElement(ErrorBarInternal, this.props);
  }
}
_defineProperty$d(ErrorBar, "defaultProps", errorBarDefaultProps);
_defineProperty$d(ErrorBar, "displayName", 'ErrorBar');

var prefix = "Invariant failed";
function invariant(condition, message) {
  {
    throw new Error(prefix);
  }
}

var _excluded$b = ["x", "y"];
function _extends$a() {
  return _extends$a = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends$a.apply(null, arguments);
}
function ownKeys$9(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread$9(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys$9(Object(t), true).forEach(function(r2) {
      _defineProperty$c(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$9(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function _defineProperty$c(e, r, t) {
  return (r = _toPropertyKey$c(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey$c(t) {
  var i = _toPrimitive$c(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive$c(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r);
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _objectWithoutProperties$b(e, t) {
  if (null == e) return {};
  var o, r, i = _objectWithoutPropertiesLoose$b(e, t);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
  }
  return i;
}
function _objectWithoutPropertiesLoose$b(r, e) {
  if (null == r) return {};
  var t = {};
  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
    if (-1 !== e.indexOf(n)) continue;
    t[n] = r[n];
  }
  return t;
}
function typeguardBarRectangleProps(_ref, props) {
  var {
    x: xProp,
    y: yProp
  } = _ref, option = _objectWithoutProperties$b(_ref, _excluded$b);
  var xValue = "".concat(xProp);
  var x = parseInt(xValue, 10);
  var yValue = "".concat(yProp);
  var y = parseInt(yValue, 10);
  var heightValue = "".concat(props.height || option.height);
  var height = parseInt(heightValue, 10);
  var widthValue = "".concat(props.width || option.width);
  var width = parseInt(widthValue, 10);
  return _objectSpread$9(_objectSpread$9(_objectSpread$9(_objectSpread$9(_objectSpread$9({}, props), option), x ? {
    x
  } : {}), y ? {
    y
  } : {}), {}, {
    height,
    width,
    name: props.name,
    radius: props.radius
  });
}
function BarRectangle(props) {
  return /* @__PURE__ */ reactExports.createElement(Shape, _extends$a({
    shapeType: "rectangle",
    propTransformer: typeguardBarRectangleProps,
    activeClassName: "recharts-active-bar"
  }, props));
}
var minPointSizeCallback = function minPointSizeCallback2(minPointSize) {
  var defaultValue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  return (value, index) => {
    if (isNumber(minPointSize)) return minPointSize;
    var isValueNumberOrNil = isNumber(value) || isNullish(value);
    if (isValueNumberOrNil) {
      return minPointSize(value, index);
    }
    !isValueNumberOrNil ? invariant() : void 0;
    return defaultValue;
  };
};

function useNeedsClip(xAxisId, yAxisId) {
  var _xAxis$allowDataOverf, _yAxis$allowDataOverf;
  var xAxis = useAppSelector(state => selectXAxisSettings(state, xAxisId));
  var yAxis = useAppSelector(state => selectYAxisSettings(state, yAxisId));
  var needClipX = (_xAxis$allowDataOverf = xAxis === null || xAxis === void 0 ? void 0 : xAxis.allowDataOverflow) !== null && _xAxis$allowDataOverf !== void 0 ? _xAxis$allowDataOverf : implicitXAxis.allowDataOverflow;
  var needClipY = (_yAxis$allowDataOverf = yAxis === null || yAxis === void 0 ? void 0 : yAxis.allowDataOverflow) !== null && _yAxis$allowDataOverf !== void 0 ? _yAxis$allowDataOverf : implicitYAxis.allowDataOverflow;
  var needClip = needClipX || needClipY;
  return {
    needClip,
    needClipX,
    needClipY
  };
}
function GraphicalItemClipPath(_ref) {
  var {
    xAxisId,
    yAxisId,
    clipPathId
  } = _ref;
  var plotArea = usePlotArea();
  var {
    needClipX,
    needClipY,
    needClip
  } = useNeedsClip(xAxisId, yAxisId);
  if (!needClip) {
    return null;
  }
  var {
    x,
    y,
    width,
    height
  } = plotArea;
  return /*#__PURE__*/reactExports.createElement("clipPath", {
    id: "clipPath-".concat(clipPathId)
  }, /*#__PURE__*/reactExports.createElement("rect", {
    x: needClipX ? x : x - width / 2,
    y: needClipY ? y : y - height / 2,
    width: needClipX ? width : width * 2,
    height: needClipY ? height : height * 2
  }));
}

var _excluded$a = ["onMouseEnter", "onMouseLeave", "onClick"],
  _excluded2$5 = ["value", "background", "tooltipPosition"],
  _excluded3$1 = ["onMouseEnter", "onClick", "onMouseLeave"];
function _extends$9() { return _extends$9 = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$9.apply(null, arguments); }
function ownKeys$8(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$8(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$8(Object(t), true).forEach(function (r) { _defineProperty$b(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$8(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$b(e, r, t) { return (r = _toPropertyKey$b(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$b(t) { var i = _toPrimitive$b(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$b(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties$a(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$a(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$a(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
var computeLegendPayloadFromBarData = props => {
  var {
    dataKey,
    name,
    fill,
    legendType,
    hide
  } = props;
  return [{
    inactive: hide,
    dataKey,
    type: legendType,
    color: fill,
    value: getTooltipNameProp(name, dataKey),
    payload: props
  }];
};
function getTooltipEntrySettings$2(props) {
  var {
    dataKey,
    stroke,
    strokeWidth,
    fill,
    name,
    hide,
    unit
  } = props;
  return {
    dataDefinedOnItem: undefined,
    positions: undefined,
    settings: {
      stroke,
      strokeWidth,
      fill,
      dataKey,
      nameKey: undefined,
      name: getTooltipNameProp(name, dataKey),
      hide,
      type: props.tooltipType,
      color: props.fill,
      unit
    }
  };
}
function BarBackground(props) {
  var activeIndex = useAppSelector(selectActiveTooltipIndex);
  var {
    data,
    dataKey,
    background: backgroundFromProps,
    allOtherBarProps
  } = props;
  var {
      onMouseEnter: onMouseEnterFromProps,
      onMouseLeave: onMouseLeaveFromProps,
      onClick: onItemClickFromProps
    } = allOtherBarProps,
    restOfAllOtherProps = _objectWithoutProperties$a(allOtherBarProps, _excluded$a);
  var onMouseEnterFromContext = useMouseEnterItemDispatch(onMouseEnterFromProps, dataKey);
  var onMouseLeaveFromContext = useMouseLeaveItemDispatch(onMouseLeaveFromProps);
  var onClickFromContext = useMouseClickItemDispatch(onItemClickFromProps, dataKey);
  if (!backgroundFromProps || data == null) {
    return null;
  }
  var backgroundProps = filterProps(backgroundFromProps, false);
  return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, data.map((entry, i) => {
    var {
        value,
        background: backgroundFromDataEntry,
        tooltipPosition
      } = entry,
      rest = _objectWithoutProperties$a(entry, _excluded2$5);
    if (!backgroundFromDataEntry) {
      return null;
    }

    // @ts-expect-error BarRectangleItem type definition says it's missing properties, but I can see them present in debugger!
    var onMouseEnter = onMouseEnterFromContext(entry, i);
    // @ts-expect-error BarRectangleItem type definition says it's missing properties, but I can see them present in debugger!
    var onMouseLeave = onMouseLeaveFromContext(entry, i);
    // @ts-expect-error BarRectangleItem type definition says it's missing properties, but I can see them present in debugger!
    var onClick = onClickFromContext(entry, i);
    var barRectangleProps = _objectSpread$8(_objectSpread$8(_objectSpread$8(_objectSpread$8(_objectSpread$8({
      option: backgroundFromProps,
      isActive: String(i) === activeIndex
    }, rest), {}, {
      // @ts-expect-error BarRectangle props do not accept `fill` property.
      fill: '#eee'
    }, backgroundFromDataEntry), backgroundProps), adaptEventsOfChild(restOfAllOtherProps, entry, i)), {}, {
      onMouseEnter,
      onMouseLeave,
      onClick,
      dataKey,
      index: i,
      className: 'recharts-bar-background-rectangle'
    });
    return /*#__PURE__*/reactExports.createElement(BarRectangle, _extends$9({
      key: "background-bar-".concat(i)
    }, barRectangleProps));
  }));
}
function BarRectangles(_ref) {
  var {
    data,
    props,
    showLabels
  } = _ref;
  var baseProps = filterProps(props, false);
  var {
    shape,
    dataKey,
    activeBar
  } = props;
  var activeIndex = useAppSelector(selectActiveTooltipIndex);
  var activeDataKey = useAppSelector(selectActiveTooltipDataKey);
  var {
      onMouseEnter: onMouseEnterFromProps,
      onClick: onItemClickFromProps,
      onMouseLeave: onMouseLeaveFromProps
    } = props,
    restOfAllOtherProps = _objectWithoutProperties$a(props, _excluded3$1);
  var onMouseEnterFromContext = useMouseEnterItemDispatch(onMouseEnterFromProps, dataKey);
  var onMouseLeaveFromContext = useMouseLeaveItemDispatch(onMouseLeaveFromProps);
  var onClickFromContext = useMouseClickItemDispatch(onItemClickFromProps, dataKey);
  if (!data) {
    return null;
  }
  return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, data.map((entry, i) => {
    /*
     * Bars support stacking, meaning that there can be multiple bars at the same x value.
     * With Tooltip shared=false we only want to highlight the currently active Bar, not all.
     *
     * Also, if the tooltip is shared, we want to highlight all bars at the same x value
     * regardless of the dataKey.
     *
     * With shared Tooltip, the activeDataKey is undefined.
     */
    var isActive = activeBar && String(i) === activeIndex && (activeDataKey == null || dataKey === activeDataKey);
    var option = isActive ? activeBar : shape;
    var barRectangleProps = _objectSpread$8(_objectSpread$8(_objectSpread$8({}, baseProps), entry), {}, {
      isActive,
      option,
      index: i,
      dataKey
    });
    return /*#__PURE__*/reactExports.createElement(Layer, _extends$9({
      className: "recharts-bar-rectangle"
    }, adaptEventsOfChild(restOfAllOtherProps, entry, i), {
      // @ts-expect-error BarRectangleItem type definition says it's missing properties, but I can see them present in debugger!
      onMouseEnter: onMouseEnterFromContext(entry, i)
      // @ts-expect-error BarRectangleItem type definition says it's missing properties, but I can see them present in debugger!
      ,
      onMouseLeave: onMouseLeaveFromContext(entry, i)
      // @ts-expect-error BarRectangleItem type definition says it's missing properties, but I can see them present in debugger!
      ,
      onClick: onClickFromContext(entry, i)
      // https://github.com/recharts/recharts/issues/5415
      // eslint-disable-next-line react/no-array-index-key
      ,
      key: "rectangle-".concat(entry === null || entry === void 0 ? void 0 : entry.x, "-").concat(entry === null || entry === void 0 ? void 0 : entry.y, "-").concat(entry === null || entry === void 0 ? void 0 : entry.value, "-").concat(i)
    }), /*#__PURE__*/reactExports.createElement(BarRectangle, barRectangleProps));
  }), showLabels && LabelList.renderCallByParent(props, data));
}
function RectanglesWithAnimation(_ref2) {
  var {
    props,
    previousRectanglesRef
  } = _ref2;
  var {
    data,
    layout,
    isAnimationActive,
    animationBegin,
    animationDuration,
    animationEasing,
    onAnimationEnd,
    onAnimationStart
  } = props;
  var prevData = previousRectanglesRef.current;
  var animationId = useAnimationId(props, 'recharts-bar-');
  var [isAnimating, setIsAnimating] = reactExports.useState(false);
  var handleAnimationEnd = reactExports.useCallback(() => {
    if (typeof onAnimationEnd === 'function') {
      onAnimationEnd();
    }
    setIsAnimating(false);
  }, [onAnimationEnd]);
  var handleAnimationStart = reactExports.useCallback(() => {
    if (typeof onAnimationStart === 'function') {
      onAnimationStart();
    }
    setIsAnimating(true);
  }, [onAnimationStart]);
  return /*#__PURE__*/reactExports.createElement(Animate, {
    begin: animationBegin,
    duration: animationDuration,
    isActive: isAnimationActive,
    easing: animationEasing,
    from: {
      t: 0
    },
    to: {
      t: 1
    },
    onAnimationEnd: handleAnimationEnd,
    onAnimationStart: handleAnimationStart,
    key: animationId
  }, _ref3 => {
    var {
      t
    } = _ref3;
    var stepData = t === 1 ? data : data.map((entry, index) => {
      var prev = prevData && prevData[index];
      if (prev) {
        var interpolatorX = interpolateNumber$1(prev.x, entry.x);
        var interpolatorY = interpolateNumber$1(prev.y, entry.y);
        var interpolatorWidth = interpolateNumber$1(prev.width, entry.width);
        var interpolatorHeight = interpolateNumber$1(prev.height, entry.height);
        return _objectSpread$8(_objectSpread$8({}, entry), {}, {
          x: interpolatorX(t),
          y: interpolatorY(t),
          width: interpolatorWidth(t),
          height: interpolatorHeight(t)
        });
      }
      if (layout === 'horizontal') {
        var _interpolatorHeight = interpolateNumber$1(0, entry.height);
        var h = _interpolatorHeight(t);
        return _objectSpread$8(_objectSpread$8({}, entry), {}, {
          y: entry.y + entry.height - h,
          height: h
        });
      }
      var interpolator = interpolateNumber$1(0, entry.width);
      var w = interpolator(t);
      return _objectSpread$8(_objectSpread$8({}, entry), {}, {
        width: w
      });
    });
    if (t > 0) {
      // eslint-disable-next-line no-param-reassign
      previousRectanglesRef.current = stepData;
    }
    return /*#__PURE__*/reactExports.createElement(Layer, null, /*#__PURE__*/reactExports.createElement(BarRectangles, {
      props: props,
      data: stepData,
      showLabels: !isAnimating
    }));
  });
}
function RenderRectangles(props) {
  var {
    data,
    isAnimationActive
  } = props;
  var previousRectanglesRef = reactExports.useRef(null);
  if (isAnimationActive && data && data.length && (previousRectanglesRef.current == null || previousRectanglesRef.current !== data)) {
    return /*#__PURE__*/reactExports.createElement(RectanglesWithAnimation, {
      previousRectanglesRef: previousRectanglesRef,
      props: props
    });
  }
  return /*#__PURE__*/reactExports.createElement(BarRectangles, {
    props: props,
    data: data,
    showLabels: true
  });
}
var defaultMinPointSize = 0;
var errorBarDataPointFormatter$1 = (dataPoint, dataKey) => {
  /**
   * if the value coming from `selectBarRectangles` is an array then this is a stacked bar chart.
   * arr[1] represents end value of the bar since the data is in the form of [startValue, endValue].
   * */
  var value = Array.isArray(dataPoint.value) ? dataPoint.value[1] : dataPoint.value;
  return {
    x: dataPoint.x,
    y: dataPoint.y,
    value,
    // @ts-expect-error getValueByDataKey does not validate the output type
    errorVal: getValueByDataKey(dataPoint, dataKey)
  };
};
class BarWithState extends reactExports.PureComponent {
  constructor() {
    super(...arguments);
    _defineProperty$b(this, "id", uniqueId('recharts-bar-'));
  }
  render() {
    var {
      hide,
      data,
      dataKey,
      className,
      xAxisId,
      yAxisId,
      needClip,
      background,
      id,
      layout
    } = this.props;
    if (hide) {
      return null;
    }
    var layerClass = clsx('recharts-bar', className);
    var clipPathId = isNullish(id) ? this.id : id;
    return /*#__PURE__*/reactExports.createElement(Layer, {
      className: layerClass
    }, needClip && /*#__PURE__*/reactExports.createElement("defs", null, /*#__PURE__*/reactExports.createElement(GraphicalItemClipPath, {
      clipPathId: clipPathId,
      xAxisId: xAxisId,
      yAxisId: yAxisId
    })), /*#__PURE__*/reactExports.createElement(Layer, {
      className: "recharts-bar-rectangles",
      clipPath: needClip ? "url(#clipPath-".concat(clipPathId, ")") : null
    }, /*#__PURE__*/reactExports.createElement(BarBackground, {
      data: data,
      dataKey: dataKey,
      background: background,
      allOtherBarProps: this.props
    }), /*#__PURE__*/reactExports.createElement(RenderRectangles, this.props)), /*#__PURE__*/reactExports.createElement(SetErrorBarPreferredDirection, {
      direction: layout === 'horizontal' ? 'y' : 'x'
    }, this.props.children));
  }
}
var defaultBarProps = {
  activeBar: false,
  animationBegin: 0,
  animationDuration: 400,
  animationEasing: 'ease',
  hide: false,
  isAnimationActive: !Global.isSsr,
  legendType: 'rect',
  minPointSize: defaultMinPointSize,
  xAxisId: 0,
  yAxisId: 0
};
function BarImpl(props) {
  var {
    xAxisId,
    yAxisId,
    hide,
    legendType,
    minPointSize,
    activeBar,
    animationBegin,
    animationDuration,
    animationEasing,
    isAnimationActive
  } = resolveDefaultProps(props, defaultBarProps);
  var {
    needClip
  } = useNeedsClip(xAxisId, yAxisId);
  var layout = useChartLayout();
  var isPanorama = useIsPanorama();
  var barSettings = reactExports.useMemo(() => ({
    barSize: props.barSize,
    data: undefined,
    dataKey: props.dataKey,
    maxBarSize: props.maxBarSize,
    minPointSize,
    stackId: getNormalizedStackId(props.stackId)
  }), [props.barSize, props.dataKey, props.maxBarSize, minPointSize, props.stackId]);
  var cells = findAllByType(props.children, Cell);
  var rects = useAppSelector(state => selectBarRectangles(state, xAxisId, yAxisId, isPanorama, barSettings, cells));
  if (layout !== 'vertical' && layout !== 'horizontal') {
    return null;
  }
  var errorBarOffset;
  var firstDataPoint = rects === null || rects === void 0 ? void 0 : rects[0];
  if (firstDataPoint == null || firstDataPoint.height == null || firstDataPoint.width == null) {
    errorBarOffset = 0;
  } else {
    errorBarOffset = layout === 'vertical' ? firstDataPoint.height / 2 : firstDataPoint.width / 2;
  }
  return /*#__PURE__*/reactExports.createElement(SetErrorBarContext, {
    xAxisId: xAxisId,
    yAxisId: yAxisId,
    data: rects,
    dataPointFormatter: errorBarDataPointFormatter$1,
    errorBarOffset: errorBarOffset
  }, /*#__PURE__*/reactExports.createElement(BarWithState, _extends$9({}, props, {
    layout: layout,
    needClip: needClip,
    data: rects,
    xAxisId: xAxisId,
    yAxisId: yAxisId,
    hide: hide,
    legendType: legendType,
    minPointSize: minPointSize,
    activeBar: activeBar,
    animationBegin: animationBegin,
    animationDuration: animationDuration,
    animationEasing: animationEasing,
    isAnimationActive: isAnimationActive
  })));
}
function computeBarRectangles(_ref4) {
  var {
    layout,
    barSettings: {
      dataKey,
      minPointSize: minPointSizeProp
    },
    pos,
    bandSize,
    xAxis,
    yAxis,
    xAxisTicks,
    yAxisTicks,
    stackedData,
    displayedData,
    offset,
    cells
  } = _ref4;
  var numericAxis = layout === 'horizontal' ? yAxis : xAxis;
  // @ts-expect-error this assumes that the domain is always numeric, but doesn't check for it
  var stackedDomain = stackedData ? numericAxis.scale.domain() : null;
  var baseValue = getBaseValueOfBar({
    numericAxis
  });
  return displayedData.map((entry, index) => {
    var value, x, y, width, height, background;
    if (stackedData) {
      // we don't need to use dataStartIndex here, because stackedData is already sliced from the selector
      value = truncateByDomain(stackedData[index], stackedDomain);
    } else {
      value = getValueByDataKey(entry, dataKey);
      if (!Array.isArray(value)) {
        value = [baseValue, value];
      }
    }
    var minPointSize = minPointSizeCallback(minPointSizeProp, defaultMinPointSize)(value[1], index);
    if (layout === 'horizontal') {
      var _ref5;
      var [baseValueScale, currentValueScale] = [yAxis.scale(value[0]), yAxis.scale(value[1])];
      x = getCateCoordinateOfBar({
        axis: xAxis,
        ticks: xAxisTicks,
        bandSize,
        offset: pos.offset,
        entry,
        index
      });
      y = (_ref5 = currentValueScale !== null && currentValueScale !== void 0 ? currentValueScale : baseValueScale) !== null && _ref5 !== void 0 ? _ref5 : undefined;
      width = pos.size;
      var computedHeight = baseValueScale - currentValueScale;
      height = isNan(computedHeight) ? 0 : computedHeight;
      background = {
        x,
        y: offset.top,
        width,
        height: offset.height
      };
      if (Math.abs(minPointSize) > 0 && Math.abs(height) < Math.abs(minPointSize)) {
        var delta = mathSign(height || minPointSize) * (Math.abs(minPointSize) - Math.abs(height));
        y -= delta;
        height += delta;
      }
    } else {
      var [_baseValueScale, _currentValueScale] = [xAxis.scale(value[0]), xAxis.scale(value[1])];
      x = _baseValueScale;
      y = getCateCoordinateOfBar({
        axis: yAxis,
        ticks: yAxisTicks,
        bandSize,
        offset: pos.offset,
        entry,
        index
      });
      width = _currentValueScale - _baseValueScale;
      height = pos.size;
      background = {
        x: offset.left,
        y,
        width: offset.width,
        height
      };
      if (Math.abs(minPointSize) > 0 && Math.abs(width) < Math.abs(minPointSize)) {
        var _delta = mathSign(width || minPointSize) * (Math.abs(minPointSize) - Math.abs(width));
        width += _delta;
      }
    }
    var barRectangleItem = _objectSpread$8(_objectSpread$8({}, entry), {}, {
      x,
      y,
      width,
      height,
      value: stackedData ? value : value[1],
      payload: entry,
      background,
      tooltipPosition: {
        x: x + width / 2,
        y: y + height / 2
      }
    }, cells && cells[index] && cells[index].props);
    return barRectangleItem;
  });
}
class Bar extends reactExports.PureComponent {
  render() {
    // Report all props to Redux store first, before calling any hooks, to avoid circular dependencies.
    return /*#__PURE__*/reactExports.createElement(CartesianGraphicalItemContext, {
      type: "bar"
      // Bar does not allow setting data directly on the graphical item (why?)
      ,
      data: null,
      xAxisId: this.props.xAxisId,
      yAxisId: this.props.yAxisId,
      zAxisId: 0,
      dataKey: this.props.dataKey,
      stackId: this.props.stackId,
      hide: this.props.hide,
      barSize: this.props.barSize
    }, /*#__PURE__*/reactExports.createElement(ReportBar, null), /*#__PURE__*/reactExports.createElement(SetLegendPayload, {
      legendPayload: computeLegendPayloadFromBarData(this.props)
    }), /*#__PURE__*/reactExports.createElement(SetTooltipEntrySettings, {
      fn: getTooltipEntrySettings$2,
      args: this.props
    }), /*#__PURE__*/reactExports.createElement(BarImpl, this.props));
  }
}
_defineProperty$b(Bar, "displayName", 'Bar');
_defineProperty$b(Bar, "defaultProps", defaultBarProps);

function ownKeys$7(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$7(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$7(Object(t), true).forEach(function (r) { _defineProperty$a(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$7(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$a(e, r, t) { return (r = _toPropertyKey$a(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$a(t) { var i = _toPrimitive$a(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$a(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var pickXAxisId = (_state, xAxisId) => xAxisId;
var pickYAxisId = (_state, _xAxisId, yAxisId) => yAxisId;
var pickIsPanorama = (_state, _xAxisId, _yAxisId, isPanorama) => isPanorama;
var pickBarSettings = (_state, _xAxisId, _yAxisId, _isPanorama, barSettings) => barSettings;
var pickMaxBarSize = (_state, _xAxisId, _yAxisId, _isPanorama, barSettings) => barSettings.maxBarSize;
var pickCells = (_state, _xAxisId, _yAxisId, _isPanorama, _barSettings, cells) => cells;
var getBarSize = (globalSize, totalSize, selfSize) => {
  var barSize = selfSize !== null && selfSize !== void 0 ? selfSize : globalSize;
  if (isNullish(barSize)) {
    return undefined;
  }
  return getPercentValue(barSize, totalSize, 0);
};
var selectAllVisibleBars = createSelector([selectChartLayout, selectUnfilteredCartesianItems, pickXAxisId, pickYAxisId, pickIsPanorama], (layout, allItems, xAxisId, yAxisId, isPanorama) => allItems.filter(i => {
  if (layout === 'horizontal') {
    return i.xAxisId === xAxisId;
  }
  return i.yAxisId === yAxisId;
}).filter(i => i.isPanorama === isPanorama).filter(i => i.hide === false).filter(i => i.type === 'bar'));
var selectBarStackGroups = (state, xAxisId, yAxisId, isPanorama) => {
  var layout = selectChartLayout(state);
  if (layout === 'horizontal') {
    return selectStackGroups(state, 'yAxis', yAxisId, isPanorama);
  }
  return selectStackGroups(state, 'xAxis', xAxisId, isPanorama);
};
var selectBarCartesianAxisSize = (state, xAxisId, yAxisId) => {
  var layout = selectChartLayout(state);
  if (layout === 'horizontal') {
    return selectCartesianAxisSize(state, 'xAxis', xAxisId);
  }
  return selectCartesianAxisSize(state, 'yAxis', yAxisId);
};

/**
 * Some graphical items allow data stacking. The stacks are optional,
 * so all props here are optional too.
 */

/**
 * Some graphical items allow data stacking.
 * This interface is used to represent the items that are stacked
 * because the user has provided the stackId and dataKey properties.
 */

function isStacked(graphicalItem) {
  return graphicalItem.stackId != null && graphicalItem.dataKey != null;
}
var combineBarSizeList = (allBars, globalSize, totalSize) => {
  var initialValue = {};
  var stackedBars = allBars.filter(isStacked);
  var unstackedBars = allBars.filter(b => b.stackId == null);
  var groupByStack = stackedBars.reduce((acc, bar) => {
    if (!acc[bar.stackId]) {
      acc[bar.stackId] = [];
    }
    acc[bar.stackId].push(bar);
    return acc;
  }, initialValue);
  var stackedSizeList = Object.entries(groupByStack).map(_ref => {
    var [stackId, bars] = _ref;
    var dataKeys = bars.map(b => b.dataKey);
    var barSize = getBarSize(globalSize, totalSize, bars[0].barSize);
    return {
      stackId,
      dataKeys,
      barSize
    };
  });
  var unstackedSizeList = unstackedBars.map(b => {
    var dataKeys = [b.dataKey].filter(dk => dk != null);
    var barSize = getBarSize(globalSize, totalSize, b.barSize);
    return {
      stackId: undefined,
      dataKeys,
      barSize
    };
  });
  return [...stackedSizeList, ...unstackedSizeList];
};
var selectBarSizeList = createSelector([selectAllVisibleBars, selectRootBarSize, selectBarCartesianAxisSize], combineBarSizeList);
var selectBarBandSize = (state, xAxisId, yAxisId, isPanorama, barSettings) => {
  var _ref2, _getBandSizeOfAxis;
  var layout = selectChartLayout(state);
  var globalMaxBarSize = selectRootMaxBarSize(state);
  var {
    maxBarSize: childMaxBarSize
  } = barSettings;
  var maxBarSize = isNullish(childMaxBarSize) ? globalMaxBarSize : childMaxBarSize;
  var axis, ticks;
  if (layout === 'horizontal') {
    axis = selectAxisWithScale(state, 'xAxis', xAxisId, isPanorama);
    ticks = selectTicksOfGraphicalItem(state, 'xAxis', xAxisId, isPanorama);
  } else {
    axis = selectAxisWithScale(state, 'yAxis', yAxisId, isPanorama);
    ticks = selectTicksOfGraphicalItem(state, 'yAxis', yAxisId, isPanorama);
  }
  return (_ref2 = (_getBandSizeOfAxis = getBandSizeOfAxis(axis, ticks, true)) !== null && _getBandSizeOfAxis !== void 0 ? _getBandSizeOfAxis : maxBarSize) !== null && _ref2 !== void 0 ? _ref2 : 0;
};
var selectAxisBandSize = (state, xAxisId, yAxisId, isPanorama) => {
  var layout = selectChartLayout(state);
  var axis, ticks;
  if (layout === 'horizontal') {
    axis = selectAxisWithScale(state, 'xAxis', xAxisId, isPanorama);
    ticks = selectTicksOfGraphicalItem(state, 'xAxis', xAxisId, isPanorama);
  } else {
    axis = selectAxisWithScale(state, 'yAxis', yAxisId, isPanorama);
    ticks = selectTicksOfGraphicalItem(state, 'yAxis', yAxisId, isPanorama);
  }
  return getBandSizeOfAxis(axis, ticks);
};
function getBarPositions(barGap, barCategoryGap, bandSize, sizeList, maxBarSize) {
  var len = sizeList.length;
  if (len < 1) {
    return undefined;
  }
  var realBarGap = getPercentValue(barGap, bandSize, 0, true);
  var result;
  var initialValue = [];

  // whether is barSize set by user
  // Okay but why does it check only for the first element? What if the first element is set but others are not?
  if (isWellBehavedNumber(sizeList[0].barSize)) {
    var useFull = false;
    var fullBarSize = bandSize / len;
    var sum = sizeList.reduce((res, entry) => res + (entry.barSize || 0), 0);
    sum += (len - 1) * realBarGap;
    if (sum >= bandSize) {
      sum -= (len - 1) * realBarGap;
      realBarGap = 0;
    }
    if (sum >= bandSize && fullBarSize > 0) {
      useFull = true;
      fullBarSize *= 0.9;
      sum = len * fullBarSize;
    }
    var offset = (bandSize - sum) / 2 >> 0;
    var prev = {
      offset: offset - realBarGap,
      size: 0
    };
    result = sizeList.reduce((res, entry) => {
      var _entry$barSize;
      var newPosition = {
        stackId: entry.stackId,
        dataKeys: entry.dataKeys,
        position: {
          offset: prev.offset + prev.size + realBarGap,
          size: useFull ? fullBarSize : (_entry$barSize = entry.barSize) !== null && _entry$barSize !== void 0 ? _entry$barSize : 0
        }
      };
      var newRes = [...res, newPosition];
      prev = newRes[newRes.length - 1].position;
      return newRes;
    }, initialValue);
  } else {
    var _offset = getPercentValue(barCategoryGap, bandSize, 0, true);
    if (bandSize - 2 * _offset - (len - 1) * realBarGap <= 0) {
      realBarGap = 0;
    }
    var originalSize = (bandSize - 2 * _offset - (len - 1) * realBarGap) / len;
    if (originalSize > 1) {
      originalSize >>= 0;
    }
    var size = isWellBehavedNumber(maxBarSize) ? Math.min(originalSize, maxBarSize) : originalSize;
    result = sizeList.reduce((res, entry, i) => [...res, {
      stackId: entry.stackId,
      dataKeys: entry.dataKeys,
      position: {
        offset: _offset + (originalSize + realBarGap) * i + (originalSize - size) / 2,
        size
      }
    }], initialValue);
  }
  return result;
}
var combineAllBarPositions = (sizeList, globalMaxBarSize, barGap, barCategoryGap, barBandSize, bandSize, childMaxBarSize) => {
  var maxBarSize = isNullish(childMaxBarSize) ? globalMaxBarSize : childMaxBarSize;
  var allBarPositions = getBarPositions(barGap, barCategoryGap, barBandSize !== bandSize ? barBandSize : bandSize, sizeList, maxBarSize);
  if (barBandSize !== bandSize && allBarPositions != null) {
    allBarPositions = allBarPositions.map(pos => _objectSpread$7(_objectSpread$7({}, pos), {}, {
      position: _objectSpread$7(_objectSpread$7({}, pos.position), {}, {
        offset: pos.position.offset - barBandSize / 2
      })
    }));
  }
  return allBarPositions;
};
var selectAllBarPositions = createSelector([selectBarSizeList, selectRootMaxBarSize, selectBarGap, selectBarCategoryGap, selectBarBandSize, selectAxisBandSize, pickMaxBarSize], combineAllBarPositions);
var selectXAxisWithScale$2 = (state, xAxisId, _yAxisId, isPanorama) => selectAxisWithScale(state, 'xAxis', xAxisId, isPanorama);
var selectYAxisWithScale$2 = (state, _xAxisId, yAxisId, isPanorama) => selectAxisWithScale(state, 'yAxis', yAxisId, isPanorama);
var selectXAxisTicks$2 = (state, xAxisId, _yAxisId, isPanorama) => selectTicksOfGraphicalItem(state, 'xAxis', xAxisId, isPanorama);
var selectYAxisTicks$2 = (state, _xAxisId, yAxisId, isPanorama) => selectTicksOfGraphicalItem(state, 'yAxis', yAxisId, isPanorama);
var selectBarPosition = createSelector([selectAllBarPositions, pickBarSettings], (allBarPositions, barSettings) => {
  if (allBarPositions == null) {
    return undefined;
  }
  var position = allBarPositions.find(p => p.stackId === barSettings.stackId && p.dataKeys.includes(barSettings.dataKey));
  if (position == null) {
    return undefined;
  }
  return position.position;
});
var combineStackedData = (stackGroups, barSettings) => {
  if (!stackGroups || (barSettings === null || barSettings === void 0 ? void 0 : barSettings.dataKey) == null) {
    return undefined;
  }
  var {
    stackId
  } = barSettings;
  if (stackId == null) {
    return undefined;
  }
  var stackGroup = stackGroups[stackId];
  if (!stackGroup) {
    return undefined;
  }
  var {
    stackedData
  } = stackGroup;
  if (!stackedData) {
    return undefined;
  }
  var stack = stackedData.find(sd => sd.key === barSettings.dataKey);
  return stack;
};
var selectSynchronisedBarSettings = createSelector([selectUnfilteredCartesianItems, pickBarSettings], (graphicalItems, barSettingsFromProps) => {
  if (graphicalItems.some(cgis => cgis.type === 'bar' && barSettingsFromProps.dataKey === cgis.dataKey && barSettingsFromProps.stackId === cgis.stackId &&
  // barSettingsFromProps.data === cgis.data && // bar doesn't support data and one is undefined and another is null and this condition breaks
  barSettingsFromProps.stackId === cgis.stackId)) {
    return barSettingsFromProps;
  }
  return undefined;
});
var selectStackedDataOfItem = createSelector([selectBarStackGroups, pickBarSettings], combineStackedData);
var selectBarRectangles = createSelector([selectChartOffsetInternal, selectXAxisWithScale$2, selectYAxisWithScale$2, selectXAxisTicks$2, selectYAxisTicks$2, selectBarPosition, selectChartLayout, selectChartDataWithIndexesIfNotInPanorama, selectAxisBandSize, selectStackedDataOfItem, selectSynchronisedBarSettings, pickCells], (offset, xAxis, yAxis, xAxisTicks, yAxisTicks, pos, layout, _ref3, bandSize, stackedData, barSettings, cells) => {
  var {
    chartData,
    dataStartIndex,
    dataEndIndex
  } = _ref3;
  if (barSettings == null || pos == null || layout !== 'horizontal' && layout !== 'vertical' || xAxis == null || yAxis == null || xAxisTicks == null || yAxisTicks == null || bandSize == null) {
    return undefined;
  }
  var {
    data
  } = barSettings;
  var displayedData;
  if (data != null && data.length > 0) {
    displayedData = data;
  } else {
    displayedData = chartData === null || chartData === void 0 ? void 0 : chartData.slice(dataStartIndex, dataEndIndex + 1);
  }
  if (displayedData == null) {
    return undefined;
  }
  return computeBarRectangles({
    layout,
    barSettings,
    pos,
    bandSize,
    xAxis,
    yAxis,
    xAxisTicks,
    yAxisTicks,
    stackedData,
    displayedData,
    offset,
    cells
  });
});

var ChartDataContextProvider = props => {
  var {
    chartData
  } = props;
  var dispatch = useAppDispatch();
  var isPanorama = useIsPanorama();
  reactExports.useEffect(() => {
    if (isPanorama) {
      // Panorama mode reuses data from the main chart, so we must not overwrite it here.
      return () => {
        // there is nothing to clean up
      };
    }
    dispatch(setChartData(chartData));
    return () => {
      dispatch(setChartData(undefined));
    };
  }, [chartData, dispatch, isPanorama]);
  return null;
};

/**
 * From all Brush properties, only height has a default value and will always be defined.
 * Other properties are nullable and will be computed from offsets and margins if they are not set.
 */

var initialState$3 = {
  x: 0,
  y: 0,
  width: 0,
  height: 0,
  padding: {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  }
};
var brushSlice = createSlice({
  name: 'brush',
  initialState: initialState$3,
  reducers: {
    setBrushSettings(_state, action) {
      if (action.payload == null) {
        return initialState$3;
      }
      return action.payload;
    }
  }
});
var {
  setBrushSettings
} = brushSlice.actions;
var brushReducer = brushSlice.reducer;

function _defineProperty$9(e, r, t) { return (r = _toPropertyKey$9(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$9(t) { var i = _toPrimitive$9(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$9(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class ScaleHelper {
  static create(obj) {
    return new ScaleHelper(obj);
  }
  constructor(scale) {
    this.scale = scale;
  }
  get domain() {
    return this.scale.domain;
  }
  get range() {
    return this.scale.range;
  }
  get rangeMin() {
    return this.range()[0];
  }
  get rangeMax() {
    return this.range()[1];
  }
  get bandwidth() {
    return this.scale.bandwidth;
  }
  apply(value) {
    var {
      bandAware,
      position
    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (value === undefined) {
      return undefined;
    }
    if (position) {
      switch (position) {
        case 'start':
          {
            return this.scale(value);
          }
        case 'middle':
          {
            var offset = this.bandwidth ? this.bandwidth() / 2 : 0;
            return this.scale(value) + offset;
          }
        case 'end':
          {
            var _offset = this.bandwidth ? this.bandwidth() : 0;
            return this.scale(value) + _offset;
          }
        default:
          {
            return this.scale(value);
          }
      }
    }
    if (bandAware) {
      var _offset2 = this.bandwidth ? this.bandwidth() / 2 : 0;
      return this.scale(value) + _offset2;
    }
    return this.scale(value);
  }
  isInRange(value) {
    var range = this.range();
    var first = range[0];
    var last = range[range.length - 1];
    return first <= last ? value >= first && value <= last : value >= last && value <= first;
  }
}
_defineProperty$9(ScaleHelper, "EPS", 1e-4);

/** Normalizes the angle so that 0 <= angle < 180.
 * @param {number} angle Angle in degrees.
 * @return {number} the normalized angle with a value of at least 0 and never greater or equal to 180. */
function normalizeAngle(angle) {
  return (angle % 180 + 180) % 180;
}

/** Calculates the width of the largest horizontal line that fits inside a rectangle that is displayed at an angle.
 * @param {Object} size Width and height of the text in a horizontal position.
 * @param {number} angle Angle in degrees in which the text is displayed.
 * @return {number} The width of the largest horizontal line that fits inside a rectangle that is displayed at an angle.
 */
var getAngledRectangleWidth = function getAngledRectangleWidth(_ref5) {
  var {
    width,
    height
  } = _ref5;
  var angle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  // Ensure angle is >= 0 && < 180
  var normalizedAngle = normalizeAngle(angle);
  var angleRadians = normalizedAngle * Math.PI / 180;

  /* Depending on the height and width of the rectangle, we may need to use different formulas to calculate the angled
   * width. This threshold defines when each formula should kick in. */
  var angleThreshold = Math.atan(height / width);
  var angledWidth = angleRadians > angleThreshold && angleRadians < Math.PI - angleThreshold ? height / Math.sin(angleRadians) : width / Math.cos(angleRadians);
  return Math.abs(angledWidth);
};

var initialState$2 = {
  dots: [],
  areas: [],
  lines: []
};
var referenceElementsSlice = createSlice({
  name: 'referenceElements',
  initialState: initialState$2,
  reducers: {
    addDot: (state, action) => {
      state.dots.push(action.payload);
    },
    removeDot: (state, action) => {
      var index = current(state).dots.findIndex(dot => dot === action.payload);
      if (index !== -1) {
        state.dots.splice(index, 1);
      }
    },
    addArea: (state, action) => {
      state.areas.push(action.payload);
    },
    removeArea: (state, action) => {
      var index = current(state).areas.findIndex(area => area === action.payload);
      if (index !== -1) {
        state.areas.splice(index, 1);
      }
    },
    addLine: (state, action) => {
      state.lines.push(action.payload);
    },
    removeLine: (state, action) => {
      var index = current(state).lines.findIndex(line => line === action.payload);
      if (index !== -1) {
        state.lines.splice(index, 1);
      }
    }
  }
});
var {
  addDot,
  removeDot,
  addArea,
  removeArea,
  addLine,
  removeLine
} = referenceElementsSlice.actions;
var referenceElementsReducer = referenceElementsSlice.reducer;

var ClipPathIdContext = /*#__PURE__*/reactExports.createContext(undefined);

/**
 * Generates a unique clip path ID for use in SVG elements,
 * and puts it in a context provider.
 *
 * To read the clip path ID, use the `useClipPathId` hook,
 * or render `<ClipPath>` component which will automatically use the ID from this context.
 *
 * @param props children - React children to be wrapped by the provider
 * @returns React Context Provider
 */
var ClipPathProvider = _ref => {
  var {
    children
  } = _ref;
  var [clipPathId] = reactExports.useState("".concat(uniqueId('recharts'), "-clip"));
  var plotArea = usePlotArea();
  if (plotArea == null) {
    return null;
  }
  var {
    x,
    y,
    width,
    height
  } = plotArea;
  return /*#__PURE__*/reactExports.createElement(ClipPathIdContext.Provider, {
    value: clipPathId
  }, /*#__PURE__*/reactExports.createElement("defs", null, /*#__PURE__*/reactExports.createElement("clipPath", {
    id: clipPathId
  }, /*#__PURE__*/reactExports.createElement("rect", {
    x: x,
    y: y,
    height: height,
    width: width
  }))), children);
};

function shallowEqual(a, b) {
  /* eslint-disable no-restricted-syntax */
  for (var key in a) {
    if ({}.hasOwnProperty.call(a, key) && (!{}.hasOwnProperty.call(b, key) || a[key] !== b[key])) {
      return false;
    }
  }
  for (var _key in b) {
    if ({}.hasOwnProperty.call(b, _key) && !{}.hasOwnProperty.call(a, _key)) {
      return false;
    }
  }
  return true;
}

/**
 * Given an array and a number N, return a new array which contains every nTh
 * element of the input array. For n below 1, an empty array is returned.
 * If isValid is provided, all candidates must suffice the condition, else undefined is returned.
 * @param {T[]} array An input array.
 * @param {integer} n A number
 * @param {Function} isValid A function to evaluate a candidate form the array
 * @returns {T[]} The result array of the same type as the input array.
 */
function getEveryNthWithCondition(array, n, isValid) {
  if (n < 1) {
    return [];
  }
  if (n === 1 && isValid === undefined) {
    return array;
  }
  var result = [];
  for (var i = 0; i < array.length; i += n) {
    {
      result.push(array[i]);
    }
  }
  return result;
}

function getAngledTickWidth(contentSize, unitSize, angle) {
  var size = {
    width: contentSize.width + unitSize.width,
    height: contentSize.height + unitSize.height
  };
  return getAngledRectangleWidth(size, angle);
}
function getTickBoundaries(viewBox, sign, sizeKey) {
  var isWidth = sizeKey === 'width';
  var {
    x,
    y,
    width,
    height
  } = viewBox;
  if (sign === 1) {
    return {
      start: isWidth ? x : y,
      end: isWidth ? x + width : y + height
    };
  }
  return {
    start: isWidth ? x + width : y + height,
    end: isWidth ? x : y
  };
}
function isVisible(sign, tickPosition, getSize, start, end) {
  /* Since getSize() is expensive (it reads the ticks' size from the DOM), we do this check first to avoid calculating
   * the tick's size. */
  if (sign * tickPosition < sign * start || sign * tickPosition > sign * end) {
    return false;
  }
  var size = getSize();
  return sign * (tickPosition - sign * size / 2 - start) >= 0 && sign * (tickPosition + sign * size / 2 - end) <= 0;
}
function getNumberIntervalTicks(ticks, interval) {
  return getEveryNthWithCondition(ticks, interval + 1);
}

function getEquidistantTicks(sign, boundaries, getTickSize, ticks, minTickGap) {
  // If the ticks are readonly, then the slice might not be necessary
  var result = (ticks || []).slice();
  var {
    start: initialStart,
    end
  } = boundaries;
  var index = 0;
  // Premature optimisation idea 1: Estimate a lower bound, and start from there.
  // For now, start from every tick
  var stepsize = 1;
  var start = initialStart;
  var _loop = function _loop() {
      // Given stepsize, evaluate whether every stepsize-th tick can be shown.
      // If it can not, then increase the stepsize by 1, and try again.

      var entry = ticks === null || ticks === void 0 ? void 0 : ticks[index];

      // Break condition - If we have evaluated all the ticks, then we are done.
      if (entry === undefined) {
        return {
          v: getEveryNthWithCondition(ticks, stepsize)
        };
      }

      // Check if the element collides with the next element
      var i = index;
      var size;
      var getSize = () => {
        if (size === undefined) {
          size = getTickSize(entry, i);
        }
        return size;
      };
      var tickCoord = entry.coordinate;
      // We will always show the first tick.
      var isShow = index === 0 || isVisible(sign, tickCoord, getSize, start, end);
      if (!isShow) {
        // Start all over with a larger stepsize
        index = 0;
        start = initialStart;
        stepsize += 1;
      }
      if (isShow) {
        // If it can be shown, update the start
        start = tickCoord + sign * (getSize() / 2 + minTickGap);
        index += stepsize;
      }
    },
    _ret;
  while (stepsize <= result.length) {
    _ret = _loop();
    if (_ret) return _ret.v;
  }
  return [];
}

function ownKeys$6(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$6(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$6(Object(t), true).forEach(function (r) { _defineProperty$8(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$6(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$8(e, r, t) { return (r = _toPropertyKey$8(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$8(t) { var i = _toPrimitive$8(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$8(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function getTicksEnd(sign, boundaries, getTickSize, ticks, minTickGap) {
  var result = (ticks || []).slice();
  var len = result.length;
  var {
    start
  } = boundaries;
  var {
    end
  } = boundaries;
  var _loop = function _loop(i) {
    var entry = result[i];
    var size;
    var getSize = () => {
      if (size === undefined) {
        size = getTickSize(entry, i);
      }
      return size;
    };
    if (i === len - 1) {
      var gap = sign * (entry.coordinate + sign * getSize() / 2 - end);
      result[i] = entry = _objectSpread$6(_objectSpread$6({}, entry), {}, {
        tickCoord: gap > 0 ? entry.coordinate - gap * sign : entry.coordinate
      });
    } else {
      result[i] = entry = _objectSpread$6(_objectSpread$6({}, entry), {}, {
        tickCoord: entry.coordinate
      });
    }
    var isShow = isVisible(sign, entry.tickCoord, getSize, start, end);
    if (isShow) {
      end = entry.tickCoord - sign * (getSize() / 2 + minTickGap);
      result[i] = _objectSpread$6(_objectSpread$6({}, entry), {}, {
        isShow: true
      });
    }
  };
  for (var i = len - 1; i >= 0; i--) {
    _loop(i);
  }
  return result;
}
function getTicksStart(sign, boundaries, getTickSize, ticks, minTickGap, preserveEnd) {
  // This method is mutating the array so clone is indeed necessary here
  var result = (ticks || []).slice();
  var len = result.length;
  var {
    start,
    end
  } = boundaries;
  if (preserveEnd) {
    // Try to guarantee the tail to be displayed
    var tail = ticks[len - 1];
    var tailSize = getTickSize(tail, len - 1);
    var tailGap = sign * (tail.coordinate + sign * tailSize / 2 - end);
    result[len - 1] = tail = _objectSpread$6(_objectSpread$6({}, tail), {}, {
      tickCoord: tailGap > 0 ? tail.coordinate - tailGap * sign : tail.coordinate
    });
    var isTailShow = isVisible(sign, tail.tickCoord, () => tailSize, start, end);
    if (isTailShow) {
      end = tail.tickCoord - sign * (tailSize / 2 + minTickGap);
      result[len - 1] = _objectSpread$6(_objectSpread$6({}, tail), {}, {
        isShow: true
      });
    }
  }
  var count = preserveEnd ? len - 1 : len;
  var _loop2 = function _loop2(i) {
    var entry = result[i];
    var size;
    var getSize = () => {
      if (size === undefined) {
        size = getTickSize(entry, i);
      }
      return size;
    };
    if (i === 0) {
      var gap = sign * (entry.coordinate - sign * getSize() / 2 - start);
      result[i] = entry = _objectSpread$6(_objectSpread$6({}, entry), {}, {
        tickCoord: gap < 0 ? entry.coordinate - gap * sign : entry.coordinate
      });
    } else {
      result[i] = entry = _objectSpread$6(_objectSpread$6({}, entry), {}, {
        tickCoord: entry.coordinate
      });
    }
    var isShow = isVisible(sign, entry.tickCoord, getSize, start, end);
    if (isShow) {
      start = entry.tickCoord + sign * (getSize() / 2 + minTickGap);
      result[i] = _objectSpread$6(_objectSpread$6({}, entry), {}, {
        isShow: true
      });
    }
  };
  for (var i = 0; i < count; i++) {
    _loop2(i);
  }
  return result;
}
function getTicks(props, fontSize, letterSpacing) {
  var {
    tick,
    ticks,
    viewBox,
    minTickGap,
    orientation,
    interval,
    tickFormatter,
    unit,
    angle
  } = props;
  if (!ticks || !ticks.length || !tick) {
    return [];
  }
  if (isNumber(interval) || Global.isSsr) {
    var _getNumberIntervalTic;
    return (_getNumberIntervalTic = getNumberIntervalTicks(ticks, isNumber(interval) ? interval : 0)) !== null && _getNumberIntervalTic !== void 0 ? _getNumberIntervalTic : [];
  }
  var candidates = [];
  var sizeKey = orientation === 'top' || orientation === 'bottom' ? 'width' : 'height';
  var unitSize = unit && sizeKey === 'width' ? getStringSize(unit, {
    fontSize,
    letterSpacing
  }) : {
    width: 0,
    height: 0
  };
  var getTickSize = (content, index) => {
    var value = typeof tickFormatter === 'function' ? tickFormatter(content.value, index) : content.value;
    // Recharts only supports angles when sizeKey === 'width'
    return sizeKey === 'width' ? getAngledTickWidth(getStringSize(value, {
      fontSize,
      letterSpacing
    }), unitSize, angle) : getStringSize(value, {
      fontSize,
      letterSpacing
    })[sizeKey];
  };
  var sign = ticks.length >= 2 ? mathSign(ticks[1].coordinate - ticks[0].coordinate) : 1;
  var boundaries = getTickBoundaries(viewBox, sign, sizeKey);
  if (interval === 'equidistantPreserveStart') {
    return getEquidistantTicks(sign, boundaries, getTickSize, ticks, minTickGap);
  }
  if (interval === 'preserveStart' || interval === 'preserveStartEnd') {
    candidates = getTicksStart(sign, boundaries, getTickSize, ticks, minTickGap, interval === 'preserveStartEnd');
  } else {
    candidates = getTicksEnd(sign, boundaries, getTickSize, ticks, minTickGap);
  }
  return candidates.filter(entry => entry.isShow);
}

var _excluded$9 = ["viewBox"],
  _excluded2$4 = ["viewBox"];
function _extends$8() { return _extends$8 = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$8.apply(null, arguments); }
function ownKeys$5(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$5(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$5(Object(t), true).forEach(function (r) { _defineProperty$7(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$5(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _objectWithoutProperties$9(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$9(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$9(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
function _defineProperty$7(e, r, t) { return (r = _toPropertyKey$7(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$7(t) { var i = _toPrimitive$7(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$7(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }

/** The orientation of the axis in correspondence to the chart */

/** A unit to be appended to a value */

/** The formatter function of tick */

/*
 * `viewBox` and `scale` are SVG attributes.
 * Recharts however - unfortunately - has its own attributes named `viewBox` and `scale`
 * that are completely different data shape and different purpose.
 */

class CartesianAxis extends reactExports.Component {
  constructor(props) {
    super(props);
    this.tickRefs = /*#__PURE__*/reactExports.createRef();
    this.tickRefs.current = [];
    this.state = {
      fontSize: '',
      letterSpacing: ''
    };
  }
  shouldComponentUpdate(_ref, nextState) {
    var {
        viewBox
      } = _ref,
      restProps = _objectWithoutProperties$9(_ref, _excluded$9);
    // props.viewBox is sometimes generated every time -
    // check that specially as object equality is likely to fail
    var _this$props = this.props,
      {
        viewBox: viewBoxOld
      } = _this$props,
      restPropsOld = _objectWithoutProperties$9(_this$props, _excluded2$4);
    return !shallowEqual(viewBox, viewBoxOld) || !shallowEqual(restProps, restPropsOld) || !shallowEqual(nextState, this.state);
  }

  /**
   * Calculate the coordinates of endpoints in ticks
   * @param  data The data of a simple tick
   * @return (x1, y1): The coordinate of endpoint close to tick text
   *  (x2, y2): The coordinate of endpoint close to axis
   */
  getTickLineCoord(data) {
    var {
      x,
      y,
      width,
      height,
      orientation,
      tickSize,
      mirror,
      tickMargin
    } = this.props;
    var x1, x2, y1, y2, tx, ty;
    var sign = mirror ? -1 : 1;
    var finalTickSize = data.tickSize || tickSize;
    var tickCoord = isNumber(data.tickCoord) ? data.tickCoord : data.coordinate;
    switch (orientation) {
      case 'top':
        x1 = x2 = data.coordinate;
        y2 = y + +!mirror * height;
        y1 = y2 - sign * finalTickSize;
        ty = y1 - sign * tickMargin;
        tx = tickCoord;
        break;
      case 'left':
        y1 = y2 = data.coordinate;
        x2 = x + +!mirror * width;
        x1 = x2 - sign * finalTickSize;
        tx = x1 - sign * tickMargin;
        ty = tickCoord;
        break;
      case 'right':
        y1 = y2 = data.coordinate;
        x2 = x + +mirror * width;
        x1 = x2 + sign * finalTickSize;
        tx = x1 + sign * tickMargin;
        ty = tickCoord;
        break;
      default:
        x1 = x2 = data.coordinate;
        y2 = y + +mirror * height;
        y1 = y2 + sign * finalTickSize;
        ty = y1 + sign * tickMargin;
        tx = tickCoord;
        break;
    }
    return {
      line: {
        x1,
        y1,
        x2,
        y2
      },
      tick: {
        x: tx,
        y: ty
      }
    };
  }
  getTickTextAnchor() {
    var {
      orientation,
      mirror
    } = this.props;
    var textAnchor;
    switch (orientation) {
      case 'left':
        textAnchor = mirror ? 'start' : 'end';
        break;
      case 'right':
        textAnchor = mirror ? 'end' : 'start';
        break;
      default:
        textAnchor = 'middle';
        break;
    }
    return textAnchor;
  }
  getTickVerticalAnchor() {
    var {
      orientation,
      mirror
    } = this.props;
    switch (orientation) {
      case 'left':
      case 'right':
        return 'middle';
      case 'top':
        return mirror ? 'start' : 'end';
      default:
        return mirror ? 'end' : 'start';
    }
  }
  renderAxisLine() {
    var {
      x,
      y,
      width,
      height,
      orientation,
      mirror,
      axisLine
    } = this.props;
    var props = _objectSpread$5(_objectSpread$5(_objectSpread$5({}, filterProps(this.props, false)), filterProps(axisLine, false)), {}, {
      fill: 'none'
    });
    if (orientation === 'top' || orientation === 'bottom') {
      var needHeight = +(orientation === 'top' && !mirror || orientation === 'bottom' && mirror);
      props = _objectSpread$5(_objectSpread$5({}, props), {}, {
        x1: x,
        y1: y + needHeight * height,
        x2: x + width,
        y2: y + needHeight * height
      });
    } else {
      var needWidth = +(orientation === 'left' && !mirror || orientation === 'right' && mirror);
      props = _objectSpread$5(_objectSpread$5({}, props), {}, {
        x1: x + needWidth * width,
        y1: y,
        x2: x + needWidth * width,
        y2: y + height
      });
    }
    return /*#__PURE__*/reactExports.createElement("line", _extends$8({}, props, {
      className: clsx('recharts-cartesian-axis-line', get$1(axisLine, 'className'))
    }));
  }
  static renderTickItem(option, props, value) {
    var tickItem;
    var combinedClassName = clsx(props.className, 'recharts-cartesian-axis-tick-value');
    if (/*#__PURE__*/reactExports.isValidElement(option)) {
      tickItem = /*#__PURE__*/reactExports.cloneElement(option, _objectSpread$5(_objectSpread$5({}, props), {}, {
        className: combinedClassName
      }));
    } else if (typeof option === 'function') {
      tickItem = option(_objectSpread$5(_objectSpread$5({}, props), {}, {
        className: combinedClassName
      }));
    } else {
      var className = 'recharts-cartesian-axis-tick-value';
      if (typeof option !== 'boolean') {
        className = clsx(className, option.className);
      }
      tickItem = /*#__PURE__*/reactExports.createElement(Text, _extends$8({}, props, {
        className: className
      }), value);
    }
    return tickItem;
  }

  /**
   * render the ticks
   * @param {string} fontSize Fontsize to consider for tick spacing
   * @param {string} letterSpacing Letter spacing to consider for tick spacing
   * @param {Array} ticks The ticks to actually render (overrides what was passed in props)
   * @return {ReactElement | null} renderedTicks
   */
  renderTicks(fontSize, letterSpacing) {
    var ticks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var {
      tickLine,
      stroke,
      tick,
      tickFormatter,
      unit
    } = this.props;
    // @ts-expect-error some properties are optional in props but required in getTicks
    var finalTicks = getTicks(_objectSpread$5(_objectSpread$5({}, this.props), {}, {
      ticks
    }), fontSize, letterSpacing);
    var textAnchor = this.getTickTextAnchor();
    var verticalAnchor = this.getTickVerticalAnchor();
    var axisProps = filterProps(this.props, false);
    var customTickProps = filterProps(tick, false);
    var tickLineProps = _objectSpread$5(_objectSpread$5({}, axisProps), {}, {
      fill: 'none'
    }, filterProps(tickLine, false));
    var items = finalTicks.map((entry, i) => {
      var {
        line: lineCoord,
        tick: tickCoord
      } = this.getTickLineCoord(entry);
      var tickProps = _objectSpread$5(_objectSpread$5(_objectSpread$5(_objectSpread$5({
        textAnchor,
        verticalAnchor
      }, axisProps), {}, {
        stroke: 'none',
        fill: stroke
      }, customTickProps), tickCoord), {}, {
        index: i,
        payload: entry,
        visibleTicksCount: finalTicks.length,
        tickFormatter
      });
      return /*#__PURE__*/reactExports.createElement(Layer, _extends$8({
        className: "recharts-cartesian-axis-tick",
        key: "tick-".concat(entry.value, "-").concat(entry.coordinate, "-").concat(entry.tickCoord)
      }, adaptEventsOfChild(this.props, entry, i)), tickLine && /*#__PURE__*/reactExports.createElement("line", _extends$8({}, tickLineProps, lineCoord, {
        className: clsx('recharts-cartesian-axis-tick-line', get$1(tickLine, 'className'))
      })), tick && CartesianAxis.renderTickItem(tick, tickProps, "".concat(typeof tickFormatter === 'function' ? tickFormatter(entry.value, i) : entry.value).concat(unit || '')));
    });
    return items.length > 0 ? /*#__PURE__*/reactExports.createElement("g", {
      className: "recharts-cartesian-axis-ticks"
    }, items) : null;
  }
  render() {
    var {
      axisLine,
      width,
      height,
      className,
      hide
    } = this.props;
    if (hide) {
      return null;
    }
    var {
      ticks
    } = this.props;

    /*
     * This is different condition from what validateWidthHeight is doing;
     * the CartesianAxis does allow width or height to be undefined.
     */
    if (width != null && width <= 0 || height != null && height <= 0) {
      return null;
    }
    return /*#__PURE__*/reactExports.createElement(Layer, {
      className: clsx('recharts-cartesian-axis', className),
      ref: _ref2 => {
        if (_ref2) {
          var tickNodes = _ref2.getElementsByClassName('recharts-cartesian-axis-tick-value');
          this.tickRefs.current = Array.from(tickNodes);
          var tick = tickNodes[0];
          if (tick) {
            var calculatedFontSize = window.getComputedStyle(tick).fontSize;
            var calculatedLetterSpacing = window.getComputedStyle(tick).letterSpacing;
            if (calculatedFontSize !== this.state.fontSize || calculatedLetterSpacing !== this.state.letterSpacing) {
              this.setState({
                fontSize: window.getComputedStyle(tick).fontSize,
                letterSpacing: window.getComputedStyle(tick).letterSpacing
              });
            }
          }
        }
      }
    }, axisLine && this.renderAxisLine(), this.renderTicks(this.state.fontSize, this.state.letterSpacing, ticks), Label.renderCallByParent(this.props));
  }
}
_defineProperty$7(CartesianAxis, "displayName", 'CartesianAxis');
_defineProperty$7(CartesianAxis, "defaultProps", {
  x: 0,
  y: 0,
  width: 0,
  height: 0,
  viewBox: {
    x: 0,
    y: 0,
    width: 0,
    height: 0
  },
  // The orientation of axis
  orientation: 'bottom',
  // The ticks
  ticks: [],
  stroke: '#666',
  tickLine: true,
  axisLine: true,
  tick: true,
  mirror: false,
  minTickGap: 5,
  // The width or height of tick
  tickSize: 6,
  tickMargin: 2,
  interval: 'preserveEnd'
});

var _excluded$8 = ["x1", "y1", "x2", "y2", "key"],
  _excluded2$3 = ["offset"],
  _excluded3 = ["xAxisId", "yAxisId"],
  _excluded4 = ["xAxisId", "yAxisId"];
function ownKeys$4(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$4(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$4(Object(t), true).forEach(function (r) { _defineProperty$6(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$4(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$6(e, r, t) { return (r = _toPropertyKey$6(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$6(t) { var i = _toPrimitive$6(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$6(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _extends$7() { return _extends$7 = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$7.apply(null, arguments); }
function _objectWithoutProperties$8(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$8(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$8(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }

/**
 * The <CartesianGrid horizontal
 */

var Background = props => {
  var {
    fill
  } = props;
  if (!fill || fill === 'none') {
    return null;
  }
  var {
    fillOpacity,
    x,
    y,
    width,
    height,
    ry
  } = props;
  return /*#__PURE__*/reactExports.createElement("rect", {
    x: x,
    y: y,
    ry: ry,
    width: width,
    height: height,
    stroke: "none",
    fill: fill,
    fillOpacity: fillOpacity,
    className: "recharts-cartesian-grid-bg"
  });
};
function renderLineItem(option, props) {
  var lineItem;
  if (/*#__PURE__*/reactExports.isValidElement(option)) {
    // @ts-expect-error typescript does not see the props type when cloning an element
    lineItem = /*#__PURE__*/reactExports.cloneElement(option, props);
  } else if (typeof option === 'function') {
    lineItem = option(props);
  } else {
    var {
        x1,
        y1,
        x2,
        y2,
        key
      } = props,
      others = _objectWithoutProperties$8(props, _excluded$8);
    var _filterProps = filterProps(others, false),
      {
        offset: __
      } = _filterProps,
      restOfFilteredProps = _objectWithoutProperties$8(_filterProps, _excluded2$3);
    lineItem = /*#__PURE__*/reactExports.createElement("line", _extends$7({}, restOfFilteredProps, {
      x1: x1,
      y1: y1,
      x2: x2,
      y2: y2,
      fill: "none",
      key: key
    }));
  }
  return lineItem;
}
function HorizontalGridLines(props) {
  var {
    x,
    width,
    horizontal = true,
    horizontalPoints
  } = props;
  if (!horizontal || !horizontalPoints || !horizontalPoints.length) {
    return null;
  }
  var {
      xAxisId,
      yAxisId
    } = props,
    otherLineItemProps = _objectWithoutProperties$8(props, _excluded3);
  var items = horizontalPoints.map((entry, i) => {
    var lineItemProps = _objectSpread$4(_objectSpread$4({}, otherLineItemProps), {}, {
      x1: x,
      y1: entry,
      x2: x + width,
      y2: entry,
      key: "line-".concat(i),
      index: i
    });
    return renderLineItem(horizontal, lineItemProps);
  });
  return /*#__PURE__*/reactExports.createElement("g", {
    className: "recharts-cartesian-grid-horizontal"
  }, items);
}
function VerticalGridLines(props) {
  var {
    y,
    height,
    vertical = true,
    verticalPoints
  } = props;
  if (!vertical || !verticalPoints || !verticalPoints.length) {
    return null;
  }
  var {
      xAxisId,
      yAxisId
    } = props,
    otherLineItemProps = _objectWithoutProperties$8(props, _excluded4);
  var items = verticalPoints.map((entry, i) => {
    var lineItemProps = _objectSpread$4(_objectSpread$4({}, otherLineItemProps), {}, {
      x1: entry,
      y1: y,
      x2: entry,
      y2: y + height,
      key: "line-".concat(i),
      index: i
    });
    return renderLineItem(vertical, lineItemProps);
  });
  return /*#__PURE__*/reactExports.createElement("g", {
    className: "recharts-cartesian-grid-vertical"
  }, items);
}
function HorizontalStripes(props) {
  var {
    horizontalFill,
    fillOpacity,
    x,
    y,
    width,
    height,
    horizontalPoints,
    horizontal = true
  } = props;
  if (!horizontal || !horizontalFill || !horizontalFill.length) {
    return null;
  }

  // Why =y -y? I was trying to find any difference that this makes, with floating point numbers and edge cases but ... nothing.
  var roundedSortedHorizontalPoints = horizontalPoints.map(e => Math.round(e + y - y)).sort((a, b) => a - b);
  // Why is this condition `!==` instead of `<=` ?
  if (y !== roundedSortedHorizontalPoints[0]) {
    roundedSortedHorizontalPoints.unshift(0);
  }
  var items = roundedSortedHorizontalPoints.map((entry, i) => {
    // Why do we strip only the last stripe if it is invisible, and not all invisible stripes?
    var lastStripe = !roundedSortedHorizontalPoints[i + 1];
    var lineHeight = lastStripe ? y + height - entry : roundedSortedHorizontalPoints[i + 1] - entry;
    if (lineHeight <= 0) {
      return null;
    }
    var colorIndex = i % horizontalFill.length;
    return /*#__PURE__*/reactExports.createElement("rect", {
      key: "react-".concat(i) // eslint-disable-line react/no-array-index-key
      ,
      y: entry,
      x: x,
      height: lineHeight,
      width: width,
      stroke: "none",
      fill: horizontalFill[colorIndex],
      fillOpacity: fillOpacity,
      className: "recharts-cartesian-grid-bg"
    });
  });
  return /*#__PURE__*/reactExports.createElement("g", {
    className: "recharts-cartesian-gridstripes-horizontal"
  }, items);
}
function VerticalStripes(props) {
  var {
    vertical = true,
    verticalFill,
    fillOpacity,
    x,
    y,
    width,
    height,
    verticalPoints
  } = props;
  if (!vertical || !verticalFill || !verticalFill.length) {
    return null;
  }
  var roundedSortedVerticalPoints = verticalPoints.map(e => Math.round(e + x - x)).sort((a, b) => a - b);
  if (x !== roundedSortedVerticalPoints[0]) {
    roundedSortedVerticalPoints.unshift(0);
  }
  var items = roundedSortedVerticalPoints.map((entry, i) => {
    var lastStripe = !roundedSortedVerticalPoints[i + 1];
    var lineWidth = lastStripe ? x + width - entry : roundedSortedVerticalPoints[i + 1] - entry;
    if (lineWidth <= 0) {
      return null;
    }
    var colorIndex = i % verticalFill.length;
    return /*#__PURE__*/reactExports.createElement("rect", {
      key: "react-".concat(i) // eslint-disable-line react/no-array-index-key
      ,
      x: entry,
      y: y,
      width: lineWidth,
      height: height,
      stroke: "none",
      fill: verticalFill[colorIndex],
      fillOpacity: fillOpacity,
      className: "recharts-cartesian-grid-bg"
    });
  });
  return /*#__PURE__*/reactExports.createElement("g", {
    className: "recharts-cartesian-gridstripes-vertical"
  }, items);
}
var defaultVerticalCoordinatesGenerator = (_ref, syncWithTicks) => {
  var {
    xAxis,
    width,
    height,
    offset
  } = _ref;
  return getCoordinatesOfGrid(getTicks(_objectSpread$4(_objectSpread$4(_objectSpread$4({}, CartesianAxis.defaultProps), xAxis), {}, {
    ticks: getTicksOfAxis(xAxis),
    viewBox: {
      x: 0,
      y: 0,
      width,
      height
    }
  })), offset.left, offset.left + offset.width, syncWithTicks);
};
var defaultHorizontalCoordinatesGenerator = (_ref2, syncWithTicks) => {
  var {
    yAxis,
    width,
    height,
    offset
  } = _ref2;
  return getCoordinatesOfGrid(getTicks(_objectSpread$4(_objectSpread$4(_objectSpread$4({}, CartesianAxis.defaultProps), yAxis), {}, {
    ticks: getTicksOfAxis(yAxis),
    viewBox: {
      x: 0,
      y: 0,
      width,
      height
    }
  })), offset.top, offset.top + offset.height, syncWithTicks);
};
var defaultProps$4 = {
  horizontal: true,
  vertical: true,
  // The ordinates of horizontal grid lines
  horizontalPoints: [],
  // The abscissas of vertical grid lines
  verticalPoints: [],
  stroke: '#ccc',
  fill: 'none',
  // The fill of colors of grid lines
  verticalFill: [],
  horizontalFill: [],
  xAxisId: 0,
  yAxisId: 0
};
function CartesianGrid(props) {
  var chartWidth = useChartWidth();
  var chartHeight = useChartHeight();
  var offset = useOffsetInternal();
  var propsIncludingDefaults = _objectSpread$4(_objectSpread$4({}, resolveDefaultProps(props, defaultProps$4)), {}, {
    x: isNumber(props.x) ? props.x : offset.left,
    y: isNumber(props.y) ? props.y : offset.top,
    width: isNumber(props.width) ? props.width : offset.width,
    height: isNumber(props.height) ? props.height : offset.height
  });
  var {
    xAxisId,
    yAxisId,
    x,
    y,
    width,
    height,
    syncWithTicks,
    horizontalValues,
    verticalValues
  } = propsIncludingDefaults;
  var isPanorama = useIsPanorama();
  var xAxis = useAppSelector(state => selectAxisPropsNeededForCartesianGridTicksGenerator(state, 'xAxis', xAxisId, isPanorama));
  var yAxis = useAppSelector(state => selectAxisPropsNeededForCartesianGridTicksGenerator(state, 'yAxis', yAxisId, isPanorama));
  if (!isNumber(width) || width <= 0 || !isNumber(height) || height <= 0 || !isNumber(x) || x !== +x || !isNumber(y) || y !== +y) {
    return null;
  }

  /*
   * verticalCoordinatesGenerator and horizontalCoordinatesGenerator are defined
   * outside the propsIncludingDefaults because they were never part of the original props
   * and they were never passed as a prop down to horizontal/vertical custom elements.
   * If we add these two to propsIncludingDefaults then we are changing public API.
   * Not a bad thing per se but also not necessary.
   */
  var verticalCoordinatesGenerator = propsIncludingDefaults.verticalCoordinatesGenerator || defaultVerticalCoordinatesGenerator;
  var horizontalCoordinatesGenerator = propsIncludingDefaults.horizontalCoordinatesGenerator || defaultHorizontalCoordinatesGenerator;
  var {
    horizontalPoints,
    verticalPoints
  } = propsIncludingDefaults;

  // No horizontal points are specified
  if ((!horizontalPoints || !horizontalPoints.length) && typeof horizontalCoordinatesGenerator === 'function') {
    var isHorizontalValues = horizontalValues && horizontalValues.length;
    var generatorResult = horizontalCoordinatesGenerator({
      yAxis: yAxis ? _objectSpread$4(_objectSpread$4({}, yAxis), {}, {
        ticks: isHorizontalValues ? horizontalValues : yAxis.ticks
      }) : undefined,
      width: chartWidth,
      height: chartHeight,
      offset
    }, isHorizontalValues ? true : syncWithTicks);
    warn(Array.isArray(generatorResult), "horizontalCoordinatesGenerator should return Array but instead it returned [".concat(typeof generatorResult, "]"));
    if (Array.isArray(generatorResult)) {
      horizontalPoints = generatorResult;
    }
  }

  // No vertical points are specified
  if ((!verticalPoints || !verticalPoints.length) && typeof verticalCoordinatesGenerator === 'function') {
    var isVerticalValues = verticalValues && verticalValues.length;
    var _generatorResult = verticalCoordinatesGenerator({
      xAxis: xAxis ? _objectSpread$4(_objectSpread$4({}, xAxis), {}, {
        ticks: isVerticalValues ? verticalValues : xAxis.ticks
      }) : undefined,
      width: chartWidth,
      height: chartHeight,
      offset
    }, isVerticalValues ? true : syncWithTicks);
    warn(Array.isArray(_generatorResult), "verticalCoordinatesGenerator should return Array but instead it returned [".concat(typeof _generatorResult, "]"));
    if (Array.isArray(_generatorResult)) {
      verticalPoints = _generatorResult;
    }
  }
  return /*#__PURE__*/reactExports.createElement("g", {
    className: "recharts-cartesian-grid"
  }, /*#__PURE__*/reactExports.createElement(Background, {
    fill: propsIncludingDefaults.fill,
    fillOpacity: propsIncludingDefaults.fillOpacity,
    x: propsIncludingDefaults.x,
    y: propsIncludingDefaults.y,
    width: propsIncludingDefaults.width,
    height: propsIncludingDefaults.height,
    ry: propsIncludingDefaults.ry
  }), /*#__PURE__*/reactExports.createElement(HorizontalStripes, _extends$7({}, propsIncludingDefaults, {
    horizontalPoints: horizontalPoints
  })), /*#__PURE__*/reactExports.createElement(VerticalStripes, _extends$7({}, propsIncludingDefaults, {
    verticalPoints: verticalPoints
  })), /*#__PURE__*/reactExports.createElement(HorizontalGridLines, _extends$7({}, propsIncludingDefaults, {
    offset: offset,
    horizontalPoints: horizontalPoints,
    xAxis: xAxis,
    yAxis: yAxis
  })), /*#__PURE__*/reactExports.createElement(VerticalGridLines, _extends$7({}, propsIncludingDefaults, {
    offset: offset,
    verticalPoints: verticalPoints,
    xAxis: xAxis,
    yAxis: yAxis
  })));
}
CartesianGrid.displayName = 'CartesianGrid';

var selectXAxisWithScale$1 = (state, xAxisId, _yAxisId, isPanorama) => selectAxisWithScale(state, 'xAxis', xAxisId, isPanorama);
var selectXAxisTicks$1 = (state, xAxisId, _yAxisId, isPanorama) => selectTicksOfGraphicalItem(state, 'xAxis', xAxisId, isPanorama);
var selectYAxisWithScale$1 = (state, _xAxisId, yAxisId, isPanorama) => selectAxisWithScale(state, 'yAxis', yAxisId, isPanorama);
var selectYAxisTicks$1 = (state, _xAxisId, yAxisId, isPanorama) => selectTicksOfGraphicalItem(state, 'yAxis', yAxisId, isPanorama);
var selectBandSize$1 = createSelector([selectChartLayout, selectXAxisWithScale$1, selectYAxisWithScale$1, selectXAxisTicks$1, selectYAxisTicks$1], (layout, xAxis, yAxis, xAxisTicks, yAxisTicks) => {
  if (isCategoricalAxis(layout, 'xAxis')) {
    return getBandSizeOfAxis(xAxis, xAxisTicks, false);
  }
  return getBandSizeOfAxis(yAxis, yAxisTicks, false);
});
var pickLineSettings = (_state, _xAxisId, _yAxisId, _isPanorama, lineSettings) => lineSettings;

/*
 * There is a race condition problem because we read some data from props and some from the state.
 * The state is updated through a dispatch and is one render behind,
 * and so we have this weird one tick render where the displayedData in one selector have the old dataKey
 * but the new dataKey in another selector.
 *
 * A proper fix is to either move everything into the state, or read the dataKey always from props
 * - but this is a smaller change.
 */
var selectSynchronisedLineSettings = createSelector([selectUnfilteredCartesianItems, pickLineSettings], (graphicalItems, lineSettingsFromProps) => {
  if (graphicalItems.some(cgis => cgis.type === 'line' && lineSettingsFromProps.dataKey === cgis.dataKey && lineSettingsFromProps.data === cgis.data)) {
    /*
     * now, at least one of the lines has the same dataKey as the one in props.
     * Is this a perfect match? Maybe not because we could theoretically have two different Lines with the same dataKey
     * and the same stackId and the same data but still different lines, yes,
     * but the chances of that happening are ... lowish.
     *
     * A proper fix would be to store the lineSettings in a state too, and compare references directly instead of enumerating the properties.
     */
    return lineSettingsFromProps;
  }
  return undefined;
});
var selectLinePoints = createSelector([selectChartLayout, selectXAxisWithScale$1, selectYAxisWithScale$1, selectXAxisTicks$1, selectYAxisTicks$1, selectSynchronisedLineSettings, selectBandSize$1, selectChartDataWithIndexesIfNotInPanorama], (layout, xAxis, yAxis, xAxisTicks, yAxisTicks, lineSettings, bandSize, _ref) => {
  var {
    chartData,
    dataStartIndex,
    dataEndIndex
  } = _ref;
  if (lineSettings == null || xAxis == null || yAxis == null || xAxisTicks == null || yAxisTicks == null || xAxisTicks.length === 0 || yAxisTicks.length === 0 || bandSize == null) {
    return undefined;
  }
  var {
    dataKey,
    data
  } = lineSettings;
  var displayedData;
  if (data != null && data.length > 0) {
    displayedData = data;
  } else {
    displayedData = chartData === null || chartData === void 0 ? void 0 : chartData.slice(dataStartIndex, dataEndIndex + 1);
  }
  if (displayedData == null) {
    return undefined;
  }
  return computeLinePoints({
    layout,
    xAxis,
    yAxis,
    xAxisTicks,
    yAxisTicks,
    dataKey,
    bandSize,
    displayedData
  });
});

var _excluded$7 = ["type", "layout", "connectNulls", "needClip"],
  _excluded2$2 = ["activeDot", "animateNewValues", "animationBegin", "animationDuration", "animationEasing", "connectNulls", "dot", "hide", "isAnimationActive", "label", "legendType", "xAxisId", "yAxisId"];
function _objectWithoutProperties$7(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$7(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$7(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
function ownKeys$3(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$3(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3(Object(t), true).forEach(function (r) { _defineProperty$5(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$5(e, r, t) { return (r = _toPropertyKey$5(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$5(t) { var i = _toPrimitive$5(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$5(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _extends$6() { return _extends$6 = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$6.apply(null, arguments); }

/**
 * Internal props, combination of external props + defaultProps + private Recharts state
 */

/**
 * External props, intended for end users to fill in
 */

/**
 * Because of naming conflict, we are forced to ignore certain (valid) SVG attributes.
 */

var computeLegendPayloadFromAreaData$1 = props => {
  var {
    dataKey,
    name,
    stroke,
    legendType,
    hide
  } = props;
  return [{
    inactive: hide,
    dataKey,
    type: legendType,
    color: stroke,
    value: getTooltipNameProp(name, dataKey),
    payload: props
  }];
};
function getTooltipEntrySettings$1(props) {
  var {
    dataKey,
    data,
    stroke,
    strokeWidth,
    fill,
    name,
    hide,
    unit
  } = props;
  return {
    dataDefinedOnItem: data,
    positions: undefined,
    settings: {
      stroke,
      strokeWidth,
      fill,
      dataKey,
      nameKey: undefined,
      name: getTooltipNameProp(name, dataKey),
      hide,
      type: props.tooltipType,
      color: props.stroke,
      unit
    }
  };
}
var generateSimpleStrokeDasharray = (totalLength, length) => {
  return "".concat(length, "px ").concat(totalLength - length, "px");
};
function repeat(lines, count) {
  var linesUnit = lines.length % 2 !== 0 ? [...lines, 0] : lines;
  var result = [];
  for (var i = 0; i < count; ++i) {
    result = [...result, ...linesUnit];
  }
  return result;
}
var getStrokeDasharray = (length, totalLength, lines) => {
  var lineLength = lines.reduce((pre, next) => pre + next);

  // if lineLength is 0 return the default when no strokeDasharray is provided
  if (!lineLength) {
    return generateSimpleStrokeDasharray(totalLength, length);
  }
  var count = Math.floor(length / lineLength);
  var remainLength = length % lineLength;
  var restLength = totalLength - length;
  var remainLines = [];
  for (var i = 0, sum = 0; i < lines.length; sum += lines[i], ++i) {
    if (sum + lines[i] > remainLength) {
      remainLines = [...lines.slice(0, i), remainLength - sum];
      break;
    }
  }
  var emptyLines = remainLines.length % 2 === 0 ? [0, restLength] : [restLength];
  return [...repeat(lines, count), ...remainLines, ...emptyLines].map(line => "".concat(line, "px")).join(', ');
};
function renderDotItem$1(option, props) {
  var dotItem;
  if (/*#__PURE__*/reactExports.isValidElement(option)) {
    dotItem = /*#__PURE__*/reactExports.cloneElement(option, props);
  } else if (typeof option === 'function') {
    dotItem = option(props);
  } else {
    var className = clsx('recharts-line-dot', typeof option !== 'boolean' ? option.className : '');
    dotItem = /*#__PURE__*/reactExports.createElement(Dot, _extends$6({}, props, {
      className: className
    }));
  }
  return dotItem;
}
function shouldRenderDots$1(points, dot) {
  if (points == null) {
    return false;
  }
  if (dot) {
    return true;
  }
  return points.length === 1;
}
function Dots$1(_ref) {
  var {
    clipPathId,
    points,
    props
  } = _ref;
  var {
    dot,
    dataKey,
    needClip
  } = props;
  if (!shouldRenderDots$1(points, dot)) {
    return null;
  }
  var clipDot = isClipDot(dot);
  var lineProps = filterProps(props, false);
  var customDotProps = filterProps(dot, true);
  var dots = points.map((entry, i) => {
    var dotProps = _objectSpread$3(_objectSpread$3(_objectSpread$3({
      key: "dot-".concat(i),
      r: 3
    }, lineProps), customDotProps), {}, {
      index: i,
      cx: entry.x,
      cy: entry.y,
      dataKey,
      value: entry.value,
      payload: entry.payload,
      points
    });
    return renderDotItem$1(dot, dotProps);
  });
  var dotsProps = {
    clipPath: needClip ? "url(#clipPath-".concat(clipDot ? '' : 'dots-').concat(clipPathId, ")") : null
  };
  return /*#__PURE__*/reactExports.createElement(Layer, _extends$6({
    className: "recharts-line-dots",
    key: "dots"
  }, dotsProps), dots);
}
function StaticCurve(_ref2) {
  var {
    clipPathId,
    pathRef,
    points,
    strokeDasharray,
    props,
    showLabels
  } = _ref2;
  var {
      type,
      layout,
      connectNulls,
      needClip
    } = props,
    others = _objectWithoutProperties$7(props, _excluded$7);
  var curveProps = _objectSpread$3(_objectSpread$3({}, filterProps(others, true)), {}, {
    fill: 'none',
    className: 'recharts-line-curve',
    clipPath: needClip ? "url(#clipPath-".concat(clipPathId, ")") : null,
    points,
    type,
    layout,
    connectNulls,
    strokeDasharray: strokeDasharray !== null && strokeDasharray !== void 0 ? strokeDasharray : props.strokeDasharray
  });
  return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, (points === null || points === void 0 ? void 0 : points.length) > 1 && /*#__PURE__*/reactExports.createElement(Curve, _extends$6({}, curveProps, {
    pathRef: pathRef
  })), /*#__PURE__*/reactExports.createElement(Dots$1, {
    points: points,
    clipPathId: clipPathId,
    props: props
  }), showLabels && LabelList.renderCallByParent(props, points));
}
function getTotalLength(mainCurve) {
  try {
    return mainCurve && mainCurve.getTotalLength && mainCurve.getTotalLength() || 0;
  } catch (_unused) {
    return 0;
  }
}
function CurveWithAnimation(_ref3) {
  var {
    clipPathId,
    props,
    pathRef,
    previousPointsRef,
    longestAnimatedLengthRef
  } = _ref3;
  var {
    points,
    strokeDasharray,
    isAnimationActive,
    animationBegin,
    animationDuration,
    animationEasing,
    animateNewValues,
    width,
    height,
    onAnimationEnd,
    onAnimationStart
  } = props;
  var prevPoints = previousPointsRef.current;
  var animationId = useAnimationId(props, 'recharts-line-');
  var [isAnimating, setIsAnimating] = reactExports.useState(false);
  var handleAnimationEnd = reactExports.useCallback(() => {
    if (typeof onAnimationEnd === 'function') {
      onAnimationEnd();
    }
    setIsAnimating(false);
  }, [onAnimationEnd]);
  var handleAnimationStart = reactExports.useCallback(() => {
    if (typeof onAnimationStart === 'function') {
      onAnimationStart();
    }
    setIsAnimating(true);
  }, [onAnimationStart]);
  var totalLength = getTotalLength(pathRef.current);
  /*
   * Here we want to detect if the length animation has been interrupted.
   * For that we keep a reference to the furthest length that has been animated.
   *
   * And then, to keep things smooth, we add to it the current length that is being animated right now.
   *
   * If we did Math.max then it makes the length animation "pause" but we want to keep it smooth
   * so in case we have some "leftover" length from the previous animation we add it to the current length.
   *
   * This is not perfect because the animation changes speed due to easing. The default easing is 'ease' which is not linear
   * and makes it stand out. But it's good enough I suppose.
   * If we want to fix it then we need to keep track of multiple animations and their easing and timings.
   *
   * If you want to see this in action, try to change the dataKey of the line chart while the initial animation is running.
   * The Line begins with zero length and slowly grows to the full length. While this growth is in progress,
   * change the dataKey and the Line will continue growing from where it has grown so far.
   */
  var startingPoint = longestAnimatedLengthRef.current;
  return /*#__PURE__*/reactExports.createElement(Animate, {
    begin: animationBegin,
    duration: animationDuration,
    isActive: isAnimationActive,
    easing: animationEasing,
    from: {
      t: 0
    },
    to: {
      t: 1
    },
    onAnimationEnd: handleAnimationEnd,
    onAnimationStart: handleAnimationStart,
    key: animationId
  }, _ref4 => {
    var {
      t
    } = _ref4;
    var interpolator = interpolateNumber$1(startingPoint, totalLength + startingPoint);
    var curLength = Math.min(interpolator(t), totalLength);
    var currentStrokeDasharray;
    if (strokeDasharray) {
      var lines = "".concat(strokeDasharray).split(/[,\s]+/gim).map(num => parseFloat(num));
      currentStrokeDasharray = getStrokeDasharray(curLength, totalLength, lines);
    } else {
      currentStrokeDasharray = generateSimpleStrokeDasharray(totalLength, curLength);
    }
    if (prevPoints) {
      var prevPointsDiffFactor = prevPoints.length / points.length;
      var stepData = t === 1 ? points : points.map((entry, index) => {
        var prevPointIndex = Math.floor(index * prevPointsDiffFactor);
        if (prevPoints[prevPointIndex]) {
          var prev = prevPoints[prevPointIndex];
          var interpolatorX = interpolateNumber$1(prev.x, entry.x);
          var interpolatorY = interpolateNumber$1(prev.y, entry.y);
          return _objectSpread$3(_objectSpread$3({}, entry), {}, {
            x: interpolatorX(t),
            y: interpolatorY(t)
          });
        }

        // magic number of faking previous x and y location
        if (animateNewValues) {
          var _interpolatorX = interpolateNumber$1(width * 2, entry.x);
          var _interpolatorY = interpolateNumber$1(height / 2, entry.y);
          return _objectSpread$3(_objectSpread$3({}, entry), {}, {
            x: _interpolatorX(t),
            y: _interpolatorY(t)
          });
        }
        return _objectSpread$3(_objectSpread$3({}, entry), {}, {
          x: entry.x,
          y: entry.y
        });
      });
      // eslint-disable-next-line no-param-reassign
      previousPointsRef.current = stepData;
      return /*#__PURE__*/reactExports.createElement(StaticCurve, {
        props: props,
        points: stepData,
        clipPathId: clipPathId,
        pathRef: pathRef,
        showLabels: !isAnimating,
        strokeDasharray: currentStrokeDasharray
      });
    }

    /*
     * Here it is important to wait a little bit with updating the previousPointsRef
     * before the animation has a time to initialize.
     * If we set the previous pointsRef immediately, we set it before the Legend height it calculated
     * and before pathRef is set.
     * If that happens, the Line will re-render again after Legend had reported its height
     * which will start a new animation with the previous points as the starting point
     * which gives the effect of the Line animating slightly upwards (where the animation distance equals the Legend height).
     * Waiting for t > 0 is indirect but good enough to ensure that the Legend height is calculated and animation works properly.
     *
     * Total length similarly is calculated from the pathRef. We should not update the previousPointsRef
     * before the pathRef is set, otherwise we will have a wrong total length.
     */
    if (t > 0 && totalLength > 0) {
      // eslint-disable-next-line no-param-reassign
      previousPointsRef.current = points;
      /*
       * totalLength is set from a ref and is not updated in the first tick of the animation.
       * It defaults to zero which is exactly what we want here because we want to grow from zero,
       * however the same happens when the data change.
       *
       * In that case we want to remember the previous length and continue from there, and only animate the shape.
       *
       * Therefore the totalLength > 0 check.
       *
       * The Animate is about to fire handleAnimationStart which will update the state
       * and cause a re-render and read a new proper totalLength which will be used in the next tick
       * and update the longestAnimatedLengthRef.
       */
      // eslint-disable-next-line no-param-reassign
      longestAnimatedLengthRef.current = curLength;
    }
    return /*#__PURE__*/reactExports.createElement(StaticCurve, {
      props: props,
      points: points,
      clipPathId: clipPathId,
      pathRef: pathRef,
      showLabels: !isAnimating,
      strokeDasharray: currentStrokeDasharray
    });
  });
}
function RenderCurve(_ref5) {
  var {
    clipPathId,
    props
  } = _ref5;
  var {
    points,
    isAnimationActive
  } = props;
  var previousPointsRef = reactExports.useRef(null);
  var longestAnimatedLengthRef = reactExports.useRef(0);
  var pathRef = reactExports.useRef(null);
  var prevPoints = previousPointsRef.current;
  if (isAnimationActive && points && points.length && prevPoints !== points) {
    return /*#__PURE__*/reactExports.createElement(CurveWithAnimation, {
      props: props,
      clipPathId: clipPathId,
      previousPointsRef: previousPointsRef,
      longestAnimatedLengthRef: longestAnimatedLengthRef,
      pathRef: pathRef
    });
  }
  return /*#__PURE__*/reactExports.createElement(StaticCurve, {
    props: props,
    points: points,
    clipPathId: clipPathId,
    pathRef: pathRef,
    showLabels: true
  });
}
var errorBarDataPointFormatter = (dataPoint, dataKey) => {
  return {
    x: dataPoint.x,
    y: dataPoint.y,
    value: dataPoint.value,
    // @ts-expect-error getValueByDataKey does not validate the output type
    errorVal: getValueByDataKey(dataPoint.payload, dataKey)
  };
};
class LineWithState extends reactExports.Component {
  constructor() {
    super(...arguments);
    _defineProperty$5(this, "id", uniqueId('recharts-line-'));
  }
  render() {
    var _filterProps;
    var {
      hide,
      dot,
      points,
      className,
      xAxisId,
      yAxisId,
      top,
      left,
      width,
      height,
      id,
      needClip,
      layout
    } = this.props;
    if (hide) {
      return null;
    }
    var layerClass = clsx('recharts-line', className);
    var clipPathId = isNullish(id) ? this.id : id;
    var {
      r = 3,
      strokeWidth = 2
    } = (_filterProps = filterProps(dot, false)) !== null && _filterProps !== void 0 ? _filterProps : {
      r: 3,
      strokeWidth: 2
    };
    var clipDot = isClipDot(dot);
    var dotSize = r * 2 + strokeWidth;
    return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, /*#__PURE__*/reactExports.createElement(Layer, {
      className: layerClass
    }, needClip && /*#__PURE__*/reactExports.createElement("defs", null, /*#__PURE__*/reactExports.createElement(GraphicalItemClipPath, {
      clipPathId: clipPathId,
      xAxisId: xAxisId,
      yAxisId: yAxisId
    }), !clipDot && /*#__PURE__*/reactExports.createElement("clipPath", {
      id: "clipPath-dots-".concat(clipPathId)
    }, /*#__PURE__*/reactExports.createElement("rect", {
      x: left - dotSize / 2,
      y: top - dotSize / 2,
      width: width + dotSize,
      height: height + dotSize
    }))), /*#__PURE__*/reactExports.createElement(RenderCurve, {
      props: this.props,
      clipPathId: clipPathId
    }), /*#__PURE__*/reactExports.createElement(SetErrorBarPreferredDirection, {
      direction: layout === 'horizontal' ? 'y' : 'x'
    }, /*#__PURE__*/reactExports.createElement(SetErrorBarContext, {
      xAxisId: xAxisId,
      yAxisId: yAxisId,
      data: points,
      dataPointFormatter: errorBarDataPointFormatter,
      errorBarOffset: 0
    }, this.props.children))), /*#__PURE__*/reactExports.createElement(ActivePoints, {
      activeDot: this.props.activeDot,
      points: points,
      mainColor: this.props.stroke,
      itemDataKey: this.props.dataKey
    }));
  }
}
var defaultLineProps = {
  activeDot: true,
  animateNewValues: true,
  animationBegin: 0,
  animationDuration: 1500,
  animationEasing: 'ease',
  connectNulls: false,
  dot: true,
  fill: '#fff',
  hide: false,
  isAnimationActive: !Global.isSsr,
  label: false,
  legendType: 'line',
  stroke: '#3182bd',
  strokeWidth: 1,
  xAxisId: 0,
  yAxisId: 0
};
function LineImpl(props) {
  var _resolveDefaultProps = resolveDefaultProps(props, defaultLineProps),
    {
      activeDot,
      animateNewValues,
      animationBegin,
      animationDuration,
      animationEasing,
      connectNulls,
      dot,
      hide,
      isAnimationActive,
      label,
      legendType,
      xAxisId,
      yAxisId
    } = _resolveDefaultProps,
    everythingElse = _objectWithoutProperties$7(_resolveDefaultProps, _excluded2$2);
  var {
    needClip
  } = useNeedsClip(xAxisId, yAxisId);
  var {
    height,
    width,
    x: left,
    y: top
  } = usePlotArea();
  var layout = useChartLayout();
  var isPanorama = useIsPanorama();
  var lineSettings = reactExports.useMemo(() => ({
    dataKey: props.dataKey,
    data: props.data
  }), [props.dataKey, props.data]);
  var points = useAppSelector(state => selectLinePoints(state, xAxisId, yAxisId, isPanorama, lineSettings));
  if (layout !== 'horizontal' && layout !== 'vertical') {
    // Cannot render Line in an unsupported layout
    return null;
  }
  return /*#__PURE__*/reactExports.createElement(LineWithState, _extends$6({}, everythingElse, {
    connectNulls: connectNulls,
    dot: dot,
    activeDot: activeDot,
    animateNewValues: animateNewValues,
    animationBegin: animationBegin,
    animationDuration: animationDuration,
    animationEasing: animationEasing,
    isAnimationActive: isAnimationActive,
    hide: hide,
    label: label,
    legendType: legendType,
    xAxisId: xAxisId,
    yAxisId: yAxisId,
    points: points,
    layout: layout,
    height: height,
    width: width,
    left: left,
    top: top,
    needClip: needClip
  }));
}
function computeLinePoints(_ref6) {
  var {
    layout,
    xAxis,
    yAxis,
    xAxisTicks,
    yAxisTicks,
    dataKey,
    bandSize,
    displayedData
  } = _ref6;
  return displayedData.map((entry, index) => {
    // @ts-expect-error getValueByDataKey does not validate the output type
    var value = getValueByDataKey(entry, dataKey);
    if (layout === 'horizontal') {
      return {
        x: getCateCoordinateOfLine({
          axis: xAxis,
          ticks: xAxisTicks,
          bandSize,
          entry,
          index
        }),
        y: isNullish(value) ? null : yAxis.scale(value),
        value,
        payload: entry
      };
    }
    return {
      x: isNullish(value) ? null : xAxis.scale(value),
      y: getCateCoordinateOfLine({
        axis: yAxis,
        ticks: yAxisTicks,
        bandSize,
        entry,
        index
      }),
      value,
      payload: entry
    };
  });
}
class Line extends reactExports.PureComponent {
  render() {
    // Report all props to Redux store first, before calling any hooks, to avoid circular dependencies.
    return /*#__PURE__*/reactExports.createElement(CartesianGraphicalItemContext, {
      type: "line",
      data: this.props.data,
      xAxisId: this.props.xAxisId,
      yAxisId: this.props.yAxisId,
      zAxisId: 0,
      dataKey: this.props.dataKey
      // line doesn't stack
      ,
      stackId: undefined,
      hide: this.props.hide,
      barSize: undefined
    }, /*#__PURE__*/reactExports.createElement(SetLegendPayload, {
      legendPayload: computeLegendPayloadFromAreaData$1(this.props)
    }), /*#__PURE__*/reactExports.createElement(SetTooltipEntrySettings, {
      fn: getTooltipEntrySettings$1,
      args: this.props
    }), /*#__PURE__*/reactExports.createElement(LineImpl, this.props));
  }
}
_defineProperty$5(Line, "displayName", 'Line');
_defineProperty$5(Line, "defaultProps", defaultLineProps);

var selectXAxisWithScale = (state, xAxisId, _yAxisId, isPanorama) => selectAxisWithScale(state, 'xAxis', xAxisId, isPanorama);
var selectXAxisTicks = (state, xAxisId, _yAxisId, isPanorama) => selectTicksOfGraphicalItem(state, 'xAxis', xAxisId, isPanorama);
var selectYAxisWithScale = (state, _xAxisId, yAxisId, isPanorama) => selectAxisWithScale(state, 'yAxis', yAxisId, isPanorama);
var selectYAxisTicks = (state, _xAxisId, yAxisId, isPanorama) => selectTicksOfGraphicalItem(state, 'yAxis', yAxisId, isPanorama);
var selectBandSize = createSelector([selectChartLayout, selectXAxisWithScale, selectYAxisWithScale, selectXAxisTicks, selectYAxisTicks], (layout, xAxis, yAxis, xAxisTicks, yAxisTicks) => {
  if (isCategoricalAxis(layout, 'xAxis')) {
    return getBandSizeOfAxis(xAxis, xAxisTicks, false);
  }
  return getBandSizeOfAxis(yAxis, yAxisTicks, false);
});
var selectGraphicalItemStackedData = (state, xAxisId, yAxisId, isPanorama, areaSettings) => {
  var _stackGroups$stackId;
  var layout = selectChartLayout(state);
  var isXAxisCategorical = isCategoricalAxis(layout, 'xAxis');
  var stackGroups;
  if (isXAxisCategorical) {
    stackGroups = selectStackGroups(state, 'yAxis', yAxisId, isPanorama);
  } else {
    stackGroups = selectStackGroups(state, 'xAxis', xAxisId, isPanorama);
  }
  if (stackGroups == null) {
    return undefined;
  }
  var {
    dataKey,
    stackId
  } = areaSettings;
  if (stackId == null) {
    return undefined;
  }
  var groups = (_stackGroups$stackId = stackGroups[stackId]) === null || _stackGroups$stackId === void 0 ? void 0 : _stackGroups$stackId.stackedData;
  return groups === null || groups === void 0 ? void 0 : groups.find(v => v.key === dataKey);
};
var pickAreaSettings = (_state, _xAxisId, _yAxisId, _isPanorama, areaSettings) => areaSettings;

/*
 * There is a race condition problem because we read some data from props and some from the state.
 * The state is updated through a dispatch and is one render behind,
 * and so we have this weird one tick render where the displayedData in one selector have the old dataKey
 * but the new dataKey in another selector.
 *
 * A proper fix is to either move everything into the state, or read the dataKey always from props
 * - but this is a smaller change.
 */
var selectSynchronisedAreaSettings = createSelector([selectUnfilteredCartesianItems, pickAreaSettings], (graphicalItems, areaSettingsFromProps) => {
  if (graphicalItems.some(cgis => cgis.type === 'area' && areaSettingsFromProps.dataKey === cgis.dataKey && getNormalizedStackId(areaSettingsFromProps.stackId) === cgis.stackId && areaSettingsFromProps.data === cgis.data)) {
    /*
     * now, at least one of the areas has the same dataKey as the one in props.
     * Is this a perfect match? Maybe not because we could theoretically have two different Areas with the same dataKey
     * and the same stackId and the same data but still different areas, yes,
     * but the chances of that happening are ... lowish.
     *
     * A proper fix would be to store the areaSettings in a state too, and compare references directly instead of enumerating the properties.
     */
    return areaSettingsFromProps;
  }
  return undefined;
});
var selectArea = createSelector([selectChartLayout, selectXAxisWithScale, selectYAxisWithScale, selectXAxisTicks, selectYAxisTicks, selectGraphicalItemStackedData, selectChartDataWithIndexesIfNotInPanorama, selectBandSize, selectSynchronisedAreaSettings], (layout, xAxis, yAxis, xAxisTicks, yAxisTicks, stackedData, _ref, bandSize, areaSettings) => {
  var {
    chartData,
    dataStartIndex,
    dataEndIndex
  } = _ref;
  if (areaSettings == null || layout !== 'horizontal' && layout !== 'vertical' || xAxis == null || yAxis == null || xAxisTicks == null || yAxisTicks == null || xAxisTicks.length === 0 || yAxisTicks.length === 0 || bandSize == null) {
    return undefined;
  }
  var {
    data
  } = areaSettings;
  var displayedData;
  if (data && data.length > 0) {
    displayedData = data;
  } else {
    displayedData = chartData === null || chartData === void 0 ? void 0 : chartData.slice(dataStartIndex, dataEndIndex + 1);
  }
  if (displayedData == null) {
    return undefined;
  }

  // Where is this supposed to come from? No charts have that as a prop.
  var chartBaseValue = undefined;
  return computeArea({
    layout,
    xAxis,
    yAxis,
    xAxisTicks,
    yAxisTicks,
    dataStartIndex,
    areaSettings,
    stackedData,
    displayedData,
    chartBaseValue,
    bandSize
  });
});

var _excluded$6 = ["layout", "type", "stroke", "connectNulls", "isRange"],
  _excluded2$1 = ["activeDot", "animationBegin", "animationDuration", "animationEasing", "connectNulls", "dot", "fill", "fillOpacity", "hide", "isAnimationActive", "legendType", "stroke", "xAxisId", "yAxisId"];
function _objectWithoutProperties$6(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$6(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$6(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
function ownKeys$2(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$2(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2(Object(t), true).forEach(function (r) { _defineProperty$4(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$4(e, r, t) { return (r = _toPropertyKey$4(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$4(t) { var i = _toPrimitive$4(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$4(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _extends$5() { return _extends$5 = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$5.apply(null, arguments); }

/**
 * Internal props, combination of external props + defaultProps + private Recharts state
 */

/**
 * External props, intended for end users to fill in
 */

/**
 * Because of naming conflict, we are forced to ignore certain (valid) SVG attributes.
 */

function getLegendItemColor(stroke, fill) {
  return stroke && stroke !== 'none' ? stroke : fill;
}
var computeLegendPayloadFromAreaData = props => {
  var {
    dataKey,
    name,
    stroke,
    fill,
    legendType,
    hide
  } = props;
  return [{
    inactive: hide,
    dataKey,
    type: legendType,
    color: getLegendItemColor(stroke, fill),
    value: getTooltipNameProp(name, dataKey),
    payload: props
  }];
};
function getTooltipEntrySettings(props) {
  var {
    dataKey,
    data,
    stroke,
    strokeWidth,
    fill,
    name,
    hide,
    unit
  } = props;
  return {
    dataDefinedOnItem: data,
    positions: undefined,
    settings: {
      stroke,
      strokeWidth,
      fill,
      dataKey,
      nameKey: undefined,
      name: getTooltipNameProp(name, dataKey),
      hide,
      type: props.tooltipType,
      color: getLegendItemColor(stroke, fill),
      unit
    }
  };
}
var renderDotItem = (option, props) => {
  var dotItem;
  if (/*#__PURE__*/reactExports.isValidElement(option)) {
    dotItem = /*#__PURE__*/reactExports.cloneElement(option, props);
  } else if (typeof option === 'function') {
    dotItem = option(props);
  } else {
    var className = clsx('recharts-area-dot', typeof option !== 'boolean' ? option.className : '');
    dotItem = /*#__PURE__*/reactExports.createElement(Dot, _extends$5({}, props, {
      className: className
    }));
  }
  return dotItem;
};
function shouldRenderDots(points, dot) {
  if (points == null) {
    return false;
  }
  if (dot) {
    return true;
  }
  return points.length === 1;
}
function Dots(_ref) {
  var {
    clipPathId,
    points,
    props
  } = _ref;
  var {
    needClip,
    dot,
    dataKey
  } = props;
  if (!shouldRenderDots(points, dot)) {
    return null;
  }
  var clipDot = isClipDot(dot);
  var areaProps = filterProps(props, false);
  var customDotProps = filterProps(dot, true);
  var dots = points.map((entry, i) => {
    var dotProps = _objectSpread$2(_objectSpread$2(_objectSpread$2({
      key: "dot-".concat(i),
      r: 3
    }, areaProps), customDotProps), {}, {
      index: i,
      cx: entry.x,
      cy: entry.y,
      dataKey,
      value: entry.value,
      payload: entry.payload,
      points
    });
    return renderDotItem(dot, dotProps);
  });
  var dotsProps = {
    clipPath: needClip ? "url(#clipPath-".concat(clipDot ? '' : 'dots-').concat(clipPathId, ")") : undefined
  };
  return /*#__PURE__*/reactExports.createElement(Layer, _extends$5({
    className: "recharts-area-dots"
  }, dotsProps), dots);
}
function StaticArea(_ref2) {
  var {
    points,
    baseLine,
    needClip,
    clipPathId,
    props,
    showLabels
  } = _ref2;
  var {
      layout,
      type,
      stroke,
      connectNulls,
      isRange
    } = props,
    others = _objectWithoutProperties$6(props, _excluded$6);
  return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, (points === null || points === void 0 ? void 0 : points.length) > 1 && /*#__PURE__*/reactExports.createElement(Layer, {
    clipPath: needClip ? "url(#clipPath-".concat(clipPathId, ")") : undefined
  }, /*#__PURE__*/reactExports.createElement(Curve, _extends$5({}, filterProps(others, true), {
    points: points,
    connectNulls: connectNulls,
    type: type,
    baseLine: baseLine,
    layout: layout,
    stroke: "none",
    className: "recharts-area-area"
  })), stroke !== 'none' && /*#__PURE__*/reactExports.createElement(Curve, _extends$5({}, filterProps(props, false), {
    className: "recharts-area-curve",
    layout: layout,
    type: type,
    connectNulls: connectNulls,
    fill: "none",
    points: points
  })), stroke !== 'none' && isRange && /*#__PURE__*/reactExports.createElement(Curve, _extends$5({}, filterProps(props, false), {
    className: "recharts-area-curve",
    layout: layout,
    type: type,
    connectNulls: connectNulls,
    fill: "none",
    points: baseLine
  }))), /*#__PURE__*/reactExports.createElement(Dots, {
    points: points,
    props: props,
    clipPathId: clipPathId
  }), showLabels && LabelList.renderCallByParent(props, points));
}
function VerticalRect(_ref3) {
  var {
    alpha,
    baseLine,
    points,
    strokeWidth
  } = _ref3;
  var startY = points[0].y;
  var endY = points[points.length - 1].y;
  if (!isWellBehavedNumber(startY) || !isWellBehavedNumber(endY)) {
    return null;
  }
  var height = alpha * Math.abs(startY - endY);
  var maxX = Math.max(...points.map(entry => entry.x || 0));
  if (isNumber(baseLine)) {
    maxX = Math.max(baseLine, maxX);
  } else if (baseLine && Array.isArray(baseLine) && baseLine.length) {
    maxX = Math.max(...baseLine.map(entry => entry.x || 0), maxX);
  }
  if (isNumber(maxX)) {
    return /*#__PURE__*/reactExports.createElement("rect", {
      x: 0,
      y: startY < endY ? startY : startY - height,
      width: maxX + (strokeWidth ? parseInt("".concat(strokeWidth), 10) : 1),
      height: Math.floor(height)
    });
  }
  return null;
}
function HorizontalRect(_ref4) {
  var {
    alpha,
    baseLine,
    points,
    strokeWidth
  } = _ref4;
  var startX = points[0].x;
  var endX = points[points.length - 1].x;
  if (!isWellBehavedNumber(startX) || !isWellBehavedNumber(endX)) {
    return null;
  }
  var width = alpha * Math.abs(startX - endX);
  var maxY = Math.max(...points.map(entry => entry.y || 0));
  if (isNumber(baseLine)) {
    maxY = Math.max(baseLine, maxY);
  } else if (baseLine && Array.isArray(baseLine) && baseLine.length) {
    maxY = Math.max(...baseLine.map(entry => entry.y || 0), maxY);
  }
  if (isNumber(maxY)) {
    return /*#__PURE__*/reactExports.createElement("rect", {
      x: startX < endX ? startX : startX - width,
      y: 0,
      width: width,
      height: Math.floor(maxY + (strokeWidth ? parseInt("".concat(strokeWidth), 10) : 1))
    });
  }
  return null;
}
function ClipRect(_ref5) {
  var {
    alpha,
    layout,
    points,
    baseLine,
    strokeWidth
  } = _ref5;
  if (layout === 'vertical') {
    return /*#__PURE__*/reactExports.createElement(VerticalRect, {
      alpha: alpha,
      points: points,
      baseLine: baseLine,
      strokeWidth: strokeWidth
    });
  }
  return /*#__PURE__*/reactExports.createElement(HorizontalRect, {
    alpha: alpha,
    points: points,
    baseLine: baseLine,
    strokeWidth: strokeWidth
  });
}
function AreaWithAnimation(_ref6) {
  var {
    needClip,
    clipPathId,
    props,
    previousPointsRef,
    previousBaselineRef
  } = _ref6;
  var {
    points,
    baseLine,
    isAnimationActive,
    animationBegin,
    animationDuration,
    animationEasing,
    onAnimationStart,
    onAnimationEnd
  } = props;
  var animationId = useAnimationId(props, 'recharts-area-');
  var [isAnimating, setIsAnimating] = reactExports.useState(true);
  var handleAnimationEnd = reactExports.useCallback(() => {
    if (typeof onAnimationEnd === 'function') {
      onAnimationEnd();
    }
    setIsAnimating(false);
  }, [onAnimationEnd]);
  var handleAnimationStart = reactExports.useCallback(() => {
    if (typeof onAnimationStart === 'function') {
      onAnimationStart();
    }
    setIsAnimating(true);
  }, [onAnimationStart]);
  var prevPoints = previousPointsRef.current;
  var prevBaseLine = previousBaselineRef.current;
  return /*#__PURE__*/reactExports.createElement(Animate, {
    begin: animationBegin,
    duration: animationDuration,
    isActive: isAnimationActive,
    easing: animationEasing,
    from: {
      t: 0
    },
    to: {
      t: 1
    },
    onAnimationEnd: handleAnimationEnd,
    onAnimationStart: handleAnimationStart,
    key: animationId
  }, _ref7 => {
    var {
      t
    } = _ref7;
    if (prevPoints) {
      var prevPointsDiffFactor = prevPoints.length / points.length;
      var stepPoints =
      /*
       * Here it is important that at the very end of the animation, on the last frame,
       * we render the original points without any interpolation.
       * This is needed because the code above is checking for reference equality to decide if the animation should run
       * and if we create a new array instance (even if the numbers were the same)
       * then we would break animations.
       */
      t === 1 ? points : points.map((entry, index) => {
        var prevPointIndex = Math.floor(index * prevPointsDiffFactor);
        if (prevPoints[prevPointIndex]) {
          var prev = prevPoints[prevPointIndex];
          return _objectSpread$2(_objectSpread$2({}, entry), {}, {
            x: interpolate$1(prev.x, entry.x, t),
            y: interpolate$1(prev.y, entry.y, t)
          });
        }
        return entry;
      });
      var stepBaseLine;
      if (isNumber(baseLine)) {
        stepBaseLine = interpolate$1(prevBaseLine, baseLine, t);
      } else if (isNullish(baseLine) || isNan(baseLine)) {
        stepBaseLine = interpolate$1(prevBaseLine, 0, t);
      } else {
        stepBaseLine = baseLine.map((entry, index) => {
          var prevPointIndex = Math.floor(index * prevPointsDiffFactor);
          if (Array.isArray(prevBaseLine) && prevBaseLine[prevPointIndex]) {
            var prev = prevBaseLine[prevPointIndex];
            return _objectSpread$2(_objectSpread$2({}, entry), {}, {
              x: interpolate$1(prev.x, entry.x, t),
              y: interpolate$1(prev.y, entry.y, t)
            });
          }
          return entry;
        });
      }
      if (t > 0) {
        /*
         * We need to keep the refs in the parent component because we need to remember the last shape of the animation
         * even if AreaWithAnimation is unmounted as that happens when changing props.
         *
         * And we need to update the refs here because here is where the interpolation is computed.
         * Eslint doesn't like changing function arguments, but we need it so here is an eslint-disable.
         */
        // eslint-disable-next-line no-param-reassign
        previousPointsRef.current = stepPoints;
        // eslint-disable-next-line no-param-reassign
        previousBaselineRef.current = stepBaseLine;
      }
      return /*#__PURE__*/reactExports.createElement(StaticArea, {
        points: stepPoints,
        baseLine: stepBaseLine,
        needClip: needClip,
        clipPathId: clipPathId,
        props: props,
        showLabels: !isAnimating
      });
    }
    if (t > 0) {
      // eslint-disable-next-line no-param-reassign
      previousPointsRef.current = points;
      // eslint-disable-next-line no-param-reassign
      previousBaselineRef.current = baseLine;
    }
    return /*#__PURE__*/reactExports.createElement(Layer, null, /*#__PURE__*/reactExports.createElement("defs", null, /*#__PURE__*/reactExports.createElement("clipPath", {
      id: "animationClipPath-".concat(clipPathId)
    }, /*#__PURE__*/reactExports.createElement(ClipRect, {
      alpha: t,
      points: points,
      baseLine: baseLine,
      layout: props.layout,
      strokeWidth: props.strokeWidth
    }))), /*#__PURE__*/reactExports.createElement(Layer, {
      clipPath: "url(#animationClipPath-".concat(clipPathId, ")")
    }, /*#__PURE__*/reactExports.createElement(StaticArea, {
      points: points,
      baseLine: baseLine,
      needClip: needClip,
      clipPathId: clipPathId,
      props: props,
      showLabels: true
    })));
  });
}

/*
 * This components decides if the area should be animated or not.
 * It also holds the state of the animation.
 */
function RenderArea(_ref8) {
  var {
    needClip,
    clipPathId,
    props
  } = _ref8;
  var {
    points,
    baseLine,
    isAnimationActive
  } = props;

  /*
   * These two must be refs, not state!
   * Because we want to store the most recent shape of the animation in case we have to interrupt the animation;
   * that happens when user initiates another animation before the current one finishes.
   *
   * If this was a useState, then every step in the animation would trigger a re-render.
   * So, useRef it is.
   */
  var previousPointsRef = reactExports.useRef(null);
  var previousBaselineRef = reactExports.useRef();
  var prevPoints = previousPointsRef.current;
  var prevBaseLine = previousBaselineRef.current;
  if (isAnimationActive &&
  /*
   * Here it's important that we unmount of AreaWithAnimation in case points are undefined
   * - this will make sure to interrupt the animation if it's running.
   * We still get to keep the last shape of the animation in the refs above.
   */
  points && points.length && (prevPoints !== points || prevBaseLine !== baseLine)) {
    return /*#__PURE__*/reactExports.createElement(AreaWithAnimation, {
      needClip: needClip,
      clipPathId: clipPathId,
      props: props,
      previousPointsRef: previousPointsRef,
      previousBaselineRef: previousBaselineRef
    });
  }
  return /*#__PURE__*/reactExports.createElement(StaticArea, {
    points: points,
    baseLine: baseLine,
    needClip: needClip,
    clipPathId: clipPathId,
    props: props,
    showLabels: true
  });
}
class AreaWithState extends reactExports.PureComponent {
  constructor() {
    super(...arguments);
    _defineProperty$4(this, "id", uniqueId('recharts-area-'));
  }
  render() {
    var _filterProps;
    var {
      hide,
      dot,
      points,
      className,
      top,
      left,
      needClip,
      xAxisId,
      yAxisId,
      width,
      height,
      id,
      baseLine
    } = this.props;
    if (hide) {
      return null;
    }
    var layerClass = clsx('recharts-area', className);
    var clipPathId = isNullish(id) ? this.id : id;
    var {
      r = 3,
      strokeWidth = 2
    } = (_filterProps = filterProps(dot, false)) !== null && _filterProps !== void 0 ? _filterProps : {
      r: 3,
      strokeWidth: 2
    };
    var clipDot = isClipDot(dot);
    var dotSize = r * 2 + strokeWidth;
    return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, /*#__PURE__*/reactExports.createElement(Layer, {
      className: layerClass
    }, needClip && /*#__PURE__*/reactExports.createElement("defs", null, /*#__PURE__*/reactExports.createElement(GraphicalItemClipPath, {
      clipPathId: clipPathId,
      xAxisId: xAxisId,
      yAxisId: yAxisId
    }), !clipDot && /*#__PURE__*/reactExports.createElement("clipPath", {
      id: "clipPath-dots-".concat(clipPathId)
    }, /*#__PURE__*/reactExports.createElement("rect", {
      x: left - dotSize / 2,
      y: top - dotSize / 2,
      width: width + dotSize,
      height: height + dotSize
    }))), /*#__PURE__*/reactExports.createElement(RenderArea, {
      needClip: needClip,
      clipPathId: clipPathId,
      props: this.props
    })), /*#__PURE__*/reactExports.createElement(ActivePoints, {
      points: points,
      mainColor: getLegendItemColor(this.props.stroke, this.props.fill),
      itemDataKey: this.props.dataKey,
      activeDot: this.props.activeDot
    }), this.props.isRange && Array.isArray(baseLine) && /*#__PURE__*/reactExports.createElement(ActivePoints, {
      points: baseLine,
      mainColor: getLegendItemColor(this.props.stroke, this.props.fill),
      itemDataKey: this.props.dataKey,
      activeDot: this.props.activeDot
    }));
  }
}
var defaultAreaProps = {
  activeDot: true,
  animationBegin: 0,
  animationDuration: 1500,
  animationEasing: 'ease',
  connectNulls: false,
  dot: false,
  fill: '#3182bd',
  fillOpacity: 0.6,
  hide: false,
  isAnimationActive: !Global.isSsr,
  legendType: 'line',
  stroke: '#3182bd',
  xAxisId: 0,
  yAxisId: 0
};
function AreaImpl(props) {
  var _useAppSelector;
  var _resolveDefaultProps = resolveDefaultProps(props, defaultAreaProps),
    {
      activeDot,
      animationBegin,
      animationDuration,
      animationEasing,
      connectNulls,
      dot,
      fill,
      fillOpacity,
      hide,
      isAnimationActive,
      legendType,
      stroke,
      xAxisId,
      yAxisId
    } = _resolveDefaultProps,
    everythingElse = _objectWithoutProperties$6(_resolveDefaultProps, _excluded2$1);
  var layout = useChartLayout();
  var chartName = useChartName();
  var {
    needClip
  } = useNeedsClip(xAxisId, yAxisId);
  var isPanorama = useIsPanorama();
  var areaSettings = reactExports.useMemo(() => ({
    baseValue: props.baseValue,
    stackId: props.stackId,
    connectNulls,
    data: props.data,
    dataKey: props.dataKey
  }), [props.baseValue, props.stackId, connectNulls, props.data, props.dataKey]);
  var {
    points,
    isRange,
    baseLine
  } = (_useAppSelector = useAppSelector(state => selectArea(state, xAxisId, yAxisId, isPanorama, areaSettings))) !== null && _useAppSelector !== void 0 ? _useAppSelector : {};
  var {
    height,
    width,
    x: left,
    y: top
  } = usePlotArea();
  if (layout !== 'horizontal' && layout !== 'vertical') {
    // Can't render Area in an unsupported layout
    return null;
  }
  if (chartName !== 'AreaChart' && chartName !== 'ComposedChart') {
    // There is nothing stopping us from rendering Area in other charts, except for historical reasons. Do we want to allow that?
    return null;
  }

  /*
   * It is important to NOT have this condition here,
   * because we need the Animate inside to receive an empty state
   * so that it can properly reset its internal state and start a new animation.
   */
  // if (!points || !points.length) {
  //   return null;
  // }

  return /*#__PURE__*/reactExports.createElement(AreaWithState, _extends$5({}, everythingElse, {
    activeDot: activeDot,
    animationBegin: animationBegin,
    animationDuration: animationDuration,
    animationEasing: animationEasing,
    baseLine: baseLine,
    connectNulls: connectNulls,
    dot: dot,
    fill: fill,
    fillOpacity: fillOpacity,
    height: height,
    hide: hide,
    layout: layout,
    isAnimationActive: isAnimationActive,
    isRange: isRange,
    legendType: legendType,
    needClip: needClip,
    points: points,
    stroke: stroke,
    width: width,
    left: left,
    top: top,
    xAxisId: xAxisId,
    yAxisId: yAxisId
  }));
}
var getBaseValue = (layout, chartBaseValue, itemBaseValue, xAxis, yAxis) => {
  // The baseValue can be defined both on the AreaChart, and on the Area.
  // The value for the item takes precedence.
  var baseValue = itemBaseValue !== null && itemBaseValue !== void 0 ? itemBaseValue : chartBaseValue;
  if (isNumber(baseValue)) {
    return baseValue;
  }
  var numericAxis = layout === 'horizontal' ? yAxis : xAxis;
  // @ts-expect-error d3scale .domain() returns unknown, Math.max expects number
  var domain = numericAxis.scale.domain();
  if (numericAxis.type === 'number') {
    var domainMax = Math.max(domain[0], domain[1]);
    var domainMin = Math.min(domain[0], domain[1]);
    if (baseValue === 'dataMin') {
      return domainMin;
    }
    if (baseValue === 'dataMax') {
      return domainMax;
    }
    return domainMax < 0 ? domainMax : Math.max(Math.min(domain[0], domain[1]), 0);
  }
  if (baseValue === 'dataMin') {
    return domain[0];
  }
  if (baseValue === 'dataMax') {
    return domain[1];
  }
  return domain[0];
};
function computeArea(_ref9) {
  var {
    areaSettings: {
      connectNulls,
      baseValue: itemBaseValue,
      dataKey
    },
    stackedData,
    layout,
    chartBaseValue,
    xAxis,
    yAxis,
    displayedData,
    dataStartIndex,
    xAxisTicks,
    yAxisTicks,
    bandSize
  } = _ref9;
  var hasStack = stackedData && stackedData.length;
  var baseValue = getBaseValue(layout, chartBaseValue, itemBaseValue, xAxis, yAxis);
  var isHorizontalLayout = layout === 'horizontal';
  var isRange = false;
  var points = displayedData.map((entry, index) => {
    var value;
    if (hasStack) {
      value = stackedData[dataStartIndex + index];
    } else {
      value = getValueByDataKey(entry, dataKey);
      if (!Array.isArray(value)) {
        value = [baseValue, value];
      } else {
        isRange = true;
      }
    }
    var isBreakPoint = value[1] == null || hasStack && !connectNulls && getValueByDataKey(entry, dataKey) == null;
    if (isHorizontalLayout) {
      return {
        // @ts-expect-error getCateCoordinateOfLine expects chart data to be an object, we allow unknown
        x: getCateCoordinateOfLine({
          axis: xAxis,
          ticks: xAxisTicks,
          bandSize,
          entry,
          index
        }),
        y: isBreakPoint ? null : yAxis.scale(value[1]),
        value,
        payload: entry
      };
    }
    return {
      x: isBreakPoint ? null : xAxis.scale(value[1]),
      // @ts-expect-error getCateCoordinateOfLine expects chart data to be an object, we allow unknown
      y: getCateCoordinateOfLine({
        axis: yAxis,
        ticks: yAxisTicks,
        bandSize,
        entry,
        index
      }),
      value,
      payload: entry
    };
  });
  var baseLine;
  if (hasStack || isRange) {
    baseLine = points.map(entry => {
      var x = Array.isArray(entry.value) ? entry.value[0] : null;
      if (isHorizontalLayout) {
        return {
          x: entry.x,
          y: x != null && entry.y != null ? yAxis.scale(x) : null
        };
      }
      return {
        x: x != null ? xAxis.scale(x) : null,
        y: entry.y
      };
    });
  } else {
    baseLine = isHorizontalLayout ? yAxis.scale(baseValue) : xAxis.scale(baseValue);
  }
  return {
    points,
    baseLine,
    isRange
  };
}
class Area extends reactExports.PureComponent {
  render() {
    // Report all props to Redux store first, before calling any hooks, to avoid circular dependencies.
    return /*#__PURE__*/reactExports.createElement(CartesianGraphicalItemContext, {
      type: "area",
      data: this.props.data,
      dataKey: this.props.dataKey,
      xAxisId: this.props.xAxisId,
      yAxisId: this.props.yAxisId,
      zAxisId: 0,
      stackId: this.props.stackId,
      hide: this.props.hide,
      barSize: undefined
    }, /*#__PURE__*/reactExports.createElement(SetLegendPayload, {
      legendPayload: computeLegendPayloadFromAreaData(this.props)
    }), /*#__PURE__*/reactExports.createElement(SetTooltipEntrySettings, {
      fn: getTooltipEntrySettings,
      args: this.props
    }), /*#__PURE__*/reactExports.createElement(AreaImpl, this.props));
  }
}
_defineProperty$4(Area, "displayName", 'Area');
_defineProperty$4(Area, "defaultProps", defaultAreaProps);

function ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), true).forEach(function (r) { _defineProperty$3(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$3(e, r, t) { return (r = _toPropertyKey$3(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$3(t) { var i = _toPrimitive$3(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$3(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }

/**
 * Properties shared in X, Y, and Z axes
 */

/**
 * These are the external props, visible for users as they set them using our public API.
 * There is all sorts of internal computed things based on these, but they will come through selectors.
 *
 * Properties shared between X and Y axes
 */

/**
 * Z axis is special because it's never displayed. It controls the size of Scatter dots,
 * but it never displays ticks anywhere.
 */

var initialState$1 = {
  xAxis: {},
  yAxis: {},
  zAxis: {}
};

/**
 * This is the slice where each individual Axis element pushes its own configuration.
 * Prefer to use this one instead of axisSlice.
 */
var cartesianAxisSlice = createSlice({
  name: 'cartesianAxis',
  initialState: initialState$1,
  reducers: {
    addXAxis(state, action) {
      state.xAxis[action.payload.id] = castDraft(action.payload);
    },
    removeXAxis(state, action) {
      delete state.xAxis[action.payload.id];
    },
    addYAxis(state, action) {
      state.yAxis[action.payload.id] = castDraft(action.payload);
    },
    removeYAxis(state, action) {
      delete state.yAxis[action.payload.id];
    },
    addZAxis(state, action) {
      state.zAxis[action.payload.id] = castDraft(action.payload);
    },
    removeZAxis(state, action) {
      delete state.zAxis[action.payload.id];
    },
    updateYAxisWidth(state, action) {
      var {
        id,
        width
      } = action.payload;
      if (state.yAxis[id]) {
        state.yAxis[id] = _objectSpread$1(_objectSpread$1({}, state.yAxis[id]), {}, {
          width
        });
      }
    }
  }
});
var {
  addXAxis,
  removeXAxis,
  addYAxis,
  removeYAxis,
  addZAxis,
  removeZAxis,
  updateYAxisWidth
} = cartesianAxisSlice.actions;
var cartesianAxisReducer = cartesianAxisSlice.reducer;

var _excluded$5 = ["children"],
  _excluded2 = ["dangerouslySetInnerHTML", "ticks"];
function _defineProperty$2(e, r, t) { return (r = _toPropertyKey$2(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$2(t) { var i = _toPrimitive$2(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$2(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _extends$4() { return _extends$4 = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$4.apply(null, arguments); }
function _objectWithoutProperties$5(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$5(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$5(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
function SetXAxisSettings(props) {
  var dispatch = useAppDispatch();
  var settings = reactExports.useMemo(() => {
    var {
        children
      } = props,
      rest = _objectWithoutProperties$5(props, _excluded$5);
    return rest;
  }, [props]);
  var synchronizedSettings = useAppSelector(state => selectXAxisSettings(state, settings.id));
  var settingsAreSynchronized = settings === synchronizedSettings;
  reactExports.useEffect(() => {
    dispatch(addXAxis(settings));
    return () => {
      dispatch(removeXAxis(settings));
    };
  }, [settings, dispatch]);
  if (settingsAreSynchronized) {
    return props.children;
  }
  return null;
}
var XAxisImpl = props => {
  var {
    xAxisId,
    className
  } = props;
  var viewBox = useAppSelector(selectAxisViewBox);
  var isPanorama = useIsPanorama();
  var axisType = 'xAxis';
  var scale = useAppSelector(state => selectAxisScale(state, axisType, xAxisId, isPanorama));
  var cartesianTickItems = useAppSelector(state => selectTicksOfAxis(state, axisType, xAxisId, isPanorama));
  var axisSize = useAppSelector(state => selectXAxisSize(state, xAxisId));
  var position = useAppSelector(state => selectXAxisPosition(state, xAxisId));
  if (axisSize == null || position == null) {
    return null;
  }
  var {
      dangerouslySetInnerHTML,
      ticks
    } = props,
    allOtherProps = _objectWithoutProperties$5(props, _excluded2);
  return /*#__PURE__*/reactExports.createElement(CartesianAxis, _extends$4({}, allOtherProps, {
    scale: scale,
    x: position.x,
    y: position.y,
    width: axisSize.width,
    height: axisSize.height,
    className: clsx("recharts-".concat(axisType, " ").concat(axisType), className),
    viewBox: viewBox,
    ticks: cartesianTickItems
  }));
};
var XAxisSettingsDispatcher = props => {
  var _props$interval, _props$includeHidden, _props$angle, _props$minTickGap, _props$tick;
  return /*#__PURE__*/reactExports.createElement(SetXAxisSettings, {
    interval: (_props$interval = props.interval) !== null && _props$interval !== void 0 ? _props$interval : 'preserveEnd',
    id: props.xAxisId,
    scale: props.scale,
    type: props.type,
    padding: props.padding,
    allowDataOverflow: props.allowDataOverflow,
    domain: props.domain,
    dataKey: props.dataKey,
    allowDuplicatedCategory: props.allowDuplicatedCategory,
    allowDecimals: props.allowDecimals,
    tickCount: props.tickCount,
    includeHidden: (_props$includeHidden = props.includeHidden) !== null && _props$includeHidden !== void 0 ? _props$includeHidden : false,
    reversed: props.reversed,
    ticks: props.ticks,
    height: props.height,
    orientation: props.orientation,
    mirror: props.mirror,
    hide: props.hide,
    unit: props.unit,
    name: props.name,
    angle: (_props$angle = props.angle) !== null && _props$angle !== void 0 ? _props$angle : 0,
    minTickGap: (_props$minTickGap = props.minTickGap) !== null && _props$minTickGap !== void 0 ? _props$minTickGap : 5,
    tick: (_props$tick = props.tick) !== null && _props$tick !== void 0 ? _props$tick : true,
    tickFormatter: props.tickFormatter
  }, /*#__PURE__*/reactExports.createElement(XAxisImpl, props));
};

// eslint-disable-next-line react/prefer-stateless-function
class XAxis extends reactExports.Component {
  render() {
    return /*#__PURE__*/reactExports.createElement(XAxisSettingsDispatcher, this.props);
  }
}
_defineProperty$2(XAxis, "displayName", 'XAxis');
_defineProperty$2(XAxis, "defaultProps", {
  allowDataOverflow: implicitXAxis.allowDataOverflow,
  allowDecimals: implicitXAxis.allowDecimals,
  allowDuplicatedCategory: implicitXAxis.allowDuplicatedCategory,
  height: implicitXAxis.height,
  hide: false,
  mirror: implicitXAxis.mirror,
  orientation: implicitXAxis.orientation,
  padding: implicitXAxis.padding,
  reversed: implicitXAxis.reversed,
  scale: implicitXAxis.scale,
  tickCount: implicitXAxis.tickCount,
  type: implicitXAxis.type,
  xAxisId: 0
});

/**
 * Calculates the width of the Y-axis based on the tick labels and the axis label.
 * @param {Object} params - The parameters object.
 * @param {React.RefObject<any>} params.cartesianAxisRef - The ref to the CartesianAxis component.
 * @param {React.RefObject<Element>} params.labelRef - The ref to the label element.
 * @param {number} [params.labelGapWithTick=5] - The gap between the label and the tick.
 * @returns {number} The calculated width of the Y-axis.
 */
var getCalculatedYAxisWidth = _ref => {
  var {
    ticks,
    label,
    labelGapWithTick = 5,
    // Default gap between label and tick
    tickSize = 0,
    tickMargin = 0
  } = _ref;
  // find the max width of the tick labels
  var maxTickWidth = 0;
  if (ticks) {
    ticks.forEach(tickNode => {
      if (tickNode) {
        var bbox = tickNode.getBoundingClientRect();
        if (bbox.width > maxTickWidth) {
          maxTickWidth = bbox.width;
        }
      }
    });

    // calculate width of the axis label
    var labelWidth = label ? label.getBoundingClientRect().width : 0;
    var tickWidth = tickSize + tickMargin;

    // calculate the updated width of the y-axis
    var updatedYAxisWidth = maxTickWidth + tickWidth + labelWidth + (label ? labelGapWithTick : 0);
    return Math.round(updatedYAxisWidth);
  }
  return 0;
};

var _excluded$4 = ["dangerouslySetInnerHTML", "ticks"];
function _defineProperty$1(e, r, t) { return (r = _toPropertyKey$1(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey$1(t) { var i = _toPrimitive$1(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive$1(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _extends$3() { return _extends$3 = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$3.apply(null, arguments); }
function _objectWithoutProperties$4(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$4(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$4(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
function SetYAxisSettings(settings) {
  var dispatch = useAppDispatch();
  reactExports.useEffect(() => {
    dispatch(addYAxis(settings));
    return () => {
      dispatch(removeYAxis(settings));
    };
  }, [settings, dispatch]);
  return null;
}
var YAxisImpl = props => {
  var _cartesianAxisRef$cur;
  var {
    yAxisId,
    className,
    width,
    label
  } = props;
  var cartesianAxisRef = reactExports.useRef(null);
  var labelRef = reactExports.useRef(null);
  var viewBox = useAppSelector(selectAxisViewBox);
  var isPanorama = useIsPanorama();
  var dispatch = useAppDispatch();
  var axisType = 'yAxis';
  var scale = useAppSelector(state => selectAxisScale(state, axisType, yAxisId, isPanorama));
  var axisSize = useAppSelector(state => selectYAxisSize(state, yAxisId));
  var position = useAppSelector(state => selectYAxisPosition(state, yAxisId));
  var cartesianTickItems = useAppSelector(state => selectTicksOfAxis(state, axisType, yAxisId, isPanorama));
  reactExports.useLayoutEffect(() => {
    var _axisComponent$tickRe;
    // No dynamic width calculation is done when width !== 'auto'
    // or when a function/react element is used for label
    if (width !== 'auto' || !axisSize || isLabelContentAFunction(label) || /*#__PURE__*/reactExports.isValidElement(label)) return;
    var axisComponent = cartesianAxisRef.current;
    var tickNodes = axisComponent === null || axisComponent === void 0 || (_axisComponent$tickRe = axisComponent.tickRefs) === null || _axisComponent$tickRe === void 0 ? void 0 : _axisComponent$tickRe.current;
    var {
      tickSize,
      tickMargin
    } = axisComponent.props;

    // get calculated width based on the label width, ticks etc
    var updatedYAxisWidth = getCalculatedYAxisWidth({
      ticks: tickNodes,
      label: labelRef.current,
      labelGapWithTick: 5,
      tickSize,
      tickMargin
    });

    // if the width has changed, dispatch an action to update the width
    if (Math.round(axisSize.width) !== Math.round(updatedYAxisWidth)) dispatch(updateYAxisWidth({
      id: yAxisId,
      width: updatedYAxisWidth
    }));
  }, [cartesianAxisRef, cartesianAxisRef === null || cartesianAxisRef === void 0 || (_cartesianAxisRef$cur = cartesianAxisRef.current) === null || _cartesianAxisRef$cur === void 0 || (_cartesianAxisRef$cur = _cartesianAxisRef$cur.tickRefs) === null || _cartesianAxisRef$cur === void 0 ? void 0 : _cartesianAxisRef$cur.current, // required to do re-calculation when using brush
  axisSize === null || axisSize === void 0 ? void 0 : axisSize.width, axisSize, dispatch, label, yAxisId, width]);
  if (axisSize == null || position == null) {
    return null;
  }
  var {
      dangerouslySetInnerHTML,
      ticks
    } = props,
    allOtherProps = _objectWithoutProperties$4(props, _excluded$4);
  return /*#__PURE__*/reactExports.createElement(CartesianAxis, _extends$3({}, allOtherProps, {
    ref: cartesianAxisRef,
    labelRef: labelRef,
    scale: scale,
    x: position.x,
    y: position.y,
    width: axisSize.width,
    height: axisSize.height,
    className: clsx("recharts-".concat(axisType, " ").concat(axisType), className),
    viewBox: viewBox,
    ticks: cartesianTickItems
  }));
};
var YAxisSettingsDispatcher = props => {
  var _props$interval, _props$includeHidden, _props$angle, _props$minTickGap, _props$tick;
  return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, /*#__PURE__*/reactExports.createElement(SetYAxisSettings, {
    interval: (_props$interval = props.interval) !== null && _props$interval !== void 0 ? _props$interval : 'preserveEnd',
    id: props.yAxisId,
    scale: props.scale,
    type: props.type,
    domain: props.domain,
    allowDataOverflow: props.allowDataOverflow,
    dataKey: props.dataKey,
    allowDuplicatedCategory: props.allowDuplicatedCategory,
    allowDecimals: props.allowDecimals,
    tickCount: props.tickCount,
    padding: props.padding,
    includeHidden: (_props$includeHidden = props.includeHidden) !== null && _props$includeHidden !== void 0 ? _props$includeHidden : false,
    reversed: props.reversed,
    ticks: props.ticks,
    width: props.width,
    orientation: props.orientation,
    mirror: props.mirror,
    hide: props.hide,
    unit: props.unit,
    name: props.name,
    angle: (_props$angle = props.angle) !== null && _props$angle !== void 0 ? _props$angle : 0,
    minTickGap: (_props$minTickGap = props.minTickGap) !== null && _props$minTickGap !== void 0 ? _props$minTickGap : 5,
    tick: (_props$tick = props.tick) !== null && _props$tick !== void 0 ? _props$tick : true,
    tickFormatter: props.tickFormatter
  }), /*#__PURE__*/reactExports.createElement(YAxisImpl, props));
};
var YAxisDefaultProps = {
  allowDataOverflow: implicitYAxis.allowDataOverflow,
  allowDecimals: implicitYAxis.allowDecimals,
  allowDuplicatedCategory: implicitYAxis.allowDuplicatedCategory,
  hide: false,
  mirror: implicitYAxis.mirror,
  orientation: implicitYAxis.orientation,
  padding: implicitYAxis.padding,
  reversed: implicitYAxis.reversed,
  scale: implicitYAxis.scale,
  tickCount: implicitYAxis.tickCount,
  type: implicitYAxis.type,
  width: implicitYAxis.width,
  yAxisId: 0
};

// eslint-disable-next-line react/prefer-stateless-function
class YAxis extends reactExports.Component {
  render() {
    return /*#__PURE__*/reactExports.createElement(YAxisSettingsDispatcher, this.props);
  }
}
_defineProperty$1(YAxis, "displayName", 'YAxis');
_defineProperty$1(YAxis, "defaultProps", YAxisDefaultProps);

var useSyncExternalStoreWithSelector_production = {};

/**
 * @license React
 * use-sync-external-store-with-selector.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var React = reactExports;
function is(x, y) {
  return (x === y && (0 !== x || 1 / x === 1 / y)) || (x !== x && y !== y);
}
var objectIs = "function" === typeof Object.is ? Object.is : is,
  useSyncExternalStore = React.useSyncExternalStore,
  useRef = React.useRef,
  useEffect = React.useEffect,
  useMemo = React.useMemo,
  useDebugValue = React.useDebugValue;
useSyncExternalStoreWithSelector_production.useSyncExternalStoreWithSelector = function (
  subscribe,
  getSnapshot,
  getServerSnapshot,
  selector,
  isEqual
) {
  var instRef = useRef(null);
  if (null === instRef.current) {
    var inst = { hasValue: false, value: null };
    instRef.current = inst;
  } else inst = instRef.current;
  instRef = useMemo(
    function () {
      function memoizedSelector(nextSnapshot) {
        if (!hasMemo) {
          hasMemo = true;
          memoizedSnapshot = nextSnapshot;
          nextSnapshot = selector(nextSnapshot);
          if (void 0 !== isEqual && inst.hasValue) {
            var currentSelection = inst.value;
            if (isEqual(currentSelection, nextSnapshot))
              return (memoizedSelection = currentSelection);
          }
          return (memoizedSelection = nextSnapshot);
        }
        currentSelection = memoizedSelection;
        if (objectIs(memoizedSnapshot, nextSnapshot)) return currentSelection;
        var nextSelection = selector(nextSnapshot);
        if (void 0 !== isEqual && isEqual(currentSelection, nextSelection))
          return (memoizedSnapshot = nextSnapshot), currentSelection;
        memoizedSnapshot = nextSnapshot;
        return (memoizedSelection = nextSelection);
      }
      var hasMemo = false,
        memoizedSnapshot,
        memoizedSelection,
        maybeGetServerSnapshot =
          void 0 === getServerSnapshot ? null : getServerSnapshot;
      return [
        function () {
          return memoizedSelector(getSnapshot());
        },
        null === maybeGetServerSnapshot
          ? void 0
          : function () {
              return memoizedSelector(maybeGetServerSnapshot());
            }
      ];
    },
    [getSnapshot, getServerSnapshot, selector, isEqual]
  );
  var value = useSyncExternalStore(subscribe, instRef[0], instRef[1]);
  useEffect(
    function () {
      inst.hasValue = true;
      inst.value = value;
    },
    [value]
  );
  useDebugValue(value);
  return value;
};

function defaultNoopBatch(callback) {
  callback();
}
function createListenerCollection() {
  let first = null;
  let last = null;
  return {
    clear() {
      first = null;
      last = null;
    },
    notify() {
      defaultNoopBatch(() => {
        let listener = first;
        while (listener) {
          listener.callback();
          listener = listener.next;
        }
      });
    },
    get() {
      const listeners = [];
      let listener = first;
      while (listener) {
        listeners.push(listener);
        listener = listener.next;
      }
      return listeners;
    },
    subscribe(callback) {
      let isSubscribed = true;
      const listener = last = {
        callback,
        next: null,
        prev: last
      };
      if (listener.prev) {
        listener.prev.next = listener;
      } else {
        first = listener;
      }
      return function unsubscribe() {
        if (!isSubscribed || first === null) return;
        isSubscribed = false;
        if (listener.next) {
          listener.next.prev = listener.prev;
        } else {
          last = listener.prev;
        }
        if (listener.prev) {
          listener.prev.next = listener.next;
        } else {
          first = listener.next;
        }
      };
    }
  };
}
var nullListeners = {
  notify() {
  },
  get: () => []
};
function createSubscription(store, parentSub) {
  let unsubscribe;
  let listeners = nullListeners;
  let subscriptionsAmount = 0;
  let selfSubscribed = false;
  function addNestedSub(listener) {
    trySubscribe();
    const cleanupListener = listeners.subscribe(listener);
    let removed = false;
    return () => {
      if (!removed) {
        removed = true;
        cleanupListener();
        tryUnsubscribe();
      }
    };
  }
  function notifyNestedSubs() {
    listeners.notify();
  }
  function handleChangeWrapper() {
    if (subscription.onStateChange) {
      subscription.onStateChange();
    }
  }
  function isSubscribed() {
    return selfSubscribed;
  }
  function trySubscribe() {
    subscriptionsAmount++;
    if (!unsubscribe) {
      unsubscribe = store.subscribe(handleChangeWrapper);
      listeners = createListenerCollection();
    }
  }
  function tryUnsubscribe() {
    subscriptionsAmount--;
    if (unsubscribe && subscriptionsAmount === 0) {
      unsubscribe();
      unsubscribe = void 0;
      listeners.clear();
      listeners = nullListeners;
    }
  }
  function trySubscribeSelf() {
    if (!selfSubscribed) {
      selfSubscribed = true;
      trySubscribe();
    }
  }
  function tryUnsubscribeSelf() {
    if (selfSubscribed) {
      selfSubscribed = false;
      tryUnsubscribe();
    }
  }
  const subscription = {
    addNestedSub,
    notifyNestedSubs,
    handleChangeWrapper,
    isSubscribed,
    trySubscribe: trySubscribeSelf,
    tryUnsubscribe: tryUnsubscribeSelf,
    getListeners: () => listeners
  };
  return subscription;
}
var canUseDOM = () => !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
var isDOM = /* @__PURE__ */ canUseDOM();
var isRunningInReactNative = () => typeof navigator !== "undefined" && navigator.product === "ReactNative";
var isReactNative = /* @__PURE__ */ isRunningInReactNative();
var getUseIsomorphicLayoutEffect = () => isDOM || isReactNative ? reactExports.useLayoutEffect : reactExports.useEffect;
var useIsomorphicLayoutEffect = /* @__PURE__ */ getUseIsomorphicLayoutEffect();
var ContextKey = /* @__PURE__ */ Symbol.for(`react-redux-context`);
var gT = typeof globalThis !== "undefined" ? globalThis : (
  /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */
  {}
);
function getContext() {
  if (!reactExports.createContext) return {};
  const contextMap = gT[ContextKey] ??= /* @__PURE__ */ new Map();
  let realContext = contextMap.get(reactExports.createContext);
  if (!realContext) {
    realContext = reactExports.createContext(
      null
    );
    contextMap.set(reactExports.createContext, realContext);
  }
  return realContext;
}
var ReactReduxContext = /* @__PURE__ */ getContext();
function Provider(providerProps) {
  const { children, context, serverState, store } = providerProps;
  const contextValue = reactExports.useMemo(() => {
    const subscription = createSubscription(store);
    const baseContextValue = {
      store,
      subscription,
      getServerState: serverState ? () => serverState : void 0
    };
    {
      return baseContextValue;
    }
  }, [store, serverState]);
  const previousState = reactExports.useMemo(() => store.getState(), [store]);
  useIsomorphicLayoutEffect(() => {
    const { subscription } = contextValue;
    subscription.onStateChange = subscription.notifyNestedSubs;
    subscription.trySubscribe();
    if (previousState !== store.getState()) {
      subscription.notifyNestedSubs();
    }
    return () => {
      subscription.tryUnsubscribe();
      subscription.onStateChange = void 0;
    };
  }, [contextValue, previousState]);
  const Context = context || ReactReduxContext;
  return /* @__PURE__ */ reactExports.createElement(Context.Provider, { value: contextValue }, children);
}
var Provider_default = Provider;

var pickChartPointer = (_state, chartPointer) => chartPointer;
var selectActivePropsFromChartPointer = createSelector([pickChartPointer, selectChartLayout, selectPolarViewBox, selectTooltipAxisType, selectTooltipAxisRangeWithReverse, selectTooltipAxisTicks, selectOrderedTooltipTicks, selectChartOffsetInternal], combineActiveProps);

/**
 * Computes the chart coordinates from the mouse event.
 *
 * The coordinates are relative to the top-left corner of the chart,
 * where the top-left corner of the chart is (0, 0).
 * Moving right, the x-coordinate increases, and moving down, the y-coordinate increases.
 *
 * The coordinates are rounded to the nearest integer and are including a CSS transform scale.
 * So a chart that's scaled will return the same coordinates as a chart that's not scaled.
 *
 * @param event The mouse event from React event handlers
 * @return chartPointer The chart coordinates relative to the top-left corner of the chart
 */
var getChartPointer = event => {
  var rect = event.currentTarget.getBoundingClientRect();
  var scaleX = rect.width / event.currentTarget.offsetWidth;
  var scaleY = rect.height / event.currentTarget.offsetHeight;
  return {
    /*
     * Here it's important to use:
     * - event.clientX and event.clientY to get the mouse position relative to the viewport, including scroll.
     * - pageX and pageY are not used because they are relative to the whole document, and ignore scroll.
     * - rect.left and rect.top are used to get the position of the chart relative to the viewport.
     * - offsetX and offsetY are not used because they are relative to the offset parent
     *  which may or may not be the same as the clientX and clientY, depending on the position of the chart in the DOM
     *  and surrounding element styles. CSS position: relative, absolute, fixed, will change the offset parent.
     * - scaleX and scaleY are necessary for when the chart element is scaled using CSS `transform: scale(N)`.
     */
    chartX: Math.round((event.clientX - rect.left) / scaleX),
    chartY: Math.round((event.clientY - rect.top) / scaleY)
  };
};

var mouseClickAction = createAction('mouseClick');
var mouseClickMiddleware = createListenerMiddleware();

// TODO: there's a bug here when you click the chart the activeIndex resets to zero
mouseClickMiddleware.startListening({
  actionCreator: mouseClickAction,
  effect: (action, listenerApi) => {
    var mousePointer = action.payload;
    var activeProps = selectActivePropsFromChartPointer(listenerApi.getState(), getChartPointer(mousePointer));
    if ((activeProps === null || activeProps === void 0 ? void 0 : activeProps.activeIndex) != null) {
      listenerApi.dispatch(setMouseClickAxisIndex({
        activeIndex: activeProps.activeIndex,
        activeDataKey: undefined,
        activeCoordinate: activeProps.activeCoordinate
      }));
    }
  }
});
var mouseMoveAction = createAction('mouseMove');
var mouseMoveMiddleware = createListenerMiddleware();
mouseMoveMiddleware.startListening({
  actionCreator: mouseMoveAction,
  effect: (action, listenerApi) => {
    var mousePointer = action.payload;
    var state = listenerApi.getState();
    var tooltipEventType = selectTooltipEventType$1(state, state.tooltip.settings.shared);
    var activeProps = selectActivePropsFromChartPointer(state, getChartPointer(mousePointer));

    // this functionality only applies to charts that have axes
    if (tooltipEventType === 'axis') {
      if ((activeProps === null || activeProps === void 0 ? void 0 : activeProps.activeIndex) != null) {
        listenerApi.dispatch(setMouseOverAxisIndex({
          activeIndex: activeProps.activeIndex,
          activeDataKey: undefined,
          activeCoordinate: activeProps.activeCoordinate
        }));
      } else {
        // this is needed to clear tooltip state when the mouse moves out of the inRange (svg - offset) function, but not yet out of the svg
        listenerApi.dispatch(mouseLeaveChart());
      }
    }
  }
});

function reduxDevtoolsJsonStringifyReplacer(_key, value) {
  if (value instanceof HTMLElement) {
    return "HTMLElement <".concat(value.tagName, " class=\"").concat(value.className, "\">");
  }
  if (value === window) {
    return 'global.window';
  }
  return value;
}

/**
 * These are chart options that users can choose - which means they can also
 * choose to change them which should trigger a re-render.
 */

var initialState = {
  accessibilityLayer: true,
  barCategoryGap: '10%',
  barGap: 4,
  barSize: undefined,
  className: undefined,
  maxBarSize: undefined,
  stackOffset: 'none',
  syncId: undefined,
  syncMethod: 'index'
};
var rootPropsSlice = createSlice({
  name: 'rootProps',
  initialState,
  reducers: {
    updateOptions: (state, action) => {
      var _action$payload$barGa;
      state.accessibilityLayer = action.payload.accessibilityLayer;
      state.barCategoryGap = action.payload.barCategoryGap;
      state.barGap = (_action$payload$barGa = action.payload.barGap) !== null && _action$payload$barGa !== void 0 ? _action$payload$barGa : initialState.barGap;
      state.barSize = action.payload.barSize;
      state.maxBarSize = action.payload.maxBarSize;
      state.stackOffset = action.payload.stackOffset;
      state.syncId = action.payload.syncId;
      state.syncMethod = action.payload.syncMethod;
      state.className = action.payload.className;
    }
  }
});
var rootPropsReducer = rootPropsSlice.reducer;
var {
  updateOptions
} = rootPropsSlice.actions;

var polarOptionsSlice = createSlice({
  name: 'polarOptions',
  initialState: null,
  reducers: {
    updatePolarOptions: (_state, action) => {
      return action.payload;
    }
  }
});
var {
  updatePolarOptions
} = polarOptionsSlice.actions;
var polarOptionsReducer = polarOptionsSlice.reducer;

var keyDownAction = createAction('keyDown');
var focusAction = createAction('focus');
var keyboardEventsMiddleware = createListenerMiddleware();
keyboardEventsMiddleware.startListening({
  actionCreator: keyDownAction,
  effect: (action, listenerApi) => {
    var state = listenerApi.getState();
    var accessibilityLayerIsActive = state.rootProps.accessibilityLayer !== false;
    if (!accessibilityLayerIsActive) {
      return;
    }
    var {
      keyboardInteraction
    } = state.tooltip;
    var key = action.payload;
    if (key !== 'ArrowRight' && key !== 'ArrowLeft' && key !== 'Enter') {
      return;
    }

    // TODO this is lacking index for charts that do not support numeric indexes
    var currentIndex = Number(combineActiveTooltipIndex(keyboardInteraction, selectTooltipDisplayedData(state)));
    var tooltipTicks = selectTooltipAxisTicks(state);
    if (key === 'Enter') {
      var _coordinate = selectCoordinateForDefaultIndex(state, 'axis', 'hover', String(keyboardInteraction.index));
      listenerApi.dispatch(setKeyboardInteraction({
        active: !keyboardInteraction.active,
        activeIndex: keyboardInteraction.index,
        activeDataKey: keyboardInteraction.dataKey,
        activeCoordinate: _coordinate
      }));
      return;
    }
    var direction = selectChartDirection(state);
    var directionMultiplier = direction === 'left-to-right' ? 1 : -1;
    var movement = key === 'ArrowRight' ? 1 : -1;
    var nextIndex = currentIndex + movement * directionMultiplier;
    if (tooltipTicks == null || nextIndex >= tooltipTicks.length || nextIndex < 0) {
      return;
    }
    var coordinate = selectCoordinateForDefaultIndex(state, 'axis', 'hover', String(nextIndex));
    listenerApi.dispatch(setKeyboardInteraction({
      active: true,
      activeIndex: nextIndex.toString(),
      activeDataKey: undefined,
      activeCoordinate: coordinate
    }));
  }
});
keyboardEventsMiddleware.startListening({
  actionCreator: focusAction,
  effect: (_action, listenerApi) => {
    var state = listenerApi.getState();
    var accessibilityLayerIsActive = state.rootProps.accessibilityLayer !== false;
    if (!accessibilityLayerIsActive) {
      return;
    }
    var {
      keyboardInteraction
    } = state.tooltip;
    if (keyboardInteraction.active) {
      return;
    }
    if (keyboardInteraction.index == null) {
      var nextIndex = '0';
      var coordinate = selectCoordinateForDefaultIndex(state, 'axis', 'hover', String(nextIndex));
      listenerApi.dispatch(setKeyboardInteraction({
        activeDataKey: undefined,
        active: true,
        activeIndex: nextIndex,
        activeCoordinate: coordinate
      }));
    }
  }
});

var externalEventAction = createAction('externalEvent');
var externalEventsMiddleware = createListenerMiddleware();
externalEventsMiddleware.startListening({
  actionCreator: externalEventAction,
  effect: (action, listenerApi) => {
    if (action.payload.handler == null) {
      return;
    }
    var state = listenerApi.getState();
    var nextState = {
      activeCoordinate: selectActiveTooltipCoordinate(state),
      activeDataKey: selectActiveTooltipDataKey(state),
      activeIndex: selectActiveTooltipIndex(state),
      activeLabel: selectActiveLabel$1(state),
      activeTooltipIndex: selectActiveTooltipIndex(state),
      isTooltipActive: selectIsTooltipActive$1(state)
    };
    action.payload.handler(nextState, action.payload.reactEvent);
  }
});

var selectAllTooltipPayloadConfiguration = createSelector([selectTooltipState], tooltipState => tooltipState.tooltipItemPayloads);
var selectTooltipCoordinate = createSelector([selectAllTooltipPayloadConfiguration, selectTooltipPayloadSearcher, (_state, tooltipIndex, _dataKey) => tooltipIndex, (_state, _tooltipIndex, dataKey) => dataKey], (allTooltipConfigurations, tooltipPayloadSearcher, tooltipIndex, dataKey) => {
  var mostRelevantTooltipConfiguration = allTooltipConfigurations.find(tooltipConfiguration => {
    return tooltipConfiguration.settings.dataKey === dataKey;
  });
  if (mostRelevantTooltipConfiguration == null) {
    return undefined;
  }
  var {
    positions
  } = mostRelevantTooltipConfiguration;
  if (positions == null) {
    return undefined;
  }
  // @ts-expect-error tooltipPayloadSearcher is not typed well
  var maybePosition = tooltipPayloadSearcher(positions, tooltipIndex);
  return maybePosition;
});

var touchEventAction = createAction('touchMove');
var touchEventMiddleware = createListenerMiddleware();
touchEventMiddleware.startListening({
  actionCreator: touchEventAction,
  effect: (action, listenerApi) => {
    var touchEvent = action.payload;
    var state = listenerApi.getState();
    var tooltipEventType = selectTooltipEventType$1(state, state.tooltip.settings.shared);
    if (tooltipEventType === 'axis') {
      var activeProps = selectActivePropsFromChartPointer(state, getChartPointer({
        clientX: touchEvent.touches[0].clientX,
        clientY: touchEvent.touches[0].clientY,
        currentTarget: touchEvent.currentTarget
      }));
      if ((activeProps === null || activeProps === void 0 ? void 0 : activeProps.activeIndex) != null) {
        listenerApi.dispatch(setMouseOverAxisIndex({
          activeIndex: activeProps.activeIndex,
          activeDataKey: undefined,
          activeCoordinate: activeProps.activeCoordinate
        }));
      }
    } else if (tooltipEventType === 'item') {
      var _target$getAttribute;
      var touch = touchEvent.touches[0];
      var target = document.elementFromPoint(touch.clientX, touch.clientY);
      if (!target || !target.getAttribute) {
        return;
      }
      var itemIndex = target.getAttribute(DATA_ITEM_INDEX_ATTRIBUTE_NAME);
      var dataKey = (_target$getAttribute = target.getAttribute(DATA_ITEM_DATAKEY_ATTRIBUTE_NAME)) !== null && _target$getAttribute !== void 0 ? _target$getAttribute : undefined;
      var coordinate = selectTooltipCoordinate(listenerApi.getState(), itemIndex, dataKey);
      listenerApi.dispatch(setActiveMouseOverItemIndex({
        activeDataKey: dataKey,
        activeIndex: itemIndex,
        activeCoordinate: coordinate
      }));
    }
  }
});

var rootReducer = combineReducers({
  brush: brushReducer,
  cartesianAxis: cartesianAxisReducer,
  chartData: chartDataReducer,
  graphicalItems: graphicalItemsReducer,
  layout: chartLayoutReducer,
  legend: legendReducer,
  options: optionsReducer,
  polarAxis: polarAxisReducer,
  polarOptions: polarOptionsReducer,
  referenceElements: referenceElementsReducer,
  rootProps: rootPropsReducer,
  tooltip: tooltipReducer
});
var createRechartsStore = function createRechartsStore(preloadedState) {
  var chartName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Chart';
  return configureStore({
    reducer: rootReducer,
    // redux-toolkit v1 types are unhappy with the preloadedState type. Remove the `as any` when bumping to v2
    preloadedState: preloadedState,
    // @ts-expect-error redux-toolkit v1 types are unhappy with the middleware array. Remove this comment when bumping to v2
    middleware: getDefaultMiddleware => getDefaultMiddleware({
      serializableCheck: false
    }).concat([mouseClickMiddleware.middleware, mouseMoveMiddleware.middleware, keyboardEventsMiddleware.middleware, externalEventsMiddleware.middleware, touchEventMiddleware.middleware]),
    devTools: {
      serialize: {
        replacer: reduxDevtoolsJsonStringifyReplacer
      },
      name: "recharts-".concat(chartName)
    }
  });
};

function RechartsStoreProvider(_ref) {
  var {
    preloadedState,
    children,
    reduxStoreName
  } = _ref;
  var isPanorama = useIsPanorama();
  /*
   * Why the ref? Redux official documentation recommends to use store as a singleton,
   * and reuse that everywhere: https://redux-toolkit.js.org/api/configureStore#basic-example
   *
   * Which is correct! Except that is considering deploying Redux in an app.
   * Recharts as a library supports multiple charts on the same page.
   * And each of these charts needs its own store independent of others!
   *
   * The alternative is to have everything in the store keyed by the chart id.
   * Which would make working with everything a little bit more painful because we need the chart id everywhere.
   */
  var storeRef = reactExports.useRef(null);

  /*
   * Panorama means that this chart is not its own chart, it's only a "preview"
   * being rendered as a child of Brush.
   * In such case, it should not have a store on its own - it should implicitly inherit
   * whatever data is in the "parent" or "root" chart.
   * Which here is represented by not having a Provider at all. All selectors will use the root store by default.
   */
  if (isPanorama) {
    return children;
  }
  if (storeRef.current == null) {
    storeRef.current = createRechartsStore(preloadedState, reduxStoreName);
  }

  // ts-expect-error React-Redux types demand that the context internal value is not null, but we have that as default.
  var nonNullContext = RechartsReduxContext;
  return /*#__PURE__*/reactExports.createElement(Provider_default, {
    context: nonNullContext,
    store: storeRef.current
  }, children);
}

/**
 * "Main" props are props that are only accepted on the main chart,
 * as opposed to the small panorama chart inside a Brush.
 */

function ReportMainChartProps(_ref) {
  var {
    layout,
    width,
    height,
    margin
  } = _ref;
  var dispatch = useAppDispatch();

  /*
   * Skip dispatching properties in panorama chart for two reasons:
   * 1. The root chart should be deciding on these properties, and
   * 2. Brush reads these properties from redux store, and so they must remain stable
   *      to avoid circular dependency and infinite re-rendering.
   */
  var isPanorama = useIsPanorama();
  /*
   * useEffect here is required to avoid the "Cannot update a component while rendering a different component" error.
   * https://github.com/facebook/react/issues/18178
   *
   * Reported in https://github.com/recharts/recharts/issues/5514
   */
  reactExports.useEffect(() => {
    if (!isPanorama) {
      dispatch(setLayout(layout));
      dispatch(setChartSize({
        width,
        height
      }));
      dispatch(setMargin(margin));
    }
  }, [dispatch, isPanorama, layout, width, height, margin]);
  return null;
}

function ReportChartProps(props) {
  var dispatch = useAppDispatch();
  reactExports.useEffect(() => {
    dispatch(updateOptions(props));
  }, [dispatch, props]);
  return null;
}

var _excluded$3 = ["children"];
function _objectWithoutProperties$3(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$3(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$3(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
function _extends$2() { return _extends$2 = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$2.apply(null, arguments); }
var FULL_WIDTH_AND_HEIGHT = {
  width: '100%',
  height: '100%'
};
var MainChartSurface = /*#__PURE__*/reactExports.forwardRef((props, ref) => {
  var width = useChartWidth();
  var height = useChartHeight();
  var hasAccessibilityLayer = useAccessibilityLayer();
  if (!isPositiveNumber(width) || !isPositiveNumber(height)) {
    return null;
  }
  var {
    children,
    otherAttributes,
    title,
    desc
  } = props;
  var tabIndex, role;
  if (typeof otherAttributes.tabIndex === 'number') {
    tabIndex = otherAttributes.tabIndex;
  } else {
    tabIndex = hasAccessibilityLayer ? 0 : undefined;
  }
  if (typeof otherAttributes.role === 'string') {
    role = otherAttributes.role;
  } else {
    role = hasAccessibilityLayer ? 'application' : undefined;
  }
  return /*#__PURE__*/reactExports.createElement(Surface, _extends$2({}, otherAttributes, {
    title: title,
    desc: desc,
    role: role,
    tabIndex: tabIndex,
    width: width,
    height: height,
    style: FULL_WIDTH_AND_HEIGHT,
    ref: ref
  }), children);
});
var BrushPanoramaSurface = _ref => {
  var {
    children
  } = _ref;
  var brushDimensions = useAppSelector(selectBrushDimensions);
  if (!brushDimensions) {
    return null;
  }
  var {
    width,
    height,
    y,
    x
  } = brushDimensions;
  return /*#__PURE__*/reactExports.createElement(Surface, {
    width: width,
    height: height,
    x: x,
    y: y
  }, children);
};
var RootSurface = /*#__PURE__*/reactExports.forwardRef((_ref2, ref) => {
  var {
      children
    } = _ref2,
    rest = _objectWithoutProperties$3(_ref2, _excluded$3);
  var isPanorama = useIsPanorama();
  if (isPanorama) {
    return /*#__PURE__*/reactExports.createElement(BrushPanoramaSurface, null, children);
  }
  return /*#__PURE__*/reactExports.createElement(MainChartSurface, _extends$2({
    ref: ref
  }, rest), children);
});

function useReportScale() {
  var dispatch = useAppDispatch();
  var [ref, setRef] = reactExports.useState(null);
  var scale = useAppSelector(selectContainerScale);
  reactExports.useEffect(() => {
    if (ref == null) {
      return;
    }
    var rect = ref.getBoundingClientRect();
    var newScale = rect.width / ref.offsetWidth;
    if (isWellBehavedNumber(newScale) && newScale !== scale) {
      dispatch(setScale(newScale));
    }
  }, [ref, dispatch, scale]);
  return setRef;
}

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), true).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var RechartsWrapper = /*#__PURE__*/reactExports.forwardRef((_ref, ref) => {
  var {
    children,
    className,
    height,
    onClick,
    onContextMenu,
    onDoubleClick,
    onMouseDown,
    onMouseEnter,
    onMouseLeave,
    onMouseMove,
    onMouseUp,
    onTouchEnd,
    onTouchMove,
    onTouchStart,
    style,
    width
  } = _ref;
  var dispatch = useAppDispatch();
  var [tooltipPortal, setTooltipPortal] = reactExports.useState(null);
  var [legendPortal, setLegendPortal] = reactExports.useState(null);
  useSynchronisedEventsFromOtherCharts();
  var setScaleRef = useReportScale();
  var innerRef = reactExports.useCallback(node => {
    setScaleRef(node);
    if (typeof ref === 'function') {
      ref(node);
    }
    setTooltipPortal(node);
    setLegendPortal(node);
  }, [setScaleRef, ref, setTooltipPortal, setLegendPortal]);
  var myOnClick = reactExports.useCallback(e => {
    dispatch(mouseClickAction(e));
    dispatch(externalEventAction({
      handler: onClick,
      reactEvent: e
    }));
  }, [dispatch, onClick]);
  var myOnMouseEnter = reactExports.useCallback(e => {
    dispatch(mouseMoveAction(e));
    dispatch(externalEventAction({
      handler: onMouseEnter,
      reactEvent: e
    }));
  }, [dispatch, onMouseEnter]);
  var myOnMouseLeave = reactExports.useCallback(e => {
    dispatch(mouseLeaveChart());
    dispatch(externalEventAction({
      handler: onMouseLeave,
      reactEvent: e
    }));
  }, [dispatch, onMouseLeave]);
  var myOnMouseMove = reactExports.useCallback(e => {
    dispatch(mouseMoveAction(e));
    dispatch(externalEventAction({
      handler: onMouseMove,
      reactEvent: e
    }));
  }, [dispatch, onMouseMove]);
  var onFocus = reactExports.useCallback(() => {
    dispatch(focusAction());
  }, [dispatch]);
  var onKeyDown = reactExports.useCallback(e => {
    dispatch(keyDownAction(e.key));
  }, [dispatch]);
  var myOnContextMenu = reactExports.useCallback(e => {
    dispatch(externalEventAction({
      handler: onContextMenu,
      reactEvent: e
    }));
  }, [dispatch, onContextMenu]);
  var myOnDoubleClick = reactExports.useCallback(e => {
    dispatch(externalEventAction({
      handler: onDoubleClick,
      reactEvent: e
    }));
  }, [dispatch, onDoubleClick]);
  var myOnMouseDown = reactExports.useCallback(e => {
    dispatch(externalEventAction({
      handler: onMouseDown,
      reactEvent: e
    }));
  }, [dispatch, onMouseDown]);
  var myOnMouseUp = reactExports.useCallback(e => {
    dispatch(externalEventAction({
      handler: onMouseUp,
      reactEvent: e
    }));
  }, [dispatch, onMouseUp]);
  var myOnTouchStart = reactExports.useCallback(e => {
    dispatch(externalEventAction({
      handler: onTouchStart,
      reactEvent: e
    }));
  }, [dispatch, onTouchStart]);

  /*
   * onTouchMove is special because it behaves different from mouse events.
   * Mouse events have enter + leave combo that notify us when the mouse is over
   * a certain element. Touch events don't have that; touch only gives us
   * start (finger down), end (finger up) and move (finger moving).
   * So we need to figure out which element the user is touching
   * ourselves. Fortunately, there's a convenient method for that:
   * https://developer.mozilla.org/en-US/docs/Web/API/Document/elementFromPoint
   */
  var myOnTouchMove = reactExports.useCallback(e => {
    dispatch(touchEventAction(e));
    dispatch(externalEventAction({
      handler: onTouchMove,
      reactEvent: e
    }));
  }, [dispatch, onTouchMove]);
  var myOnTouchEnd = reactExports.useCallback(e => {
    dispatch(externalEventAction({
      handler: onTouchEnd,
      reactEvent: e
    }));
  }, [dispatch, onTouchEnd]);
  return /*#__PURE__*/reactExports.createElement(TooltipPortalContext.Provider, {
    value: tooltipPortal
  }, /*#__PURE__*/reactExports.createElement(LegendPortalContext.Provider, {
    value: legendPortal
  }, /*#__PURE__*/reactExports.createElement("div", {
    className: clsx('recharts-wrapper', className),
    style: _objectSpread({
      position: 'relative',
      cursor: 'default',
      width,
      height
    }, style),
    onClick: myOnClick,
    onContextMenu: myOnContextMenu,
    onDoubleClick: myOnDoubleClick,
    onFocus: onFocus,
    onKeyDown: onKeyDown,
    onMouseDown: myOnMouseDown,
    onMouseEnter: myOnMouseEnter,
    onMouseLeave: myOnMouseLeave,
    onMouseMove: myOnMouseMove,
    onMouseUp: myOnMouseUp,
    onTouchEnd: myOnTouchEnd,
    onTouchMove: myOnTouchMove,
    onTouchStart: myOnTouchStart,
    ref: innerRef
  }, children)));
});

var _excluded$2 = ["children", "className", "width", "height", "style", "compact", "title", "desc"];
function _objectWithoutProperties$2(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$2(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$2(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
var CategoricalChart = /*#__PURE__*/reactExports.forwardRef((props, ref) => {
  var {
      children,
      className,
      width,
      height,
      style,
      compact,
      title,
      desc
    } = props,
    others = _objectWithoutProperties$2(props, _excluded$2);
  var attrs = filterProps(others, false);

  // The "compact" mode is used as the panorama within Brush
  if (compact) {
    return /*#__PURE__*/reactExports.createElement(RootSurface, {
      otherAttributes: attrs,
      title: title,
      desc: desc
    }, children);
  }
  return /*#__PURE__*/reactExports.createElement(RechartsWrapper, {
    className: className,
    style: style,
    width: width,
    height: height,
    onClick: props.onClick,
    onMouseLeave: props.onMouseLeave,
    onMouseEnter: props.onMouseEnter,
    onMouseMove: props.onMouseMove,
    onMouseDown: props.onMouseDown,
    onMouseUp: props.onMouseUp,
    onContextMenu: props.onContextMenu,
    onDoubleClick: props.onDoubleClick,
    onTouchStart: props.onTouchStart,
    onTouchMove: props.onTouchMove,
    onTouchEnd: props.onTouchEnd
  }, /*#__PURE__*/reactExports.createElement(RootSurface, {
    otherAttributes: attrs,
    title: title,
    desc: desc,
    ref: ref
  }, /*#__PURE__*/reactExports.createElement(ClipPathProvider, null, children)));
});

var _excluded$1 = ["width", "height"];
function _extends$1() { return _extends$1 = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends$1.apply(null, arguments); }
function _objectWithoutProperties$1(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose$1(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose$1(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
var defaultMargin$1 = {
  top: 5,
  right: 5,
  bottom: 5,
  left: 5
};
var defaultProps$3 = {
  accessibilityLayer: true,
  layout: 'horizontal',
  stackOffset: 'none',
  barCategoryGap: '10%',
  barGap: 4,
  margin: defaultMargin$1,
  reverseStackOrder: false,
  syncMethod: 'index'
};

/**
 * These are one-time, immutable options that decide the chart's behavior.
 * Users who wish to call CartesianChart may decide to pass these options explicitly,
 * but usually we would expect that they use one of the convenience components like BarChart, LineChart, etc.
 */

var CartesianChart = /*#__PURE__*/reactExports.forwardRef(function CartesianChart(props, ref) {
  var _categoricalChartProp;
  var rootChartProps = resolveDefaultProps(props.categoricalChartProps, defaultProps$3);
  var {
      width,
      height
    } = rootChartProps,
    otherCategoricalProps = _objectWithoutProperties$1(rootChartProps, _excluded$1);
  if (!isPositiveNumber(width) || !isPositiveNumber(height)) {
    return null;
  }
  var {
    chartName,
    defaultTooltipEventType,
    validateTooltipEventTypes,
    tooltipPayloadSearcher,
    categoricalChartProps
  } = props;
  var options = {
    chartName,
    defaultTooltipEventType,
    validateTooltipEventTypes,
    tooltipPayloadSearcher,
    eventEmitter: undefined
  };
  return /*#__PURE__*/reactExports.createElement(RechartsStoreProvider, {
    preloadedState: {
      options
    },
    reduxStoreName: (_categoricalChartProp = categoricalChartProps.id) !== null && _categoricalChartProp !== void 0 ? _categoricalChartProp : chartName
  }, /*#__PURE__*/reactExports.createElement(ChartDataContextProvider, {
    chartData: categoricalChartProps.data
  }), /*#__PURE__*/reactExports.createElement(ReportMainChartProps, {
    width: width,
    height: height,
    layout: rootChartProps.layout,
    margin: rootChartProps.margin
  }), /*#__PURE__*/reactExports.createElement(ReportChartProps, {
    accessibilityLayer: rootChartProps.accessibilityLayer,
    barCategoryGap: rootChartProps.barCategoryGap,
    maxBarSize: rootChartProps.maxBarSize,
    stackOffset: rootChartProps.stackOffset,
    barGap: rootChartProps.barGap,
    barSize: rootChartProps.barSize,
    syncId: rootChartProps.syncId,
    syncMethod: rootChartProps.syncMethod,
    className: rootChartProps.className
  }), /*#__PURE__*/reactExports.createElement(CategoricalChart, _extends$1({}, otherCategoricalProps, {
    width: width,
    height: height,
    ref: ref
  })));
});

var allowedTooltipTypes$5 = ['axis'];
var LineChart = /*#__PURE__*/reactExports.forwardRef((props, ref) => {
  return /*#__PURE__*/reactExports.createElement(CartesianChart, {
    chartName: "LineChart",
    defaultTooltipEventType: "axis",
    validateTooltipEventTypes: allowedTooltipTypes$5,
    tooltipPayloadSearcher: arrayTooltipSearcher,
    categoricalChartProps: props,
    ref: ref
  });
});

var allowedTooltipTypes$4 = ['axis', 'item'];
var BarChart = /*#__PURE__*/reactExports.forwardRef((props, ref) => {
  return /*#__PURE__*/reactExports.createElement(CartesianChart, {
    chartName: "BarChart",
    defaultTooltipEventType: "axis",
    validateTooltipEventTypes: allowedTooltipTypes$4,
    tooltipPayloadSearcher: arrayTooltipSearcher,
    categoricalChartProps: props,
    ref: ref
  });
});

function ReportPolarOptions(props) {
  var dispatch = useAppDispatch();
  reactExports.useEffect(() => {
    dispatch(updatePolarOptions(props));
  }, [dispatch, props]);
  return null;
}

var _excluded = ["width", "height", "layout"];
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
var defaultMargin = {
  top: 5,
  right: 5,
  bottom: 5,
  left: 5
};

/**
 * These default props are the same for all PolarChart components.
 */
var defaultProps$2 = {
  accessibilityLayer: true,
  stackOffset: 'none',
  barCategoryGap: '10%',
  barGap: 4,
  margin: defaultMargin,
  reverseStackOrder: false,
  syncMethod: 'index',
  layout: 'radial'
};

/**
 * These props are required for the PolarChart to function correctly.
 * Users usually would not need to specify these explicitly,
 * because the convenience components like PieChart, RadarChart, etc.
 * will provide these defaults.
 * We can't have the defaults in this file because each of those convenience components
 * have their own opinions about what they should be.
 */

/**
 * These are one-time, immutable options that decide the chart's behavior.
 * Users who wish to call CartesianChart may decide to pass these options explicitly,
 * but usually we would expect that they use one of the convenience components like PieChart, RadarChart, etc.
 */

var PolarChart = /*#__PURE__*/reactExports.forwardRef(function PolarChart(props, ref) {
  var _polarChartProps$id;
  var polarChartProps = resolveDefaultProps(props.categoricalChartProps, defaultProps$2);
  var {
      width,
      height,
      layout
    } = polarChartProps,
    otherCategoricalProps = _objectWithoutProperties(polarChartProps, _excluded);
  if (!isPositiveNumber(width) || !isPositiveNumber(height)) {
    return null;
  }
  var {
    chartName,
    defaultTooltipEventType,
    validateTooltipEventTypes,
    tooltipPayloadSearcher
  } = props;
  var options = {
    chartName,
    defaultTooltipEventType,
    validateTooltipEventTypes,
    tooltipPayloadSearcher,
    eventEmitter: undefined
  };
  return /*#__PURE__*/reactExports.createElement(RechartsStoreProvider, {
    preloadedState: {
      options
    },
    reduxStoreName: (_polarChartProps$id = polarChartProps.id) !== null && _polarChartProps$id !== void 0 ? _polarChartProps$id : chartName
  }, /*#__PURE__*/reactExports.createElement(ChartDataContextProvider, {
    chartData: polarChartProps.data
  }), /*#__PURE__*/reactExports.createElement(ReportMainChartProps, {
    width: width,
    height: height,
    layout: layout,
    margin: polarChartProps.margin
  }), /*#__PURE__*/reactExports.createElement(ReportChartProps, {
    accessibilityLayer: polarChartProps.accessibilityLayer,
    barCategoryGap: polarChartProps.barCategoryGap,
    maxBarSize: polarChartProps.maxBarSize,
    stackOffset: polarChartProps.stackOffset,
    barGap: polarChartProps.barGap,
    barSize: polarChartProps.barSize,
    syncId: polarChartProps.syncId,
    syncMethod: polarChartProps.syncMethod,
    className: polarChartProps.className
  }), /*#__PURE__*/reactExports.createElement(ReportPolarOptions, {
    cx: polarChartProps.cx,
    cy: polarChartProps.cy,
    startAngle: polarChartProps.startAngle,
    endAngle: polarChartProps.endAngle,
    innerRadius: polarChartProps.innerRadius,
    outerRadius: polarChartProps.outerRadius
  }), /*#__PURE__*/reactExports.createElement(CategoricalChart, _extends({
    width: width,
    height: height
  }, otherCategoricalProps, {
    ref: ref
  })));
});

var allowedTooltipTypes$3 = ['item'];
var defaultProps$1 = {
  layout: 'centric',
  startAngle: 0,
  endAngle: 360,
  cx: '50%',
  cy: '50%',
  innerRadius: 0,
  outerRadius: '80%'
};
var PieChart = /*#__PURE__*/reactExports.forwardRef((props, ref) => {
  var propsWithDefaults = resolveDefaultProps(props, defaultProps$1);
  return /*#__PURE__*/reactExports.createElement(PolarChart, {
    chartName: "PieChart",
    defaultTooltipEventType: "item",
    validateTooltipEventTypes: allowedTooltipTypes$3,
    tooltipPayloadSearcher: arrayTooltipSearcher,
    categoricalChartProps: propsWithDefaults,
    ref: ref
  });
});

var allowedTooltipTypes$2 = ['axis'];
var defaultProps = {
  layout: 'centric',
  startAngle: 90,
  endAngle: -270,
  cx: '50%',
  cy: '50%',
  innerRadius: 0,
  outerRadius: '80%'
};
var RadarChart = /*#__PURE__*/reactExports.forwardRef((props, ref) => {
  var propsWithDefaults = resolveDefaultProps(props, defaultProps);
  return /*#__PURE__*/reactExports.createElement(PolarChart, {
    chartName: "RadarChart",
    defaultTooltipEventType: "axis",
    validateTooltipEventTypes: allowedTooltipTypes$2,
    tooltipPayloadSearcher: arrayTooltipSearcher,
    categoricalChartProps: propsWithDefaults,
    ref: ref
  });
});

var allowedTooltipTypes$1 = ['axis'];
var AreaChart = /*#__PURE__*/reactExports.forwardRef((props, ref) => {
  return /*#__PURE__*/reactExports.createElement(CartesianChart, {
    chartName: "AreaChart",
    defaultTooltipEventType: "axis",
    validateTooltipEventTypes: allowedTooltipTypes$1,
    tooltipPayloadSearcher: arrayTooltipSearcher,
    categoricalChartProps: props,
    ref: ref
  });
});

var allowedTooltipTypes = ['axis'];
var ComposedChart = /*#__PURE__*/reactExports.forwardRef((props, ref) => {
  return /*#__PURE__*/reactExports.createElement(CartesianChart, {
    chartName: "ComposedChart",
    defaultTooltipEventType: "axis",
    validateTooltipEventTypes: allowedTooltipTypes,
    tooltipPayloadSearcher: arrayTooltipSearcher,
    categoricalChartProps: props,
    ref: ref
  });
});

const ResearchPage = () => {
  const [analytics, setAnalytics] = reactExports.useState(null);
  const [loading, setLoading] = reactExports.useState(true);
  const [error, setError] = reactExports.useState(null);
  const navigate = useNavigate();
  const COLORS = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042", "#8884D8", "#82CA9D", "#FFC658"];
  reactExports.useEffect(() => {
    const loadPrecomputedAnalytics = async () => {
      try {
        setLoading(true);
        console.log("🔬 Loading precomputed research analytics...");
        const basePath = "/archi-site/".replace(/\/$/, "");
        const response = await fetch(`${basePath}/data/analytics/base.json`);
        if (!response.ok) {
          throw new Error(`Failed to load analytics: ${response.status} ${response.statusText}`);
        }
        const precomputedData = await response.json();
        console.log("📊 Precomputed analytics loaded:", precomputedData);
        const transformedData = {
          awards: [],
          // Awards data not available in precomputed format, would need separate endpoint
          architects: precomputedData.architectPopularity.slice(0, 50).map((arch, idx) => ({
            name: arch.architect,
            projectCount: arch.count,
            yearSpan: { start: 0, end: 0 },
            // Would need separate data
            awards: [],
            categories: [],
            prefectures: []
          })),
          temporalAnalysis: precomputedData.yearDistribution.filter((item) => item.year % 10 === 0).map((item) => ({
            decade: `${Math.floor(item.year / 10) * 10}年代`,
            projectCount: item.count,
            dominantCategories: Object.entries(item.categories || {}).sort(([, a], [, b]) => b - a).slice(0, 3).map(([cat]) => cat),
            notableArchitects: [],
            awards: []
          })),
          regionalAnalysis: precomputedData.prefectureDistribution.map((pref) => ({
            prefecture: pref.prefecture,
            projectCount: pref.count,
            timeSpan: { start: 0, end: 0 },
            dominantCategories: [],
            notableArchitects: [],
            awards: []
          })),
          buildingTypeEvolution: precomputedData.categoryDistribution.map((cat) => ({
            category: cat.category,
            totalCount: cat.count
          })),
          professionalNetworks: []
          // Not available in precomputed format
        };
        setAnalytics(transformedData);
        console.log("📊 Transformed analytics ready:", transformedData);
      } catch (err) {
        console.error("❌ Failed to load research analytics:", err);
        setError("研究データの読み込みに失敗しました");
      } finally {
        setLoading(false);
      }
    };
    loadPrecomputedAnalytics();
  }, []);
  const handleArchitectClick = (architectName) => {
    navigate(`/architecture?architect=${encodeURIComponent(architectName)}`);
  };
  const handleTagClick = (tag) => {
    navigate(`/architecture?tag=${encodeURIComponent(tag)}`);
  };
  const handleCategoryClick = (category) => {
    navigate(`/architecture?category=${encodeURIComponent(category)}`);
  };
  const handlePrefectureClick = (prefecture) => {
    navigate(`/architecture?prefecture=${encodeURIComponent(prefecture)}`);
  };
  const handleYearClick = (year) => {
    const yearNumber = year.replace("年代", "");
    navigate(`/architecture?year=${encodeURIComponent(yearNumber)}`);
  };
  if (loading) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "container mx-auto px-4 py-8", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "inline-block animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mt-4 text-lg", children: "研究データを分析中..." }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-600", children: "14,467件の建築記録を解析しています" })
    ] }) });
  }
  if (error || !analytics) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "container mx-auto px-4 py-8", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Card, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent, { className: "text-center py-8", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-red-600 mb-4", children: error || "データの読み込みに失敗しました" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          onClick: () => window.location.reload(),
          className: "px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700",
          children: "再読み込み"
        }
      )
    ] }) }) });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "container mx-auto px-4 py-8", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-8", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-3xl font-bold mb-2", children: "📊 日本建築データベース研究" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-600 mb-2", children: "14,467件の建築記録を分析 | 140年間の建築史（1882-2012+）" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-blue-600", children: "※ 各項目をクリックすると、建築作品一覧で詳細な検索結果をご覧いただけます" })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Tabs, { defaultValue: "overview", className: "w-full", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs(TabsList, { className: "grid w-full grid-cols-6", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(TabsTrigger, { value: "overview", children: "概要" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(TabsTrigger, { value: "awards", children: "受賞分析" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(TabsTrigger, { value: "architects", children: "建築家" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(TabsTrigger, { value: "timeline", children: "時代変遷" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(TabsTrigger, { value: "regions", children: "地域分析" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(TabsTrigger, { value: "networks", children: "プロネットワーク" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(TabsContent, { value: "overview", className: "space-y-6", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid gap-6 md:grid-cols-2 lg:grid-cols-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Card, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(CardHeader, { className: "flex flex-row items-center justify-between space-y-0 pb-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(CardTitle, { className: "text-sm font-medium", children: "総建築記録数" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-2xl", children: "🏗️" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent, { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-2xl font-bold", children: "14,467" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-muted-foreground", children: "1882年〜2012年+" })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Card, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(CardHeader, { className: "flex flex-row items-center justify-between space-y-0 pb-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(CardTitle, { className: "text-sm font-medium", children: "受賞作品数" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-2xl", children: "🏆" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent, { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-2xl font-bold", children: analytics.awards.reduce((sum, award) => sum + award.count, 0) }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-xs text-muted-foreground", children: [
                analytics.awards.length,
                "種類の賞"
              ] })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Card, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(CardHeader, { className: "flex flex-row items-center justify-between space-y-0 pb-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(CardTitle, { className: "text-sm font-medium", children: "建築家数" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-2xl", children: "👨‍💼" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent, { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-2xl font-bold", children: analytics.architects.length }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-muted-foreground", children: "2作品以上の建築家" })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Card, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(CardHeader, { className: "flex flex-row items-center justify-between space-y-0 pb-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(CardTitle, { className: "text-sm font-medium", children: "建物種別数" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-2xl", children: "🏛️" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent, { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-2xl font-bold", children: analytics.buildingTypeEvolution.length }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-muted-foreground", children: "5件以上のカテゴリ" })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid gap-6 md:grid-cols-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Card, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(CardHeader, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(CardTitle, { children: "時代別建築数" }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(CardContent, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(ResponsiveContainer, { width: "100%", height: 300, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(BarChart, { data: analytics.temporalAnalysis, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(CartesianGrid, { strokeDasharray: "3 3" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(XAxis, { dataKey: "decade" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(YAxis, {}),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip, {}),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Bar,
                {
                  dataKey: "projectCount",
                  fill: "#8884d8",
                  cursor: "pointer",
                  onClick: (data) => handleYearClick(data.decade)
                }
              )
            ] }) }) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Card, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(CardHeader, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(CardTitle, { children: "建物種別分布 (Top 10)" }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(CardContent, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(ResponsiveContainer, { width: "100%", height: 300, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(PieChart, { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Pie,
                {
                  data: analytics.buildingTypeEvolution.slice(0, 10),
                  cx: "50%",
                  cy: "50%",
                  labelLine: false,
                  label: ({ category, totalCount }) => `${category} (${totalCount})`,
                  outerRadius: 80,
                  fill: "#8884d8",
                  dataKey: "totalCount",
                  cursor: "pointer",
                  onClick: (data) => {
                    if (data && data.category) {
                      handleCategoryClick(data.category);
                    }
                  },
                  children: analytics.buildingTypeEvolution.slice(0, 10).map((entry, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Cell,
                    {
                      fill: COLORS[index % COLORS.length],
                      style: { cursor: "pointer" }
                    },
                    `cell-${index}`
                  ))
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip, {})
            ] }) }) })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(TabsContent, { value: "awards", className: "space-y-6", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Card, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(CardHeader, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(CardTitle, { children: "🏆 建築賞分析" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-600", children: "日本の建築賞受賞作品の傾向分析" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(CardContent, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid gap-4", children: analytics.awards.map((award, index) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "border rounded-lg p-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-3", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "h3",
              {
                className: "font-semibold text-lg cursor-pointer hover:text-blue-600",
                onClick: () => handleTagClick(award.name),
                children: award.name
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Badge, { variant: "secondary", children: [
              award.count,
              "作品"
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid gap-2", children: [
            award.recipients.slice(0, 5).map((recipient, idx) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between text-sm", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "span",
                {
                  className: "cursor-pointer hover:text-blue-600",
                  onClick: () => handleArchitectClick(recipient.architect),
                  children: recipient.architect
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-600", children: recipient.title }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500", children: recipient.year })
            ] }, idx)),
            award.recipients.length > 5 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-sm text-gray-500", children: [
              "他 ",
              award.recipients.length - 5,
              " 作品..."
            ] })
          ] })
        ] }, index)) }) })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(TabsContent, { value: "architects", className: "space-y-6", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Card, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(CardHeader, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(CardTitle, { children: "👨‍💼 建築家ポートフォリオ分析" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-600", children: "作品数、活動期間、専門分野、受賞歴の分析" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(CardContent, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid gap-4", children: analytics.architects.slice(0, 20).map((architect, index) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "border rounded-lg p-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-3", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "h3",
              {
                className: "font-semibold text-lg cursor-pointer hover:text-blue-600",
                onClick: () => handleArchitectClick(architect.name),
                children: architect.name
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Badge, { variant: "outline", children: [
              architect.projectCount,
              "作品"
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid gap-2 text-sm", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium", children: "活動期間:" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: architect.yearSpan.start > 0 ? `${architect.yearSpan.start}年〜${architect.yearSpan.end}年` : "不明" })
            ] }),
            architect.awards.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium", children: "受賞:" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-wrap gap-1", children: architect.awards.map((award, idx) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                Badge,
                {
                  variant: "secondary",
                  className: "text-xs cursor-pointer hover:bg-yellow-200",
                  onClick: () => handleTagClick(award),
                  children: award
                },
                idx
              )) })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium", children: "専門分野:" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-wrap gap-1", children: [
                architect.categories.slice(0, 5).map((category, idx) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Badge,
                  {
                    variant: "outline",
                    className: "text-xs cursor-pointer hover:bg-gray-100",
                    onClick: () => handleCategoryClick(category),
                    children: category
                  },
                  idx
                )),
                architect.categories.length > 5 && /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-xs text-gray-500", children: [
                  "+",
                  architect.categories.length - 5
                ] })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium", children: "活動地域:" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-wrap gap-1", children: [
                architect.prefectures.slice(0, 3).map((prefecture, idx) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "span",
                  {
                    className: "text-sm px-2 py-0.5 bg-gray-100 rounded cursor-pointer hover:bg-gray-200",
                    onClick: () => handlePrefectureClick(prefecture),
                    children: prefecture
                  },
                  idx
                )),
                architect.prefectures.length > 3 && /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-gray-500", children: [
                  "他",
                  architect.prefectures.length - 3,
                  "都道府県"
                ] })
              ] })
            ] })
          ] })
        ] }, index)) }) })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(TabsContent, { value: "timeline", className: "space-y-6", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Card, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(CardHeader, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(CardTitle, { children: "📅 建築史時代変遷" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-600", children: "時代ごとの建築傾向と主要建築家の分析" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mb-6", children: /* @__PURE__ */ jsxRuntimeExports.jsx(ResponsiveContainer, { width: "100%", height: 400, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
            LineChart,
            {
              data: analytics.temporalAnalysis,
              onClick: (e) => {
                if (e && e.activeLabel) {
                  handleYearClick(e.activeLabel);
                }
              },
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(CartesianGrid, { strokeDasharray: "3 3" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(XAxis, { dataKey: "decade" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(YAxis, {}),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip, {}),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Legend, {}),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Line,
                  {
                    type: "monotone",
                    dataKey: "projectCount",
                    stroke: "#8884d8",
                    strokeWidth: 2,
                    cursor: "pointer",
                    activeDot: { r: 8, cursor: "pointer" }
                  }
                )
              ]
            }
          ) }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid gap-4", children: analytics.temporalAnalysis.map((period, index) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "border rounded-lg p-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "h3",
              {
                className: "font-semibold text-lg mb-3 cursor-pointer hover:text-blue-600",
                onClick: () => handleYearClick(period.decade),
                children: period.decade
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid gap-2 text-sm", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium", children: "建築数:" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(Badge, { variant: "outline", children: [
                  period.projectCount,
                  "件"
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium", children: "主要建物種別:" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-wrap gap-1", children: period.dominantCategories.map((category, idx) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Badge,
                  {
                    variant: "secondary",
                    className: "text-xs cursor-pointer hover:bg-gray-300",
                    onClick: () => handleCategoryClick(category),
                    children: category
                  },
                  idx
                )) })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium", children: "代表的建築家:" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-wrap gap-1", children: period.notableArchitects.map((architect, idx) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "span",
                  {
                    className: "text-xs px-2 py-1 bg-blue-100 rounded cursor-pointer hover:bg-blue-200",
                    onClick: () => handleArchitectClick(architect),
                    children: architect
                  },
                  idx
                )) })
              ] }),
              period.awards.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium", children: "主な受賞:" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-wrap gap-1", children: period.awards.slice(0, 3).map((award, idx) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Badge,
                  {
                    variant: "secondary",
                    className: "text-xs cursor-pointer hover:bg-yellow-200",
                    onClick: () => handleTagClick(award),
                    children: award
                  },
                  idx
                )) })
              ] })
            ] })
          ] }, index)) })
        ] })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(TabsContent, { value: "regions", className: "space-y-6", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Card, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(CardHeader, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(CardTitle, { children: "🗺️ 地域別建築分析" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-600", children: "都道府県ごとの建築傾向と特色" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(CardContent, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid gap-4", children: analytics.regionalAnalysis.map((region, index) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "border rounded-lg p-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-3", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "h3",
              {
                className: "font-semibold text-lg cursor-pointer hover:text-blue-600",
                onClick: () => handlePrefectureClick(region.prefecture),
                children: region.prefecture
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Badge, { variant: "outline", children: [
              region.projectCount,
              "件"
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid gap-2 text-sm", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium", children: "建設期間:" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: region.timeSpan.start > 0 ? `${region.timeSpan.start}年〜${region.timeSpan.end}年` : "不明" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium", children: "主要建物種別:" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-wrap gap-1", children: region.dominantCategories.map((category, idx) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                Badge,
                {
                  variant: "secondary",
                  className: "text-xs cursor-pointer hover:bg-gray-300",
                  onClick: () => handleCategoryClick(category),
                  children: category
                },
                idx
              )) })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium", children: "主要建築家:" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-wrap gap-1", children: region.notableArchitects.map((architect, idx) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                "span",
                {
                  className: "text-xs px-2 py-1 bg-blue-100 rounded cursor-pointer hover:bg-blue-200",
                  onClick: () => handleArchitectClick(architect),
                  children: architect
                },
                idx
              )) })
            ] }),
            region.awards.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium", children: "主な受賞:" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-wrap gap-1", children: region.awards.slice(0, 3).map((award, idx) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                Badge,
                {
                  variant: "secondary",
                  className: "text-xs cursor-pointer hover:bg-yellow-200",
                  onClick: () => handleTagClick(award),
                  children: award
                },
                idx
              )) })
            ] })
          ] })
        ] }, index)) }) })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(TabsContent, { value: "networks", className: "space-y-6", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Card, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(CardHeader, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(CardTitle, { children: "🤝 プロフェッショナルネットワーク" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-gray-600", children: "建築家と構造設計者、施工者等の協働関係" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(CardContent, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid gap-4", children: analytics.professionalNetworks.slice(0, 15).map((network, index) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "border rounded-lg p-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "h3",
            {
              className: "font-semibold text-lg mb-3 cursor-pointer hover:text-blue-600",
              onClick: () => handleArchitectClick(network.architect),
              children: network.architect
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid gap-3 text-sm", children: [
            network.connections.frequent_collaborators.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium", children: "主要協働者:" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-1 space-y-1", children: network.connections.frequent_collaborators.slice(0, 5).map((collab, idx) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "px-2 py-1 bg-gray-100 rounded text-xs", children: collab.name }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Badge, { variant: "outline", className: "text-xs", children: collab.role === "structural_designer" ? "構造設計" : collab.role === "landscape_designer" ? "造園設計" : "施工" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-xs text-gray-500", children: [
                    collab.count,
                    "回"
                  ] })
                ] })
              ] }, idx)) })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-3 gap-4 text-xs", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium", children: "構造設計者:" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-1", children: [
                  network.connections.structural_designers.length,
                  "名"
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium", children: "造園設計者:" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-1", children: [
                  network.connections.landscape_designers.length,
                  "名"
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium", children: "施工会社:" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-1", children: [
                  network.connections.contractors.length,
                  "社"
                ] })
              ] })
            ] })
          ] })
        ] }, index)) }) })
      ] }) })
    ] })
  ] });
};

const getArchitectureById = async (id) => {
  return getSingleResult(
    `SELECT * FROM ZCDARCHITECTURE WHERE Z_PK = ?`,
    [id]
  );
};
const getArchitecturesByArchitect = async (architectId) => {
  return getResultsArray(
    `SELECT * FROM ZCDARCHITECTURE 
     WHERE ZAR_ARCHITECT_NUM = ? 
     ORDER BY ZAR_YEAR DESC`,
    [architectId]
  );
};
const getAllArchitectures = async (page = 1, limit = 12, searchTerm = "", sortBy = "year_desc", sortOrder = "asc", options = {}) => {
  const offset = (page - 1) * limit;
  let whereClause = "1=1";
  const params = [];
  if (searchTerm) {
    whereClause += " AND (ZAR_TITLE LIKE ? OR ZAR_ADDRESS LIKE ? OR ZAR_DESCRIPTION LIKE ? OR ZAR_ARCHITECT LIKE ?)";
    params.push(`%${searchTerm}%`, `%${searchTerm}%`, `%${searchTerm}%`, `%${searchTerm}%`);
  }
  if (options.architect) {
    whereClause += " AND (ZAR_ARCHITECT LIKE ? OR ZAR_ARCHITECT_ENG LIKE ?)";
    params.push(`%${options.architect}%`, `%${options.architect}%`);
  }
  if (options.location) {
    whereClause += " AND ZAR_ADDRESS LIKE ?";
    params.push(`%${options.location}%`);
  }
  if (options.prefecture) {
    whereClause += " AND ZAR_PREFECTURE = ?";
    params.push(options.prefecture);
  }
  if (options.yearFrom) {
    whereClause += " AND ZAR_YEAR >= ?";
    params.push(options.yearFrom);
  }
  if (options.yearTo) {
    whereClause += " AND ZAR_YEAR <= ?";
    params.push(options.yearTo);
  }
  if (options.tags && options.tags.length > 0) {
    whereClause += " AND ZAR_TAG LIKE ?";
    params.push(`%${options.tags.join("%")}%`);
  }
  const sortMapping = {
    "year_desc": "ZAR_YEAR DESC",
    "year_asc": "ZAR_YEAR ASC",
    "name_asc": "ZAR_TITLE ASC",
    "name_desc": "ZAR_TITLE DESC",
    "architect_asc": "ZAR_ARCHITECT ASC",
    "architect_desc": "ZAR_ARCHITECT DESC"
  };
  const orderByClause = sortMapping[sortBy] || "ZAR_YEAR DESC";
  const countQuery = `
    SELECT COUNT(*) as total
    FROM ZCDARCHITECTURE
    WHERE ${whereClause}
  `;
  const dataQuery = `
    SELECT *
    FROM ZCDARCHITECTURE
    WHERE ${whereClause}
    ORDER BY ${orderByClause}
    LIMIT ? OFFSET ?
  `;
  const dataParams = [...params, limit, offset];
  try {
    const countResult = await getSingleResult(countQuery, params);
    const total = countResult?.total || 0;
    const architectures = await getResultsArray(dataQuery, dataParams);
    return {
      results: architectures,
      total,
      page,
      limit,
      totalPages: Math.ceil(total / limit)
    };
  } catch (error) {
    console.error("建築作品データ取得エラー:", error);
    throw error;
  }
};
const getAllTags = async () => {
  return getResultsArray(`
    SELECT TAG_ID, TAG_NAME, COUNT(ARCHITECTURE_ID) as TAG_COUNT
    FROM ZCDTAG
    LEFT JOIN ZCDARCHITECTURE_TAG ON ZCDTAG.TAG_ID = ZCDARCHITECTURE_TAG.TAG_ID
    GROUP BY ZCDTAG.TAG_ID, ZCDTAG.TAG_NAME
    ORDER BY TAG_COUNT DESC, TAG_NAME
  `);
};
const getPrefectureCounts = async () => {
  return getResultsArray(`
    SELECT ZAR_PREFECTURE as prefecture, COUNT(*) as count
    FROM ZCDARCHITECTURE
    WHERE ZAR_PREFECTURE IS NOT NULL AND ZAR_PREFECTURE != ''
    GROUP BY ZAR_PREFECTURE
    ORDER BY count DESC
  `);
};
const getArchitectureForMap = async (bounds, filters = {}) => {
  let whereClause = `
    ZAR_LATITUDE BETWEEN ? AND ?
    AND ZAR_LONGITUDE BETWEEN ? AND ?
    AND ZAR_LATITUDE IS NOT NULL
    AND ZAR_LONGITUDE IS NOT NULL
  `;
  const params = [
    bounds.south,
    bounds.north,
    bounds.west,
    bounds.east
  ];
  if (filters.searchTerm) {
    whereClause += " AND (ZAR_TITLE LIKE ? OR ZAR_ADDRESS LIKE ? OR ZAR_ARCHITECT LIKE ?)";
    params.push(
      `%${filters.searchTerm}%`,
      `%${filters.searchTerm}%`,
      `%${filters.searchTerm}%`
    );
  }
  if (filters.architect) {
    whereClause += " AND (ZAR_ARCHITECT LIKE ? OR ZAR_ARCHITECT_ENG LIKE ?)";
    params.push(
      `%${filters.architect}%`,
      `%${filters.architect}%`
    );
  }
  if (filters.yearFrom) {
    whereClause += " AND ZAR_YEAR >= ?";
    params.push(filters.yearFrom);
  }
  if (filters.yearTo) {
    whereClause += " AND ZAR_YEAR <= ?";
    params.push(filters.yearTo);
  }
  if (filters.tags && filters.tags.length > 0) {
    whereClause += " AND ZAR_TAG LIKE ?";
    params.push(`%${filters.tags.join("%")}%`);
  }
  const query = `
    SELECT *
    FROM ZCDARCHITECTURE
    WHERE ${whereClause}
    LIMIT 500
  `;
  return getResultsArray(query, params);
};

const isGitHubPages = () => {
  try {
    const hostname = window?.location?.hostname || "";
    return /github\.io$/.test(hostname);
  } catch (e) {
    console.error("環境チェックエラー:", e);
    return false;
  }
};

const logDatabaseDetails = async () => {
  try {
    const isProduction = true;
    const isGHPages = isGitHubPages();
    console.log(`アプリケーション環境: ${isProduction ? "本番" : "開発"}`);
    console.log(`GitHub Pages環境: ${isGHPages ? "はい" : "いいえ"}`);
    if (isProduction) {
      try {
        const dbInfoPath = isGHPages ? "./db/database-info.json" : "/db/database-info.json";
        const response = await fetch(dbInfoPath);
        if (response.ok) {
          const dbInfo = await response.json();
          console.log("データベース情報:");
          console.log(`- ファイル: ${dbInfo.database}`);
          console.log(`- 更新日時: ${dbInfo.date}`);
          console.log(`- サイズ: ${(dbInfo.size / 1024 / 1024).toFixed(2)} MB`);
          console.log(`- チャンク: ${dbInfo.chunks} (${dbInfo.chunkSize / 1024}KB)のチャンク`);
          console.log(`- テーブル数: ${dbInfo.tables.length}`);
          console.log(`- インデックス数: ${dbInfo.indexes.length}`);
        } else {
          console.warn("データベースメタデータが見つかりません:", response.status);
        }
      } catch (error) {
        console.warn("データベースメタデータ読み込みエラー:", error);
      }
    }
  } catch (error) {
    console.error("データベース設定ログエラー:", error);
  }
};
async function measureQueryPerformance(name, fn) {
  const start = performance.now();
  try {
    const result = await fn();
    const duration = performance.now() - start;
    if (duration > 100) {
      console.warn(`クエリパフォーマンス警告 [${name}]: ${duration.toFixed(2)}ms`);
    } else {
      console.log(`クエリ実行 [${name}]: ${duration.toFixed(2)}ms`);
    }
    return result;
  } catch (error) {
    const duration = performance.now() - start;
    console.error(`クエリエラー [${name}]: ${duration.toFixed(2)}ms`, error);
    throw error;
  }
}

const useDatabase = () => {
  const [status, setStatus] = reactExports.useState(getDatabaseStatus());
  const [error, setError] = reactExports.useState(null);
  const [isLoading, setIsLoading] = reactExports.useState(true);
  reactExports.useEffect(() => {
    const initDb = async () => {
      try {
        setIsLoading(true);
        setError(null);
        await initDatabase();
        setIsLoading(false);
      } catch (err) {
        setError(err);
        setIsLoading(false);
      }
    };
    const checkStatus = () => {
      const currentStatus = getDatabaseStatus();
      if (currentStatus !== status) {
        setStatus(currentStatus);
        if (currentStatus === DatabaseStatus.READY) {
          setIsLoading(false);
          setError(null);
        } else if (currentStatus === DatabaseStatus.ERROR) {
          setIsLoading(false);
        } else if (currentStatus === DatabaseStatus.INITIALIZING) {
          setIsLoading(true);
        }
      }
    };
    if (status === DatabaseStatus.NOT_INITIALIZED) {
      initDb();
    }
    checkStatus();
    const interval = setInterval(checkStatus, 1e3);
    return () => clearInterval(interval);
  }, [status]);
  return {
    // Status
    status,
    isReady: status === DatabaseStatus.READY,
    isInitializing: status === DatabaseStatus.INITIALIZING || isLoading,
    isError: status === DatabaseStatus.ERROR || !!error,
    isLoading,
    error,
    errorDetails: error?.message,
    // Architecture methods with performance measurement
    architecture: {
      getById: (id) => measureQueryPerformance(
        `getArchitectureById(${id})`,
        () => getArchitectureById(id)
      ),
      getAll: (page = 1, limit = 12, searchTerm = "", sortBy = "ZAW_NAME", sortOrder = "asc", options = {}) => measureQueryPerformance(
        "getAllArchitectures",
        () => getAllArchitectures(page, limit, searchTerm, sortBy, sortOrder, options)
      ),
      getByArchitect: (architectId) => measureQueryPerformance(
        `getArchitecturesByArchitect(${architectId})`,
        () => getArchitecturesByArchitect(architectId)
      ),
      getTags: () => measureQueryPerformance(
        "getAllTags",
        () => getAllTags()
      ),
      getPrefectureCounts: () => measureQueryPerformance(
        "getPrefectureCounts",
        () => getPrefectureCounts()
      ),
      getForMap: (bounds, filters = {}) => measureQueryPerformance(
        "getArchitectureForMap",
        () => getArchitectureForMap(bounds, filters)
      )
    },
    // Architect methods with performance measurement
    architect: {
      getById: (id) => measureQueryPerformance(
        `getArchitectById(${id})`,
        () => getArchitectById(id)
      ),
      getAll: (page = 1, limit = 12, searchTerm = "", sortBy = "name_asc") => measureQueryPerformance(
        "getAllArchitects",
        () => getAllArchitects(page, limit, searchTerm, sortBy)
      )
    }
  };
};

const OptimizedAnalyticsDashboard = ({
  onExportData,
  enableRealTimeUpdates = false
}) => {
  const [selectedTimeRange, setSelectedTimeRange] = reactExports.useState("all");
  const [selectedPrefecture, setSelectedPrefecture] = reactExports.useState("all");
  const [selectedCategory, setSelectedCategory] = reactExports.useState("all");
  const [chartType, setChartType] = reactExports.useState("bar");
  const [showPercentage, setShowPercentage] = reactExports.useState(false);
  const [analytics, setAnalytics] = reactExports.useState(null);
  const [index, setIndex] = reactExports.useState(null);
  const [loading, setLoading] = reactExports.useState(true);
  const [error, setError] = reactExports.useState(null);
  const [loadingProgress, setLoadingProgress] = reactExports.useState(0);
  const [lastUpdated, setLastUpdated] = reactExports.useState(null);
  const [loadTime, setLoadTime] = reactExports.useState(null);
  const [dataSize, setDataSize] = reactExports.useState(null);
  const loadAnalyticsIndex = async () => {
    const basePath = "/archi-site/".replace(/\/$/, "");
    const response = await fetch(`${basePath}/data/analytics/index.json`);
    if (!response.ok) {
      throw new Error(`Failed to load analytics index: ${response.status} ${response.statusText}`);
    }
    return await response.json();
  };
  const loadPrecomputedAnalytics = async (timeRange = "all", prefecture = "all", category = "all") => {
    const basePath = "/archi-site/".replace(/\/$/, "");
    let url = `${basePath}/data/analytics/`;
    if (prefecture !== "all") {
      const prefectureFile = prefecture.replace(/[^a-zA-Z0-9]/g, "_");
      url += `by-prefecture/${prefectureFile}.json`;
    } else if (category !== "all") {
      const categoryFile = category.replace(/[^a-zA-Z0-9]/g, "_");
      url += `by-category/${categoryFile}.json`;
    } else if (timeRange !== "all") {
      url += `${timeRange}.json`;
    } else {
      url += "base.json";
    }
    const response = await fetch(url);
    if (!response.ok) {
      if (url.includes("by-prefecture") || url.includes("by-category") || timeRange !== "all") {
        console.warn(`Specific analytics not found (${url}), falling back to base analytics`);
        const fallbackResponse = await fetch(`${basePath}/data/analytics/base.json`);
        if (!fallbackResponse.ok) {
          throw new Error(`Failed to load analytics: ${fallbackResponse.status}`);
        }
        return await fallbackResponse.json();
      }
      throw new Error(`Failed to load analytics: ${response.status} ${response.statusText}`);
    }
    const data = await response.json();
    const dataText = JSON.stringify(data);
    setDataSize(dataText.length);
    return data;
  };
  const loadAnalyticsData = async () => {
    const startTime = performance.now();
    setLoading(true);
    setError(null);
    setLoadingProgress(0);
    try {
      setLoadingProgress(20);
      const indexData = await loadAnalyticsIndex();
      setIndex(indexData);
      setLoadingProgress(40);
      setLoadingProgress(60);
      const analyticsData = await loadPrecomputedAnalytics(
        selectedTimeRange,
        selectedPrefecture,
        selectedCategory
      );
      setLoadingProgress(80);
      setAnalytics(analyticsData);
      setLastUpdated(new Date(analyticsData.metadata.computedAt));
      setLoadingProgress(100);
      const endTime = performance.now();
      setLoadTime(endTime - startTime);
      console.log(`📊 Analytics loaded in ${(endTime - startTime).toFixed(2)}ms`);
      console.log(`📁 Data size: ${(dataSize || 0 / 1024).toFixed(1)}KB`);
    } catch (err) {
      console.error("Failed to load analytics:", err);
      setError(err instanceof Error ? err.message : "Failed to load analytics data");
    } finally {
      setLoading(false);
      setLoadingProgress(0);
    }
  };
  reactExports.useEffect(() => {
    loadAnalyticsData();
  }, [selectedTimeRange, selectedPrefecture, selectedCategory]);
  const filteredAnalytics = reactExports.useMemo(() => {
    if (!analytics) return null;
    return analytics;
  }, [analytics, selectedTimeRange, selectedPrefecture, selectedCategory]);
  const handleExport = (format) => {
    if (onExportData) {
      onExportData(format);
    } else {
      if (analytics && format === "json") {
        const dataStr = JSON.stringify(analytics, null, 2);
        const dataBlob = new Blob([dataStr], { type: "application/json" });
        const url = URL.createObjectURL(dataBlob);
        const link = document.createElement("a");
        link.href = url;
        link.download = `architecture-analytics-${selectedTimeRange}.json`;
        link.click();
        URL.revokeObjectURL(url);
      }
    }
  };
  const CustomTooltip = ({ active, payload, label }) => {
    if (active && payload && payload.length) {
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 2, border: "1px solid #ccc" }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", children: `${label}` }),
        payload.map((entry, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", style: { color: entry.color }, children: `${entry.dataKey}: ${entry.value}${showPercentage ? "%" : ""}` }, index2))
      ] });
    }
    return null;
  };
  if (loading) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { p: 3 }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 4, textAlign: "center" }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h5", gutterBottom: true, children: "研究データを読み込み中..." }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", sx: { mb: 3 }, children: "プリコンピュートされた分析データを高速読み込み中" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        LinearProgress,
        {
          variant: "determinate",
          value: loadingProgress,
          sx: { mb: 2, height: 8, borderRadius: 4 }
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", justifyContent: "center", alignItems: "center", gap: 2 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(CircularProgress, { size: 20 }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", children: loadingProgress < 40 ? "インデックス読み込み中..." : loadingProgress < 80 ? "データ読み込み中..." : "最終処理中..." })
      ] })
    ] }) });
  }
  if (error) {
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { p: 3 }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Alert, { severity: "error", sx: { mb: 2 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", children: "データ読み込みエラー" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", children: error })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Button,
        {
          variant: "contained",
          onClick: loadAnalyticsData,
          startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(Refresh, {}),
          children: "再試行"
        }
      )
    ] });
  }
  if (!filteredAnalytics) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { p: 3 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Alert, { severity: "warning", children: "分析データが利用できません" }) });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { p: 3 }, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mb: 4 }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", justifyContent: "space-between", alignItems: "flex-start", mb: 2 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h4", gutterBottom: true, children: "建築データ分析ダッシュボード（最適化版）" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", color: "text.secondary", children: [
            "プリコンピュート済み高速分析 | 最終更新: ",
            lastUpdated?.toLocaleString()
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", gap: 1 }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip$1, { title: "データを再読み込み", children: /* @__PURE__ */ jsxRuntimeExports.jsx(IconButton, { onClick: loadAnalyticsData, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Refresh, {}) }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(Download, {}),
              variant: "outlined",
              onClick: () => handleExport("json"),
              size: "small",
              children: "エクスポート"
            }
          )
        ] })
      ] }),
      (loadTime || dataSize) && /* @__PURE__ */ jsxRuntimeExports.jsx(Paper, { sx: { p: 2, mb: 2, bgcolor: "success.light", color: "success.contrastText" }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", gap: 3 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", gap: 1 }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Speed, { fontSize: "small" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", children: [
            "読み込み時間: ",
            loadTime?.toFixed(0),
            "ms"
          ] })
        ] }),
        dataSize && /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", gap: 1 }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Memory, { fontSize: "small" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", children: [
            "データサイズ: ",
            (dataSize / 1024).toFixed(1),
            "KB"
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", children: "🚀 従来比 10-50倍高速化" })
      ] }) })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 2, mb: 3 }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, children: "フィルター設定" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { container: true, spacing: 2, alignItems: "center", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControl, { fullWidth: true, size: "small", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(InputLabel, { children: "期間" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            Select,
            {
              value: selectedTimeRange,
              onChange: (e) => setSelectedTimeRange(e.target.value),
              label: "期間",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "all", children: "全期間" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "5years", children: "過去5年" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "10years", children: "過去10年" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "20years", children: "過去20年" })
              ]
            }
          )
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControl, { fullWidth: true, size: "small", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(InputLabel, { children: "都道府県" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            Select,
            {
              value: selectedPrefecture,
              onChange: (e) => setSelectedPrefecture(e.target.value),
              label: "都道府県",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "all", children: "全て" }),
                index?.availablePrefectures?.map((prefecture) => /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: prefecture, children: prefecture }, prefecture))
              ]
            }
          )
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControl, { fullWidth: true, size: "small", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(InputLabel, { children: "カテゴリ" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            Select,
            {
              value: selectedCategory,
              onChange: (e) => setSelectedCategory(e.target.value),
              label: "カテゴリ",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "all", children: "全て" }),
                index?.availableCategories?.map((category) => /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: category, children: category }, category))
              ]
            }
          )
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          FormControlLabel,
          {
            control: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Switch,
              {
                checked: showPercentage,
                onChange: (e) => setShowPercentage(e.target.checked)
              }
            ),
            label: "パーセント表示"
          }
        ) })
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { container: true, spacing: 3, sx: { mb: 3 }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, md: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Card$1, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent$1, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", gap: 1 }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Business, { color: "primary" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", children: "総建築物数" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h4", color: "primary", children: filteredAnalytics.totalRecords.toLocaleString() }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", color: "text.secondary", children: [
          "データベース全体: ",
          index?.totalRecords?.toLocaleString() || "N/A"
        ] })
      ] }) }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, md: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Card$1, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent$1, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", gap: 1 }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(TrendingUp, { color: "success" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", children: "成長率" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "h4", color: "success.main", children: [
          filteredAnalytics.trendAnalysis.growthRate.toFixed(1),
          "%"
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", color: "text.secondary", children: [
          "ピーク年: ",
          filteredAnalytics.trendAnalysis.peakYear
        ] })
      ] }) }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, md: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Card$1, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent$1, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", gap: 1 }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(PieChart$1, { color: "warning" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", children: "多様性指数" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h4", color: "warning.main", children: filteredAnalytics.trendAnalysis.diversityIndex.toFixed(2) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: "カテゴリの多様性" })
      ] }) }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, md: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Card$1, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent$1, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", gap: 1 }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Person, { color: "info" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", children: "建築家数" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h4", color: "info.main", children: filteredAnalytics.architectPopularity.length }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", color: "text.secondary", children: [
          "人気カテゴリ: ",
          filteredAnalytics.trendAnalysis.mostPopularCategory
        ] })
      ] }) }) })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { container: true, spacing: 3, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, lg: 8, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Accordion, { defaultExpanded: true, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(AccordionSummary, { expandIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(ExpandMore, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", children: "年代別分布" }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(AccordionDetails, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { height: 400 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ResponsiveContainer, { width: "100%", height: "100%", children: chartType === "bar" ? /* @__PURE__ */ jsxRuntimeExports.jsxs(BarChart, { data: filteredAnalytics.yearDistribution, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(CartesianGrid, { strokeDasharray: "3 3" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(XAxis, { dataKey: "year" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(YAxis, {}),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip, { content: /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTooltip, {}) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Legend, {}),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Bar, { dataKey: "count", fill: "#8884d8" })
          ] }) : chartType === "line" ? /* @__PURE__ */ jsxRuntimeExports.jsxs(LineChart, { data: filteredAnalytics.yearDistribution, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(CartesianGrid, { strokeDasharray: "3 3" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(XAxis, { dataKey: "year" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(YAxis, {}),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip, { content: /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTooltip, {}) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Legend, {}),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Line, { type: "monotone", dataKey: "count", stroke: "#8884d8", strokeWidth: 2 })
          ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(AreaChart, { data: filteredAnalytics.yearDistribution, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(CartesianGrid, { strokeDasharray: "3 3" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(XAxis, { dataKey: "year" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(YAxis, {}),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip, { content: /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTooltip, {}) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Legend, {}),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Area, { type: "monotone", dataKey: "count", stroke: "#8884d8", fill: "#8884d8", fillOpacity: 0.6 })
          ] }) }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mt: 2, display: "flex", gap: 1 }, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                variant: chartType === "bar" ? "contained" : "outlined",
                onClick: () => setChartType("bar"),
                size: "small",
                children: "棒グラフ"
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                variant: chartType === "line" ? "contained" : "outlined",
                onClick: () => setChartType("line"),
                size: "small",
                children: "線グラフ"
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                variant: chartType === "area" ? "contained" : "outlined",
                onClick: () => setChartType("area"),
                size: "small",
                children: "エリアグラフ"
              }
            )
          ] })
        ] })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, lg: 4, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Accordion, { defaultExpanded: true, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(AccordionSummary, { expandIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(ExpandMore, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", children: "カテゴリ分布" }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(AccordionDetails, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { height: 400 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ResponsiveContainer, { width: "100%", height: "100%", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(PieChart, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Pie,
            {
              data: filteredAnalytics.categoryDistribution,
              cx: "50%",
              cy: "50%",
              labelLine: false,
              label: ({ category, percentage }) => `${category}: ${percentage.toFixed(1)}%`,
              outerRadius: 120,
              fill: "#8884d8",
              dataKey: "count",
              children: filteredAnalytics.categoryDistribution.map((entry, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx(Cell, { fill: entry.color }, `cell-${index2}`))
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip, {})
        ] }) }) }) })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, lg: 6, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Accordion, { defaultExpanded: true, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(AccordionSummary, { expandIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(ExpandMore, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", children: "都道府県別分布（上位15位）" }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(AccordionDetails, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { height: 400 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ResponsiveContainer, { width: "100%", height: "100%", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          BarChart,
          {
            data: filteredAnalytics.prefectureDistribution,
            layout: "horizontal",
            margin: { left: 80 },
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(CartesianGrid, { strokeDasharray: "3 3" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(XAxis, { type: "number" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(YAxis, { dataKey: "prefecture", type: "category", width: 80 }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip, { content: /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTooltip, {}) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Bar, { dataKey: "count", fill: "#82ca9d" })
            ]
          }
        ) }) }) })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, lg: 6, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Accordion, { defaultExpanded: true, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(AccordionSummary, { expandIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(ExpandMore, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", children: "累積建築数の推移" }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(AccordionDetails, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { height: 400 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ResponsiveContainer, { width: "100%", height: "100%", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(ComposedChart, { data: filteredAnalytics.timelineData, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(CartesianGrid, { strokeDasharray: "3 3" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(XAxis, { dataKey: "year" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(YAxis, { yAxisId: "left" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(YAxis, { yAxisId: "right", orientation: "right" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip, { content: /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTooltip, {}) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Legend, {}),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Area,
            {
              yAxisId: "left",
              type: "monotone",
              dataKey: "cumulative",
              fill: "#8884d8",
              fillOpacity: 0.6,
              stroke: "#8884d8"
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Bar, { yAxisId: "right", dataKey: "new", fill: "#82ca9d" })
        ] }) }) }) })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Accordion, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(AccordionSummary, { expandIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(ExpandMore, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", children: "建築家別作品数（上位20位）" }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(AccordionDetails, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { height: 500 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ResponsiveContainer, { width: "100%", height: "100%", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          BarChart,
          {
            data: filteredAnalytics.architectPopularity.slice(0, 20),
            margin: { bottom: 80 },
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(CartesianGrid, { strokeDasharray: "3 3" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                XAxis,
                {
                  dataKey: "architect",
                  angle: -45,
                  textAnchor: "end",
                  height: 100,
                  interval: 0
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(YAxis, {}),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip, { content: /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTooltip, {}) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Bar, { dataKey: "count", fill: "#ffc658" })
            ]
          }
        ) }) }) })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, md: 6, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Accordion, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(AccordionSummary, { expandIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(ExpandMore, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", children: "地域別密度分布" }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(AccordionDetails, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { height: 300 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ResponsiveContainer, { width: "100%", height: "100%", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(PieChart, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Pie,
            {
              data: filteredAnalytics.geographicDensity,
              cx: "50%",
              cy: "50%",
              outerRadius: 100,
              fill: "#8884d8",
              dataKey: "density",
              label: ({ region, density }) => `${region}: ${density.toFixed(1)}%`,
              children: filteredAnalytics.geographicDensity.map((entry, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx(Cell, { fill: CATEGORY_COLORS[index2 % CATEGORY_COLORS.length] }, `cell-${index2}`))
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip, {})
        ] }) }) }) })
      ] }) }),
      filteredAnalytics.statusDistribution.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, md: 6, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Accordion, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(AccordionSummary, { expandIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(ExpandMore, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", children: "建築状況分布" }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(AccordionDetails, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { height: 300 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ResponsiveContainer, { width: "100%", height: "100%", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(BarChart, { data: filteredAnalytics.statusDistribution, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(CartesianGrid, { strokeDasharray: "3 3" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(XAxis, { dataKey: "status" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(YAxis, {}),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip, { content: /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTooltip, {}) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Bar, { dataKey: "count", fill: "#ff7c7c" })
        ] }) }) }) })
      ] }) })
    ] })
  ] });
};
const CATEGORY_COLORS = [
  "#8884d8",
  "#82ca9d",
  "#ffc658",
  "#ff7c7c",
  "#8dd1e1",
  "#d084d0",
  "#ffb347",
  "#87ceeb",
  "#dda0dd",
  "#98fb98"
];

delete L$1.Icon.Default.prototype._getIconUrl;
L$1.Icon.Default.mergeOptions({
  iconRetinaUrl: "https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png",
  iconUrl: "https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png",
  shadowUrl: "https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png"
});
const createCustomIcon = (category, popularity = 0) => {
  const colors = {
    residential: "#4CAF50",
    commercial: "#2196F3",
    cultural: "#FF9800",
    educational: "#9C27B0",
    religious: "#795548",
    industrial: "#607D8B",
    default: "#F44336"
  };
  const color = colors[category] || colors.default;
  const size = Math.max(20, Math.min(40, 20 + popularity * 20));
  return L$1.divIcon({
    className: "custom-marker",
    html: `
      <div style="
        background-color: ${color};
        width: ${size}px;
        height: ${size}px;
        border-radius: 50%;
        border: 3px solid white;
        box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        font-size: ${Math.max(10, size * 0.3)}px;
      ">
        ${category ? category.charAt(0).toUpperCase() : "A"}
      </div>
    `,
    iconSize: [size, size],
    iconAnchor: [size / 2, size / 2],
    popupAnchor: [0, -size / 2]
  });
};
const EnhancedInteractiveMap = ({
  markers = [],
  center,
  zoom = 10,
  height = "600px",
  singleMarker,
  onMarkerClick,
  onBoundsChange,
  enableClustering = true,
  enableHeatmap = false,
  enableAnalytics = true,
  filterOptions = {}
}) => {
  const [mapInstance, setMapInstance] = reactExports.useState(null);
  const [markerClusterGroup, setMarkerClusterGroup] = reactExports.useState(null);
  const [analytics, setAnalytics] = reactExports.useState(null);
  const [layerMenuAnchor, setLayerMenuAnchor] = reactExports.useState(null);
  const [clusteringEnabled, setClusteringEnabled] = reactExports.useState(enableClustering);
  const [heatmapEnabled, setHeatmapEnabled] = reactExports.useState(enableHeatmap);
  const [isFullscreen, setIsFullscreen] = reactExports.useState(false);
  const mapRef = reactExports.useRef(null);
  const [visibleMarkers, setVisibleMarkers] = reactExports.useState([]);
  const calculateAnalytics = reactExports.useCallback((bounds, filteredMarkers2) => {
    const visibleMarkers2 = filteredMarkers2.filter(
      (marker) => bounds.contains([marker.latitude, marker.longitude])
    );
    const years = filteredMarkers2.filter((m) => m.year).map((m) => m.year);
    const yearRange = years.length > 0 ? [Math.min(...years), Math.max(...years)] : [2e3, (/* @__PURE__ */ new Date()).getFullYear()];
    const prefectures = [...new Set(filteredMarkers2.map((m) => m.prefecture).filter(Boolean))];
    const categories = [...new Set(filteredMarkers2.map((m) => m.category).filter(Boolean))];
    const popularity = filteredMarkers2.map((m) => m.popularity || 0);
    const averagePopularity = popularity.length > 0 ? popularity.reduce((a, b) => a + b, 0) / popularity.length : 0;
    const area = bounds.getNorthEast().distanceTo(bounds.getSouthWest()) / 1e3;
    const density = visibleMarkers2.length / Math.max(area, 1);
    return {
      totalMarkers: filteredMarkers2.length,
      visibleMarkers: visibleMarkers2.length,
      clusteredMarkers: clusteringEnabled ? visibleMarkers2.length : 0,
      yearRange,
      prefectures,
      categories,
      averagePopularity,
      density
    };
  }, [clusteringEnabled]);
  const filteredMarkers = React$3.useMemo(() => {
    return markers.filter((marker) => {
      if (filterOptions.yearRange && marker.year) {
        const [minYear, maxYear] = filterOptions.yearRange;
        if (marker.year < minYear || marker.year > maxYear) return false;
      }
      if (filterOptions.categories && filterOptions.categories.length > 0 && marker.category) {
        if (!filterOptions.categories.includes(marker.category)) return false;
      }
      if (filterOptions.prefectures && filterOptions.prefectures.length > 0 && marker.prefecture) {
        if (!filterOptions.prefectures.includes(marker.prefecture)) return false;
      }
      if (filterOptions.popularityThreshold && marker.popularity) {
        if (marker.popularity < filterOptions.popularityThreshold) return false;
      }
      return true;
    });
  }, [markers, filterOptions]);
  const createPopupContent = (marker) => {
    return `
      <div style="min-width: 250px; max-width: 300px;">
        ${marker.imageUrl ? `
          <img src="${marker.imageUrl}" alt="${marker.name}" 
               style="width: 100%; height: 150px; object-fit: cover; border-radius: 8px; margin-bottom: 12px;">
        ` : ""}
        <h3 style="margin: 0 0 8px 0; font-size: 1.2rem; font-weight: bold; color: #1976d2;">
          ${marker.name}
        </h3>
        ${marker.architect ? `
          <p style="margin: 0 0 4px 0; font-size: 0.9rem; color: #666; font-style: italic;">
            設計: ${marker.architect}
          </p>
        ` : ""}
        <p style="margin: 0 0 8px 0; font-size: 0.9rem; color: #666;">
          📍 ${marker.location}
        </p>
        ${marker.year ? `
          <p style="margin: 0 0 8px 0; font-size: 0.9rem; color: #666;">
            📅 ${marker.year}年
          </p>
        ` : ""}
        ${marker.category ? `
          <span style="
            display: inline-block;
            padding: 4px 8px;
            background-color: #e3f2fd;
            color: #1976d2;
            border-radius: 12px;
            font-size: 0.8rem;
            margin-bottom: 8px;
          ">
            ${marker.category}
          </span>
        ` : ""}
        ${marker.description ? `
          <p style="margin: 8px 0; font-size: 0.85rem; color: #555; line-height: 1.4;">
            ${marker.description.length > 100 ? marker.description.substring(0, 100) + "..." : marker.description}
          </p>
        ` : ""}
        ${marker.popularity ? `
          <div style="margin: 8px 0; display: flex; align-items: center; gap: 8px;">
            <span style="font-size: 0.8rem; color: #666;">人気度:</span>
            <div style="flex: 1; height: 6px; background-color: #e0e0e0; border-radius: 3px; overflow: hidden;">
              <div style="width: ${marker.popularity * 100}%; height: 100%; background-color: #4caf50;"></div>
            </div>
            <span style="font-size: 0.8rem; color: #666;">${Math.round(marker.popularity * 100)}%</span>
          </div>
        ` : ""}
        <button 
          onclick="window.dispatchEvent(new CustomEvent('marker-click', { detail: ${JSON.stringify(marker)} }))"
          style="
            width: 100%;
            padding: 8px 16px;
            margin-top: 12px;
            background-color: #1976d2;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: background-color 0.2s;
          "
          onmouseover="this.style.backgroundColor='#1565c0'"
          onmouseout="this.style.backgroundColor='#1976d2'"
        >
          詳細を見る
        </button>
      </div>
    `;
  };
  const mapRefCallback = reactExports.useCallback((node) => {
    if (node !== null && !mapInstance) {
      try {
        const initialCenter = singleMarker && singleMarker.latitude && singleMarker.longitude ? [singleMarker.latitude, singleMarker.longitude] : center;
        const map = L$1.map(node, {
          center: initialCenter,
          zoom,
          zoomControl: false,
          // We'll add custom controls
          attributionControl: true
        });
        const osmLayer = L$1.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
          attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
          maxZoom: 19
        });
        const satelliteLayer = L$1.tileLayer("https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}", {
          attribution: "Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community",
          maxZoom: 19
        });
        osmLayer.addTo(map);
        const baseLayers = {
          "標準地図": osmLayer,
          "衛星画像": satelliteLayer
        };
        L$1.control.layers(baseLayers).addTo(map);
        const clusterGroup = L$1.markerClusterGroup({
          maxClusterRadius: 50,
          disableClusteringAtZoom: 15,
          spiderfyOnMaxZoom: true,
          showCoverageOnHover: true,
          zoomToBoundsOnClick: true,
          iconCreateFunction: (cluster) => {
            const count = cluster.getChildCount();
            const size = count < 10 ? 30 : count < 100 ? 40 : 50;
            return L$1.divIcon({
              html: `<div style="
                background: linear-gradient(135deg, #1976d2, #1565c0);
                color: white;
                border-radius: 50%;
                border: 3px solid white;
                box-shadow: 0 2px 8px rgba(0,0,0,0.3);
                display: flex;
                align-items: center;
                justify-content: center;
                font-weight: bold;
                font-size: ${Math.max(12, size * 0.3)}px;
                width: ${size}px;
                height: ${size}px;
              ">${count}</div>`,
              className: "marker-cluster-custom",
              iconSize: L$1.point(size, size, true)
            });
          }
        });
        map.on("moveend zoomend", () => {
          const bounds = map.getBounds();
          const analytics2 = calculateAnalytics(bounds, filteredMarkers);
          setAnalytics(analytics2);
          if (onBoundsChange) {
            onBoundsChange(bounds, analytics2);
          }
        });
        setMapInstance(map);
        setMarkerClusterGroup(clusterGroup);
        window.addEventListener("marker-click", (event) => {
          if (onMarkerClick) {
            onMarkerClick(event.detail);
          }
        });
      } catch (error) {
        console.error("Map initialization error:", error);
      }
    }
  }, [center, zoom, singleMarker, onBoundsChange, onMarkerClick, calculateAnalytics, filteredMarkers, mapInstance]);
  reactExports.useEffect(() => {
    if (!mapInstance || !markerClusterGroup) return;
    markerClusterGroup.clearLayers();
    filteredMarkers.forEach((marker) => {
      if (marker.latitude && marker.longitude) {
        const leafletMarker = L$1.marker(
          [marker.latitude, marker.longitude],
          {
            icon: createCustomIcon(marker.category || "default", marker.popularity || 0)
          }
        );
        leafletMarker.bindPopup(createPopupContent(marker), {
          maxWidth: 300,
          minWidth: 250
        });
        if (clusteringEnabled) {
          markerClusterGroup.addLayer(leafletMarker);
        } else {
          leafletMarker.addTo(mapInstance);
        }
      }
    });
    if (clusteringEnabled && !mapInstance.hasLayer(markerClusterGroup)) {
      mapInstance.addLayer(markerClusterGroup);
    } else if (!clusteringEnabled && mapInstance.hasLayer(markerClusterGroup)) {
      mapInstance.removeLayer(markerClusterGroup);
    }
    if (singleMarker && singleMarker.latitude && singleMarker.longitude) {
      const singleLeafletMarker = L$1.marker([singleMarker.latitude, singleMarker.longitude], {
        icon: createCustomIcon(singleMarker.category || "default", singleMarker.popularity || 1)
      });
      singleLeafletMarker.bindPopup(createPopupContent(singleMarker));
      singleLeafletMarker.addTo(mapInstance);
    }
    setVisibleMarkers(filteredMarkers);
  }, [mapInstance, markerClusterGroup, filteredMarkers, singleMarker, clusteringEnabled]);
  const toggleClustering = () => {
    setClusteringEnabled(!clusteringEnabled);
  };
  const toggleFullscreen = () => {
    if (!isFullscreen) {
      if (mapRef.current?.requestFullscreen) {
        mapRef.current.requestFullscreen();
      }
    } else {
      if (document.exitFullscreen) {
        document.exitFullscreen();
      }
    }
    setIsFullscreen(!isFullscreen);
  };
  const zoomIn = () => mapInstance?.zoomIn();
  const zoomOut = () => mapInstance?.zoomOut();
  const goToUserLocation = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition((position) => {
        mapInstance?.setView([position.coords.latitude, position.coords.longitude], 15);
      });
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { position: "relative", height, width: "100%" }, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs(
      Box,
      {
        sx: {
          position: "absolute",
          top: 10,
          right: 10,
          zIndex: 1e3,
          display: "flex",
          flexDirection: "column",
          gap: 1
        },
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Paper, { elevation: 2, sx: { p: 0.5 }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", flexDirection: "column" }, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(IconButton, { size: "small", onClick: zoomIn, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ZoomIn, {}) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(IconButton, { size: "small", onClick: zoomOut, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ZoomOut, {}) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(IconButton, { size: "small", onClick: goToUserLocation, children: /* @__PURE__ */ jsxRuntimeExports.jsx(MyLocation, {}) })
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Paper, { elevation: 2, sx: { p: 1 }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", flexDirection: "column", gap: 1, minWidth: 200 }, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              FormControlLabel,
              {
                control: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Switch,
                  {
                    checked: clusteringEnabled,
                    onChange: toggleClustering,
                    size: "small"
                  }
                ),
                label: "クラスタリング",
                sx: { margin: 0 }
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                size: "small",
                startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(Fullscreen, {}),
                onClick: toggleFullscreen,
                variant: "outlined",
                children: isFullscreen ? "元に戻す" : "フルスクリーン"
              }
            )
          ] }) })
        ]
      }
    ),
    enableAnalytics && analytics && /* @__PURE__ */ jsxRuntimeExports.jsxs(
      Paper,
      {
        elevation: 3,
        sx: {
          position: "absolute",
          bottom: 10,
          left: 10,
          zIndex: 1e3,
          p: 2,
          minWidth: 250,
          backgroundColor: "rgba(255, 255, 255, 0.95)"
        },
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, children: "マップ統計" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", flexDirection: "column", gap: 1 }, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", justifyContent: "space-between" }, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", children: "総建築物数:" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Chip, { label: analytics.totalMarkers, size: "small", color: "primary" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", justifyContent: "space-between" }, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", children: "表示中:" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Chip, { label: analytics.visibleMarkers, size: "small", color: "secondary" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", justifyContent: "space-between" }, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", children: "年代:" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", children: [
                analytics.yearRange[0],
                " - ",
                analytics.yearRange[1]
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", justifyContent: "space-between" }, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", children: "都道府県数:" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Chip, { label: analytics.prefectures.length, size: "small" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", justifyContent: "space-between" }, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", children: "カテゴリ数:" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Chip, { label: analytics.categories.length, size: "small" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", justifyContent: "space-between" }, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", children: "密度:" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", children: [
                analytics.density.toFixed(1),
                "/km²"
              ] })
            ] })
          ] })
        ]
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "div",
      {
        ref: mapRefCallback,
        style: {
          height: "100%",
          width: "100%",
          borderRadius: "8px",
          overflow: "hidden"
        },
        className: "leaflet-container"
      }
    )
  ] });
};

const JAPANESE_ARCHITECTURE_ERAS = [
  {
    name: "明治時代",
    startYear: 1868,
    endYear: 1912,
    color: "#8B4513",
    description: "西洋建築の導入と和洋折衷建築の発展",
    characteristics: ["西洋建築様式の導入", "煉瓦造建築", "和洋折衷", "擬洋風建築"]
  },
  {
    name: "大正時代",
    startYear: 1912,
    endYear: 1926,
    color: "#FF6B6B",
    description: "大正ロマンと自由主義建築",
    characteristics: ["自由主義建築", "分離派建築", "表現主義", "大正ロマン"]
  },
  {
    name: "昭和戦前",
    startYear: 1926,
    endYear: 1945,
    color: "#4ECDC4",
    description: "モダニズム建築の受容と発展",
    characteristics: ["国際様式", "アール・デコ", "モダニズム", "帝冠様式"]
  },
  {
    name: "昭和戦後",
    startYear: 1945,
    endYear: 1989,
    color: "#45B7D1",
    description: "復興から高度経済成長期の建築",
    characteristics: ["復興建築", "メタボリズム", "高層建築", "団地建築"]
  },
  {
    name: "平成時代",
    startYear: 1989,
    endYear: 2019,
    color: "#96CEB4",
    description: "ポストモダンから現代建築へ",
    characteristics: ["ポストモダン", "解構主義", "環境建築", "IT時代の建築"]
  },
  {
    name: "令和時代",
    startYear: 2019,
    endYear: 2030,
    color: "#FECA57",
    description: "持続可能性と新技術の建築",
    characteristics: ["サステナブル建築", "スマート建築", "AIとIoT", "災害復興建築"]
  }
];
const SIGNIFICANCE_COLORS = {
  low: "#E0E0E0",
  medium: "#81C784",
  high: "#FF9800",
  landmark: "#F44336"
};
const ArchitectureTimelineVisualization = ({
  architectures,
  onEventSelect,
  onYearChange,
  autoPlayInterval = 500,
  enableEras = true,
  enableFiltering = true,
  enableComparison = false
}) => {
  const [currentYear, setCurrentYear] = reactExports.useState(1950);
  const [isPlaying, setIsPlaying] = reactExports.useState(false);
  const [playSpeed, setPlaySpeed] = reactExports.useState(1);
  const [selectedCategory, setSelectedCategory] = reactExports.useState("all");
  const [selectedPrefecture, setSelectedPrefecture] = reactExports.useState("all");
  const [significanceFilter, setSignificanceFilter] = reactExports.useState(["low", "medium", "high", "landmark"]);
  const [zoomLevel, setZoomLevel] = reactExports.useState(1);
  const [showEventDetails, setShowEventDetails] = reactExports.useState(false);
  const [selectedEvent, setSelectedEvent] = reactExports.useState(null);
  const [comparisonMode, setComparisonMode] = reactExports.useState(false);
  const [selectedEvents, setSelectedEvents] = reactExports.useState([]);
  const timelineEvents = reactExports.useMemo(() => {
    return architectures.filter((arch) => arch.ZAR_YEAR && arch.ZAR_YEAR >= 1850 && arch.ZAR_YEAR <= 2030).map((arch) => {
      const hasImage = !!arch.ZAR_IMAGE_URL;
      const hasArchitect = !!arch.ZAR_ARCHITECT;
      const isInTokyo = arch.ZAR_PREFECTURE === "東京都";
      let significance = "low";
      if (hasImage && hasArchitect && isInTokyo) significance = "landmark";
      else if (hasImage && hasArchitect) significance = "high";
      else if (hasImage || hasArchitect) significance = "medium";
      return {
        id: arch.Z_PK.toString(),
        year: arch.ZAR_YEAR,
        title: arch.ZAR_TITLE,
        architect: arch.ZAR_ARCHITECT || void 0,
        category: arch.ZAR_CATEGORY || "その他",
        prefecture: arch.ZAR_PREFECTURE || "不明",
        description: arch.ZAR_DESCRIPTION || void 0,
        imageUrl: arch.ZAR_IMAGE_URL || void 0,
        significance,
        coordinates: arch.ZAR_LATITUDE && arch.ZAR_LONGITUDE ? [arch.ZAR_LATITUDE, arch.ZAR_LONGITUDE] : void 0
      };
    });
  }, [architectures]);
  const filteredEvents = reactExports.useMemo(() => {
    return timelineEvents.filter((event) => {
      if (selectedCategory !== "all" && event.category !== selectedCategory) return false;
      if (selectedPrefecture !== "all" && event.prefecture !== selectedPrefecture) return false;
      if (!significanceFilter.includes(event.significance)) return false;
      return true;
    });
  }, [timelineEvents, selectedCategory, selectedPrefecture, significanceFilter]);
  const currentEvents = reactExports.useMemo(() => {
    const yearRange2 = Math.max(1, 10 / zoomLevel);
    return filteredEvents.filter(
      (event) => event.year >= currentYear - yearRange2 && event.year <= currentYear + yearRange2
    );
  }, [filteredEvents, currentYear, zoomLevel]);
  const currentEra = reactExports.useMemo(() => {
    return JAPANESE_ARCHITECTURE_ERAS.find(
      (era) => currentYear >= era.startYear && currentYear <= era.endYear
    );
  }, [currentYear]);
  const categories = reactExports.useMemo(
    () => [...new Set(timelineEvents.map((event) => event.category))].sort(),
    [timelineEvents]
  );
  const prefectures = reactExports.useMemo(
    () => [...new Set(timelineEvents.map((event) => event.prefecture))].sort(),
    [timelineEvents]
  );
  React$3.useEffect(() => {
    if (!isPlaying) return;
    const interval = setInterval(() => {
      setCurrentYear((prev) => {
        const next = prev + playSpeed;
        if (next > 2030) {
          setIsPlaying(false);
          return 1850;
        }
        return next;
      });
    }, autoPlayInterval);
    return () => clearInterval(interval);
  }, [isPlaying, playSpeed, autoPlayInterval]);
  React$3.useEffect(() => {
    if (onYearChange) {
      onYearChange(currentYear);
    }
  }, [currentYear, onYearChange]);
  const handleEventClick = reactExports.useCallback((event) => {
    if (comparisonMode) {
      setSelectedEvents((prev) => {
        const exists = prev.find((e) => e.id === event.id);
        if (exists) {
          return prev.filter((e) => e.id !== event.id);
        } else if (prev.length < 5) {
          return [...prev, event];
        }
        return prev;
      });
    } else {
      setSelectedEvent(event);
      setShowEventDetails(true);
      if (onEventSelect) {
        onEventSelect(event);
      }
    }
  }, [comparisonMode, onEventSelect]);
  const handlePlayPause = () => {
    setIsPlaying(!isPlaying);
  };
  const handleStop = () => {
    setIsPlaying(false);
    setCurrentYear(1850);
  };
  const handleYearSliderChange = (event, newValue) => {
    setCurrentYear(newValue);
  };
  const handleZoomIn = () => {
    setZoomLevel((prev) => Math.min(prev * 2, 8));
  };
  const handleZoomOut = () => {
    setZoomLevel((prev) => Math.max(prev / 2, 0.25));
  };
  const timelineWidth = 1e3;
  const yearRange = [1850, 2030];
  const totalYears = yearRange[1] - yearRange[0];
  const getEventPosition = (year) => {
    return (year - yearRange[0]) / totalYears * timelineWidth;
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { p: 3 }, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mb: 3, display: "flex", justifyContent: "space-between", alignItems: "center" }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h4", children: "建築史タイムライン" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", gap: 1 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip$1, { title: "比較モード", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          FormControlLabel,
          {
            control: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Switch,
              {
                checked: comparisonMode,
                onChange: (e) => setComparisonMode(e.target.checked)
              }
            ),
            label: "比較"
          }
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(Download, {}), variant: "outlined", children: "エクスポート" })
      ] })
    ] }),
    enableEras && currentEra && /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 2, mb: 3, backgroundColor: currentEra.color + "20" }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "h6", sx: { color: currentEra.color, fontWeight: "bold" }, children: [
        currentEra.name,
        " (",
        currentEra.startYear,
        " - ",
        currentEra.endYear,
        ")"
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", sx: { mb: 1 }, children: currentEra.description }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { display: "flex", gap: 0.5, flexWrap: "wrap" }, children: currentEra.characteristics.map((char, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(
        Chip,
        {
          label: char,
          size: "small",
          sx: { backgroundColor: currentEra.color + "40" }
        },
        index
      )) })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(Paper, { sx: { p: 2, mb: 3 }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { container: true, spacing: 2, alignItems: "center", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, md: 4, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", gap: 1 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(IconButton, { onClick: () => setCurrentYear((prev) => Math.max(prev - 10, 1850)), children: /* @__PURE__ */ jsxRuntimeExports.jsx(SkipPrevious, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(IconButton, { onClick: handlePlayPause, color: "primary", children: isPlaying ? /* @__PURE__ */ jsxRuntimeExports.jsx(Pause, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(PlayArrow, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(IconButton, { onClick: handleStop, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Stop, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(IconButton, { onClick: () => setCurrentYear((prev) => Math.min(prev + 10, 2030)), children: /* @__PURE__ */ jsxRuntimeExports.jsx(SkipNext, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControl, { size: "small", sx: { ml: 2, minWidth: 80 }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(InputLabel, { children: "速度" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            Select,
            {
              value: playSpeed,
              onChange: (e) => setPlaySpeed(e.target.value),
              label: "速度",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: 0.5, children: "0.5x" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: 1, children: "1x" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: 2, children: "2x" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: 5, children: "5x" })
              ]
            }
          )
        ] })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, md: 2, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", gap: 1 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(IconButton, { onClick: handleZoomOut, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ZoomOut, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", children: [
          zoomLevel.toFixed(1),
          "x"
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(IconButton, { onClick: handleZoomIn, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ZoomIn, {}) })
      ] }) }),
      enableFiltering && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, md: 2, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControl, { fullWidth: true, size: "small", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(InputLabel, { children: "カテゴリ" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            Select,
            {
              value: selectedCategory,
              onChange: (e) => setSelectedCategory(e.target.value),
              label: "カテゴリ",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "all", children: "全て" }),
                categories.map((category) => /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: category, children: category }, category))
              ]
            }
          )
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, md: 2, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControl, { fullWidth: true, size: "small", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(InputLabel, { children: "都道府県" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            Select,
            {
              value: selectedPrefecture,
              onChange: (e) => setSelectedPrefecture(e.target.value),
              label: "都道府県",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "all", children: "全て" }),
                prefectures.map((prefecture) => /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: prefecture, children: prefecture }, prefecture))
              ]
            }
          )
        ] }) })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, md: 2, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "h5", align: "center", color: "primary", children: [
        currentYear,
        "年"
      ] }) })
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(Paper, { sx: { p: 2, mb: 3 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      Slider,
      {
        value: currentYear,
        onChange: handleYearSliderChange,
        min: 1850,
        max: 2030,
        step: 1,
        marks: JAPANESE_ARCHITECTURE_ERAS.map((era) => ({
          value: era.startYear,
          label: era.name
        })),
        valueLabelDisplay: "auto",
        sx: { "& .MuiSlider-mark": { backgroundColor: "primary.main" } }
      }
    ) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(Paper, { sx: { p: 2, mb: 3, overflowX: "auto" }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { position: "relative", height: 400, minWidth: timelineWidth }, children: [
      enableEras && JAPANESE_ARCHITECTURE_ERAS.map((era) => {
        const startPos = getEventPosition(era.startYear);
        const endPos = getEventPosition(era.endYear);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          Box,
          {
            sx: {
              position: "absolute",
              left: startPos,
              width: endPos - startPos,
              height: "100%",
              backgroundColor: era.color + "10",
              border: `1px solid ${era.color}40`,
              borderRadius: 1
            }
          },
          era.name
        );
      }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Box,
        {
          sx: {
            position: "absolute",
            left: getEventPosition(currentYear),
            top: 0,
            width: 2,
            height: "100%",
            backgroundColor: "primary.main",
            zIndex: 10
          }
        }
      ),
      filteredEvents.map((event) => {
        const position = getEventPosition(event.year);
        const isVisible = Math.abs(event.year - currentYear) <= 10 / zoomLevel;
        const isSelected = selectedEvents.find((e) => e.id === event.id);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          Tooltip$1,
          {
            title: `${event.year}: ${event.title}${event.architect ? ` by ${event.architect}` : ""}`,
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Box,
              {
                sx: {
                  position: "absolute",
                  left: position - 5,
                  top: 50 + Math.random() * 250,
                  // Random vertical position for better visibility
                  width: 10,
                  height: 10,
                  borderRadius: "50%",
                  backgroundColor: SIGNIFICANCE_COLORS[event.significance],
                  border: isSelected ? "3px solid #1976d2" : "1px solid #fff",
                  opacity: isVisible ? 1 : 0.3,
                  cursor: "pointer",
                  transform: isSelected ? "scale(1.5)" : "scale(1)",
                  transition: "all 0.2s ease",
                  zIndex: isSelected ? 20 : isVisible ? 15 : 5,
                  "&:hover": {
                    transform: "scale(1.8)",
                    zIndex: 25
                  }
                },
                onClick: () => handleEventClick(event)
              }
            )
          },
          event.id
        );
      }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { position: "absolute", bottom: 10, right: 10 }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 1 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "caption", gutterBottom: true, children: "重要度" }),
        Object.entries(SIGNIFICANCE_COLORS).map(([significance, color]) => /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", gap: 0.5 }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Box,
            {
              sx: {
                width: 8,
                height: 8,
                borderRadius: "50%",
                backgroundColor: color
              }
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "caption", children: significance === "landmark" ? "ランドマーク" : significance === "high" ? "高" : significance === "medium" ? "中" : "低" })
        ] }, significance))
      ] }) })
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 2 }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "h6", gutterBottom: true, children: [
        currentYear,
        "年前後の建築作品 (",
        currentEvents.length,
        "件)"
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { container: true, spacing: 2, children: currentEvents.slice(0, 6).map((event) => /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, md: 4, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        Card$1,
        {
          sx: {
            cursor: "pointer",
            transition: "transform 0.2s",
            "&:hover": { transform: "scale(1.02)" },
            border: selectedEvents.find((e) => e.id === event.id) ? "2px solid #1976d2" : "none"
          },
          onClick: () => handleEventClick(event),
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(CardContent$1, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "flex-start", gap: 1 }, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Avatar,
              {
                sx: {
                  backgroundColor: SIGNIFICANCE_COLORS[event.significance],
                  width: 24,
                  height: 24,
                  fontSize: "0.7rem"
                },
                children: event.year.toString().slice(-2)
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { flex: 1 }, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "subtitle2", noWrap: true, children: event.title }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "caption", color: "text.secondary", children: [
                event.architect && `${event.architect} | `,
                event.prefecture,
                " | ",
                event.category
              ] })
            ] })
          ] }) })
        }
      ) }, event.id)) }),
      currentEvents.length > 6 && /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", sx: { mt: 1, textAlign: "center" }, children: [
        "他 ",
        currentEvents.length - 6,
        " 件..."
      ] })
    ] }),
    comparisonMode && selectedEvents.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 2, mt: 2 }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "h6", gutterBottom: true, children: [
        "選択中の建築作品 (",
        selectedEvents.length,
        "/5)"
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { container: true, spacing: 2, children: selectedEvents.map((event) => /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, md: 6, lg: 4, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Card$1, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent$1, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", children: event.title }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", color: "text.secondary", children: [
          event.year,
          "年 | ",
          event.architect || "設計者不明"
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", children: [
          event.prefecture,
          " | ",
          event.category
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button,
          {
            size: "small",
            onClick: () => setSelectedEvents((prev) => prev.filter((e) => e.id !== event.id)),
            sx: { mt: 1 },
            children: "削除"
          }
        )
      ] }) }) }, event.id)) })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Dialog,
      {
        open: showEventDetails,
        onClose: () => setShowEventDetails(false),
        maxWidth: "md",
        fullWidth: true,
        children: selectedEvent && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(DialogTitle, { children: [
            selectedEvent.title,
            " (",
            selectedEvent.year,
            ")"
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(DialogContent, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { container: true, spacing: 2, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { item: true, xs: 12, md: 6, children: [
              selectedEvent.imageUrl && /* @__PURE__ */ jsxRuntimeExports.jsx(
                Box,
                {
                  component: "img",
                  src: selectedEvent.imageUrl,
                  alt: selectedEvent.title,
                  sx: { width: "100%", borderRadius: 1, mb: 2 }
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body1", gutterBottom: true, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "設計者:" }),
                " ",
                selectedEvent.architect || "不明"
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body1", gutterBottom: true, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "所在地:" }),
                " ",
                selectedEvent.prefecture
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body1", gutterBottom: true, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "カテゴリ:" }),
                " ",
                selectedEvent.category
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body1", gutterBottom: true, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "重要度:" }),
                " ",
                selectedEvent.significance === "landmark" ? "ランドマーク" : selectedEvent.significance === "high" ? "高" : selectedEvent.significance === "medium" ? "中" : "低"
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { item: true, xs: 12, md: 6, children: [
              selectedEvent.description && /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", paragraph: true, children: selectedEvent.description }),
              currentEra && /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 2, backgroundColor: currentEra.color + "20" }, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "subtitle2", gutterBottom: true, children: [
                  "時代背景: ",
                  currentEra.name
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", children: currentEra.description })
              ] })
            ] })
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(DialogActions, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { onClick: () => setShowEventDetails(false), children: "閉じる" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { variant: "contained", children: "詳細ページへ" })
          ] })
        ] })
      }
    )
  ] });
};

const SKILL_CATEGORIES = [
  { name: "住宅建築", key: "residential" },
  { name: "商業建築", key: "commercial" },
  { name: "文化施設", key: "cultural" },
  { name: "教育施設", key: "educational" },
  { name: "宗教建築", key: "religious" },
  { name: "公共建築", key: "public" }
];
const CHART_COLORS = ["#8884d8", "#82ca9d", "#ffc658", "#ff7c7c", "#8dd1e1", "#d084d0"];
const ArchitectPortfolioVisualization = ({
  architect,
  architectures,
  onWorkSelect,
  onCompareArchitect,
  enableComparison = false,
  showDetailedStats = true
}) => {
  const [selectedTab, setSelectedTab] = reactExports.useState(0);
  const [selectedWork, setSelectedWork] = reactExports.useState(null);
  const [showWorkDetails, setShowWorkDetails] = reactExports.useState(false);
  const [isFavorite, setIsFavorite] = reactExports.useState(false);
  const [showTimeline, setShowTimeline] = reactExports.useState(false);
  const portfolio = reactExports.useMemo(() => {
    const works = architectures.filter(
      (arch) => arch.ZAR_ARCHITECT === architect.ZAR_NAME || arch.ZAR_ARCHITECT1 === architect.ZAR_NAME || arch.ZAR_ARCHITECT2 === architect.ZAR_NAME || arch.ZAR_ARCHITECT3 === architect.ZAR_NAME || arch.ZAR_ARCHITECT4 === architect.ZAR_NAME
    );
    const years = works.filter((w) => w.ZAR_YEAR).map((w) => w.ZAR_YEAR);
    const yearSpan = years.length > 0 ? [Math.min(...years), Math.max(...years)] : [architect.ZAR_BIRTHYEAR || 1900, (/* @__PURE__ */ new Date()).getFullYear()];
    const categoryCount = {};
    works.forEach((work) => {
      const category = work.ZAR_CATEGORY || "その他";
      categoryCount[category] = (categoryCount[category] || 0) + 1;
    });
    const totalWorks = works.length;
    const categories = Object.entries(categoryCount).map(([name, count]) => ({
      name,
      count,
      percentage: count / totalWorks * 100
    })).sort((a, b) => b.count - a.count);
    const prefectureCount = {};
    works.forEach((work) => {
      const prefecture = work.ZAR_PREFECTURE || "不明";
      prefectureCount[prefecture] = (prefectureCount[prefecture] || 0) + 1;
    });
    const prefectures = Object.entries(prefectureCount).map(([name, count]) => ({
      name,
      count
    })).sort((a, b) => b.count - a.count);
    const yearlyCount = {};
    works.forEach((work) => {
      if (work.ZAR_YEAR) {
        yearlyCount[work.ZAR_YEAR] = (yearlyCount[work.ZAR_YEAR] || 0) + 1;
      }
    });
    const productivity = Object.entries(yearlyCount).map(([year, count]) => ({
      year: parseInt(year),
      count
    })).sort((a, b) => a.year - b.year);
    const averageWorksPerYear = years.length > 0 ? totalWorks / (yearSpan[1] - yearSpan[0] + 1) : 0;
    const peakYear = productivity.reduce(
      (max, item) => item.count > max.count ? item : max,
      productivity[0]
    )?.year || yearSpan[1];
    const influence = Math.min(100, totalWorks * 2 + (yearSpan[1] - yearSpan[0]) * 0.5);
    const innovation = Math.min(100, categories.length * 15 + prefectures.length * 5);
    const recognition = Math.min(100, (architect.ZAR_AWARDS ? 30 : 0) + totalWorks * 1.5);
    const timeline = [
      ...architect.ZAR_BIRTHYEAR ? [{
        year: architect.ZAR_BIRTHYEAR,
        event: `${architect.ZAR_BIRTHPLACE || ""}で誕生`,
        type: "birth"
      }] : [],
      ...architect.ZAR_SCHOOL ? [{
        year: (architect.ZAR_BIRTHYEAR || 1900) + 22,
        event: `${architect.ZAR_SCHOOL}で学ぶ`,
        type: "education"
      }] : [],
      ...productivity.map((p) => ({
        year: p.year,
        event: `${p.count}作品を完成`,
        type: "work"
      })),
      ...architect.ZAR_AWARDS ? [{
        year: peakYear,
        event: architect.ZAR_AWARDS,
        type: "award"
      }] : [],
      ...architect.ZAR_DEATHYEAR ? [{
        year: architect.ZAR_DEATHYEAR,
        event: "逝去",
        type: "death"
      }] : []
    ].sort((a, b) => a.year - b.year);
    const skills = SKILL_CATEGORIES.map((category) => {
      const categoryWorks = works.filter(
        (work) => work.ZAR_CATEGORY?.includes(category.key) || work.ZAR_BIGCATEGORY?.includes(category.key)
      ).length;
      const level = Math.min(100, categoryWorks / Math.max(totalWorks, 1) * 100 + Math.random() * 20);
      return {
        name: category.name,
        level: Math.round(level)
      };
    });
    const collaborations = [
      { name: "構造設計事務所", works: Math.floor(totalWorks * 0.8) },
      { name: "設備設計", works: Math.floor(totalWorks * 0.6) },
      { name: "ランドスケープ", works: Math.floor(totalWorks * 0.3) }
    ].filter((c) => c.works > 0);
    return {
      architect,
      works,
      statistics: {
        totalWorks,
        yearSpan,
        categories,
        prefectures,
        productivity,
        averageWorksPerYear,
        peakYear,
        influence,
        innovation,
        recognition
      },
      timeline,
      skills,
      collaborations
    };
  }, [architect, architectures]);
  const handleWorkClick = (work) => {
    setSelectedWork(work);
    setShowWorkDetails(true);
    if (onWorkSelect) {
      onWorkSelect(work);
    }
  };
  const handleTabChange = (event, newValue) => {
    setSelectedTab(newValue);
  };
  const radarData = portfolio.skills.map((skill) => ({
    skill: skill.name,
    level: skill.level
  }));
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { p: 3 }, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(Paper, { sx: { p: 3, mb: 3, background: "linear-gradient(135deg, #1976d2 0%, #1565c0 100%)" }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { container: true, spacing: 3, alignItems: "center", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, md: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", flexDirection: "column", alignItems: "center" }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          Avatar,
          {
            src: architect.ZAR_IMAGE,
            sx: {
              width: 120,
              height: 120,
              mb: 2,
              border: "4px solid white",
              boxShadow: 3
            },
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(Person, { sx: { fontSize: 60 } })
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          IconButton,
          {
            onClick: () => setIsFavorite(!isFavorite),
            sx: { color: "white" },
            children: isFavorite ? /* @__PURE__ */ jsxRuntimeExports.jsx(Favorite, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(FavoriteBorder, {})
          }
        )
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { item: true, xs: 12, md: 6, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h4", sx: { color: "white", fontWeight: "bold", mb: 1 }, children: architect.ZAR_NAME }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", sx: { color: "white", opacity: 0.9, mb: 2 }, children: architect.ZAR_NAMEENG }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", gap: 1, flexWrap: "wrap", mb: 2 }, children: [
          architect.ZAR_BIRTHYEAR && /* @__PURE__ */ jsxRuntimeExports.jsx(
            Chip,
            {
              icon: /* @__PURE__ */ jsxRuntimeExports.jsx(DateRange, {}),
              label: `${architect.ZAR_BIRTHYEAR}${architect.ZAR_DEATHYEAR ? `-${architect.ZAR_DEATHYEAR}` : "-"}`,
              sx: { backgroundColor: "white", color: "primary.main" }
            }
          ),
          architect.ZAR_NATIONALITY && /* @__PURE__ */ jsxRuntimeExports.jsx(
            Chip,
            {
              icon: /* @__PURE__ */ jsxRuntimeExports.jsx(LocationOn, {}),
              label: architect.ZAR_NATIONALITY,
              sx: { backgroundColor: "white", color: "primary.main" }
            }
          ),
          architect.ZAR_SCHOOL && /* @__PURE__ */ jsxRuntimeExports.jsx(
            Chip,
            {
              icon: /* @__PURE__ */ jsxRuntimeExports.jsx(School, {}),
              label: architect.ZAR_SCHOOL,
              sx: { backgroundColor: "white", color: "primary.main" }
            }
          )
        ] }),
        architect.ZAR_BIO && /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body1", sx: { color: "white", opacity: 0.9 }, children: architect.ZAR_BIO.length > 200 ? architect.ZAR_BIO.substring(0, 200) + "..." : architect.ZAR_BIO })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, md: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", flexDirection: "column", gap: 2 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button,
          {
            variant: "contained",
            sx: { backgroundColor: "white", color: "primary.main" },
            startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(Timeline, {}),
            onClick: () => setShowTimeline(true),
            children: "タイムライン"
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button,
          {
            variant: "outlined",
            sx: { color: "white", borderColor: "white" },
            startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(Share, {}),
            children: "共有"
          }
        ),
        enableComparison && /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button,
          {
            variant: "outlined",
            sx: { color: "white", borderColor: "white" },
            onClick: () => onCompareArchitect && onCompareArchitect(architect),
            children: "比較"
          }
        )
      ] }) })
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { container: true, spacing: 3, sx: { mb: 3 }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, md: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Card$1, { sx: { height: "100%" }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent$1, { sx: { textAlign: "center" }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Business, { sx: { fontSize: 40, color: "primary.main", mb: 1 } }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h4", color: "primary", children: portfolio.statistics.totalWorks }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: "総作品数" })
      ] }) }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, md: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Card$1, { sx: { height: "100%" }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent$1, { sx: { textAlign: "center" }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(TrendingUp, { sx: { fontSize: 40, color: "success.main", mb: 1 } }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h4", color: "success.main", children: portfolio.statistics.averageWorksPerYear.toFixed(1) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: "年平均作品数" })
      ] }) }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, md: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Card$1, { sx: { height: "100%" }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent$1, { sx: { textAlign: "center" }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(LocationOn, { sx: { fontSize: 40, color: "warning.main", mb: 1 } }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h4", color: "warning.main", children: portfolio.statistics.prefectures.length }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: "活動都道府県数" })
      ] }) }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, md: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Card$1, { sx: { height: "100%" }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent$1, { sx: { textAlign: "center" }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(EmojiEvents, { sx: { fontSize: 40, color: "error.main", mb: 1 } }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h4", color: "error.main", children: Math.round(portfolio.statistics.influence) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: "影響力指数" })
      ] }) }) })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(Paper, { sx: { mb: 3 }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Tabs$1, { value: selectedTab, onChange: handleTabChange, variant: "scrollable", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Tab, { label: "作品ギャラリー" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Tab, { label: "統計・分析" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Tab, { label: "スキル分析" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Tab, { label: "年表・経歴" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Tab, { label: "協働関係" })
    ] }) }),
    selectedTab === 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { container: true, spacing: 2, children: [
      portfolio.works.slice(0, 12).map((work) => /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, md: 4, lg: 3, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
        Card$1,
        {
          sx: {
            cursor: "pointer",
            transition: "transform 0.2s, elevation 0.2s",
            "&:hover": {
              transform: "translateY(-4px)",
              elevation: 8
            }
          },
          onClick: () => handleWorkClick(work),
          children: [
            work.ZAR_IMAGE_URL && /* @__PURE__ */ jsxRuntimeExports.jsx(
              CardMedia,
              {
                component: "img",
                height: "200",
                image: work.ZAR_IMAGE_URL,
                alt: work.ZAR_TITLE
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent$1, { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", noWrap: true, children: work.ZAR_TITLE }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", color: "text.secondary", children: [
                work.ZAR_YEAR,
                "年 | ",
                work.ZAR_PREFECTURE
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { mt: 1 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                Chip,
                {
                  label: work.ZAR_CATEGORY || "その他",
                  size: "small",
                  color: "primary",
                  variant: "outlined"
                }
              ) })
            ] })
          ]
        }
      ) }, work.Z_PK)),
      portfolio.works.length > 12 && /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 2, textAlign: "center" }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body1", children: [
          "他 ",
          portfolio.works.length - 12,
          " 作品..."
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { variant: "outlined", sx: { mt: 1 }, children: "すべて表示" })
      ] }) })
    ] }),
    selectedTab === 1 && /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { container: true, spacing: 3, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, lg: 8, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 2 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, children: "年別作品数" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { height: 300 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ResponsiveContainer, { width: "100%", height: "100%", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(BarChart, { data: portfolio.statistics.productivity, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(CartesianGrid, { strokeDasharray: "3 3" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(XAxis, { dataKey: "year" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(YAxis, {}),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip, {}),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Bar, { dataKey: "count", fill: "#1976d2" })
        ] }) }) })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, lg: 4, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 2 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, children: "カテゴリ分布" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { height: 300 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ResponsiveContainer, { width: "100%", height: "100%", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(PieChart, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Pie,
            {
              data: portfolio.statistics.categories,
              cx: "50%",
              cy: "50%",
              outerRadius: 80,
              dataKey: "count",
              label: ({ name, percentage }) => `${name}: ${percentage.toFixed(1)}%`,
              children: portfolio.statistics.categories.map((entry, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(Cell, { fill: CHART_COLORS[index % CHART_COLORS.length] }, `cell-${index}`))
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip, {})
        ] }) }) })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 2 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, children: "パフォーマンス指標" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { container: true, spacing: 3, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, md: 4, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", gutterBottom: true, children: [
              "影響力 (",
              portfolio.statistics.influence,
              "/100)"
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              LinearProgress,
              {
                variant: "determinate",
                value: portfolio.statistics.influence,
                sx: { height: 8, borderRadius: 4 }
              }
            )
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, md: 4, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", gutterBottom: true, children: [
              "革新性 (",
              portfolio.statistics.innovation,
              "/100)"
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              LinearProgress,
              {
                variant: "determinate",
                value: portfolio.statistics.innovation,
                color: "secondary",
                sx: { height: 8, borderRadius: 4 }
              }
            )
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, md: 4, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", gutterBottom: true, children: [
              "認知度 (",
              portfolio.statistics.recognition,
              "/100)"
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              LinearProgress,
              {
                variant: "determinate",
                value: portfolio.statistics.recognition,
                color: "warning",
                sx: { height: 8, borderRadius: 4 }
              }
            )
          ] }) })
        ] })
      ] }) })
    ] }),
    selectedTab === 2 && /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { container: true, spacing: 3, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, md: 6, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 2 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, children: "専門分野レーダーチャート" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { height: 400 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ResponsiveContainer, { width: "100%", height: "100%", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(RadarChart, { cx: "50%", cy: "50%", outerRadius: "80%", data: radarData, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(PolarGrid, {}),
          /* @__PURE__ */ jsxRuntimeExports.jsx(PolarAngleAxis, { dataKey: "skill" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(PolarRadiusAxis, { angle: 30, domain: [0, 100] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Radar,
            {
              name: "スキルレベル",
              dataKey: "level",
              stroke: "#1976d2",
              fill: "#1976d2",
              fillOpacity: 0.6
            }
          )
        ] }) }) })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, md: 6, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 2 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, children: "スキル詳細" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(List, { children: portfolio.skills.map((skill, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(ListItem, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          ListItemText,
          {
            primary: skill.name,
            secondary: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", gap: 1 }, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                LinearProgress,
                {
                  variant: "determinate",
                  value: skill.level,
                  sx: { flex: 1, height: 6, borderRadius: 3 }
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", children: [
                skill.level,
                "%"
              ] })
            ] })
          }
        ) }, index)) })
      ] }) })
    ] }),
    selectedTab === 3 && /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 2 }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, children: "人生・経歴年表" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(List, { children: portfolio.timeline.map((event, index) => /* @__PURE__ */ jsxRuntimeExports.jsxs(React$3.Fragment, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(ListItem, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(ListItemAvatar, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Avatar, { sx: {
            backgroundColor: event.type === "birth" ? "#4caf50" : event.type === "education" ? "#2196f3" : event.type === "work" ? "#ff9800" : event.type === "award" ? "#f44336" : "#757575"
          }, children: event.type === "birth" ? /* @__PURE__ */ jsxRuntimeExports.jsx(Person, {}) : event.type === "education" ? /* @__PURE__ */ jsxRuntimeExports.jsx(School, {}) : event.type === "work" ? /* @__PURE__ */ jsxRuntimeExports.jsx(Work, {}) : event.type === "award" ? /* @__PURE__ */ jsxRuntimeExports.jsx(EmojiEvents, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(DateRange, {}) }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            ListItemText,
            {
              primary: event.event,
              secondary: `${event.year}年`
            }
          )
        ] }),
        index < portfolio.timeline.length - 1 && /* @__PURE__ */ jsxRuntimeExports.jsx(Divider, {})
      ] }, index)) })
    ] }),
    selectedTab === 4 && /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 2 }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, children: "協働関係" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { container: true, spacing: 2, children: portfolio.collaborations.map((collab, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, md: 4, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Card$1, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent$1, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", children: collab.name }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", color: "text.secondary", children: [
          collab.works,
          " プロジェクト"
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          LinearProgress,
          {
            variant: "determinate",
            value: collab.works / portfolio.statistics.totalWorks * 100,
            sx: { mt: 1 }
          }
        )
      ] }) }) }, index)) })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Dialog,
      {
        open: showWorkDetails,
        onClose: () => setShowWorkDetails(false),
        maxWidth: "md",
        fullWidth: true,
        children: selectedWork && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(DialogTitle, { children: selectedWork.ZAR_TITLE }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(DialogContent, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { container: true, spacing: 2, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, md: 6, children: selectedWork.ZAR_IMAGE_URL && /* @__PURE__ */ jsxRuntimeExports.jsx(
              Box,
              {
                component: "img",
                src: selectedWork.ZAR_IMAGE_URL,
                alt: selectedWork.ZAR_TITLE,
                sx: { width: "100%", borderRadius: 1, mb: 2 }
              }
            ) }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { item: true, xs: 12, md: 6, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body1", gutterBottom: true, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "建設年:" }),
                " ",
                selectedWork.ZAR_YEAR,
                "年"
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body1", gutterBottom: true, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "所在地:" }),
                " ",
                selectedWork.ZAR_ADDRESS || selectedWork.ZAR_PREFECTURE
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body1", gutterBottom: true, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "カテゴリ:" }),
                " ",
                selectedWork.ZAR_CATEGORY
              ] }),
              selectedWork.ZAR_DESCRIPTION && /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", paragraph: true, children: selectedWork.ZAR_DESCRIPTION })
            ] })
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(DialogActions, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { onClick: () => setShowWorkDetails(false), children: "閉じる" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { variant: "contained", children: "詳細ページへ" })
          ] })
        ] })
      }
    )
  ] });
};

const BUILT_IN_PRESETS = [
  {
    id: "modern-architecture",
    name: "モダン建築",
    description: "1950年以降の現代建築作品",
    filters: {
      yearRange: [1950, 2030],
      categories: ["住宅", "商業建築", "文化施設"]
    },
    isBuiltIn: true
  },
  {
    id: "tokyo-landmarks",
    name: "東京のランドマーク",
    description: "東京都内の著名な建築作品",
    filters: {
      prefectures: ["東京都"],
      hasArchitect: true,
      hasImage: true
    },
    isBuiltIn: true
  },
  {
    id: "famous-architects",
    name: "著名建築家",
    description: "有名建築家による作品集",
    filters: {
      architects: ["安藤忠雄", "隈研吾", "妹島和世", "西沢立衛"],
      hasImage: true
    },
    isBuiltIn: true
  },
  {
    id: "recent-projects",
    name: "最近のプロジェクト",
    description: "過去10年間の新しい建築",
    filters: {
      yearRange: [2014, 2024]
    },
    isBuiltIn: true
  }
];
const FILTER_CONFIGS = [
  {
    id: "searchText",
    name: "検索キーワード",
    type: "text",
    category: "basic",
    description: "建築名、建築家、説明文から検索",
    icon: /* @__PURE__ */ jsxRuntimeExports.jsx(Search, {})
  },
  {
    id: "categories",
    name: "カテゴリ",
    type: "multiselect",
    category: "basic",
    options: [],
    description: "建築のカテゴリで絞り込み",
    icon: /* @__PURE__ */ jsxRuntimeExports.jsx(Category, {})
  },
  {
    id: "prefectures",
    name: "都道府県",
    type: "multiselect",
    category: "basic",
    options: [],
    description: "地域で絞り込み",
    icon: /* @__PURE__ */ jsxRuntimeExports.jsx(LocationOn, {})
  },
  {
    id: "architects",
    name: "建築家",
    type: "multiselect",
    category: "basic",
    options: [],
    description: "建築家で絞り込み",
    icon: /* @__PURE__ */ jsxRuntimeExports.jsx(Person, {})
  },
  {
    id: "yearRange",
    name: "建設年",
    type: "range",
    category: "temporal",
    min: 1850,
    max: 2030,
    defaultValue: [1850, 2030],
    description: "建設年の範囲で絞り込み",
    icon: /* @__PURE__ */ jsxRuntimeExports.jsx(DateRange, {})
  },
  {
    id: "hasImage",
    name: "画像あり",
    type: "checkbox",
    category: "basic",
    description: "画像が登録されている作品のみ",
    icon: /* @__PURE__ */ jsxRuntimeExports.jsx(Visibility, {})
  },
  {
    id: "hasArchitect",
    name: "建築家情報あり",
    type: "checkbox",
    category: "basic",
    description: "建築家が登録されている作品のみ",
    icon: /* @__PURE__ */ jsxRuntimeExports.jsx(Person, {})
  },
  {
    id: "popularityThreshold",
    name: "人気度",
    type: "slider",
    category: "analytical",
    min: 0,
    max: 100,
    defaultValue: 0,
    description: "人気度の最小値",
    icon: /* @__PURE__ */ jsxRuntimeExports.jsx(Star, {})
  },
  {
    id: "coordinates",
    name: "座標情報あり",
    type: "checkbox",
    category: "geo",
    description: "地理座標が登録されている作品のみ",
    icon: /* @__PURE__ */ jsxRuntimeExports.jsx(MapIcon, {})
  }
];
const AdvancedFilterSystem = ({
  architectures,
  architects,
  onFilterChange,
  onAnalyticsUpdate,
  enableRealTimeUpdates = true,
  enableSavePresets = true,
  enableGeoFiltering = true,
  enableAdvancedAnalytics = true
}) => {
  const [filters, setFilters] = reactExports.useState({});
  const [activeFilters, setActiveFilters] = reactExports.useState([]);
  const [expandedCategories, setExpandedCategories] = reactExports.useState(["basic"]);
  const [savedPresets, setSavedPresets] = reactExports.useState([]);
  const [selectedPreset, setSelectedPreset] = reactExports.useState("");
  const [isFiltering, setIsFiltering] = reactExports.useState(false);
  const [filterAnalytics, setFilterAnalytics] = reactExports.useState(null);
  const [searchSuggestions, setSearchSuggestions] = reactExports.useState([]);
  const [realtimeEnabled, setRealtimeEnabled] = reactExports.useState(enableRealTimeUpdates);
  const filterOptions = reactExports.useMemo(() => {
    const categories = [...new Set(architectures.map((a) => a.ZAR_CATEGORY).filter(Boolean))].sort();
    const prefectures = [...new Set(architectures.map((a) => a.ZAR_PREFECTURE).filter(Boolean))].sort();
    const architectNames = [...new Set([
      ...architectures.map((a) => a.ZAR_ARCHITECT),
      ...architectures.map((a) => a.ZAR_ARCHITECT1),
      ...architectures.map((a) => a.ZAR_ARCHITECT2),
      ...architectures.map((a) => a.ZAR_ARCHITECT3),
      ...architectures.map((a) => a.ZAR_ARCHITECT4)
    ].filter(Boolean))].sort();
    return { categories, prefectures, architectNames };
  }, [architectures]);
  const updatedFilterConfigs = reactExports.useMemo(() => {
    return FILTER_CONFIGS.map((config) => {
      switch (config.id) {
        case "categories":
          return { ...config, options: filterOptions.categories };
        case "prefectures":
          return { ...config, options: filterOptions.prefectures };
        case "architects":
          return { ...config, options: filterOptions.architectNames };
        default:
          return config;
      }
    });
  }, [filterOptions]);
  reactExports.useEffect(() => {
    const suggestions = [
      ...filterOptions.categories.slice(0, 5),
      ...filterOptions.architectNames.slice(0, 5),
      ...filterOptions.prefectures.slice(0, 3),
      "住宅",
      "美術館",
      "モダン",
      "伝統建築",
      "公共建築"
    ];
    setSearchSuggestions([...new Set(suggestions)]);
  }, [filterOptions]);
  const filteredData = reactExports.useMemo(() => {
    const startTime = performance.now();
    let filtered = architectures;
    if (filters.searchText) {
      const searchTerm = filters.searchText.toLowerCase();
      filtered = filtered.filter(
        (arch) => arch.ZAR_TITLE?.toLowerCase().includes(searchTerm) || arch.ZAR_ARCHITECT?.toLowerCase().includes(searchTerm) || arch.ZAR_DESCRIPTION?.toLowerCase().includes(searchTerm) || arch.ZAR_ADDRESS?.toLowerCase().includes(searchTerm)
      );
    }
    if (filters.categories?.length > 0) {
      filtered = filtered.filter(
        (arch) => filters.categories.includes(arch.ZAR_CATEGORY)
      );
    }
    if (filters.prefectures?.length > 0) {
      filtered = filtered.filter(
        (arch) => filters.prefectures.includes(arch.ZAR_PREFECTURE)
      );
    }
    if (filters.architects?.length > 0) {
      filtered = filtered.filter(
        (arch) => filters.architects.some(
          (architect) => arch.ZAR_ARCHITECT === architect || arch.ZAR_ARCHITECT1 === architect || arch.ZAR_ARCHITECT2 === architect || arch.ZAR_ARCHITECT3 === architect || arch.ZAR_ARCHITECT4 === architect
        )
      );
    }
    if (filters.yearRange) {
      const [minYear, maxYear] = filters.yearRange;
      filtered = filtered.filter(
        (arch) => arch.ZAR_YEAR && arch.ZAR_YEAR >= minYear && arch.ZAR_YEAR <= maxYear
      );
    }
    if (filters.hasImage) {
      filtered = filtered.filter((arch) => arch.ZAR_IMAGE_URL);
    }
    if (filters.hasArchitect) {
      filtered = filtered.filter((arch) => arch.ZAR_ARCHITECT);
    }
    if (filters.coordinates) {
      filtered = filtered.filter((arch) => arch.ZAR_LATITUDE && arch.ZAR_LONGITUDE);
    }
    if (filters.popularityThreshold > 0) {
      filtered = filtered.filter((arch) => {
        const hasImage = arch.ZAR_IMAGE_URL ? 30 : 0;
        const hasArchitect = arch.ZAR_ARCHITECT ? 25 : 0;
        const hasCoordinates = arch.ZAR_LATITUDE && arch.ZAR_LONGITUDE ? 20 : 0;
        const hasDescription = arch.ZAR_DESCRIPTION ? 15 : 0;
        const popularity = hasImage + hasArchitect + hasCoordinates + hasDescription;
        return popularity >= filters.popularityThreshold;
      });
    }
    const endTime = performance.now();
    if (enableAdvancedAnalytics) {
      const analytics = {
        totalResults: architectures.length,
        filteredResults: filtered.length,
        filterEfficiency: filtered.length / architectures.length * 100,
        popularFilters: Object.keys(filters).filter((key) => filters[key]),
        categoryDistribution: {},
        yearDistribution: {},
        locationDistribution: {},
        architectDistribution: {},
        performanceMetrics: {
          filterTime: endTime - startTime,
          cacheHitRate: Math.random() * 100,
          // Simulated
          queryComplexity: Object.keys(filters).length
        }
      };
      filtered.forEach((arch) => {
        if (arch.ZAR_CATEGORY) {
          analytics.categoryDistribution[arch.ZAR_CATEGORY] = (analytics.categoryDistribution[arch.ZAR_CATEGORY] || 0) + 1;
        }
        if (arch.ZAR_YEAR) {
          analytics.yearDistribution[arch.ZAR_YEAR] = (analytics.yearDistribution[arch.ZAR_YEAR] || 0) + 1;
        }
        if (arch.ZAR_PREFECTURE) {
          analytics.locationDistribution[arch.ZAR_PREFECTURE] = (analytics.locationDistribution[arch.ZAR_PREFECTURE] || 0) + 1;
        }
        if (arch.ZAR_ARCHITECT) {
          analytics.architectDistribution[arch.ZAR_ARCHITECT] = (analytics.architectDistribution[arch.ZAR_ARCHITECT] || 0) + 1;
        }
      });
      setFilterAnalytics(analytics);
      if (onAnalyticsUpdate) {
        onAnalyticsUpdate(analytics);
      }
    }
    return filtered;
  }, [architectures, filters, enableAdvancedAnalytics, onAnalyticsUpdate]);
  reactExports.useEffect(() => {
    const active = [];
    Object.entries(filters).forEach(([key, value]) => {
      if (value && value !== "" && !(Array.isArray(value) && value.length === 0)) {
        const config = updatedFilterConfigs.find((c) => c.id === key);
        let label = "";
        let count = 0;
        switch (config?.type) {
          case "text":
            label = `"${value}"`;
            count = filteredData.filter(
              (arch) => arch.ZAR_TITLE?.toLowerCase().includes(value.toLowerCase()) || arch.ZAR_ARCHITECT?.toLowerCase().includes(value.toLowerCase())
            ).length;
            break;
          case "multiselect":
            label = Array.isArray(value) ? value.join(", ") : value;
            count = filteredData.length;
            break;
          case "range":
            label = `${value[0]} - ${value[1]}`;
            count = filteredData.filter(
              (arch) => arch.ZAR_YEAR && arch.ZAR_YEAR >= value[0] && arch.ZAR_YEAR <= value[1]
            ).length;
            break;
          case "checkbox":
            label = value ? "あり" : "なし";
            count = filteredData.length;
            break;
          case "slider":
            label = `${value}以上`;
            count = filteredData.length;
            break;
          default:
            label = String(value);
            count = filteredData.length;
        }
        active.push({
          id: key,
          value,
          label: `${config?.name}: ${label}`,
          count
        });
      }
    });
    setActiveFilters(active);
  }, [filters, filteredData, updatedFilterConfigs]);
  reactExports.useEffect(() => {
    if (realtimeEnabled) {
      onFilterChange(filteredData, activeFilters);
    }
  }, [filteredData, activeFilters, onFilterChange, realtimeEnabled]);
  const handleFilterChange = reactExports.useCallback((filterId, value) => {
    setIsFiltering(true);
    setFilters((prev) => ({
      ...prev,
      [filterId]: value
    }));
    setTimeout(() => setIsFiltering(false), 100);
  }, []);
  const removeFilter = reactExports.useCallback((filterId) => {
    setFilters((prev) => {
      const updated = { ...prev };
      delete updated[filterId];
      return updated;
    });
  }, []);
  const clearAllFilters = reactExports.useCallback(() => {
    setFilters({});
  }, []);
  const applyFilters = reactExports.useCallback(() => {
    onFilterChange(filteredData, activeFilters);
  }, [filteredData, activeFilters, onFilterChange]);
  reactExports.useCallback((name, description) => {
    const newPreset = {
      id: `custom_${Date.now()}`,
      name,
      description,
      filters: { ...filters },
      isBuiltIn: false
    };
    setSavedPresets((prev) => [...prev, newPreset]);
  }, [filters]);
  const loadPreset = reactExports.useCallback((presetId) => {
    const preset = [...BUILT_IN_PRESETS, ...savedPresets].find((p) => p.id === presetId);
    if (preset) {
      setFilters(preset.filters);
      setSelectedPreset(presetId);
    }
  }, [savedPresets]);
  const toggleCategory = reactExports.useCallback((category) => {
    setExpandedCategories(
      (prev) => prev.includes(category) ? prev.filter((c) => c !== category) : [...prev, category]
    );
  }, []);
  const filtersByCategory = reactExports.useMemo(() => {
    const grouped = {};
    updatedFilterConfigs.forEach((config) => {
      if (!grouped[config.category]) {
        grouped[config.category] = [];
      }
      grouped[config.category].push(config);
    });
    return grouped;
  }, [updatedFilterConfigs]);
  const renderFilterControl = (config) => {
    const value = filters[config.id] || config.defaultValue;
    switch (config.type) {
      case "text":
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          Autocomplete,
          {
            options: searchSuggestions,
            freeSolo: true,
            value: value || "",
            onChange: (event, newValue) => handleFilterChange(config.id, newValue),
            renderInput: (params) => /* @__PURE__ */ jsxRuntimeExports.jsx(
              TextField,
              {
                ...params,
                label: config.name,
                size: "small",
                fullWidth: true,
                InputProps: {
                  ...params.InputProps,
                  startAdornment: config.icon
                }
              }
            )
          }
        );
      case "select":
        return /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControl, { fullWidth: true, size: "small", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(InputLabel, { children: config.name }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            Select,
            {
              value: value || "",
              onChange: (e) => handleFilterChange(config.id, e.target.value),
              label: config.name,
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "", children: "全て" }),
                config.options?.map((option) => /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: option, children: option }, option))
              ]
            }
          )
        ] });
      case "multiselect":
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          Autocomplete,
          {
            multiple: true,
            options: config.options || [],
            value: value || [],
            onChange: (event, newValue) => handleFilterChange(config.id, newValue),
            renderInput: (params) => /* @__PURE__ */ jsxRuntimeExports.jsx(
              TextField,
              {
                ...params,
                label: config.name,
                size: "small",
                placeholder: "選択してください"
              }
            ),
            renderTags: (value2, getTagProps) => value2.map((option, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(
              Chip,
              {
                variant: "outlined",
                label: option,
                size: "small",
                ...getTagProps({ index })
              },
              `${option}-${index}`
            ))
          }
        );
      case "range":
        return /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", gutterBottom: true, children: [
            config.name,
            ": ",
            value?.[0] || config.min,
            " - ",
            value?.[1] || config.max
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Slider,
            {
              value: value || [config.min, config.max],
              onChange: (event, newValue) => handleFilterChange(config.id, newValue),
              valueLabelDisplay: "auto",
              min: config.min,
              max: config.max
            }
          )
        ] });
      case "slider":
        return /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", gutterBottom: true, children: [
            config.name,
            ": ",
            value || config.defaultValue
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Slider,
            {
              value: value || config.defaultValue,
              onChange: (event, newValue) => handleFilterChange(config.id, newValue),
              valueLabelDisplay: "auto",
              min: config.min,
              max: config.max
            }
          )
        ] });
      case "checkbox":
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          FormControlLabel,
          {
            control: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Checkbox,
              {
                checked: !!value,
                onChange: (e) => handleFilterChange(config.id, e.target.checked)
              }
            ),
            label: config.name
          }
        );
      default:
        return null;
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { p: 2 }, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mb: 3, display: "flex", justifyContent: "space-between", alignItems: "center" }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "h5", sx: { display: "flex", alignItems: "center", gap: 1 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(FilterAlt, {}),
        "高度フィルタリング"
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", gap: 1, alignItems: "center" }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          FormControlLabel,
          {
            control: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Switch,
              {
                checked: realtimeEnabled,
                onChange: (e) => setRealtimeEnabled(e.target.checked)
              }
            ),
            label: "リアルタイム"
          }
        ),
        !realtimeEnabled && /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button,
          {
            variant: "contained",
            onClick: applyFilters,
            disabled: isFiltering,
            startIcon: isFiltering ? /* @__PURE__ */ jsxRuntimeExports.jsx(CircularProgress, { size: 16 }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Search, {}),
            children: "フィルタ適用"
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button,
          {
            variant: "outlined",
            onClick: clearAllFilters,
            startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(Clear, {}),
            children: "クリア"
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 2, mb: 2 }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, children: "フィルタプリセット" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { container: true, spacing: 1, children: [
        BUILT_IN_PRESETS.map((preset) => /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Chip,
          {
            label: preset.name,
            onClick: () => loadPreset(preset.id),
            color: selectedPreset === preset.id ? "primary" : "default",
            variant: selectedPreset === preset.id ? "filled" : "outlined"
          }
        ) }, preset.id)),
        savedPresets.map((preset) => /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Chip,
          {
            label: preset.name,
            onClick: () => loadPreset(preset.id),
            color: selectedPreset === preset.id ? "secondary" : "default",
            variant: selectedPreset === preset.id ? "filled" : "outlined",
            onDelete: () => {
              setSavedPresets((prev) => prev.filter((p) => p.id !== preset.id));
            }
          }
        ) }, preset.id))
      ] })
    ] }),
    activeFilters.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx(Alert, { severity: "info", sx: { mb: 2 }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", gap: 1, flexWrap: "wrap" }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", children: [
        "アクティブフィルタ (",
        activeFilters.length,
        "):"
      ] }),
      activeFilters.map((filter) => /* @__PURE__ */ jsxRuntimeExports.jsx(
        Chip,
        {
          label: `${filter.label} (${filter.count}件)`,
          onDelete: () => removeFilter(filter.id),
          size: "small",
          color: "primary",
          variant: "outlined"
        },
        filter.id
      ))
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { container: true, spacing: 3, children: Object.entries(filtersByCategory).map(([category, configs]) => /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
      Accordion,
      {
        expanded: expandedCategories.includes(category),
        onChange: () => toggleCategory(category),
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(AccordionSummary, { expandIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(ExpandMore, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Badge$1,
            {
              badgeContent: configs.filter((c) => filters[c.id]).length,
              color: "primary",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", children: category === "basic" ? "基本フィルタ" : category === "advanced" ? "高度フィルタ" : category === "geo" ? "地理フィルタ" : category === "temporal" ? "時間フィルタ" : category === "analytical" ? "分析フィルタ" : category })
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(AccordionDetails, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { container: true, spacing: 2, children: configs.map((config) => /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, md: 4, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Card$1, { variant: "outlined", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent$1, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", gap: 1, mb: 1 }, children: [
              config.icon,
              /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "subtitle2", children: config.name })
            ] }),
            renderFilterControl(config),
            config.description && /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "caption", color: "text.secondary", sx: { mt: 1, display: "block" }, children: config.description })
          ] }) }) }, config.id)) }) })
        ]
      }
    ) }, category)) }),
    enableAdvancedAnalytics && filterAnalytics && /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 2, mt: 3 }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, children: "フィルタ分析結果" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { container: true, spacing: 2, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { item: true, xs: 12, sm: 6, md: 3, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: "総件数" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", children: filterAnalytics.totalResults.toLocaleString() })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { item: true, xs: 12, sm: 6, md: 3, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: "フィルタ後" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", color: "primary", children: filterAnalytics.filteredResults.toLocaleString() })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { item: true, xs: 12, sm: 6, md: 3, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: "フィルタ効率" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "h6", children: [
            filterAnalytics.filterEfficiency.toFixed(1),
            "%"
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { item: true, xs: 12, sm: 6, md: 3, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: "処理時間" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "h6", children: [
            filterAnalytics.performanceMetrics.filterTime.toFixed(1),
            "ms"
          ] })
        ] })
      ] }),
      isFiltering && /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mt: 2 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(LinearProgress, {}),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "caption", sx: { mt: 1, display: "block" }, children: "フィルタリング中..." })
      ] })
    ] })
  ] });
};

const EXPORT_FORMATS = [
  {
    id: "csv",
    name: "CSV",
    description: "カンマ区切りファイル（Excel対応）",
    extension: "csv",
    mimeType: "text/csv",
    icon: /* @__PURE__ */ jsxRuntimeExports.jsx(TableChart, {}),
    maxRecords: 5e4,
    features: ["軽量", "高互換性", "Excel対応"],
    size: "small"
  },
  {
    id: "json",
    name: "JSON",
    description: "JavaScript Object Notation（プログラム利用）",
    extension: "json",
    mimeType: "application/json",
    icon: /* @__PURE__ */ jsxRuntimeExports.jsx(Description, {}),
    maxRecords: 1e5,
    features: ["プログラム利用", "階層構造", "API連携"],
    size: "medium"
  },
  {
    id: "pdf-report",
    name: "PDF レポート",
    description: "詳細分析レポート（プレゼン用）",
    extension: "pdf",
    mimeType: "application/pdf",
    icon: /* @__PURE__ */ jsxRuntimeExports.jsx(PictureAsPdf, {}),
    maxRecords: 1e3,
    features: ["視覚的", "プレゼン", "印刷対応"],
    size: "large"
  },
  {
    id: "excel",
    name: "Excel",
    description: "Microsoft Excel形式（フィルタ・グラフ付き）",
    extension: "xlsx",
    mimeType: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    icon: /* @__PURE__ */ jsxRuntimeExports.jsx(TableChart, {}),
    maxRecords: 3e4,
    features: ["フィルタ", "グラフ", "ピボット"],
    size: "medium"
  },
  {
    id: "geojson",
    name: "GeoJSON",
    description: "地理情報付きJSON（マップ利用）",
    extension: "geojson",
    mimeType: "application/geo+json",
    icon: /* @__PURE__ */ jsxRuntimeExports.jsx(Image, {}),
    maxRecords: 1e4,
    features: ["地理情報", "マップ連携", "GIS対応"],
    size: "medium"
  }
];
const EXPORT_FIELDS = [
  { id: "ZAR_TITLE", name: "建築名", required: true },
  { id: "ZAR_ARCHITECT", name: "建築家", required: false },
  { id: "ZAR_YEAR", name: "建設年", required: false },
  { id: "ZAR_PREFECTURE", name: "都道府県", required: false },
  { id: "ZAR_ADDRESS", name: "住所", required: false },
  { id: "ZAR_CATEGORY", name: "カテゴリ", required: false },
  { id: "ZAR_DESCRIPTION", name: "説明", required: false },
  { id: "ZAR_LATITUDE", name: "緯度", required: false },
  { id: "ZAR_LONGITUDE", name: "経度", required: false },
  { id: "ZAR_IMAGE_URL", name: "画像URL", required: false },
  { id: "ZAR_URL", name: "詳細URL", required: false }
];
const DataExportSystem = ({
  architectures,
  architects,
  onExportComplete,
  enableScheduledExports = false,
  enableCustomTemplates = false,
  maxExportSize = 50
  // MB
}) => {
  const [exportOptions, setExportOptions] = reactExports.useState({
    format: "csv",
    fields: ["ZAR_TITLE", "ZAR_ARCHITECT", "ZAR_YEAR", "ZAR_PREFECTURE"],
    includeImages: false,
    includeCoordinates: true,
    includeAnalytics: false,
    compression: false,
    language: "ja"
  });
  const [isExporting, setIsExporting] = reactExports.useState(false);
  const [exportProgress, setExportProgress] = reactExports.useState(0);
  const [showPreview, setShowPreview] = reactExports.useState(false);
  const [exportHistory, setExportHistory] = reactExports.useState([]);
  const [showAdvancedOptions, setShowAdvancedOptions] = reactExports.useState(false);
  const [previewData, setPreviewData] = reactExports.useState([]);
  const exportStats = reactExports.useMemo(() => {
    const selectedFormat = EXPORT_FORMATS.find((f) => f.id === exportOptions.format);
    const filteredData = architectures.filter((arch) => {
      return true;
    });
    const estimatedSize = calculateEstimatedSize(filteredData, exportOptions);
    const canExport = filteredData.length <= (selectedFormat?.maxRecords || Infinity) && estimatedSize <= maxExportSize;
    return {
      recordCount: filteredData.length,
      estimatedSize,
      maxRecords: selectedFormat?.maxRecords || Infinity,
      canExport,
      warnings: []
    };
  }, [architectures, exportOptions, maxExportSize]);
  function calculateEstimatedSize(data, options) {
    const recordSize = options.fields.length * 50;
    const imageSize = options.includeImages ? 100 : 0;
    const baseSize = data.length * (recordSize + imageSize);
    const formatMultiplier = {
      "csv": 1,
      "json": 1.5,
      "pdf-report": 5,
      "excel": 2,
      "geojson": 1.8
    };
    return baseSize * (formatMultiplier[options.format] || 1) / (1024 * 1024);
  }
  const generatePreview = reactExports.useCallback(() => {
    const preview = architectures.slice(0, 5).map((arch) => {
      const previewRecord = {};
      exportOptions.fields.forEach((field) => {
        previewRecord[field] = arch[field] || "";
      });
      return previewRecord;
    });
    setPreviewData(preview);
  }, [architectures, exportOptions.fields]);
  const handleOptionChange = reactExports.useCallback((key, value) => {
    setExportOptions((prev) => ({
      ...prev,
      [key]: value
    }));
  }, []);
  const handleFieldToggle = reactExports.useCallback((fieldId) => {
    setExportOptions((prev) => ({
      ...prev,
      fields: prev.fields.includes(fieldId) ? prev.fields.filter((f) => f !== fieldId) : [...prev.fields, fieldId]
    }));
  }, []);
  const handleExport = reactExports.useCallback(async () => {
    if (!exportStats.canExport) return;
    setIsExporting(true);
    setExportProgress(0);
    try {
      const progressInterval = setInterval(() => {
        setExportProgress((prev) => Math.min(prev + 10, 90));
      }, 200);
      await new Promise((resolve) => setTimeout(resolve, 2e3));
      clearInterval(progressInterval);
      setExportProgress(100);
      const exportData = await generateExportData();
      const blob = createBlob(exportData, exportOptions.format);
      const url = URL.createObjectURL(blob);
      const filename = generateFilename();
      const link = document.createElement("a");
      link.href = url;
      link.download = filename;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      const historyEntry = {
        id: Date.now().toString(),
        timestamp: /* @__PURE__ */ new Date(),
        format: exportOptions.format,
        filename,
        recordCount: exportStats.recordCount,
        fileSize: blob.size,
        status: "success",
        downloadUrl: url
      };
      setExportHistory((prev) => [historyEntry, ...prev]);
      if (onExportComplete) {
        onExportComplete(historyEntry);
      }
    } catch (error) {
      console.error("Export failed:", error);
      const errorEntry = {
        id: Date.now().toString(),
        timestamp: /* @__PURE__ */ new Date(),
        format: exportOptions.format,
        filename: "エラー",
        recordCount: 0,
        fileSize: 0,
        status: "error",
        errorMessage: error instanceof Error$1 ? error.message : "Unknown error"
      };
      setExportHistory((prev) => [errorEntry, ...prev]);
    } finally {
      setIsExporting(false);
      setExportProgress(0);
    }
  }, [exportStats, exportOptions, onExportComplete]);
  const generateExportData = async () => {
    const filteredData = architectures.filter((arch) => {
      return true;
    });
    const processedData = filteredData.map((arch) => {
      const record = {};
      exportOptions.fields.forEach((field) => {
        record[field] = arch[field] || "";
      });
      if (exportOptions.includeCoordinates && arch.ZAR_LATITUDE && arch.ZAR_LONGITUDE) {
        record.coordinates = [arch.ZAR_LONGITUDE, arch.ZAR_LATITUDE];
      }
      return record;
    });
    switch (exportOptions.format) {
      case "csv":
        return generateCSV(processedData);
      case "json":
        return JSON.stringify(processedData, null, 2);
      case "geojson":
        return generateGeoJSON(processedData);
      case "pdf-report":
        return generatePDFReport(processedData);
      case "excel":
        return generateExcel(processedData);
      default:
        return JSON.stringify(processedData, null, 2);
    }
  };
  const generateCSV = (data) => {
    if (data.length === 0) return "";
    const headers = exportOptions.fields.map(
      (field) => EXPORT_FIELDS.find((f) => f.id === field)?.name || field
    ).join(",");
    const rows = data.map(
      (record) => exportOptions.fields.map((field) => {
        const value = record[field] || "";
        return `"${String(value).replace(/"/g, '""')}"`;
      }).join(",")
    );
    return [headers, ...rows].join("\n");
  };
  const generateGeoJSON = (data) => {
    const features = data.filter((record) => record.coordinates).map((record) => ({
      type: "Feature",
      geometry: {
        type: "Point",
        coordinates: record.coordinates
      },
      properties: {
        ...record,
        coordinates: void 0
      }
    }));
    return JSON.stringify({
      type: "FeatureCollection",
      features
    }, null, 2);
  };
  const generatePDFReport = (data) => {
    return JSON.stringify({
      title: "建築データベース レポート",
      generatedAt: (/* @__PURE__ */ new Date()).toISOString(),
      recordCount: data.length,
      data: data.slice(0, 100)
      // Limit for PDF
    }, null, 2);
  };
  const generateExcel = (data) => {
    return JSON.stringify({
      sheets: {
        "Architecture Data": data,
        "Summary": {
          totalRecords: data.length,
          exportDate: (/* @__PURE__ */ new Date()).toISOString()
        }
      }
    }, null, 2);
  };
  const createBlob = (data, format) => {
    const formatConfig = EXPORT_FORMATS.find((f) => f.id === format);
    return new Blob([data], { type: formatConfig?.mimeType || "text/plain" });
  };
  const generateFilename = () => {
    const format = EXPORT_FORMATS.find((f) => f.id === exportOptions.format);
    const timestamp = (/* @__PURE__ */ new Date()).toISOString().slice(0, 19).replace(/[-:]/g, "");
    const customName = exportOptions.customFilename || "architecture_data";
    return `${customName}_${timestamp}.${format?.extension || "txt"}`;
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { p: 3 }, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "h4", gutterBottom: true, sx: { display: "flex", alignItems: "center", gap: 1 }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Download, {}),
      "データエクスポート"
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { container: true, spacing: 3, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, lg: 8, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 3 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, children: "エクスポート設定" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mb: 3 }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "subtitle1", gutterBottom: true, children: "フォーマット選択" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { container: true, spacing: 2, children: EXPORT_FORMATS.map((format) => /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, md: 4, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Card$1,
            {
              sx: {
                cursor: "pointer",
                border: exportOptions.format === format.id ? 2 : 1,
                borderColor: exportOptions.format === format.id ? "primary.main" : "divider",
                "&:hover": { borderColor: "primary.main" }
              },
              onClick: () => handleOptionChange("format", format.id),
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(CardContent$1, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", alignItems: "center", gap: 1, mb: 1 }, children: [
                  format.icon,
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", children: format.name }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Chip,
                    {
                      label: format.size,
                      size: "small",
                      color: format.size === "small" ? "success" : format.size === "medium" ? "warning" : "error"
                    }
                  )
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", paragraph: true, children: format.description }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { display: "flex", gap: 0.5, flexWrap: "wrap" }, children: format.features.map((feature) => /* @__PURE__ */ jsxRuntimeExports.jsx(Chip, { label: feature, size: "small", variant: "outlined" }, feature)) }),
                format.maxRecords && /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "caption", color: "text.secondary", sx: { mt: 1, display: "block" }, children: [
                  "最大 ",
                  format.maxRecords.toLocaleString(),
                  " 件"
                ] })
              ] })
            }
          ) }, format.id)) })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mb: 3 }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "subtitle1", gutterBottom: true, children: "出力フィールド選択" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(FormGroup, { row: true, children: EXPORT_FIELDS.map((field) => /* @__PURE__ */ jsxRuntimeExports.jsx(
            FormControlLabel,
            {
              control: /* @__PURE__ */ jsxRuntimeExports.jsx(
                Checkbox,
                {
                  checked: exportOptions.fields.includes(field.id),
                  onChange: () => handleFieldToggle(field.id),
                  disabled: field.required
                }
              ),
              label: field.name
            },
            field.id
          )) })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          Accordion,
          {
            expanded: showAdvancedOptions,
            onChange: () => setShowAdvancedOptions(!showAdvancedOptions),
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(AccordionSummary, { expandIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(ExpandMore, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "subtitle1", children: "詳細オプション" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(AccordionDetails, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Grid, { container: true, spacing: 2, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  FormControlLabel,
                  {
                    control: /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Switch,
                      {
                        checked: exportOptions.includeImages,
                        onChange: (e) => handleOptionChange("includeImages", e.target.checked)
                      }
                    ),
                    label: "画像URL含む"
                  }
                ) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  FormControlLabel,
                  {
                    control: /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Switch,
                      {
                        checked: exportOptions.includeCoordinates,
                        onChange: (e) => handleOptionChange("includeCoordinates", e.target.checked)
                      }
                    ),
                    label: "座標情報含む"
                  }
                ) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  FormControlLabel,
                  {
                    control: /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Switch,
                      {
                        checked: exportOptions.compression,
                        onChange: (e) => handleOptionChange("compression", e.target.checked)
                      }
                    ),
                    label: "圧縮"
                  }
                ) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, sm: 6, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControl, { fullWidth: true, size: "small", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(InputLabel, { children: "言語" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    Select,
                    {
                      value: exportOptions.language,
                      onChange: (e) => handleOptionChange("language", e.target.value),
                      label: "言語",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "ja", children: "日本語" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItem, { value: "en", children: "English" })
                      ]
                    }
                  )
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  TextField,
                  {
                    fullWidth: true,
                    size: "small",
                    label: "カスタムファイル名",
                    value: exportOptions.customFilename || "",
                    onChange: (e) => handleOptionChange("customFilename", e.target.value),
                    placeholder: "architecture_data"
                  }
                ) })
              ] }) })
            ]
          }
        )
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, lg: 4, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", flexDirection: "column", gap: 2 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 2 }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, children: "エクスポート概要" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(List, { dense: true, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(ListItem, { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(ListItemIcon, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Storage, {}) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                ListItemText,
                {
                  primary: "レコード数",
                  secondary: `${exportStats.recordCount.toLocaleString()} 件`
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(ListItem, { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(ListItemIcon, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Description, {}) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                ListItemText,
                {
                  primary: "推定ファイルサイズ",
                  secondary: `${exportStats.estimatedSize.toFixed(2)} MB`
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(ListItem, { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(ListItemIcon, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(FilterAlt, {}) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                ListItemText,
                {
                  primary: "出力フィールド",
                  secondary: `${exportOptions.fields.length} 項目`
                }
              )
            ] })
          ] })
        ] }),
        !exportStats.canExport && /* @__PURE__ */ jsxRuntimeExports.jsx(Alert, { severity: "warning", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", children: exportStats.recordCount > exportStats.maxRecords ? `レコード数が上限（${exportStats.maxRecords.toLocaleString()}件）を超えています` : `ファイルサイズが上限（${maxExportSize}MB）を超えています` }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", flexDirection: "column", gap: 1 }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "contained",
              size: "large",
              onClick: handleExport,
              disabled: !exportStats.canExport || isExporting,
              startIcon: isExporting ? /* @__PURE__ */ jsxRuntimeExports.jsx(Schedule, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(Download, {}),
              fullWidth: true,
              children: isExporting ? "エクスポート中..." : "エクスポート開始"
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "outlined",
              onClick: () => {
                generatePreview();
                setShowPreview(true);
              },
              startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(Visibility, {}),
              fullWidth: true,
              children: "プレビュー"
            }
          ),
          isExporting && /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mt: 1 }, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(LinearProgress, { variant: "determinate", value: exportProgress }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "caption", sx: { mt: 0.5, display: "block", textAlign: "center" }, children: [
              exportProgress,
              "%"
            ] })
          ] })
        ] })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { item: true, xs: 12, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 2 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, children: "エクスポート履歴" }),
        exportHistory.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: "エクスポート履歴がありません" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(List, { children: exportHistory.map((entry, index) => /* @__PURE__ */ jsxRuntimeExports.jsxs(React$3.Fragment, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(ListItem, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(ListItemIcon, { children: entry.status === "success" ? /* @__PURE__ */ jsxRuntimeExports.jsx(CheckCircle, { color: "success" }) : entry.status === "error" ? /* @__PURE__ */ jsxRuntimeExports.jsx(Error$1, { color: "error" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Schedule, { color: "primary" }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              ListItemText,
              {
                primary: entry.filename,
                secondary: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "caption", children: [
                    entry.timestamp.toLocaleString(),
                    " |",
                    entry.recordCount.toLocaleString(),
                    "件 |",
                    (entry.fileSize / (1024 * 1024)).toFixed(2),
                    "MB"
                  ] }),
                  entry.errorMessage && /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "caption", color: "error", sx: { display: "block" }, children: [
                    "エラー: ",
                    entry.errorMessage
                  ] })
                ] })
              }
            ),
            entry.status === "success" && /* @__PURE__ */ jsxRuntimeExports.jsx(IconButton, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(GetApp, {}) })
          ] }),
          index < exportHistory.length - 1 && /* @__PURE__ */ jsxRuntimeExports.jsx(Divider, {})
        ] }, entry.id)) })
      ] }) })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(
      Dialog,
      {
        open: showPreview,
        onClose: () => setShowPreview(false),
        maxWidth: "lg",
        fullWidth: true,
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(DialogTitle, { children: "データプレビュー (最初の5件)" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(DialogContent, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { overflowX: "auto" }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("table", { style: { width: "100%", borderCollapse: "collapse" }, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("thead", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("tr", { style: { backgroundColor: "#f5f5f5" }, children: exportOptions.fields.map((field) => /* @__PURE__ */ jsxRuntimeExports.jsx("th", { style: { padding: 8, border: "1px solid #ddd", textAlign: "left" }, children: EXPORT_FIELDS.find((f) => f.id === field)?.name || field }, field)) }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("tbody", { children: previewData.map((record, index) => /* @__PURE__ */ jsxRuntimeExports.jsx("tr", { children: exportOptions.fields.map((field) => /* @__PURE__ */ jsxRuntimeExports.jsxs("td", { style: { padding: 8, border: "1px solid #ddd" }, children: [
              String(record[field] || "").slice(0, 50),
              String(record[field] || "").length > 50 && "..."
            ] }, field)) }, index)) })
          ] }) }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(DialogActions, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { onClick: () => setShowPreview(false), children: "閉じる" }) })
        ]
      }
    )
  ] });
};

const ANALYTICS_TABS = [
  {
    id: "dashboard",
    label: "研究 (高速分析)",
    icon: /* @__PURE__ */ jsxRuntimeExports.jsx(Analytics, {}),
    description: "プリコンピュート済み高速建築データ分析",
    component: OptimizedAnalyticsDashboard,
    requiresData: false
  },
  {
    id: "map",
    label: "インタラクティブマップ",
    icon: /* @__PURE__ */ jsxRuntimeExports.jsx(MapIcon, {}),
    description: "地理的分布と詳細情報",
    component: EnhancedInteractiveMap,
    requiresData: true
  },
  {
    id: "timeline",
    label: "タイムライン",
    icon: /* @__PURE__ */ jsxRuntimeExports.jsx(Timeline, {}),
    description: "歴史的変遷の可視化",
    component: ArchitectureTimelineVisualization,
    requiresData: true
  },
  {
    id: "portfolio",
    label: "建築家ポートフォリオ",
    icon: /* @__PURE__ */ jsxRuntimeExports.jsx(Person, {}),
    description: "建築家の作品と統計",
    component: ArchitectPortfolioVisualization,
    requiresData: true
  },
  {
    id: "filters",
    label: "高度フィルタ",
    icon: /* @__PURE__ */ jsxRuntimeExports.jsx(FilterAlt, {}),
    description: "カスタム検索とフィルタリング",
    component: AdvancedFilterSystem,
    requiresData: true
  },
  {
    id: "export",
    label: "データエクスポート",
    icon: /* @__PURE__ */ jsxRuntimeExports.jsx(Download, {}),
    description: "データの書き出しと共有",
    component: DataExportSystem,
    requiresData: true
  }
];
const AnalyticsPage = () => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("md"));
  const { isReady, isLoading, error} = useDatabase();
  const [activeTab, setActiveTab] = reactExports.useState(0);
  const [architectures, setArchitectures] = reactExports.useState([]);
  const [architects, setArchitects] = reactExports.useState([]);
  const [filteredArchitectures, setFilteredArchitectures] = reactExports.useState([]);
  const [selectedArchitect, setSelectedArchitect] = reactExports.useState(null);
  const [isFullscreen, setIsFullscreen] = reactExports.useState(false);
  const [notification, setNotification] = reactExports.useState(null);
  const [lastRefresh, setLastRefresh] = reactExports.useState(/* @__PURE__ */ new Date());
  reactExports.useEffect(() => {
    const loadData = async () => {
      if (!isReady) return;
      try {
        setArchitectures([]);
        setFilteredArchitectures([]);
        setArchitects([]);
        console.log("Analytics page ready - OptimizedAnalyticsDashboard will load precomputed data");
      } catch (error2) {
        console.error("Failed to initialize analytics:", error2);
        setNotification({
          message: "データの初期化に失敗しました",
          severity: "error"
        });
      }
    };
    loadData();
  }, [isReady]);
  const handleTabChange = (event, newValue) => {
    setActiveTab(newValue);
  };
  const handleFilterChange = (filtered, activeFilters) => {
    setFilteredArchitectures(filtered);
    setNotification({
      message: `フィルタが適用されました (${filtered.length}件)`,
      severity: "info"
    });
  };
  const handleArchitectureSelect = (architecture2) => {
    const architect = architects.find((a) => a.ZAR_NAME === architecture2.ZAR_ARCHITECT);
    if (architect) {
      setSelectedArchitect(architect);
      setActiveTab(3);
    }
  };
  const handleArchitectCompare = (architect) => {
    setNotification({
      message: `${architect.ZAR_NAME}の比較機能は開発中です`,
      severity: "info"
    });
  };
  const handleRefresh = () => {
    setLastRefresh(/* @__PURE__ */ new Date());
    setNotification({
      message: "データを更新しました",
      severity: "success"
    });
  };
  const handleFullscreen = () => {
    if (!isFullscreen) {
      document.documentElement.requestFullscreen?.();
    } else {
      document.exitFullscreen?.();
    }
    setIsFullscreen(!isFullscreen);
  };
  const currentTab = ANALYTICS_TABS[activeTab];
  const dataSummary = reactExports.useMemo(() => ({
    totalArchitectures: architectures.length,
    filteredCount: filteredArchitectures.length,
    totalArchitects: architects.length,
    yearRange: architectures.length > 0 ? [
      Math.min(...architectures.filter((a) => a.ZAR_YEAR).map((a) => a.ZAR_YEAR)),
      Math.max(...architectures.filter((a) => a.ZAR_YEAR).map((a) => a.ZAR_YEAR))
    ] : [2e3, 2024],
    categories: [...new Set(architectures.map((a) => a.ZAR_CATEGORY).filter(Boolean))].length,
    prefectures: [...new Set(architectures.map((a) => a.ZAR_PREFECTURE).filter(Boolean))].length
  }), [architectures, filteredArchitectures, architects]);
  const getComponentProps = () => {
    const baseProps = {
      architectures: filteredArchitectures,
      architects,
      onRefresh: handleRefresh
    };
    switch (currentTab.id) {
      case "dashboard":
        return {
          onExportData: (format) => {
            setNotification({
              message: `${format}形式でのエクスポートを開始します`,
              severity: "info"
            });
          },
          enableRealTimeUpdates: false
        };
      case "map":
        return {
          markers: filteredArchitectures.filter((arch) => arch.ZAR_LATITUDE && arch.ZAR_LONGITUDE).map((arch) => ({
            id: arch.Z_PK,
            name: arch.ZAR_TITLE,
            architect: arch.ZAR_ARCHITECT,
            location: arch.ZAR_ADDRESS || arch.ZAR_PREFECTURE || "",
            latitude: arch.ZAR_LATITUDE,
            longitude: arch.ZAR_LONGITUDE,
            year: arch.ZAR_YEAR,
            category: arch.ZAR_CATEGORY,
            prefecture: arch.ZAR_PREFECTURE,
            imageUrl: arch.ZAR_IMAGE_URL,
            description: arch.ZAR_DESCRIPTION
          })),
          center: [35.6762, 139.6503],
          // Tokyo
          zoom: 10,
          height: "70vh",
          onMarkerClick: handleArchitectureSelect,
          enableClustering: true,
          enableAnalytics: true
        };
      case "timeline":
        return {
          ...baseProps,
          onEventSelect: handleArchitectureSelect,
          enableEras: true,
          enableFiltering: true,
          enableComparison: true
        };
      case "portfolio":
        return {
          architect: selectedArchitect || architects[0],
          architectures: filteredArchitectures,
          onWorkSelect: handleArchitectureSelect,
          onCompareArchitect: handleArchitectCompare,
          enableComparison: true,
          showDetailedStats: true
        };
      case "filters":
        return {
          ...baseProps,
          onFilterChange: handleFilterChange,
          enableRealTimeUpdates: true,
          enableSavePresets: true,
          enableGeoFiltering: true,
          enableAdvancedAnalytics: true
        };
      case "export":
        return {
          ...baseProps,
          onExportComplete: (entry) => {
            setNotification({
              message: `エクスポートが完了しました: ${entry.filename}`,
              severity: "success"
            });
          },
          enableScheduledExports: false,
          enableCustomTemplates: true
        };
      default:
        return baseProps;
    }
  };
  if (isLoading) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Container, { maxWidth: "lg", sx: { mt: 4, mb: 4 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { display: "flex", justifyContent: "center", alignItems: "center", minHeight: "50vh", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", children: "データを読み込み中..." }) }) });
  }
  if (error) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Container, { maxWidth: "lg", sx: { mt: 4, mb: 4 }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Alert, { severity: "error", sx: { mb: 2 }, children: [
      "データの読み込みに失敗しました: ",
      error
    ] }) });
  }
  const CurrentComponent = currentTab.component;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Helmet, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("title", { children: "データ分析 - 日本建築データベース" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("meta", { name: "description", content: "包括的な建築データの分析とビジュアライゼーション" })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Container, { maxWidth: "xl", sx: { mt: 2, mb: 4 }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mb: 3 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h4", component: "h1", gutterBottom: true, children: "データ分析・ビジュアライゼーション" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body1", color: "text.secondary", paragraph: true, children: "建築データの包括的な分析、可視化、エクスポート機能" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Paper, { sx: { p: 2, mb: 2 }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { display: "flex", gap: 3, flexWrap: "wrap", alignItems: "center" }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", children: [
            "建築作品: ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: dataSummary.totalArchitectures.toLocaleString() }),
            "件",
            dataSummary.filteredCount !== dataSummary.totalArchitectures && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
              " (フィルタ後: ",
              /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: dataSummary.filteredCount.toLocaleString() }),
              "件)"
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", children: [
            "建築家: ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: dataSummary.totalArchitects }),
            "人"
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", children: [
            "期間: ",
            /* @__PURE__ */ jsxRuntimeExports.jsxs("strong", { children: [
              dataSummary.yearRange[0],
              " - ",
              dataSummary.yearRange[1]
            ] }),
            "年"
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", children: [
            "カテゴリ: ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: dataSummary.categories }),
            "種類"
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "body2", children: [
            "都道府県: ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: dataSummary.prefectures })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "caption", color: "text.secondary", children: [
            "最終更新: ",
            lastRefresh.toLocaleTimeString()
          ] })
        ] }) })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Paper, { sx: { mb: 3 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        Tabs$1,
        {
          value: activeTab,
          onChange: handleTabChange,
          variant: isMobile ? "scrollable" : "fullWidth",
          scrollButtons: "auto",
          sx: { borderBottom: 1, borderColor: "divider" },
          children: ANALYTICS_TABS.map((tab, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(
            Tab,
            {
              icon: /* @__PURE__ */ jsxRuntimeExports.jsx(
                Badge$1,
                {
                  badgeContent: tab.id === "filters" && filteredArchitectures.length !== architectures.length ? filteredArchitectures.length : void 0,
                  color: "primary",
                  children: tab.icon
                }
              ),
              label: tab.label,
              sx: { minHeight: 72 }
            },
            tab.id
          ))
        }
      ) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Paper, { sx: { p: 0, overflow: "hidden" }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { p: 2, borderBottom: 1, borderColor: "divider", backgroundColor: "grey.50" }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h6", gutterBottom: true, children: currentTab.label }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body2", color: "text.secondary", children: currentTab.description })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { p: currentTab.id === "map" ? 0 : 2 }, children: currentTab.requiresData && architectures.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx(Alert, { severity: "info", children: "分析データがありません。データベースの接続を確認してください。" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(CurrentComponent, { ...getComponentProps() }) })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { position: "fixed", bottom: 16, right: 16, display: "flex", flexDirection: "column", gap: 1 }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Zoom, { in: !isMobile, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip$1, { title: "フルスクリーン", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Fab,
          {
            color: "primary",
            size: "small",
            onClick: handleFullscreen,
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(Fullscreen, {})
          }
        ) }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Zoom, { in: true, style: { transitionDelay: "100ms" }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip$1, { title: "データ更新", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Fab,
          {
            color: "secondary",
            size: "small",
            onClick: handleRefresh,
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(Refresh, {})
          }
        ) }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Zoom, { in: true, style: { transitionDelay: "200ms" }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip$1, { title: "共有", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Fab,
          {
            color: "default",
            size: "small",
            onClick: () => {
              if (navigator.share) {
                navigator.share({
                  title: "日本建築データベース - データ分析",
                  text: "インタラクティブな建築データ分析をご覧ください",
                  url: window.location.href
                });
              } else {
                navigator.clipboard.writeText(window.location.href);
                setNotification({
                  message: "URLをコピーしました",
                  severity: "success"
                });
              }
            },
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(Share, {})
          }
        ) }) })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Snackbar,
        {
          open: !!notification,
          autoHideDuration: 6e3,
          onClose: () => setNotification(null),
          anchorOrigin: { vertical: "bottom", horizontal: "left" },
          children: notification && /* @__PURE__ */ jsxRuntimeExports.jsx(
            Alert,
            {
              onClose: () => setNotification(null),
              severity: notification.severity,
              variant: "filled",
              children: notification.message
            }
          )
        }
      )
    ] })
  ] });
};

class ErrorBoundary extends reactExports.Component {
  constructor(props) {
    super(props);
    this.state = {
      hasError: false,
      error: null,
      errorInfo: null
    };
  }
  static getDerivedStateFromError(error) {
    return { hasError: true, error, errorInfo: null };
  }
  componentDidCatch(error, errorInfo) {
    console.error("Uncaught error:", error, errorInfo);
    this.setState({
      error,
      errorInfo
    });
  }
  handleRetry = () => {
    window.location.reload();
  };
  render() {
    if (this.state.hasError) {
      if (this.props.fallback) {
        return this.props.fallback;
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        Box,
        {
          sx: {
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
            padding: 4,
            height: "100vh"
          },
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
            Paper,
            {
              elevation: 3,
              sx: {
                padding: 4,
                maxWidth: 600,
                width: "100%",
                borderRadius: 2,
                textAlign: "center"
              },
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "h5", color: "error", gutterBottom: true, children: "問題が発生しました" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, { variant: "body1", paragraph: true, children: "アプリケーションで予期しないエラーが発生しました。 お手数ですが、再読み込みをお試しください。" }),
                false,
                /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { sx: { mt: 3 }, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      variant: "contained",
                      color: "primary",
                      onClick: this.handleRetry,
                      sx: { mr: 2 },
                      children: "ページを再読み込み"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      variant: "outlined",
                      onClick: () => window.location.href = "/",
                      children: "ホームに戻る"
                    }
                  )
                ] })
              ]
            }
          )
        }
      );
    }
    return this.props.children;
  }
}

const StyledSkipLink = styled("a")(({ theme }) => ({
  position: "absolute",
  top: "-40px",
  left: "6px",
  background: theme.palette.primary.main,
  color: theme.palette.primary.contrastText,
  padding: "8px 16px",
  zIndex: 9999,
  textDecoration: "none",
  borderRadius: "0 0 4px 4px",
  fontSize: "0.875rem",
  fontWeight: 600,
  border: `2px solid ${theme.palette.primary.dark}`,
  transition: "top 0.3s ease",
  "&:focus": {
    top: 0,
    outline: `2px solid ${theme.palette.secondary.main}`,
    outlineOffset: "2px"
  },
  // High contrast mode support
  "@media (prefers-contrast: high)": {
    backgroundColor: "ButtonText",
    color: "ButtonFace",
    border: "2px solid ButtonText",
    "&:focus": {
      backgroundColor: "Highlight",
      color: "HighlightText",
      outline: "2px solid ButtonText"
    }
  },
  // Reduced motion support
  "@media (prefers-reduced-motion: reduce)": {
    transition: "none"
  }
}));
const SkipLink = ({
  href,
  children,
  className = "",
  ...props
}) => {
  const handleClick = (event) => {
    const targetId = href.replace("#", "");
    const targetElement = document.getElementById(targetId);
    if (targetElement) {
      if (!targetElement.hasAttribute("tabindex")) {
        targetElement.setAttribute("tabindex", "-1");
      }
      setTimeout(() => {
        targetElement.focus();
        if (targetElement.getAttribute("tabindex") === "-1") {
          targetElement.removeAttribute("tabindex");
        }
      }, 100);
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    StyledSkipLink,
    {
      href,
      className,
      onClick: handleClick,
      ...props,
      children
    }
  );
};

const palette = {
  primary: {
    main: "#2E3440",
    // Dark blue-gray (Nordic dark)
    light: "#4C566A",
    // Lighter blue-gray
    dark: "#1B1F2B",
    // Darker blue-gray
    contrastText: "#FFFFFF"
  },
  secondary: {
    main: "#88C0D0",
    // Soft blue (Nordic frost)
    light: "#B3D4E0",
    // Lighter blue
    dark: "#5E81AC",
    // Darker blue
    contrastText: "#2E3440"
  },
  accent: {
    main: "#D08770",
    // Warm orange (Nordic aurora)
    light: "#E5A088",
    // Lighter orange
    dark: "#BF616A"
    // Coral red
  },
  background: {
    default: "#ECEFF4",
    // Light gray (Nordic snow)
    paper: "#FFFFFF",
    // Pure white
    elevated: "#F8F9FA"
    // Slightly elevated
  },
  text: {
    primary: "#2E3440",
    // Dark blue-gray
    secondary: "#4C566A",
    // Medium blue-gray
    disabled: "#D8DEE9"
    // Light gray
  },
  divider: "#E5E9F0",
  // Light gray divider
  success: {
    main: "#A3BE8C",
    // Green (Nordic aurora)
    light: "#B8CCA3",
    dark: "#8CAF69"
  },
  warning: {
    main: "#EBCB8B",
    // Yellow (Nordic aurora)
    light: "#F0D5A3",
    dark: "#D4B571"
  },
  error: {
    main: "#BF616A",
    // Red (Nordic aurora)
    light: "#CC8088",
    dark: "#A54A56"
  },
  info: {
    main: "#88C0D0",
    // Blue (Nordic frost)
    light: "#B3D4E0",
    dark: "#5E81AC"
  }
};
const typography = {
  fontFamily: '"Inter", "Roboto", "Helvetica Neue", "Arial", sans-serif',
  h1: {
    fontSize: "3rem",
    fontWeight: 700,
    lineHeight: 1.2,
    letterSpacing: "-0.02em"
  },
  h2: {
    fontSize: "2.25rem",
    fontWeight: 600,
    lineHeight: 1.3,
    letterSpacing: "-0.01em"
  },
  h3: {
    fontSize: "1.875rem",
    fontWeight: 600,
    lineHeight: 1.3,
    letterSpacing: "-0.01em"
  },
  h4: {
    fontSize: "1.5rem",
    fontWeight: 600,
    lineHeight: 1.4
  },
  h5: {
    fontSize: "1.25rem",
    fontWeight: 600,
    lineHeight: 1.4
  },
  h6: {
    fontSize: "1.125rem",
    fontWeight: 600,
    lineHeight: 1.4
  },
  subtitle1: {
    fontSize: "1rem",
    fontWeight: 500,
    lineHeight: 1.5
  },
  subtitle2: {
    fontSize: "0.875rem",
    fontWeight: 500,
    lineHeight: 1.5
  },
  body1: {
    fontSize: "1rem",
    fontWeight: 400,
    lineHeight: 1.6
  },
  body2: {
    fontSize: "0.875rem",
    fontWeight: 400,
    lineHeight: 1.6
  },
  caption: {
    fontSize: "0.75rem",
    fontWeight: 400,
    lineHeight: 1.5
  },
  button: {
    fontSize: "0.875rem",
    fontWeight: 600,
    textTransform: "none",
    letterSpacing: "0.02em"
  }
};
const components = {
  MuiButton: {
    styleOverrides: {
      root: {
        borderRadius: 8,
        padding: "10px 24px",
        transition: "all 0.2s ease-in-out",
        "&:hover": {
          transform: "translateY(-1px)",
          boxShadow: "0 4px 12px rgba(0, 0, 0, 0.15)"
        }
      },
      contained: {
        boxShadow: "0 2px 8px rgba(0, 0, 0, 0.1)"
      }
    }
  },
  MuiCard: {
    styleOverrides: {
      root: {
        borderRadius: 12,
        boxShadow: "0 2px 12px rgba(0, 0, 0, 0.08)",
        transition: "all 0.3s ease-in-out",
        "&:hover": {
          transform: "translateY(-2px)",
          boxShadow: "0 8px 24px rgba(0, 0, 0, 0.15)"
        }
      }
    }
  },
  MuiTextField: {
    styleOverrides: {
      root: {
        "& .MuiOutlinedInput-root": {
          borderRadius: 8,
          transition: "all 0.2s ease-in-out",
          "&:hover": {
            "& .MuiOutlinedInput-notchedOutline": {
              borderColor: palette.secondary.main
            }
          },
          "&.Mui-focused": {
            "& .MuiOutlinedInput-notchedOutline": {
              borderColor: palette.primary.main,
              borderWidth: 2
            }
          }
        }
      }
    }
  },
  MuiAppBar: {
    styleOverrides: {
      root: {
        boxShadow: "0 2px 12px rgba(0, 0, 0, 0.1)",
        backdropFilter: "blur(10px)",
        backgroundColor: "rgba(46, 52, 64, 0.95)"
      }
    }
  },
  MuiChip: {
    styleOverrides: {
      root: {
        borderRadius: 8,
        fontWeight: 500
      }
    }
  },
  MuiPaper: {
    styleOverrides: {
      root: {
        borderRadius: 12,
        boxShadow: "0 2px 12px rgba(0, 0, 0, 0.08)"
      },
      elevation1: {
        boxShadow: "0 2px 8px rgba(0, 0, 0, 0.06)"
      },
      elevation2: {
        boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)"
      },
      elevation3: {
        boxShadow: "0 8px 24px rgba(0, 0, 0, 0.15)"
      }
    }
  }
};
const theme = createTheme({
  palette,
  typography,
  components,
  spacing: 8,
  shape: {
    borderRadius: 8
  },
  breakpoints: {
    values: {
      xs: 0,
      sm: 600,
      md: 960,
      lg: 1280,
      xl: 1920
    }
  },
  transitions: {
    easing: {
      easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
      easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
      easeIn: "cubic-bezier(0.4, 0, 1, 1)",
      sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
    }
  }
});

const TOUCH_TARGET = {
  minimum: 44,
  // WCAG minimum
  comfortable: 48,
  // Comfortable touch target
  large: 56
  // Large touch target
};
const mobileBreakpoints = {
  values: {
    xs: 0,
    sm: 600,
    md: 960,
    lg: 1280,
    xl: 1920
  }
};
const mobileTypography = {
  ...theme.typography,
  // Larger base font size for mobile
  fontSize: 16,
  // Increased from 14px
  h1: {
    ...theme.typography.h1,
    fontSize: "2.5rem",
    // Reduced from 3rem for mobile
    lineHeight: 1.1,
    letterSpacing: "-0.02em",
    "@media (max-width:600px)": {
      fontSize: "2rem"
    }
  },
  h2: {
    ...theme.typography.h2,
    fontSize: "2rem",
    // Reduced from 2.25rem
    lineHeight: 1.2,
    "@media (max-width:600px)": {
      fontSize: "1.75rem"
    }
  },
  h3: {
    ...theme.typography.h3,
    fontSize: "1.75rem",
    // Reduced from 1.875rem
    lineHeight: 1.2,
    "@media (max-width:600px)": {
      fontSize: "1.5rem"
    }
  },
  h4: {
    ...theme.typography.h4,
    fontSize: "1.5rem",
    lineHeight: 1.3,
    "@media (max-width:600px)": {
      fontSize: "1.25rem"
    }
  },
  h5: {
    ...theme.typography.h5,
    fontSize: "1.25rem",
    lineHeight: 1.3,
    "@media (max-width:600px)": {
      fontSize: "1.125rem"
    }
  },
  h6: {
    ...theme.typography.h6,
    fontSize: "1.125rem",
    lineHeight: 1.4,
    "@media (max-width:600px)": {
      fontSize: "1rem"
    }
  },
  body1: {
    ...theme.typography.body1,
    fontSize: "1rem",
    lineHeight: 1.6,
    "@media (max-width:600px)": {
      fontSize: "0.875rem",
      lineHeight: 1.5
    }
  },
  body2: {
    ...theme.typography.body2,
    fontSize: "0.875rem",
    lineHeight: 1.6,
    "@media (max-width:600px)": {
      fontSize: "0.8125rem",
      lineHeight: 1.5
    }
  },
  button: {
    ...theme.typography.button,
    fontSize: "1rem",
    // Increased from 0.875rem
    fontWeight: 600,
    textTransform: "none",
    "@media (max-width:600px)": {
      fontSize: "0.875rem"
    }
  }
};
const mobileComponents = {
  ...theme.components,
  // Enhanced Button component for touch
  MuiButton: {
    styleOverrides: {
      root: {
        minHeight: TOUCH_TARGET.comfortable,
        borderRadius: 12,
        // Increased for easier touch
        padding: "12px 24px",
        fontSize: "1rem",
        fontWeight: 600,
        textTransform: "none",
        transition: "all 0.2s ease-in-out",
        // Touch feedback
        "&:active": {
          transform: "scale(0.98)"
        },
        // Improved hover states for touch devices
        "@media (hover: hover)": {
          "&:hover": {
            transform: "translateY(-1px)",
            boxShadow: "0 6px 16px rgba(0, 0, 0, 0.15)"
          }
        },
        // High contrast mode support
        "@media (prefers-contrast: high)": {
          border: "2px solid currentColor"
        },
        // Reduced motion support
        "@media (prefers-reduced-motion: reduce)": {
          transition: "none",
          "&:hover": {
            transform: "none"
          }
        },
        // Mobile-specific adjustments
        "@media (max-width:600px)": {
          minHeight: TOUCH_TARGET.comfortable,
          padding: "14px 20px",
          fontSize: "0.875rem",
          borderRadius: 8
        }
      },
      sizeSmall: {
        minHeight: TOUCH_TARGET.minimum,
        padding: "8px 16px",
        fontSize: "0.875rem",
        "@media (max-width:600px)": {
          minHeight: TOUCH_TARGET.minimum,
          padding: "10px 14px",
          fontSize: "0.8125rem"
        }
      },
      sizeLarge: {
        minHeight: TOUCH_TARGET.large,
        padding: "16px 32px",
        fontSize: "1.125rem",
        "@media (max-width:600px)": {
          minHeight: TOUCH_TARGET.large,
          padding: "18px 28px",
          fontSize: "1rem"
        }
      }
    }
  },
  // Enhanced IconButton for touch
  MuiIconButton: {
    styleOverrides: {
      root: {
        minWidth: TOUCH_TARGET.comfortable,
        minHeight: TOUCH_TARGET.comfortable,
        borderRadius: 12,
        "&:active": {
          transform: "scale(0.95)"
        },
        "@media (max-width:600px)": {
          minWidth: TOUCH_TARGET.comfortable,
          minHeight: TOUCH_TARGET.comfortable
        }
      },
      sizeSmall: {
        minWidth: TOUCH_TARGET.minimum,
        minHeight: TOUCH_TARGET.minimum,
        "@media (max-width:600px)": {
          minWidth: TOUCH_TARGET.minimum,
          minHeight: TOUCH_TARGET.minimum
        }
      },
      sizeLarge: {
        minWidth: TOUCH_TARGET.large,
        minHeight: TOUCH_TARGET.large,
        "@media (max-width:600px)": {
          minWidth: TOUCH_TARGET.large,
          minHeight: TOUCH_TARGET.large
        }
      }
    }
  },
  // Enhanced TextField for mobile input
  MuiTextField: {
    styleOverrides: {
      root: {
        "& .MuiOutlinedInput-root": {
          borderRadius: 12,
          fontSize: "1rem",
          minHeight: TOUCH_TARGET.comfortable,
          "& input": {
            padding: "14px 16px",
            fontSize: "1rem",
            "@media (max-width:600px)": {
              fontSize: "16px",
              // Prevents zoom on iOS
              padding: "16px"
            }
          },
          "& textarea": {
            fontSize: "1rem",
            "@media (max-width:600px)": {
              fontSize: "16px"
              // Prevents zoom on iOS
            }
          },
          "&:hover": {
            "& .MuiOutlinedInput-notchedOutline": {
              borderColor: theme.palette.secondary.main,
              borderWidth: "2px"
            }
          },
          "&.Mui-focused": {
            "& .MuiOutlinedInput-notchedOutline": {
              borderColor: theme.palette.primary.main,
              borderWidth: "2px"
            }
          }
        }
      }
    }
  },
  // Enhanced Card for touch interaction
  MuiCard: {
    styleOverrides: {
      root: {
        borderRadius: 16,
        boxShadow: "0 2px 12px rgba(0, 0, 0, 0.08)",
        transition: "all 0.3s ease-in-out",
        "&:hover": {
          transform: "translateY(-2px)",
          boxShadow: "0 8px 24px rgba(0, 0, 0, 0.15)"
        },
        "&:active": {
          transform: "translateY(-1px)"
        },
        "@media (prefers-reduced-motion: reduce)": {
          transition: "none",
          "&:hover": {
            transform: "none"
          }
        },
        "@media (max-width:600px)": {
          borderRadius: 12,
          margin: "8px"
        }
      }
    }
  },
  // Enhanced Chip for touch
  MuiChip: {
    styleOverrides: {
      root: {
        height: TOUCH_TARGET.minimum,
        borderRadius: 22,
        fontSize: "0.875rem",
        fontWeight: 500,
        "&.MuiChip-clickable": {
          "&:active": {
            transform: "scale(0.95)"
          }
        },
        "@media (max-width:600px)": {
          height: TOUCH_TARGET.minimum,
          fontSize: "0.8125rem"
        }
      },
      deleteIcon: {
        fontSize: "18px",
        "&:hover": {
          color: "inherit"
        }
      }
    }
  },
  // Enhanced Drawer for mobile
  MuiDrawer: {
    styleOverrides: {
      paper: {
        borderRadius: "16px 0 0 16px",
        "@media (max-width:600px)": {
          width: "85%",
          maxWidth: 320
        }
      }
    }
  },
  // Enhanced AppBar
  MuiAppBar: {
    styleOverrides: {
      root: {
        boxShadow: "0 2px 12px rgba(0, 0, 0, 0.1)",
        backdropFilter: "blur(10px)",
        backgroundColor: "rgba(46, 52, 64, 0.95)",
        "@media (max-width:600px)": {
          minHeight: 64
          // Slightly taller on mobile
        }
      }
    }
  },
  // Enhanced Toolbar
  MuiToolbar: {
    styleOverrides: {
      root: {
        minHeight: 64,
        padding: "0 16px",
        "@media (max-width:600px)": {
          minHeight: 64,
          padding: "0 8px"
        }
      }
    }
  },
  // Enhanced Paper
  MuiPaper: {
    styleOverrides: {
      root: {
        borderRadius: 16,
        "@media (max-width:600px)": {
          borderRadius: 12
        }
      }
    }
  },
  // Enhanced List for touch navigation
  MuiListItem: {
    styleOverrides: {
      root: {
        minHeight: TOUCH_TARGET.comfortable,
        borderRadius: 8,
        margin: "2px 8px",
        "&.Mui-selected": {
          backgroundColor: "rgba(0, 0, 0, 0.08)",
          "&:hover": {
            backgroundColor: "rgba(0, 0, 0, 0.12)"
          }
        },
        "@media (max-width:600px)": {
          minHeight: TOUCH_TARGET.large,
          // Larger touch targets on mobile
          padding: "12px 16px"
        }
      }
    }
  }
};
const mobileTheme = createTheme({
  ...theme,
  breakpoints: mobileBreakpoints,
  typography: mobileTypography,
  components: mobileComponents,
  // Mobile-specific spacing
  spacing: 8,
  // Enhanced shadows for mobile
  shadows: [
    "none",
    "0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24)",
    "0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23)",
    "0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23)",
    "0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22)",
    "0 19px 38px rgba(0, 0, 0, 0.30), 0 15px 12px rgba(0, 0, 0, 0.22)",
    "0 24px 48px rgba(0, 0, 0, 0.35), 0 19px 19px rgba(0, 0, 0, 0.22)",
    ...theme.shadows.slice(7)
  ],
  // Mobile shape configuration
  shape: {
    borderRadius: 12
  }
});
const isTouchDevice = () => {
  return "ontouchstart" in window || navigator.maxTouchPoints > 0;
};

const isLocalhost = Boolean(
  window.location.hostname === "localhost" || window.location.hostname === "[::1]" || window.location.hostname.match(
    /^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/
  )
);
function register(config) {
  if ("serviceWorker" in navigator) {
    const publicUrl = new URL(
      "/archi-site/",
      window.location.href
    );
    if (publicUrl.origin !== window.location.origin) {
      return;
    }
    window.addEventListener("load", () => {
      const swUrl = `${"/archi-site/"}/sw.js`;
      if (isLocalhost) {
        checkValidServiceWorker(swUrl, config);
        navigator.serviceWorker.ready.then(() => {
          console.log(
            "This web app is being served cache-first by a service worker. To learn more, visit https://cra.link/PWA"
          );
        });
      } else {
        registerValidSW(swUrl, config);
      }
    });
  }
}
function registerValidSW(swUrl, config) {
  navigator.serviceWorker.register(swUrl).then((registration) => {
    console.log("SW registered: ", registration);
    registration.onupdatefound = () => {
      const installingWorker = registration.installing;
      if (installingWorker == null) {
        return;
      }
      installingWorker.onstatechange = () => {
        if (installingWorker.state === "installed") {
          if (navigator.serviceWorker.controller) {
            console.log(
              "New content is available and will be used when all tabs for this page are closed. See https://cra.link/PWA."
            );
            if (config && config.onUpdate) {
              config.onUpdate(registration);
            }
          } else {
            console.log("Content is cached for offline use.");
            if (config && config.onSuccess) {
              config.onSuccess(registration);
            }
            if (config && config.onOfflineReady) {
              config.onOfflineReady();
            }
          }
        }
      };
    };
  }).catch((error) => {
    console.error("Error during service worker registration:", error);
    if (config && config.onError) {
      config.onError(error);
    }
  });
}
function checkValidServiceWorker(swUrl, config) {
  fetch(swUrl, {
    headers: { "Service-Worker": "script" }
  }).then((response) => {
    const contentType = response.headers.get("content-type");
    if (response.status === 404 || contentType != null && contentType.indexOf("javascript") === -1) {
      navigator.serviceWorker.ready.then((registration) => {
        registration.unregister().then(() => {
          window.location.reload();
        });
      });
    } else {
      registerValidSW(swUrl, config);
    }
  }).catch(() => {
    console.log(
      "No internet connection found. App is running in offline mode."
    );
  });
}
function useServiceWorkerStatus() {
  const [status, setStatus] = React$3.useState({
    isOnline: navigator.onLine,
    isOfflineReady: false,
    hasUpdate: false
  });
  React$3.useEffect(() => {
    const updateOnlineStatus = () => {
      setStatus((prev) => ({ ...prev, isOnline: navigator.onLine }));
    };
    window.addEventListener("online", updateOnlineStatus);
    window.addEventListener("offline", updateOnlineStatus);
    register({
      onSuccess: () => {
        setStatus((prev) => ({ ...prev, isOfflineReady: true }));
      },
      onUpdate: () => {
        setStatus((prev) => ({ ...prev, hasUpdate: true }));
      }
    });
    return () => {
      window.removeEventListener("online", updateOnlineStatus);
      window.removeEventListener("offline", updateOnlineStatus);
    };
  }, []);
  return status;
}

const ScrollToTop = () => {
  const { pathname } = useLocation();
  reactExports.useEffect(() => {
    window.scrollTo(0, 0);
  }, [pathname]);
  return null;
};
const AppContent = () => {
  const [announcement, setAnnouncement] = reactExports.useState("");
  const [showOfflineAlert, setShowOfflineAlert] = reactExports.useState(false);
  const [showUpdateAlert, setShowUpdateAlert] = reactExports.useState(false);
  const swStatus = useServiceWorkerStatus();
  reactExports.useEffect(() => {
    console.log(`App running in ${"production" } mode`);
    try {
      logDatabaseDetails();
    } catch (error) {
      console.warn("Failed to log database details:", error);
    }
    setAnnouncement("アプリケーションが読み込まれました");
  }, []);
  reactExports.useEffect(() => {
    if (!swStatus.isOnline && !showOfflineAlert) {
      setShowOfflineAlert(true);
      setAnnouncement("オフライン状態です。一部の機能が制限される場合があります。");
    } else if (swStatus.isOnline && showOfflineAlert) {
      setShowOfflineAlert(false);
      setAnnouncement("オンライン状態に戻りました。");
    }
    if (swStatus.hasUpdate && !showUpdateAlert) {
      setShowUpdateAlert(true);
      setAnnouncement("新しいバージョンが利用可能です。ページを再読み込みしてください。");
    }
  }, [swStatus, showOfflineAlert, showUpdateAlert]);
  const handleUpdateApp = () => {
    window.location.reload();
  };
  const handleCloseOfflineAlert = () => {
    setShowOfflineAlert(false);
  };
  const handleCloseUpdateAlert = () => {
    setShowUpdateAlert(false);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(SkipLink, { href: "#main-content", children: "メインコンテンツへスキップ" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(SkipLink, { href: "#navigation", children: "ナビゲーションへスキップ" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(AriaLiveRegion, { message: announcement, level: "polite" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(ScrollToTop, {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx(Header, {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "main",
      {
        id: "main-content",
        className: "container",
        role: "main",
        tabIndex: -1,
        style: { outline: "none" },
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(ErrorBoundary, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          reactExports.Suspense,
          {
            fallback: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Box,
              {
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
                minHeight: "200px",
                role: "status",
                "aria-label": "ページを読み込み中",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(CircularProgress, {})
              }
            ),
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Routes, { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/", element: /* @__PURE__ */ jsxRuntimeExports.jsx(HomePage, {}) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/architecture", element: /* @__PURE__ */ jsxRuntimeExports.jsx(ArchitecturePageEnhanced, {}) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/architecture/:id", element: /* @__PURE__ */ jsxRuntimeExports.jsx(ArchitectureSinglePage, {}) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/architects", element: /* @__PURE__ */ jsxRuntimeExports.jsx(ArchitectsPage, {}) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/architects/:id", element: /* @__PURE__ */ jsxRuntimeExports.jsx(ArchitectSinglePage, {}) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/map", element: /* @__PURE__ */ jsxRuntimeExports.jsx(MapPage, {}) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/research", element: /* @__PURE__ */ jsxRuntimeExports.jsx(ResearchPage, {}) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/analytics", element: /* @__PURE__ */ jsxRuntimeExports.jsx(AnalyticsPage, {}) })
            ] })
          }
        ) })
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(Footer, {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Snackbar,
      {
        open: showOfflineAlert,
        onClose: handleCloseOfflineAlert,
        anchorOrigin: { vertical: "bottom", horizontal: "center" },
        autoHideDuration: null,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Alert,
          {
            severity: "warning",
            onClose: handleCloseOfflineAlert,
            variant: "filled",
            sx: { width: "100%" },
            children: "オフライン状態です。キャッシュされたコンテンツを表示しています。"
          }
        )
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Snackbar,
      {
        open: showUpdateAlert,
        onClose: handleCloseUpdateAlert,
        anchorOrigin: { vertical: "bottom", horizontal: "center" },
        autoHideDuration: null,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Alert,
          {
            severity: "info",
            onClose: handleCloseUpdateAlert,
            action: /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { sx: { display: "flex", gap: 1 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: handleUpdateApp,
                style: {
                  background: "none",
                  border: "none",
                  color: "white",
                  textDecoration: "underline",
                  cursor: "pointer",
                  fontSize: "0.875rem"
                },
                children: "更新"
              }
            ) }),
            variant: "filled",
            sx: { width: "100%" },
            children: "新しいバージョンが利用可能です。"
          }
        )
      }
    )
  ] });
};
const App = () => {
  const [selectedTheme, setSelectedTheme] = reactExports.useState(theme);
  const isMobile = useMediaQuery("(max-width:600px)");
  const isTouch = isTouchDevice();
  reactExports.useEffect(() => {
    if (isMobile || isTouch) {
      setSelectedTheme(mobileTheme);
    } else {
      setSelectedTheme(theme);
    }
  }, [isMobile, isTouch]);
  reactExports.useEffect(() => {
    register({
      onSuccess: () => {
        console.log("Service worker registered successfully");
      },
      onUpdate: () => {
        console.log("Service worker update available");
      },
      onOfflineReady: () => {
        console.log("App ready for offline use");
      },
      onError: (error) => {
        console.error("Service worker registration failed:", error);
      }
    });
    const announcement = document.createElement("div");
    announcement.setAttribute("aria-live", "polite");
    announcement.setAttribute("aria-atomic", "true");
    announcement.style.position = "absolute";
    announcement.style.left = "-10000px";
    announcement.textContent = "建築データベースアプリケーションが読み込まれました";
    document.body.appendChild(announcement);
    setTimeout(() => {
      document.body.removeChild(announcement);
    }, 1e3);
  }, []);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(ErrorBoundary, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(HelmetProvider, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(ThemeProvider, { theme: selectedTheme, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(CssBaseline, {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx(HashRouter, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(AppContent, {}) })
  ] }) }) });
};

console.log("React アプリケーションを初期化中...", "production");
console.log("DOM root element:", document.getElementById("root"));
const container = document.getElementById("root");
if (!container) {
  console.error('root要素が見つかりません。HTMLに<div id="root"></div>が存在するか確認してください。');
  throw new Error("Failed to find the root element");
}
const root = createRoot(container);
console.log("Using HashRouter for GitHub Pages compatibility");
try {
  root.render(
    /* @__PURE__ */ jsxRuntimeExports.jsx(React$3.StrictMode, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(App, {}) })
  );
  console.log("React アプリケーションのレンダリングが成功しました");
} catch (error) {
  console.error("React アプリケーションのレンダリング中にエラーが発生しました:", error);
}
//# sourceMappingURL=index-By2tyqGo.js.map
