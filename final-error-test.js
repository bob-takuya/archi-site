const { chromium } = require('playwright');

(async () => {
  const browser = await chromium.launch();
  const page = await browser.newPage();
  
  let hasErrorBoundary = false;
  let hasJapaneseError = false;
  let functionalTests = [];
  let jsErrors = [];
  
  // Capture console errors
  page.on('console', msg => {
    if (msg.type() === 'error') {
      jsErrors.push(msg.text());
    }
  });
  
  page.on('pageerror', exception => {
    jsErrors.push(exception.toString());
  });
  
  try {
    console.log('üîç FINAL TEST: Checking for Japanese error boundary...');
    
    // Navigate to the architecture page
    await page.goto('https://bob-takuya.github.io/archi-site/#/architecture', { 
      waitUntil: 'domcontentloaded',
      timeout: 20000 
    });
    
    // Wait for React to render
    await page.waitForTimeout(5000);
    
    // 1. Check for the specific Japanese error boundary message
    const errorBoundaryText = await page.locator('*').filter({ 
      hasText: 'ÂïèÈ°å„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü' 
    }).count();
    
    const unexpectedErrorText = await page.locator('*').filter({ 
      hasText: '„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Åß‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü' 
    }).count();
    
    const reloadText = await page.locator('*').filter({ 
      hasText: '„ÅäÊâãÊï∞„Åß„Åô„Åå„ÄÅÂÜçË™≠„ÅøËæº„Åø„Çí„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ' 
    }).count();
    
    hasErrorBoundary = errorBoundaryText > 0 || unexpectedErrorText > 0 || reloadText > 0;
    hasJapaneseError = errorBoundaryText > 0 && unexpectedErrorText > 0 && reloadText > 0;
    
    functionalTests.push(`Japanese Error Boundary: ${hasJapaneseError ? '‚ùå FOUND' : '‚úÖ NOT FOUND'}`);
    functionalTests.push(`Any Error Boundary: ${hasErrorBoundary ? '‚ùå DETECTED' : '‚úÖ CLEAN'}`);
    
    // 2. Check if page loads properly
    const pageTitle = await page.locator('h1').first().textContent().catch(() => 'NOT_FOUND');
    functionalTests.push(`Page Title: ${pageTitle === 'Âª∫ÁØâ‰ΩúÂìÅ‰∏ÄË¶ß' ? '‚úÖ CORRECT' : '‚ùå WRONG'} ("${pageTitle}")`);
    
    // 3. Check if data is displayed
    const cardCount = await page.locator('.MuiCard-root').count();
    functionalTests.push(`Architecture Cards: ${cardCount > 0 ? '‚úÖ LOADED' : '‚ùå NONE'} (${cardCount})`);
    
    // 4. Check if search is available
    const searchInput = await page.locator('input[type="text"]').first().isVisible();
    functionalTests.push(`Search Input: ${searchInput ? '‚úÖ AVAILABLE' : '‚ùå MISSING'}`);
    
    // 5. Check if view toggles work
    const viewToggles = await page.locator('[aria-label*="„Éì„É•„Éº"], [role="button"]').count();
    functionalTests.push(`View Controls: ${viewToggles > 0 ? '‚úÖ FOUND' : '‚ùå MISSING'} (${viewToggles})`);
    
    // 6. Test mobile optimization (resize to mobile)
    await page.setViewportSize({ width: 375, height: 667 });
    await page.waitForTimeout(1000);
    const mobileCards = await page.locator('.MuiCard-root').count();
    functionalTests.push(`Mobile Responsive: ${mobileCards > 0 ? '‚úÖ WORKING' : '‚ùå BROKEN'} (${mobileCards} cards)`);
    
    // 7. Check if TouchOptimizedSearchBar is working
    const searchBar = await page.locator('input[placeholder*="Ê§úÁ¥¢"]').isVisible();
    functionalTests.push(`Touch Search Bar: ${searchBar ? '‚úÖ OPTIMIZED' : '‚ùå STANDARD'}`);
    
    // 8. Try a simple interaction
    if (searchBar) {
      try {
        await page.locator('input[placeholder*="Ê§úÁ¥¢"]').click();
        await page.locator('input[placeholder*="Ê§úÁ¥¢"]').fill('Êù±‰∫¨');
        await page.waitForTimeout(2000);
        functionalTests.push(`Search Interaction: ‚úÖ WORKING`);
      } catch (e) {
        functionalTests.push(`Search Interaction: ‚ùå FAILED (${e.message.substring(0, 50)})`);
      }
    }
    
    // Take final screenshot
    await page.screenshot({ path: 'final-error-boundary-test.png', fullPage: true });
    console.log('üì∏ Screenshot saved as final-error-boundary-test.png');
    
  } catch (error) {
    functionalTests.push(`Test Execution: ‚ùå FAILED (${error.message})`);
  }
  
  await browser.close();
  
  // Report results
  console.log('\nüìã FUNCTIONAL TESTS:');
  functionalTests.forEach(test => console.log(`  ${test}`));
  
  console.log(`\nüîç JAVASCRIPT ERRORS: ${jsErrors.length}`);
  if (jsErrors.length > 0) {
    console.log('üìã Error samples:');
    jsErrors.slice(0, 3).forEach(error => {
      const truncated = error.length > 100 ? error.substring(0, 100) + '...' : error;
      console.log(`  ‚ùå ${truncated}`);
    });
  }
  
  // Final verdict
  console.log('\nüéØ FINAL VERDICT:');
  
  if (hasJapaneseError) {
    console.log('‚ùå CRITICAL: Japanese error boundary still appears');
    console.log('   The original issue "ÂïèÈ°å„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Åß‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ „ÅäÊâãÊï∞„Åß„Åô„Åå„ÄÅÂÜçË™≠„ÅøËæº„Åø„Çí„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ" is NOT fixed');
  } else if (hasErrorBoundary) {
    console.log('‚ö†Ô∏è  WARNING: Some error boundary detected, but not the specific Japanese error');
  } else {
    console.log('‚úÖ SUCCESS: No error boundary detected');
  }
  
  const passedTests = functionalTests.filter(t => t.includes('‚úÖ')).length;
  const totalTests = functionalTests.length;
  const successRate = Math.round((passedTests / totalTests) * 100);
  
  console.log(`üìä Success Rate: ${passedTests}/${totalTests} tests passed (${successRate}%)`);
  
  if (hasJapaneseError) {
    console.log('\nüö® CONCLUSION: ISSUE STILL EXISTS - Japanese error boundary found');
  } else if (successRate >= 80) {
    console.log('\nüéâ CONCLUSION: ISSUE RESOLVED - Architecture page working normally');
  } else {
    console.log('\n‚ö†Ô∏è  CONCLUSION: MIXED RESULTS - No error boundary but functionality issues');
  }
})();