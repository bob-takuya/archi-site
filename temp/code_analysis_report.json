{
  "timestamp": "1752325684.7466319",
  "analysis_summary": {
    "total_issues": 253,
    "critical_issues": 0,
    "high_severity": 174,
    "medium_severity": 79,
    "low_severity": 0,
    "performance_issues": 38
  },
  "critical_issues": [],
  "high_priority_issues": [
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "temp/ArchitectsPage_Fixed.tsx",
      "line": 105,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "temp/ArchitectsPage_Fixed.tsx",
      "line": 117,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    console.log(\"タグ読み込みのuseEffectが実行されました\");\n    const loadTags = async () => {\n  ...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "temp/ArchitectsPage_Fixed.tsx",
      "line": 138,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "tmp/MapWithClustering.tsx",
      "line": 249,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    return () => {\n      if (mapInstance) {\n        mapInstance.remove()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "tmp/MapWithClustering.tsx",
      "line": 258,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (mapInstance && calculatedBounds && !center)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/App.tsx",
      "line": 33,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/App.tsx",
      "line": 50,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    // Log if app is running in GitHub Pages production environment\n    const isPr...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/App.tsx",
      "line": 67,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (!swStatus.isOnline && !showOfflineAlert) {\n      setShowOfflineAlert(true)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/App.tsx",
      "line": 203,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (isMobile || isTouch) {\n      setSelectedTheme(mobileTheme);\n    } else {\n ...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/App.tsx",
      "line": 212,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    // Register service worker for offline functionality\n    registerSW({\n      on...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/context/AppContext.tsx",
      "line": 149,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/context/AppContext.tsx",
      "line": 155,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/utils/accessibility.tsx",
      "line": 72,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      switch (event.key) {\n ...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/utils/accessibility.tsx",
      "line": 107,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (!isActive || !containerRef.current) return;\n    \n    const container = con...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/utils/accessibility.tsx",
      "line": 279,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    ...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/utils/accessibility.tsx",
      "line": 298,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-contrast: high)');\n    setPrefe...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/utils/accessibility.tsx",
      "line": 317,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    // Detect if user is using screen reader\n    const detectScreenReader = () => ...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MobileOptimizedImage.tsx",
      "line": 117,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (enableSwipeGestures && isLoaded) {\n      const timer = setTimeout(() => {\n...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ArchitectureTimelineVisualization.tsx",
      "line": 229,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (!isPlaying) return;\n    \n    const interval = setInterval(() => {\n      se...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ArchitectureTimelineVisualization.tsx",
      "line": 247,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (onYearChange) {\n      onYearChange(currentYear)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MobileNavigationProvider.tsx",
      "line": 115,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const currentPath = location.pathname;\n    \n    if (previousPath && previousPa...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MobileNavigationProvider.tsx",
      "line": 128,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const handlePageLoad = ()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MobileNavigationProvider.tsx",
      "line": 145,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MobileNavigationProvider.tsx",
      "line": 155,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MobileNavigationProvider.tsx",
      "line": 169,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (viewport.isMobile && isOnline)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ArchitectureAnalyticsDashboard.tsx",
      "line": 262,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (enableRealTimeUpdates) {\n      const interval = setInterval(() => {\n      ...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/TouchOptimizedSearchBar.tsx",
      "line": 256,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (containerRef.current && isMobile)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/Map.tsx",
      "line": 226,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (mapInstance && markerClusterGroup && markers.length > 0) {\n      // 既存のマーカ...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/Map.tsx",
      "line": 309,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    return () => {\n      if (markerClusterGroup && mapInstance) {\n        mapInsta...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MobileArchitectureViewer.tsx",
      "line": 152,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    setCurrentImageIndex(0)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MobileArchitectureViewer.tsx",
      "line": 157,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (showInfo) {\n      const timer = setTimeout(() => {\n        setShowInfo(fal...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MapWithClustering.tsx",
      "line": 186,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    // 地図コンテナの存在確認\n    const container = document.getElementById('map-with-cluster...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MapWithClustering.tsx",
      "line": 283,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (!map || !clusterGroup || !markers || markers.length === 0) return;\n\n    //...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MapWithClustering.tsx",
      "line": 410,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (!map) return;\n    \n    if (center && zoom)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ProgressiveImage.tsx",
      "line": 145,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (loading === 'eager' || priority) {\n      setIsInView(true);\n      return;\n...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ProgressiveImage.tsx",
      "line": 177,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (!isInView) return;\n\n    const loadImage = (imageSrc: string)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/PerformanceMonitor.tsx",
      "line": 147,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    collectMetrics()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/components/PerformanceMonitor.tsx",
      "line": 442,
      "description": "Recursive async function \"getLCP\" - potential infinite recursion",
      "code_snippet": "getLCP() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/components/PerformanceMonitor.tsx",
      "line": 461,
      "description": "Recursive async function \"getFID\" - potential infinite recursion",
      "code_snippet": "getFID() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/components/PerformanceMonitor.tsx",
      "line": 480,
      "description": "Recursive async function \"getCLS\" - potential infinite recursion",
      "code_snippet": "getCLS() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/components/PerformanceMonitor.tsx",
      "line": 504,
      "description": "Recursive async function \"getCacheStats\" - potential infinite recursion",
      "code_snippet": "getCacheStats() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/components/PerformanceMonitor.tsx",
      "line": 515,
      "description": "Recursive async function \"measureDbQueryTime\" - potential infinite recursion",
      "code_snippet": "measureDbQueryTime() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/OptimizedAnalyticsDashboard.tsx",
      "line": 248,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    loadAnalyticsData()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/DatabaseProvider.tsx",
      "line": 22,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (isError && retryCount < 2) {\n      const timer = setTimeout(() => {\n      ...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/DatabaseLoader.tsx",
      "line": 18,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    let isMounted = true;\n    let progressInterval: NodeJS.Timeout;\n    \n    const...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ProgressiveDisclosure.tsx",
      "line": 87,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (persistState) {\n      const saved = localStorage.getItem(`progressive-disc...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ProgressiveDisclosure.tsx",
      "line": 104,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (persistState)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ProgressiveDisclosure.tsx",
      "line": 116,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const progress = (completedLevels.size / levels.length) * 100;\n    setUserProg...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/AdvancedFilterSystem.tsx",
      "line": 304,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/AdvancedFilterSystem.tsx",
      "line": 444,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const active: ActiveFilter[] = [];\n\n    Object.entries(filters)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/AdvancedFilterSystem.tsx",
      "line": 497,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (realtimeEnabled)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MobileSearchInterface.tsx",
      "line": 130,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (!enableVoiceSearch || !('webkitSpeechRecognition' in window || 'SpeechReco...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MobileSearchInterface.tsx",
      "line": 213,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (isOpen && inputRef.current) {\n      setTimeout(() => {\n        inputRef.cu...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MobileSearchInterface.tsx",
      "line": 222,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    setShowSuggestions(query.length > 0 && isOpen)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MobileSearchInterface.tsx",
      "line": 227,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    setActiveFilters(availableFilters)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/InteractiveMap.tsx",
      "line": 385,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (!mapInstance || !markerClusterGroup) return;\n    \n    // Clear existing ma...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ui/TouchOptimizedSearchBar.tsx",
      "line": 215,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    return () => {\n      if (searchTimeout.current) {\n        clearTimeout(searchT...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ui/SearchBar.tsx",
      "line": 70,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    setInputValue(value)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ui/SearchBar.tsx",
      "line": 139,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    return () => {\n      if (debounceTimerRef.current) {\n        clearTimeout(debo...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ui/ProgressiveLoader.tsx",
      "line": 284,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (!triggerRef.current || enableVirtualization) return;\n    \n    observerRef....",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ui/ProgressiveLoader.tsx",
      "line": 310,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (!enableVirtualization || !containerRef.current) return;\n    \n    const con...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ui/ProgressiveLoader.tsx",
      "line": 328,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    loadInitialData()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/search/FacetedSearch.tsx",
      "line": 252,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (localRange[0] !== range.selectedMin || localRange[1] !== range.selectedMax...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/search/FacetedSearch.tsx",
      "line": 490,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/search/FacetedSearch.tsx",
      "line": 495,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    onFacetsChange?.(activeFacets)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/accessibility/KeyboardNavigationManager.tsx",
      "line": 40,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (restoreFocus && document.activeElement) {\n      lastFocusedElement.current...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/accessibility/KeyboardNavigationManager.tsx",
      "line": 128,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      // Handle Tab key for ...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/accessibility/KeyboardNavigationManager.tsx",
      "line": 222,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (trapFocus && containerRef.current) {\n      setTimeout(() => {\n        focu...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/accessibility/HighContrastToggle.tsx",
      "line": 47,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/accessibility/HighContrastToggle.tsx",
      "line": 52,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const root = document.documentElement;\n    \n    if (highContrastEnabled) {\n   ...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/accessibility/FocusManagementSystem.tsx",
      "line": 205,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (!onEscape) return;\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/accessibility/FocusManagementSystem.tsx",
      "line": 219,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (!containerRef.current) return;\n\n    const container = containerRef.current...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/accessibility/FocusManagementSystem.tsx",
      "line": 282,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const focusElement = () => {\n      if (elementRef.current) {\n        elementRe...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/accessibility/FocusManagementSystem.tsx",
      "line": 358,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const portalElement = document.createElement('div');\n    document.body.appendC...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/accessibility/AccessibilityTestSuite.tsx",
      "line": 394,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (autoRun) {\n      runTests()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "src/components/accessibility/AccessibilityTestSuite.tsx",
      "line": 370,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (let i = 0; i < accessibilityTests.length; i++) {\n      const test = accessibilityTests[i];\n      try {\n        const result = await test.test();\n...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/pages/AnalyticsPage.tsx",
      "line": 122,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const loadData = async () => {\n      if (!isReady)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/pages/ResearchPage.tsx",
      "line": 95,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const loadPrecomputedAnalytics = async () => {\n      try {\n        setLoading(...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/pages/ArchitectsPage.tsx",
      "line": 82,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/pages/ArchitectsPage.tsx",
      "line": 94,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    console.log(\"タグ読み込みのuseEffectが実行されました\");\n    const loadTags = async () => {\n  ...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/pages/ArchitectsPage.tsx",
      "line": 114,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/pages/ArchitectureSinglePage.tsx",
      "line": 36,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const fetchWork = async () => {\n      setLoading(true);\n      try {\n        co...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/pages/ArchitecturePage.tsx",
      "line": 143,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n  //   try {\n  //     const saved = localStorage.getItem('archi-recent-searches');...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/pages/ArchitecturePage.tsx",
      "line": 155,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n  //   if (researchData)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/pages/ArchitecturePage.tsx",
      "line": 211,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        setResearchLoading(...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/pages/ArchitecturePage.tsx",
      "line": 342,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    // URLからクエリパラメータを解析\n    const queryParams = new URLSearchParams(location.searc...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/pages/ArchitectSinglePage.tsx",
      "line": 77,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const fetchArchitect = async () => {\n      setLoading(true);\n      try {\n     ...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/pages/MapPage.tsx",
      "line": 65,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    fetchWorks()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/pages/HomePage.tsx",
      "line": 57,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    // Listen for database download progress events\n    const handleProgressUpdate...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "tests/e2e/test-utils.ts",
      "line": 93,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const selector of searchSelectors) {\n      const input = page.locator(selector);\n      if (await input.count() > 0) {\n        searchInput = input...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "tests/e2e/test-utils.ts",
      "line": 254,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const selector of expectedErrorSelectors) {\n      const errorElement = page.locator(selector);\n      if (await errorElement.count() > 0) {\n      ...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "tests/e2e/test-utils.ts",
      "line": 276,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const selector of filterSelectors) {\n      const panel = page.locator(selector);\n      if (await panel.count() > 0) {\n        filterPanel = panel...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "tests/e2e/production/utils/test-helpers.ts",
      "line": 114,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const breakpoint of breakpoints) {\n      await this.page.setViewportSize({ width: breakpoint.width, height: breakpoint.height }...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "tests/e2e/production/utils/test-helpers.ts",
      "line": 166,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const img of images) {\n      const alt = await img.getAttribute('alt');\n      if (!alt) {\n        console.warn('⚠️  Image without alt text found'...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "tests/e2e/production/utils/test-helpers.ts",
      "line": 175,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const input of inputs) {\n      const id = await input.getAttribute('id');\n      const ariaLabel = await input.getAttribute('aria-label');\n      c...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/utils/serviceWorker.ts",
      "line": 169,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const updateOnlineStatus = ()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/utils/mobileGestures.ts",
      "line": 249,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/utils/mobileGestures.ts",
      "line": 316,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/utils/mobileGestures.ts",
      "line": 349,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const handleResize = ()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/utils/mobileServiceWorker.ts",
      "line": 148,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const handleOnline = () => {\n      setIsOnline(true);\n      // Trigger backgro...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/utils/mobileServiceWorker.ts",
      "line": 374,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (!('serviceWorker' in navigator)) return;\n\n    const handleControllerChange...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "src/utils/mobileServiceWorker.ts",
      "line": 183,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const cacheName of cacheNames) {\n      const cache = await caches.open(cacheName);\n      const requests = await cache.keys();\n\n      for (const r...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "src/utils/mobileServiceWorker.ts",
      "line": 255,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const item of queue) {\n      try {\n        // Process sync item (implement your sync logic here)\n        await this.syncItem(item);\n        proce...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/hooks/useDatabase.ts",
      "line": 21,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const initDb = async () => {\n      try {\n        setIsLoading(true);\n        s...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/hooks/useIntersectionObserver.ts",
      "line": 33,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const element = targetRef.current;\n    if (!element || (once && hasIntersected...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/hooks/useDebounce.ts",
      "line": 10,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/hooks/useGestureNavigation.ts",
      "line": 220,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const element = gestureRef.current;\n    if (!element)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "src/services/ProgressiveDbLoader.ts",
      "line": 137,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (let i = 0; i < this.loadingPhases.length - 1; i++) { // Skip on-demand phase\n        this.currentPhaseIndex = i;\n        await this.loadPhase(thi...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "src/services/ProgressiveDbLoader.ts",
      "line": 190,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (let i = 0; i < phase.queries.length; i++) {\n      const query = phase.queries[i];\n      \n      try {\n        // Execute query and cache result\n  ...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "src/services/CacheService.ts",
      "line": 493,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const { query, params = [] } of criticalQueries) {\n      try {\n        await this.get(query, params);\n      }...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/services/db/ClientDatabaseService.ts",
      "line": 287,
      "description": "Recursive async function \"tryChunkedLoading\" - potential infinite recursion",
      "code_snippet": "tryChunkedLoading() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/services/db/ClientDatabaseService.ts",
      "line": 297,
      "description": "Recursive async function \"tryDirectLoading\" - potential infinite recursion",
      "code_snippet": "tryDirectLoading() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/services/db/GitHubPagesDatabase.ts",
      "line": 88,
      "description": "Recursive async function \"initGitHubPagesDatabase\" - potential infinite recursion",
      "code_snippet": "initGitHubPagesDatabase() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/services/db/SimpleDatabase.ts",
      "line": 117,
      "description": "Recursive async function \"initSimpleDatabase\" - potential infinite recursion",
      "code_snippet": "initSimpleDatabase() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/services/db/DatabaseLoader.ts",
      "line": 135,
      "description": "Recursive async function \"initDatabase\" - potential infinite recursion",
      "code_snippet": "initDatabase() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "src/services/api/FastArchitectureService.ts",
      "line": 435,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const page of pagesToCheck) {\n        const pageData = await this.loadPage(page);\n        const item = pageData.items.find(item => item.id === id...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/services/api/FastArchitectureService.ts",
      "line": 317,
      "description": "Recursive async function \"getAllArchitectures\" - potential infinite recursion",
      "code_snippet": "getAllArchitectures() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/services/api/FastArchitectureService.ts",
      "line": 834,
      "description": "Recursive async function \"searchArchitectures\" - potential infinite recursion",
      "code_snippet": "searchArchitectures() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/services/api/FastArchitectureService.ts",
      "line": 446,
      "description": "Recursive async function \"getArchitectureById\" - potential infinite recursion",
      "code_snippet": "getArchitectureById() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/services/api/FastArchitectureService.ts",
      "line": 907,
      "description": "Recursive async function \"getResearchAnalytics\" - potential infinite recursion",
      "code_snippet": "getResearchAnalytics() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/services/api/FastArchitectureService.ts",
      "line": 911,
      "description": "Recursive async function \"searchByTag\" - potential infinite recursion",
      "code_snippet": "searchByTag() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/services/api/FastArchitectureService.ts",
      "line": 915,
      "description": "Recursive async function \"getAwardWinners\" - potential infinite recursion",
      "code_snippet": "getAwardWinners() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/services/api/FastArchitectureService.ts",
      "line": 919,
      "description": "Recursive async function \"getArchitectPortfolio\" - potential infinite recursion",
      "code_snippet": "getArchitectPortfolio() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "simple-test.js",
      "line": 64,
      "description": "Recursive async function \"simpleTest\" - potential infinite recursion",
      "code_snippet": "simpleTest() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "temp/japanese_search_test_helper.js",
      "line": 231,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (let testCase of this.testCases) {\n            await this.executeSearch(testCase);\n            await this.wait(1000); // Wait between tests\n      ...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "temp/run_tests_in_console.js",
      "line": 217,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (let test of TESTS) {\n            const result = await executeTest(test);\n            results.push(result);\n            testIndex++;\n            \n...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "temp/run_tests_in_console.js",
      "line": 218,
      "description": "Recursive async function \"executeTest\" - potential infinite recursion",
      "code_snippet": "executeTest() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "temp/run_tests_in_console.js",
      "line": 307,
      "description": "Recursive async function \"runAllTests\" - potential infinite recursion",
      "code_snippet": "runAllTests() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "temp/network_diagnostics.js",
      "line": 639,
      "description": "Recursive async function \"testEndpointAccessibility\" - potential infinite recursion",
      "code_snippet": "testEndpointAccessibility() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "temp/network_diagnostics.js",
      "line": 640,
      "description": "Recursive async function \"testDatabaseFiles\" - potential infinite recursion",
      "code_snippet": "testDatabaseFiles() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "temp/network_diagnostics.js",
      "line": 641,
      "description": "Recursive async function \"testCORSConfiguration\" - potential infinite recursion",
      "code_snippet": "testCORSConfiguration() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "temp/network_diagnostics.js",
      "line": 642,
      "description": "Recursive async function \"testPerformance\" - potential infinite recursion",
      "code_snippet": "testPerformance() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "temp/network_diagnostics.js",
      "line": 646,
      "description": "Recursive async function \"saveReport\" - potential infinite recursion",
      "code_snippet": "saveReport() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "temp/network_diagnostics.js",
      "line": 656,
      "description": "Recursive async function \"main\" - potential infinite recursion",
      "code_snippet": "main() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/mobile-sw.js",
      "line": 165,
      "description": "Recursive async function \"handleCacheStrategy\" - potential infinite recursion",
      "code_snippet": "handleCacheStrategy() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/mobile-sw.js",
      "line": 184,
      "description": "Recursive async function \"cacheFirst\" - potential infinite recursion",
      "code_snippet": "cacheFirst() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/mobile-sw.js",
      "line": 235,
      "description": "Recursive async function \"networkFirst\" - potential infinite recursion",
      "code_snippet": "networkFirst() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/mobile-sw.js",
      "line": 271,
      "description": "Recursive async function \"staleWhileRevalidate\" - potential infinite recursion",
      "code_snippet": "staleWhileRevalidate() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/mobile-sw.js",
      "line": 252,
      "description": "Recursive async function \"cleanupCache\" - potential infinite recursion",
      "code_snippet": "cleanupCache() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/mobile-sw.js",
      "line": 138,
      "description": "Recursive async function \"processBackgroundSync\" - potential infinite recursion",
      "code_snippet": "processBackgroundSync() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/mobile-sw.js",
      "line": 415,
      "description": "Recursive async function \"clearCache\" - potential infinite recursion",
      "code_snippet": "clearCache() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/mobile-sw.js",
      "line": 435,
      "description": "Recursive async function \"preloadResources\" - potential infinite recursion",
      "code_snippet": "preloadResources() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sqlite.worker.js",
      "line": 1,
      "description": "Recursive async function \"init\" - potential infinite recursion",
      "code_snippet": "init() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sqlite.worker.js",
      "line": 1,
      "description": "Recursive async function \"fetchConfigs\" - potential infinite recursion",
      "code_snippet": "fetchConfigs() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 83,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const asset of DATABASE_ASSETS) {\n          try {\n            await cache.add(asset);\n          }...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 420,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const key of keys) {\n    const response = await cache.match(key);\n    if (response) {\n      const size = await estimateResponseSize(response);\n  ...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 438,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const entry of entries) {\n    if (currentSize <= maxSizeBytes) break;\n    \n    await cache.delete(entry.key);\n    currentSize -= entry.size;\n    ...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 530,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const cacheName of cacheNames) {\n    const cache = await caches.open(cacheName);\n    const keys = await cache.keys();\n    \n    let totalSize = 0;...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 215,
      "description": "Recursive async function \"handleRequest\" - potential infinite recursion",
      "code_snippet": "handleRequest() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 240,
      "description": "Recursive async function \"cacheFirst\" - potential infinite recursion",
      "code_snippet": "cacheFirst() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 266,
      "description": "Recursive async function \"networkFirst\" - potential infinite recursion",
      "code_snippet": "networkFirst() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 288,
      "description": "Recursive async function \"staleWhileRevalidate\" - potential infinite recursion",
      "code_snippet": "staleWhileRevalidate() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 316,
      "description": "Recursive async function \"cacheOnly\" - potential infinite recursion",
      "code_snippet": "cacheOnly() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 377,
      "description": "Recursive async function \"cleanupOldCaches\" - potential infinite recursion",
      "code_snippet": "cleanupOldCaches() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 397,
      "description": "Recursive async function \"cleanupOversizedCaches\" - potential infinite recursion",
      "code_snippet": "cleanupOversizedCaches() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 410,
      "description": "Recursive async function \"limitCacheSize\" - potential infinite recursion",
      "code_snippet": "limitCacheSize() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 450,
      "description": "Recursive async function \"estimateResponseSize\" - potential infinite recursion",
      "code_snippet": "estimateResponseSize() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 490,
      "description": "Recursive async function \"warmUpCache\" - potential infinite recursion",
      "code_snippet": "warmUpCache() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 512,
      "description": "Recursive async function \"clearSpecificCache\" - potential infinite recursion",
      "code_snippet": "clearSpecificCache() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 526,
      "description": "Recursive async function \"getCacheStats\" - potential infinite recursion",
      "code_snippet": "getCacheStats() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 555,
      "description": "Recursive async function \"initializeBackgroundSync\" - potential infinite recursion",
      "code_snippet": "initializeBackgroundSync() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 570,
      "description": "Recursive async function \"handleBackgroundSync\" - potential infinite recursion",
      "code_snippet": "handleBackgroundSync() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 589,
      "description": "Recursive async function \"syncCachedData\" - potential infinite recursion",
      "code_snippet": "syncCachedData() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "scripts/run-production-e2e-tests.js",
      "line": 202,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const suite of TEST_SUITES) {\n      await this.runTestSuite(suite);\n    }...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "scripts/run-production-e2e-tests.js",
      "line": 363,
      "description": "Recursive async function \"main\" - potential infinite recursion",
      "code_snippet": "main() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "scripts/precompute-analytics.js",
      "line": 630,
      "description": "Recursive async function \"main\" - potential infinite recursion",
      "code_snippet": "main() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "scripts/prepare-static-db.js",
      "line": 264,
      "description": "Recursive async function \"optimizeDatabase\" - potential infinite recursion",
      "code_snippet": "optimizeDatabase() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "scripts/prepare-static-db.js",
      "line": 337,
      "description": "Recursive async function \"prepareDatabase\" - potential infinite recursion",
      "code_snippet": "prepareDatabase() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "scripts/deploy-gh-pages.js",
      "line": 132,
      "description": "Recursive async function \"deployToGhPages\" - potential infinite recursion",
      "code_snippet": "deployToGhPages() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "scripts/verify-deployment.js",
      "line": 135,
      "description": "Recursive async function \"verifyDeployment\" - potential infinite recursion",
      "code_snippet": "verifyDeployment() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "scripts/prepare-db.js",
      "line": 59,
      "description": "Recursive async function \"main\" - potential infinite recursion",
      "code_snippet": "main() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "scripts/run-cross-browser-search-tests.js",
      "line": 333,
      "description": "Recursive async function \"runTestsForBrowser\" - potential infinite recursion",
      "code_snippet": "runTestsForBrowser() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "scripts/run-cross-browser-search-tests.js",
      "line": 425,
      "description": "Recursive async function \"main\" - potential infinite recursion",
      "code_snippet": "main() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "tmp/english_search_test.js",
      "line": 166,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const testCase of TEST_CASES) {\n    const result = await simulateSearchTest(testCase);\n    testResults.results.push(result);\n    \n    // Update s...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    }
  ],
  "all_issues": [
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "temp/ArchitectsPage_Fixed.tsx",
      "line": 105,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "temp/ArchitectsPage_Fixed.tsx",
      "line": 117,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    console.log(\"タグ読み込みのuseEffectが実行されました\");\n    const loadTags = async () => {\n  ...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "temp/ArchitectsPage_Fixed.tsx",
      "line": 138,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "temp/ArchitectsPage_Fixed.tsx",
      "line": 105,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'log', 'Boolean']",
      "code_snippet": "useEffect(() => {\n    console.log(\"tagMenuAnchorEl 状態変更:\", Boolean(yearAnchorEl));\n  }, [yearAnchorEl])...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "temp/ArchitectsPage_Fixed.tsx",
      "line": 138,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'log', 'location', 'async', 'setLoading', 'setError', 'parseInt', 'queryParams', 'get', 'queryParams', 'get', 'queryParams', 'get', 'queryParams', 'get', 'split', 'queryParams', 'get', 'queryParams', 'get', 'queryParams', 'get', 'queryParams', 'get', 'queryParams', 'get', 'queryParams', 'get', 'queryParams', 'get', 'queryParams', 'get', 'log', 'setCurrentPage', 'setSearchTerm', 'setSelectedTags', 'setSortBy', 'setSortOrder', 'setNationality', 'setCategory', 'setSchool', 'setBirthYearFrom', 'setBirthYearTo', 'setDeathYear', 'log', 'ArchitectService', 'getAllArchitects', 'parseInt', 'parseInt', 'parseInt', 'log', 'result', 'results', 'map', 'setArchitects', 'setTotalPages', 'result', 'setTotalItems', 'result', 'catch', 'error', 'setError', 'setArchitects', 'setLoading', 'loadArchitects', 'location']",
      "code_snippet": "useEffect(() => {\n    console.log(\"建築家データ読み込みのuseEffectが実行されました\", location.search);\n    const loadArchitects = async () => {\n      setLoading(true);\n ...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "tmp/MapWithClustering.tsx",
      "line": 249,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    return () => {\n      if (mapInstance) {\n        mapInstance.remove()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "tmp/MapWithClustering.tsx",
      "line": 258,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (mapInstance && calculatedBounds && !center)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "tmp/MapWithClustering.tsx",
      "line": 249,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'return', 'if', 'remove']",
      "code_snippet": "useEffect(() => {\n    return () => {\n      if (mapInstance) {\n        mapInstance.remove();\n      }\n    };\n  }, [mapInstance])...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "tmp/MapWithClustering.tsx",
      "line": 258,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'fitBounds']",
      "code_snippet": "useEffect(() => {\n    if (mapInstance && calculatedBounds && !center) {\n      mapInstance.fitBounds(calculatedBounds, { padding: [50, 50] });\n    }\n  ...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/App.tsx",
      "line": 33,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/App.tsx",
      "line": 50,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    // Log if app is running in GitHub Pages production environment\n    const isPr...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/App.tsx",
      "line": 67,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (!swStatus.isOnline && !showOfflineAlert) {\n      setShowOfflineAlert(true)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/App.tsx",
      "line": 203,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (isMobile || isTouch) {\n      setSelectedTheme(mobileTheme);\n    } else {\n ...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/App.tsx",
      "line": 212,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    // Register service worker for offline functionality\n    registerSW({\n      on...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/App.tsx",
      "line": 33,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'scrollTo']",
      "code_snippet": "useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname])...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/App.tsx",
      "line": 67,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'setShowOfflineAlert', 'setAnnouncement', 'if', 'setShowOfflineAlert', 'setAnnouncement', 'if', 'setShowUpdateAlert', 'setAnnouncement']",
      "code_snippet": "useEffect(() => {\n    if (!swStatus.isOnline && !showOfflineAlert) {\n      setShowOfflineAlert(true);\n      setAnnouncement('オフライン状態です。一部の機能が制限される場合があ...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/App.tsx",
      "line": 203,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'setSelectedTheme', 'setSelectedTheme']",
      "code_snippet": "useEffect(() => {\n    if (isMobile || isTouch) {\n      setSelectedTheme(mobileTheme);\n    } else {\n      setSelectedTheme(theme);\n    }\n  }, [isMobile...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/context/AppContext.tsx",
      "line": 149,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/context/AppContext.tsx",
      "line": 155,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/context/AppContext.tsx",
      "line": 149,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'documentElement', 'setAttribute', 'body', 'classList', 'toggle']",
      "code_snippet": "useEffect(() => {\n    document.documentElement.setAttribute('data-theme', isDarkMode ? 'dark' : 'light');\n    document.body.classList.toggle('dark-mod...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/context/AppContext.tsx",
      "line": 155,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'documentElement', 'setAttribute']",
      "code_snippet": "useEffect(() => {\n    document.documentElement.setAttribute('lang', language);\n  }, [language])...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/utils/accessibility.tsx",
      "line": 72,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      switch (event.key) {\n ...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/utils/accessibility.tsx",
      "line": 107,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (!isActive || !containerRef.current) return;\n    \n    const container = con...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/utils/accessibility.tsx",
      "line": 279,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    ...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/utils/accessibility.tsx",
      "line": 298,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-contrast: high)');\n    setPrefe...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/utils/accessibility.tsx",
      "line": 317,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    // Detect if user is using screen reader\n    const detectScreenReader = () => ...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/utils/accessibility.tsx",
      "line": 72,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'switch', 'event', 'event', 'preventDefault', 'event', 'preventDefault', 'addEventListener', 'return', 'removeEventListener']",
      "code_snippet": "useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      switch (event.key) {\n        case 'Escape':\n          onEscape?.();\n    ...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/utils/accessibility.tsx",
      "line": 107,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'containerRef', 'containerRef', 'getFocusableElements', 'if', 'focusableElements', 'focusableElements', 'firstElement', 'focus', 'if', 'event', 'if', 'event', 'if', 'event', 'preventDefault', 'lastElement', 'focus', 'if', 'event', 'preventDefault', 'firstElement', 'focus', 'container', 'addEventListener', 'return', 'container', 'removeEventListener']",
      "code_snippet": "useEffect(() => {\n    if (!isActive || !containerRef.current) return;\n    \n    const container = containerRef.current;\n    const focusableElements = g...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MobileOptimizedImage.tsx",
      "line": 117,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (enableSwipeGestures && isLoaded) {\n      const timer = setTimeout(() => {\n...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/MobileOptimizedImage.tsx",
      "line": 117,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'setTimeout', 'setShowTouchHint', 'setTimeout', 'setShowTouchHint', 'return', 'clearTimeout']",
      "code_snippet": "useEffect(() => {\n    if (enableSwipeGestures && isLoaded) {\n      const timer = setTimeout(() => {\n        setShowTouchHint(true);\n        setTimeout...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ArchitectureTimelineVisualization.tsx",
      "line": 229,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (!isPlaying) return;\n    \n    const interval = setInterval(() => {\n      se...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ArchitectureTimelineVisualization.tsx",
      "line": 247,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (onYearChange) {\n      onYearChange(currentYear)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/ArchitectureTimelineVisualization.tsx",
      "line": 229,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'setInterval', 'setCurrentYear', 'if', 'setIsPlaying', 'return', 'clearInterval']",
      "code_snippet": "useEffect(() => {\n    if (!isPlaying) return;\n    \n    const interval = setInterval(() => {\n      setCurrentYear(prev => {\n        const next = prev +...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/ArchitectureTimelineVisualization.tsx",
      "line": 247,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if']",
      "code_snippet": "useEffect(() => {\n    if (onYearChange) {\n      onYearChange(currentYear);\n    }\n  }, [currentYear, onYearChange])...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MobileNavigationProvider.tsx",
      "line": 115,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const currentPath = location.pathname;\n    \n    if (previousPath && previousPa...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MobileNavigationProvider.tsx",
      "line": 128,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const handlePageLoad = ()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MobileNavigationProvider.tsx",
      "line": 145,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MobileNavigationProvider.tsx",
      "line": 155,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MobileNavigationProvider.tsx",
      "line": 169,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (viewport.isMobile && isOnline)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/MobileNavigationProvider.tsx",
      "line": 115,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'location', 'if', 'Date', 'now', 'setPreviousPath', 'setNavigationStartTime', 'Date', 'now', 'location']",
      "code_snippet": "useEffect(() => {\n    const currentPath = location.pathname;\n    \n    if (previousPath && previousPath !== currentPath) {\n      const navigationTime =...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/MobileNavigationProvider.tsx",
      "line": 128,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'MobilePerformanceMonitor', 'recordMetric', 'location', 'viewport', 'isMobile', 'toString', 'if', 'handlePageLoad', 'addEventListener', 'return', 'removeEventListener', 'location', 'viewport']",
      "code_snippet": "useEffect(() => {\n    const handlePageLoad = () => {\n      MobilePerformanceMonitor.recordMetric('page-load-complete', 1, {\n        path: location.pat...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/MobileNavigationProvider.tsx",
      "line": 145,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'MobilePerformanceMonitor', 'recordMetric', 'width', 'toString', 'height', 'toString', 'isMobile', 'toString', 'isTablet', 'toString']",
      "code_snippet": "useEffect(() => {\n    MobilePerformanceMonitor.recordMetric('viewport-change', 1, {\n      width: viewport.width.toString(),\n      height: viewport.hei...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/MobileNavigationProvider.tsx",
      "line": 155,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'MobilePerformanceMonitor', 'recordMetric', 'toString', 'location', 'if', 'if', 'notification', 'location', 'notification']",
      "code_snippet": "useEffect(() => {\n    MobilePerformanceMonitor.recordMetric('network-status-change', 1, {\n      isOnline: isOnline.toString(),\n      path: location.pa...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/MobileNavigationProvider.tsx",
      "line": 169,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'viewport', 'criticalRoutes', 'forEach', 'createElement', 'link', 'link', 'head', 'appendChild', 'viewport']",
      "code_snippet": "useEffect(() => {\n    if (viewport.isMobile && isOnline) {\n      // Preload critical routes for better mobile performance\n      const criticalRoutes =...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ArchitectureAnalyticsDashboard.tsx",
      "line": 262,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (enableRealTimeUpdates) {\n      const interval = setInterval(() => {\n      ...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/ArchitectureAnalyticsDashboard.tsx",
      "line": 262,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'setInterval', 'setLastUpdated', 'Date', 'return', 'clearInterval']",
      "code_snippet": "useEffect(() => {\n    if (enableRealTimeUpdates) {\n      const interval = setInterval(() => {\n        setLastUpdated(new Date());\n      }, refreshInte...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/TouchOptimizedSearchBar.tsx",
      "line": 256,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (containerRef.current && isMobile)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/TouchOptimizedSearchBar.tsx",
      "line": 256,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'containerRef', 'containerRef', 'if', 'if', 'setIsExpanded', 'if', 'setIsExpanded']",
      "code_snippet": "useEffect(() => {\n    if (containerRef.current && isMobile) {\n      const cleanup = handleSwipe(containerRef.current, (direction) => {\n        if (dir...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/Map.tsx",
      "line": 226,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (mapInstance && markerClusterGroup && markers.length > 0) {\n      // 既存のマーカ...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/Map.tsx",
      "line": 309,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    return () => {\n      if (markerClusterGroup && mapInstance) {\n        mapInsta...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/Map.tsx",
      "line": 226,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'clearLayers', 'forEach', 'marker', 'marker', 'marker', 'marker', 'marker', 'marker', 'marker', 'marker', 'if', 'L', 'marker', 'leafletMarker', 'bindPopup', '1', 'marker', '0', 'marker', 'marker', '0', 'marker', 'marker', '0', 'marker', 'marker', '0', 'marker', 'marker', '0', 'marker', 'marker', '0', 'location', 'marker', 'addLayer', 'filter', 'm', 'm', 'm', 'm', 'm', 'm', 'if', 'validMarkers', 'L', 'latLngBounds', 'validMarkers', 'map', 'm', 'm', 'm', 'm', 'm', 'm', 'L', 'fitBounds']",
      "code_snippet": "useEffect(() => {\n    if (mapInstance && markerClusterGroup && markers.length > 0) {\n      // 既存のマーカーをクリア\n      markerClusterGroup.clearLayers();\n    ...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/Map.tsx",
      "line": 309,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'return', 'if', 'removeLayer', 'if', 'remove']",
      "code_snippet": "useEffect(() => {\n    return () => {\n      if (markerClusterGroup && mapInstance) {\n        mapInstance.removeLayer(markerClusterGroup);\n      }\n     ...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MobileArchitectureViewer.tsx",
      "line": 152,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    setCurrentImageIndex(0)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MobileArchitectureViewer.tsx",
      "line": 157,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (showInfo) {\n      const timer = setTimeout(() => {\n        setShowInfo(fal...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/MobileArchitectureViewer.tsx",
      "line": 152,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'setCurrentImageIndex', 'architecture']",
      "code_snippet": "useEffect(() => {\n    setCurrentImageIndex(0);\n  }, [architecture.id])...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/MobileArchitectureViewer.tsx",
      "line": 157,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'setTimeout', 'setShowInfo', 'return', 'clearTimeout']",
      "code_snippet": "useEffect(() => {\n    if (showInfo) {\n      const timer = setTimeout(() => {\n        setShowInfo(false);\n      }, 5000);\n      return () => clearTimeo...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MapWithClustering.tsx",
      "line": 186,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    // 地図コンテナの存在確認\n    const container = document.getElementById('map-with-cluster...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MapWithClustering.tsx",
      "line": 283,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (!map || !clusterGroup || !markers || markers.length === 0) return;\n\n    //...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MapWithClustering.tsx",
      "line": 410,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (!map) return;\n    \n    if (center && zoom)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/MapWithClustering.tsx",
      "line": 283,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'clearLayers', 'filter', 'marker', 'marker', 'marker', 'isNaN', 'marker', 'isNaN', 'marker', 'validMarkers', 'tags', 'includes', 'L', 'Icon', 'raw', 'githubusercontent', 'gold', 'cdnjs', 'cloudflare', '0', '7', 'shadow', 'L', 'Icon', 'Default', 'L', 'marker', '1', '1', 'location', 'rgba', '0', 'marker', 'bindPopup', 'marker', 'on', 'function', 'if', 'onMarkerClick', 'if', 'setShowControls', 'setTimeout', 'setShowControls', 'addLayers', 'if', 'validMarkers', 'setTimeout', 'getBounds', 'if', 'bounds', 'isValid', 'fitBounds']",
      "code_snippet": "useEffect(() => {\n    if (!map || !clusterGroup || !markers || markers.length === 0) return;\n\n    // 既存のマーカーをクリア\n    clusterGroup.clearLayers();\n\n    ...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/MapWithClustering.tsx",
      "line": 410,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'if', 'setView']",
      "code_snippet": "useEffect(() => {\n    if (!map) return;\n    \n    if (center && zoom) {\n      map.setView(center, zoom);\n    }\n  }, [center, zoom, map])...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ProgressiveImage.tsx",
      "line": 145,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (loading === 'eager' || priority) {\n      setIsInView(true);\n      return;\n...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ProgressiveImage.tsx",
      "line": 177,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (!isInView) return;\n\n    const loadImage = (imageSrc: string)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/ProgressiveImage.tsx",
      "line": 145,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'setIsInView', 'IntersectionObserver', 'if', 'entry', 'setIsInView', 'observer', 'disconnect', '0', 'if', 'containerRef', 'observer', 'observe', 'containerRef', 'intersectionObserverRef', 'return', 'observer', 'disconnect']",
      "code_snippet": "useEffect(() => {\n    if (loading === 'eager' || priority) {\n      setIsInView(true);\n      return;\n    }\n\n    const observer = new IntersectionObserv...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/ProgressiveImage.tsx",
      "line": 177,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'Image', 'img', 'setCurrentSrc', 'setImageState', 'setLoadingProgress', 'resolve', 'img', 'reject', 'Error', 'if', 'setLoadStartTime', 'Date', 'now', 'setInterval', 'setLoadingProgress', 'if', 'clearInterval', 'Math', 'random', 'img', 'clearInterval', 'setLoadingProgress', 'setCurrentSrc', 'setImageState', 'resolve', 'img', 'async', 'setImageState', 'setLoadingProgress', 'if', 'loadImage', 'if', 'loadImage', 'Promise', 'setTimeout', 'catch', 'loadImage', 'catch', 'error', 'handleImageError', 'progressiveLoad']",
      "code_snippet": "useEffect(() => {\n    if (!isInView) return;\n\n    const loadImage = (imageSrc: string) => {\n      return new Promise<void>((resolve, reject) => {\n    ...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/PerformanceMonitor.tsx",
      "line": 147,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    collectMetrics()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/PerformanceMonitor.tsx",
      "line": 147,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'setInterval', 'return', 'clearInterval']",
      "code_snippet": "useEffect(() => {\n    collectMetrics();\n    \n    const interval = setInterval(collectMetrics, 30000); // Every 30 seconds\n    \n    return () => clearI...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/components/PerformanceMonitor.tsx",
      "line": 442,
      "description": "Recursive async function \"getLCP\" - potential infinite recursion",
      "code_snippet": "getLCP() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/components/PerformanceMonitor.tsx",
      "line": 461,
      "description": "Recursive async function \"getFID\" - potential infinite recursion",
      "code_snippet": "getFID() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/components/PerformanceMonitor.tsx",
      "line": 480,
      "description": "Recursive async function \"getCLS\" - potential infinite recursion",
      "code_snippet": "getCLS() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/components/PerformanceMonitor.tsx",
      "line": 504,
      "description": "Recursive async function \"getCacheStats\" - potential infinite recursion",
      "code_snippet": "getCacheStats() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/components/PerformanceMonitor.tsx",
      "line": 515,
      "description": "Recursive async function \"measureDbQueryTime\" - potential infinite recursion",
      "code_snippet": "measureDbQueryTime() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/OptimizedAnalyticsDashboard.tsx",
      "line": 248,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    loadAnalyticsData()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/OptimizedAnalyticsDashboard.tsx",
      "line": 248,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'loadAnalyticsData']",
      "code_snippet": "useEffect(() => {\n    loadAnalyticsData();\n  }, [selectedTimeRange, selectedPrefecture, selectedCategory])...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/DatabaseProvider.tsx",
      "line": 22,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (isError && retryCount < 2) {\n      const timer = setTimeout(() => {\n      ...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/DatabaseProvider.tsx",
      "line": 22,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'setTimeout', 'log', 'initialization', 'setRetryCount', 'isDatabaseAvailable', 'then', 'if', 'location', 'reload', 'catch', 'return', 'clearTimeout']",
      "code_snippet": "useEffect(() => {\n    if (isError && retryCount < 2) {\n      const timer = setTimeout(() => {\n        console.log(`Auto-retrying database initializati...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/DatabaseLoader.tsx",
      "line": 18,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    let isMounted = true;\n    let progressInterval: NodeJS.Timeout;\n    \n    const...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/DatabaseLoader.tsx",
      "line": 18,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'NodeJS', 'async', 'if', 'DatabaseStatus', 'setTimeout', 'async', 'setInterval', 'if', 'setProgress', '0', 'Math', 'min', 'initDatabase', 'if', 'setProgress', 'setStatus', 'DatabaseStatus', 'catch', 'if', 'setError', 'err', 'setStatus', 'DatabaseStatus', 'clearInterval', 'initDb', 'return', 'clearInterval']",
      "code_snippet": "useEffect(() => {\n    let isMounted = true;\n    let progressInterval: NodeJS.Timeout;\n    \n    const initDb = async () => {\n      // 既に接続が確立されている場合は処理...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ProgressiveDisclosure.tsx",
      "line": 87,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (persistState) {\n      const saved = localStorage.getItem(`progressive-disc...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ProgressiveDisclosure.tsx",
      "line": 104,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (persistState)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ProgressiveDisclosure.tsx",
      "line": 116,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const progress = (completedLevels.size / levels.length) * 100;\n    setUserProg...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/ProgressiveDisclosure.tsx",
      "line": 87,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'localStorage', 'getItem', 'if', 'JSON', 'parse', 'setActiveLevel', 'setCompletedLevels', 'Set', 'setExpandedLevels', 'Set', 'catch', 'warn']",
      "code_snippet": "useEffect(() => {\n    if (persistState) {\n      const saved = localStorage.getItem(`progressive-disclosure-${title}`);\n      if (saved) {\n        try ...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/ProgressiveDisclosure.tsx",
      "line": 104,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'Array', 'from', 'Array', 'from', 'localStorage', 'setItem', 'JSON', 'stringify']",
      "code_snippet": "useEffect(() => {\n    if (persistState) {\n      const state = {\n        activeLevel,\n        completed: Array.from(completedLevels),\n        expanded:...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/ProgressiveDisclosure.tsx",
      "line": 116,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'levels', 'setUserProgress', 'if', 'levels']",
      "code_snippet": "useEffect(() => {\n    const progress = (completedLevels.size / levels.length) * 100;\n    setUserProgress(progress);\n    \n    if (progress === 100 && o...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/AdvancedFilterSystem.tsx",
      "line": 304,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/AdvancedFilterSystem.tsx",
      "line": 444,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const active: ActiveFilter[] = [];\n\n    Object.entries(filters)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/AdvancedFilterSystem.tsx",
      "line": 497,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (realtimeEnabled)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/AdvancedFilterSystem.tsx",
      "line": 304,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'categories', 'slice', 'architectNames', 'slice', 'prefectures', 'slice', 'setSearchSuggestions', 'Set']",
      "code_snippet": "useEffect(() => {\n    const suggestions = [\n      ...filterOptions.categories.slice(0, 5),\n      ...filterOptions.architectNames.slice(0, 5),\n      .....",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/AdvancedFilterSystem.tsx",
      "line": 444,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'Object', 'entries', 'forEach', 'if', 'Array', 'isArray', 'value', 'find', 'c', 'switch', 'filter', 'arch', 'toLowerCase', 'includes', 'value', 'toLowerCase', 'arch', 'toLowerCase', 'includes', 'value', 'toLowerCase', 'Array', 'isArray', 'value', 'join', 'filter', 'arch', 'arch', 'arch', 'String', 'active', 'push', 'setActiveFilters']",
      "code_snippet": "useEffect(() => {\n    const active: ActiveFilter[] = [];\n\n    Object.entries(filters).forEach(([key, value]) => {\n      if (value && value !== '' && !...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/AdvancedFilterSystem.tsx",
      "line": 497,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if']",
      "code_snippet": "useEffect(() => {\n    if (realtimeEnabled) {\n      onFilterChange(filteredData, activeFilters);\n    }\n  }, [filteredData, activeFilters, onFilterChang...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MobileSearchInterface.tsx",
      "line": 130,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (!enableVoiceSearch || !('webkitSpeechRecognition' in window || 'SpeechReco...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MobileSearchInterface.tsx",
      "line": 213,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (isOpen && inputRef.current) {\n      setTimeout(() => {\n        inputRef.cu...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MobileSearchInterface.tsx",
      "line": 222,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    setShowSuggestions(query.length > 0 && isOpen)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/MobileSearchInterface.tsx",
      "line": 227,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    setActiveFilters(availableFilters)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/MobileSearchInterface.tsx",
      "line": 130,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'SpeechRecognition', 'recognition', 'recognition', 'recognition', 'recognition', 'setIsListening', 'recognition', 'event', 'setQuery', 'handleSearch', 'recognition', 'error', 'event', 'setIsListening', 'recognition', 'setIsListening', 'recognitionRef', 'return', 'if', 'recognitionRef', 'recognitionRef', 'current', 'abort']",
      "code_snippet": "useEffect(() => {\n    if (!enableVoiceSearch || !('webkitSpeechRecognition' in window || 'SpeechRecognition' in window)) {\n      return;\n    }\n\n    co...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/MobileSearchInterface.tsx",
      "line": 213,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'inputRef', 'setTimeout', 'inputRef', 'focus']",
      "code_snippet": "useEffect(() => {\n    if (isOpen && inputRef.current) {\n      setTimeout(() => {\n        inputRef.current?.focus();\n      }, 100);\n    }\n  }, [isOpen]...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/MobileSearchInterface.tsx",
      "line": 222,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'setShowSuggestions']",
      "code_snippet": "useEffect(() => {\n    setShowSuggestions(query.length > 0 && isOpen);\n  }, [query, isOpen])...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/InteractiveMap.tsx",
      "line": 385,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (!mapInstance || !markerClusterGroup) return;\n    \n    // Clear existing ma...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/InteractiveMap.tsx",
      "line": 385,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'clearLayers', 'forEach', 'if', 'marker', 'marker', 'L', 'marker', 'marker', 'marker', 'createCustomIcon', 'marker', 'marker', 'leafletMarker', 'bindPopup', 'createPopupContent', 'if', 'addLayer', 'leafletMarker', 'addTo', 'if', 'hasLayer', 'addLayer', 'if', 'hasLayer', 'removeLayer', 'if', 'L', 'marker', 'createCustomIcon', 'singleLeafletMarker', 'bindPopup', 'createPopupContent', 'singleLeafletMarker', 'addTo', 'setVisibleMarkers']",
      "code_snippet": "useEffect(() => {\n    if (!mapInstance || !markerClusterGroup) return;\n    \n    // Clear existing markers\n    markerClusterGroup.clearLayers();\n    \n ...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ui/TouchOptimizedSearchBar.tsx",
      "line": 215,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    return () => {\n      if (searchTimeout.current) {\n        clearTimeout(searchT...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ui/SearchBar.tsx",
      "line": 70,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    setInputValue(value)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ui/SearchBar.tsx",
      "line": 139,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    return () => {\n      if (debounceTimerRef.current) {\n        clearTimeout(debo...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/ui/SearchBar.tsx",
      "line": 70,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'setInputValue', 'lastSearchValueRef']",
      "code_snippet": "useEffect(() => {\n    setInputValue(value);\n    lastSearchValueRef.current = value;\n  }, [value])...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ui/ProgressiveLoader.tsx",
      "line": 284,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (!triggerRef.current || enableVirtualization) return;\n    \n    observerRef....",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ui/ProgressiveLoader.tsx",
      "line": 310,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (!enableVirtualization || !containerRef.current) return;\n    \n    const con...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/ui/ProgressiveLoader.tsx",
      "line": 328,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    loadInitialData()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/ui/ProgressiveLoader.tsx",
      "line": 284,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'triggerRef', 'observerRef', 'IntersectionObserver', 'if', 'entry', '0', 'observerRef', 'current', 'observe', 'triggerRef', 'return', 'if', 'observerRef', 'observerRef', 'current', 'disconnect']",
      "code_snippet": "useEffect(() => {\n    if (!triggerRef.current || enableVirtualization) return;\n    \n    observerRef.current = new IntersectionObserver(\n      (entries...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/ui/ProgressiveLoader.tsx",
      "line": 310,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'containerRef', 'containerRef', 'if', 'container', 'addEventListener', 'return', 'container', 'removeEventListener']",
      "code_snippet": "useEffect(() => {\n    if (!enableVirtualization || !containerRef.current) return;\n    \n    const container = containerRef.current;\n    const handleVir...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/ui/ProgressiveLoader.tsx",
      "line": 328,
      "description": "Potential missing dependencies in useEffect: ['useEffect']",
      "code_snippet": "useEffect(() => {\n    loadInitialData();\n  }, [loadInitialData])...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/search/FacetedSearch.tsx",
      "line": 252,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (localRange[0] !== range.selectedMin || localRange[1] !== range.selectedMax...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/search/FacetedSearch.tsx",
      "line": 490,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/search/FacetedSearch.tsx",
      "line": 495,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    onFacetsChange?.(activeFacets)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/search/FacetedSearch.tsx",
      "line": 252,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'range', 'range', 'range', 'range']",
      "code_snippet": "useEffect(() => {\n    if (localRange[0] !== range.selectedMin || localRange[1] !== range.selectedMax) {\n      debouncedOnChange(localRange);\n    }\n  }...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/search/FacetedSearch.tsx",
      "line": 490,
      "description": "Potential missing dependencies in useEffect: ['useEffect']",
      "code_snippet": "useEffect(() => {\n    onSearch(debouncedSearch, debouncedFacets);\n  }, [debouncedSearch, debouncedFacets, onSearch])...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/search/FacetedSearch.tsx",
      "line": 495,
      "description": "Potential missing dependencies in useEffect: ['useEffect']",
      "code_snippet": "useEffect(() => {\n    onFacetsChange?.(activeFacets);\n  }, [activeFacets, onFacetsChange])...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/accessibility/KeyboardNavigationManager.tsx",
      "line": 40,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (restoreFocus && document.activeElement) {\n      lastFocusedElement.current...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/accessibility/KeyboardNavigationManager.tsx",
      "line": 128,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      // Handle Tab key for ...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/accessibility/KeyboardNavigationManager.tsx",
      "line": 222,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (trapFocus && containerRef.current) {\n      setTimeout(() => {\n        focu...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/accessibility/KeyboardNavigationManager.tsx",
      "line": 40,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'lastFocusedElement', 'return', 'if', 'lastFocusedElement', 'setTimeout', 'lastFocusedElement', 'focus']",
      "code_snippet": "useEffect(() => {\n    if (restoreFocus && document.activeElement) {\n      lastFocusedElement.current = document.activeElement as HTMLElement;\n    }\n  ...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/accessibility/KeyboardNavigationManager.tsx",
      "line": 128,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'event', 'if', 'event', 'event', 'switch', 'event', 'event', 'preventDefault', 'event', 'preventDefault', 'if', 'containerRef', 'containerRef', 'event', 'preventDefault', 'if', 'containerRef', 'containerRef', 'if', 'event', 'event', 'preventDefault', 'navigateToNextLandmark', 'event', 'if', 'addEventListener', 'return', 'removeEventListener']",
      "code_snippet": "useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      // Handle Tab key for focus trap\n      if (event.key === 'Tab') {\n      ...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/accessibility/KeyboardNavigationManager.tsx",
      "line": 222,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'containerRef', 'setTimeout', 'containerRef']",
      "code_snippet": "useEffect(() => {\n    if (trapFocus && containerRef.current) {\n      setTimeout(() => {\n        focusFirstElement(containerRef.current!);\n      }, 0);...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/accessibility/HighContrastToggle.tsx",
      "line": 47,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/accessibility/HighContrastToggle.tsx",
      "line": 52,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const root = document.documentElement;\n    \n    if (highContrastEnabled) {\n   ...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/accessibility/HighContrastToggle.tsx",
      "line": 47,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'localStorage', 'setItem', 'toString']",
      "code_snippet": "useEffect(() => {\n    localStorage.setItem('highContrast', highContrastEnabled.toString());\n  }, [highContrastEnabled])...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/accessibility/HighContrastToggle.tsx",
      "line": 52,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'root', 'classList', 'add', 'root', 'style', 'setProperty', 'root', 'style', 'setProperty', 'root', 'style', 'setProperty', 'root', 'style', 'setProperty', 'root', 'style', 'setProperty', 'root', 'classList', 'remove', 'root', 'style', 'removeProperty', 'root', 'style', 'removeProperty', 'root', 'style', 'removeProperty', 'root', 'style', 'removeProperty', 'root', 'style', 'removeProperty']",
      "code_snippet": "useEffect(() => {\n    const root = document.documentElement;\n    \n    if (highContrastEnabled) {\n      root.classList.add('high-contrast-mode');\n     ...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/accessibility/FocusManagementSystem.tsx",
      "line": 205,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (!onEscape) return;\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/accessibility/FocusManagementSystem.tsx",
      "line": 219,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (!containerRef.current) return;\n\n    const container = containerRef.current...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/accessibility/FocusManagementSystem.tsx",
      "line": 282,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const focusElement = () => {\n      if (elementRef.current) {\n        elementRe...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/accessibility/FocusManagementSystem.tsx",
      "line": 358,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const portalElement = document.createElement('div');\n    document.body.appendC...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/accessibility/FocusManagementSystem.tsx",
      "line": 205,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'if', 'event', 'addEventListener', 'return', 'removeEventListener']",
      "code_snippet": "useEffect(() => {\n    if (!onEscape) return;\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        onEsca...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/accessibility/FocusManagementSystem.tsx",
      "line": 219,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'containerRef', 'containerRef', 'if', 'if', 'if', 'if', 'focus', 'if', 'cleanupRef', 'return', 'if', 'cleanupRef', 'cleanupRef', 'current', 'if']",
      "code_snippet": "useEffect(() => {\n    if (!containerRef.current) return;\n\n    const container = containerRef.current;\n\n    // Push focus context\n    if (restoreFocus)...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/accessibility/FocusManagementSystem.tsx",
      "line": 282,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'elementRef', 'elementRef', 'current', 'focus', 'if', 'elementRef', 'elementRef', 'current', 'select', 'if', 'setTimeout', 'return', 'clearTimeout', 'focusElement']",
      "code_snippet": "useEffect(() => {\n    const focusElement = () => {\n      if (elementRef.current) {\n        elementRef.current.focus();\n        \n        if (selectText...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/accessibility/FocusManagementSystem.tsx",
      "line": 358,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'createElement', 'body', 'appendChild', 'if', 'if', 'getFocusableElements', 'if', 'id', 'return', 'id', 'body', 'removeChild']",
      "code_snippet": "useEffect(() => {\n    const portalElement = document.createElement('div');\n    document.body.appendChild(portalElement);\n\n    // Determine initial foc...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/components/accessibility/AccessibilityTestSuite.tsx",
      "line": 394,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (autoRun) {\n      runTests()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/components/accessibility/AccessibilityTestSuite.tsx",
      "line": 394,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if']",
      "code_snippet": "useEffect(() => {\n    if (autoRun) {\n      runTests();\n    }\n  }, [autoRun, runTests])...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "src/components/accessibility/AccessibilityTestSuite.tsx",
      "line": 370,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (let i = 0; i < accessibilityTests.length; i++) {\n      const test = accessibilityTests[i];\n      try {\n        const result = await test.test();\n...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/pages/AnalyticsPage.tsx",
      "line": 122,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const loadData = async () => {\n      if (!isReady)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/pages/AnalyticsPage.tsx",
      "line": 122,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'async', 'if', 'setArchitectures', 'setFilteredArchitectures', 'setArchitects', 'log', 'catch', 'error', 'setNotification', 'loadData']",
      "code_snippet": "useEffect(() => {\n    const loadData = async () => {\n      if (!isReady) return;\n\n      try {\n        // For OptimizedAnalyticsDashboard, we don't nee...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/pages/ResearchPage.tsx",
      "line": 95,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const loadPrecomputedAnalytics = async () => {\n      try {\n        setLoading(...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/pages/ResearchPage.tsx",
      "line": 95,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'async', 'setLoading', 'log', 'analytics', 'import', 'meta', 'env', 'BASE_URL', 'replace', 'fetch', 'base', 'if', 'response', 'Error', 'response', 'response', 'response', 'json', 'log', 'precomputedData', 'architectPopularity', 'slice', 'map', 'arch', 'arch', 'precomputedData', 'yearDistribution', 'filter', 'item', 'map', 'Math', 'floor', 'item', 'item', 'Object', 'entries', 'item', 'sort']",
      "code_snippet": "useEffect(() => {\n    const loadPrecomputedAnalytics = async () => {\n      try {\n        setLoading(true);\n        console.log('🔬 Loading precomputed ...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/pages/ArchitectsPage.tsx",
      "line": 82,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/pages/ArchitectsPage.tsx",
      "line": 94,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    console.log(\"タグ読み込みのuseEffectが実行されました\");\n    const loadTags = async () => {\n  ...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/pages/ArchitectsPage.tsx",
      "line": 114,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/pages/ArchitectsPage.tsx",
      "line": 82,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'log', 'Boolean']",
      "code_snippet": "useEffect(() => {\n    console.log(\"tagMenuAnchorEl 状態変更:\", Boolean(yearAnchorEl));\n  }, [yearAnchorEl])...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/pages/ArchitectsPage.tsx",
      "line": 114,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'log', 'location', 'async', 'setLoading', 'parseInt', 'queryParams', 'get', 'queryParams', 'get', 'queryParams', 'get', 'queryParams', 'get', 'split', 'queryParams', 'get', 'queryParams', 'get', 'queryParams', 'get', 'queryParams', 'get', 'queryParams', 'get', 'queryParams', 'get', 'queryParams', 'get', 'queryParams', 'get', 'log', 'setCurrentPage', 'setSearchTerm', 'setSelectedTags', 'setSortBy', 'setSortOrder', 'setNationality', 'setCategory', 'setSchool', 'setBirthYearFrom', 'setBirthYearTo', 'setDeathYear', 'log', 'ArchitectService', 'getAllArchitects', 'parseInt', 'parseInt', 'parseInt', 'log', 'setArchitects', 'result', 'setTotalPages', 'result', 'setTotalItems', 'result', 'catch', 'error', 'setLoading', 'loadArchitects', 'location']",
      "code_snippet": "useEffect(() => {\n    console.log(\"建築家データ読み込みのuseEffectが実行されました\", location.search);\n    const loadArchitects = async () => {\n      setLoading(true);\n ...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/pages/ArchitectureSinglePage.tsx",
      "line": 36,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const fetchWork = async () => {\n      setLoading(true);\n      try {\n        co...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/pages/ArchitectureSinglePage.tsx",
      "line": 36,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'async', 'setLoading', 'getArchitectureByIdFast', 'parseInt', 'if', 'Error', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'setWork', 'catch', 'error', 'setError', 'error', 'setLoading', 'fetchWork']",
      "code_snippet": "useEffect(() => {\n    const fetchWork = async () => {\n      setLoading(true);\n      try {\n        const data = await getArchitectureByIdFast(parseInt(...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/pages/ArchitecturePage.tsx",
      "line": 143,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n  //   try {\n  //     const saved = localStorage.getItem('archi-recent-searches');...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/pages/ArchitecturePage.tsx",
      "line": 155,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n  //   if (researchData)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/pages/ArchitecturePage.tsx",
      "line": 211,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        setResearchLoading(...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/pages/ArchitecturePage.tsx",
      "line": 342,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    // URLからクエリパラメータを解析\n    const queryParams = new URLSearchParams(location.searc...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/pages/ArchitecturePage.tsx",
      "line": 155,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'if', 'architects', 'slice', 'map', 'architect', 'architect', 'architect', 'prefectures', 'slice', 'map', 'pref', 'pref', 'pref', 'setTrendingSearches']",
      "code_snippet": "useEffect(() => {\n  //   if (researchData) {\n  //     const trending: AutocompleteSuggestion[] = [\n  //       ...researchData.architects.slice(0, 3).m...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/pages/ArchitecturePage.tsx",
      "line": 342,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'URLSearchParams', 'location', 'filterTypes', 'forEach', 'queryParams', 'get', 'if', 'filters', 'push', 'if', 'queryParams', 'get', 'if', 'find', 's', 'if', 'setSearchValue', 'setSearchInputValue', 'queryParams', 'get', 'if', 'setSortBy', 'setActiveFilters', 'if', 'filters', 'fetchArchitectures', 'fetchArchitectures', 'location']",
      "code_snippet": "useEffect(() => {\n    // URLからクエリパラメータを解析\n    const queryParams = new URLSearchParams(location.search);\n    const filters: {type: string, value: strin...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/pages/ArchitectSinglePage.tsx",
      "line": 77,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const fetchArchitect = async () => {\n      setLoading(true);\n      try {\n     ...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/pages/ArchitectSinglePage.tsx",
      "line": 77,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'async', 'setLoading', 'ArchitectService', 'getArchitectById', 'parseInt', 'if', 'setError', 'setLoading', 'setArchitect', 'if', 'data', 'data', 'teacherInfo', 'findArchitectIdByName', 'data', 'catch', 'error', 'teachers', 'push', 'if', 'data', 'data', 'teacherInfo', 'findArchitectIdByName', 'data', 'catch', 'error', 'teachers', 'push', 'if', 'data', 'data', 'teacherInfo', 'findArchitectIdByName', 'data', 'catch', 'error', 'teachers', 'push', 'setTeacherInfo', 'catch', 'error', 'setError', 'setLoading', 'if', 'fetchArchitect']",
      "code_snippet": "useEffect(() => {\n    const fetchArchitect = async () => {\n      setLoading(true);\n      try {\n        const data = await ArchitectService.getArchitec...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/pages/MapPage.tsx",
      "line": 65,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    fetchWorks()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/pages/HomePage.tsx",
      "line": 57,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    // Listen for database download progress events\n    const handleProgressUpdate...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "tests/e2e/test-utils.ts",
      "line": 93,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const selector of searchSelectors) {\n      const input = page.locator(selector);\n      if (await input.count() > 0) {\n        searchInput = input...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "tests/e2e/test-utils.ts",
      "line": 254,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const selector of expectedErrorSelectors) {\n      const errorElement = page.locator(selector);\n      if (await errorElement.count() > 0) {\n      ...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "tests/e2e/test-utils.ts",
      "line": 276,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const selector of filterSelectors) {\n      const panel = page.locator(selector);\n      if (await panel.count() > 0) {\n        filterPanel = panel...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "tests/e2e/production/utils/test-helpers.ts",
      "line": 114,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const breakpoint of breakpoints) {\n      await this.page.setViewportSize({ width: breakpoint.width, height: breakpoint.height }...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "tests/e2e/production/utils/test-helpers.ts",
      "line": 166,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const img of images) {\n      const alt = await img.getAttribute('alt');\n      if (!alt) {\n        console.warn('⚠️  Image without alt text found'...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "tests/e2e/production/utils/test-helpers.ts",
      "line": 175,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const input of inputs) {\n      const id = await input.getAttribute('id');\n      const ariaLabel = await input.getAttribute('aria-label');\n      c...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/utils/serviceWorker.ts",
      "line": 169,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const updateOnlineStatus = ()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "memory_leak_risk",
      "severity": "medium",
      "file": "src/utils/serviceWorker.ts",
      "line": 0,
      "description": "Event listeners without cleanup: {'load'}",
      "code_snippet": "addEventListener for: load",
      "recommendation": "Add removeEventListener in cleanup/useEffect return"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/utils/mobileGestures.ts",
      "line": 249,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/utils/mobileGestures.ts",
      "line": 316,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/utils/mobileGestures.ts",
      "line": 349,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const handleResize = ()...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/utils/mobileServiceWorker.ts",
      "line": 148,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const handleOnline = () => {\n      setIsOnline(true);\n      // Trigger backgro...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/utils/mobileServiceWorker.ts",
      "line": 374,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    if (!('serviceWorker' in navigator)) return;\n\n    const handleControllerChange...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "src/utils/mobileServiceWorker.ts",
      "line": 183,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const cacheName of cacheNames) {\n      const cache = await caches.open(cacheName);\n      const requests = await cache.keys();\n\n      for (const r...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "src/utils/mobileServiceWorker.ts",
      "line": 255,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const item of queue) {\n      try {\n        // Process sync item (implement your sync logic here)\n        await this.syncItem(item);\n        proce...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "memory_leak_risk",
      "severity": "medium",
      "file": "src/utils/mobileServiceWorker.ts",
      "line": 0,
      "description": "Event listeners without cleanup: {'load', 'updatefound', 'statechange'}",
      "code_snippet": "addEventListener for: load, updatefound, statechange",
      "recommendation": "Add removeEventListener in cleanup/useEffect return"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/hooks/useDatabase.ts",
      "line": 21,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const initDb = async () => {\n      try {\n        setIsLoading(true);\n        s...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/hooks/useDatabase.ts",
      "line": 21,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'async', 'setIsLoading', 'setError', 'initDatabase', 'setIsLoading', 'catch', 'setError', 'setIsLoading', 'getDatabaseStatus', 'if', 'setStatus', 'if', 'DatabaseStatus', 'setIsLoading', 'setError', 'if', 'DatabaseStatus', 'setIsLoading', 'if', 'DatabaseStatus', 'setIsLoading', 'if', 'DatabaseStatus', 'initDb', 'checkStatus', 'setInterval', 'return', 'clearInterval']",
      "code_snippet": "useEffect(() => {\n    const initDb = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n        await initDatabase();\n     ...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/hooks/useIntersectionObserver.ts",
      "line": 33,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const element = targetRef.current;\n    if (!element || (once && hasIntersected...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/hooks/useIntersectionObserver.ts",
      "line": 33,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'targetRef', 'if', 'IntersectionObserver', 'entry', 'setIsIntersecting', 'if', 'setHasIntersected', 'observer', 'observe', 'return', 'observer', 'unobserve']",
      "code_snippet": "useEffect(() => {\n    const element = targetRef.current;\n    if (!element || (once && hasIntersected)) {\n      return;\n    }\n\n    const observer = new...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/hooks/useDebounce.ts",
      "line": 10,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/hooks/useDebounce.ts",
      "line": 10,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'setTimeout', 'setDebouncedValue', 'return', 'clearTimeout']",
      "code_snippet": "useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "infinite_render_risk",
      "severity": "high",
      "file": "src/hooks/useGestureNavigation.ts",
      "line": 220,
      "description": "useEffect without dependency array - potential infinite re-renders",
      "code_snippet": "useEffect(() => {\n    const element = gestureRef.current;\n    if (!element)...",
      "recommendation": "Add dependency array to useEffect"
    },
    {
      "type": "missing_dependencies",
      "severity": "medium",
      "file": "src/hooks/useGestureNavigation.ts",
      "line": 220,
      "description": "Potential missing dependencies in useEffect: ['useEffect', 'gestureRef', 'if', 'element', 'addEventListener', 'element', 'addEventListener', 'element', 'addEventListener', 'element', 'addEventListener', 'element', 'addEventListener', 'e', 'preventDefault', 'return', 'element', 'removeEventListener', 'element', 'removeEventListener', 'element', 'removeEventListener', 'element', 'removeEventListener', 'element', 'removeEventListener', 'e', 'preventDefault', 'if', 'longPressTimerRef', 'clearTimeout', 'longPressTimerRef']",
      "code_snippet": "useEffect(() => {\n    const element = gestureRef.current;\n    if (!element) return;\n\n    // Touch events\n    element.addEventListener('touchstart', ha...",
      "recommendation": "Add missing dependencies to useEffect dependency array"
    },
    {
      "type": "memory_leak_risk",
      "severity": "medium",
      "file": "src/services/PerformanceOptimizer.ts",
      "line": 0,
      "description": "Event listeners without cleanup: {'updatefound'}",
      "code_snippet": "addEventListener for: updatefound",
      "recommendation": "Add removeEventListener in cleanup/useEffect return"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "src/services/ProgressiveDbLoader.ts",
      "line": 137,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (let i = 0; i < this.loadingPhases.length - 1; i++) { // Skip on-demand phase\n        this.currentPhaseIndex = i;\n        await this.loadPhase(thi...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "src/services/ProgressiveDbLoader.ts",
      "line": 190,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (let i = 0; i < phase.queries.length; i++) {\n      const query = phase.queries[i];\n      \n      try {\n        // Execute query and cache result\n  ...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "src/services/CacheService.ts",
      "line": 493,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const { query, params = [] } of criticalQueries) {\n      try {\n        await this.get(query, params);\n      }...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/services/db/ClientDatabaseService.ts",
      "line": 287,
      "description": "Recursive async function \"tryChunkedLoading\" - potential infinite recursion",
      "code_snippet": "tryChunkedLoading() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/services/db/ClientDatabaseService.ts",
      "line": 297,
      "description": "Recursive async function \"tryDirectLoading\" - potential infinite recursion",
      "code_snippet": "tryDirectLoading() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/services/db/GitHubPagesDatabase.ts",
      "line": 88,
      "description": "Recursive async function \"initGitHubPagesDatabase\" - potential infinite recursion",
      "code_snippet": "initGitHubPagesDatabase() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/services/db/SimpleDatabase.ts",
      "line": 117,
      "description": "Recursive async function \"initSimpleDatabase\" - potential infinite recursion",
      "code_snippet": "initSimpleDatabase() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/services/db/DatabaseLoader.ts",
      "line": 135,
      "description": "Recursive async function \"initDatabase\" - potential infinite recursion",
      "code_snippet": "initDatabase() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "src/services/api/FastArchitectureService.ts",
      "line": 435,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const page of pagesToCheck) {\n        const pageData = await this.loadPage(page);\n        const item = pageData.items.find(item => item.id === id...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/services/api/FastArchitectureService.ts",
      "line": 317,
      "description": "Recursive async function \"getAllArchitectures\" - potential infinite recursion",
      "code_snippet": "getAllArchitectures() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/services/api/FastArchitectureService.ts",
      "line": 834,
      "description": "Recursive async function \"searchArchitectures\" - potential infinite recursion",
      "code_snippet": "searchArchitectures() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/services/api/FastArchitectureService.ts",
      "line": 446,
      "description": "Recursive async function \"getArchitectureById\" - potential infinite recursion",
      "code_snippet": "getArchitectureById() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/services/api/FastArchitectureService.ts",
      "line": 907,
      "description": "Recursive async function \"getResearchAnalytics\" - potential infinite recursion",
      "code_snippet": "getResearchAnalytics() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/services/api/FastArchitectureService.ts",
      "line": 911,
      "description": "Recursive async function \"searchByTag\" - potential infinite recursion",
      "code_snippet": "searchByTag() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/services/api/FastArchitectureService.ts",
      "line": 915,
      "description": "Recursive async function \"getAwardWinners\" - potential infinite recursion",
      "code_snippet": "getAwardWinners() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "src/services/api/FastArchitectureService.ts",
      "line": 919,
      "description": "Recursive async function \"getArchitectPortfolio\" - potential infinite recursion",
      "code_snippet": "getArchitectPortfolio() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "simple-test.js",
      "line": 64,
      "description": "Recursive async function \"simpleTest\" - potential infinite recursion",
      "code_snippet": "simpleTest() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "temp/japanese_search_test_helper.js",
      "line": 231,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (let testCase of this.testCases) {\n            await this.executeSearch(testCase);\n            await this.wait(1000); // Wait between tests\n      ...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "memory_leak_risk",
      "severity": "medium",
      "file": "temp/performance_analysis_architects_tab.js",
      "line": 0,
      "description": "Event listeners without cleanup: {'beforeunload', 'DOMContentLoaded'}",
      "code_snippet": "addEventListener for: beforeunload, DOMContentLoaded",
      "recommendation": "Add removeEventListener in cleanup/useEffect return"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "temp/run_tests_in_console.js",
      "line": 217,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (let test of TESTS) {\n            const result = await executeTest(test);\n            results.push(result);\n            testIndex++;\n            \n...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "temp/run_tests_in_console.js",
      "line": 218,
      "description": "Recursive async function \"executeTest\" - potential infinite recursion",
      "code_snippet": "executeTest() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "temp/run_tests_in_console.js",
      "line": 307,
      "description": "Recursive async function \"runAllTests\" - potential infinite recursion",
      "code_snippet": "runAllTests() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "temp/network_diagnostics.js",
      "line": 639,
      "description": "Recursive async function \"testEndpointAccessibility\" - potential infinite recursion",
      "code_snippet": "testEndpointAccessibility() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "temp/network_diagnostics.js",
      "line": 640,
      "description": "Recursive async function \"testDatabaseFiles\" - potential infinite recursion",
      "code_snippet": "testDatabaseFiles() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "temp/network_diagnostics.js",
      "line": 641,
      "description": "Recursive async function \"testCORSConfiguration\" - potential infinite recursion",
      "code_snippet": "testCORSConfiguration() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "temp/network_diagnostics.js",
      "line": 642,
      "description": "Recursive async function \"testPerformance\" - potential infinite recursion",
      "code_snippet": "testPerformance() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "temp/network_diagnostics.js",
      "line": 646,
      "description": "Recursive async function \"saveReport\" - potential infinite recursion",
      "code_snippet": "saveReport() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "temp/network_diagnostics.js",
      "line": 656,
      "description": "Recursive async function \"main\" - potential infinite recursion",
      "code_snippet": "main() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/mobile-sw.js",
      "line": 165,
      "description": "Recursive async function \"handleCacheStrategy\" - potential infinite recursion",
      "code_snippet": "handleCacheStrategy() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/mobile-sw.js",
      "line": 184,
      "description": "Recursive async function \"cacheFirst\" - potential infinite recursion",
      "code_snippet": "cacheFirst() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/mobile-sw.js",
      "line": 235,
      "description": "Recursive async function \"networkFirst\" - potential infinite recursion",
      "code_snippet": "networkFirst() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/mobile-sw.js",
      "line": 271,
      "description": "Recursive async function \"staleWhileRevalidate\" - potential infinite recursion",
      "code_snippet": "staleWhileRevalidate() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/mobile-sw.js",
      "line": 252,
      "description": "Recursive async function \"cleanupCache\" - potential infinite recursion",
      "code_snippet": "cleanupCache() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/mobile-sw.js",
      "line": 138,
      "description": "Recursive async function \"processBackgroundSync\" - potential infinite recursion",
      "code_snippet": "processBackgroundSync() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/mobile-sw.js",
      "line": 415,
      "description": "Recursive async function \"clearCache\" - potential infinite recursion",
      "code_snippet": "clearCache() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/mobile-sw.js",
      "line": 435,
      "description": "Recursive async function \"preloadResources\" - potential infinite recursion",
      "code_snippet": "preloadResources() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "memory_leak_risk",
      "severity": "medium",
      "file": "public/mobile-sw.js",
      "line": 0,
      "description": "Event listeners without cleanup: {'sync', 'error', 'unhandledrejection', 'install', 'activate', 'message', 'fetch'}",
      "code_snippet": "addEventListener for: sync, error, unhandledrejection, install, activate, message, fetch",
      "recommendation": "Add removeEventListener in cleanup/useEffect return"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sqlite.worker.js",
      "line": 1,
      "description": "Recursive async function \"init\" - potential infinite recursion",
      "code_snippet": "init() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sqlite.worker.js",
      "line": 1,
      "description": "Recursive async function \"fetchConfigs\" - potential infinite recursion",
      "code_snippet": "fetchConfigs() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 83,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const asset of DATABASE_ASSETS) {\n          try {\n            await cache.add(asset);\n          }...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 420,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const key of keys) {\n    const response = await cache.match(key);\n    if (response) {\n      const size = await estimateResponseSize(response);\n  ...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 438,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const entry of entries) {\n    if (currentSize <= maxSizeBytes) break;\n    \n    await cache.delete(entry.key);\n    currentSize -= entry.size;\n    ...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 530,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const cacheName of cacheNames) {\n    const cache = await caches.open(cacheName);\n    const keys = await cache.keys();\n    \n    let totalSize = 0;...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 215,
      "description": "Recursive async function \"handleRequest\" - potential infinite recursion",
      "code_snippet": "handleRequest() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 240,
      "description": "Recursive async function \"cacheFirst\" - potential infinite recursion",
      "code_snippet": "cacheFirst() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 266,
      "description": "Recursive async function \"networkFirst\" - potential infinite recursion",
      "code_snippet": "networkFirst() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 288,
      "description": "Recursive async function \"staleWhileRevalidate\" - potential infinite recursion",
      "code_snippet": "staleWhileRevalidate() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 316,
      "description": "Recursive async function \"cacheOnly\" - potential infinite recursion",
      "code_snippet": "cacheOnly() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 377,
      "description": "Recursive async function \"cleanupOldCaches\" - potential infinite recursion",
      "code_snippet": "cleanupOldCaches() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 397,
      "description": "Recursive async function \"cleanupOversizedCaches\" - potential infinite recursion",
      "code_snippet": "cleanupOversizedCaches() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 410,
      "description": "Recursive async function \"limitCacheSize\" - potential infinite recursion",
      "code_snippet": "limitCacheSize() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 450,
      "description": "Recursive async function \"estimateResponseSize\" - potential infinite recursion",
      "code_snippet": "estimateResponseSize() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 490,
      "description": "Recursive async function \"warmUpCache\" - potential infinite recursion",
      "code_snippet": "warmUpCache() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 512,
      "description": "Recursive async function \"clearSpecificCache\" - potential infinite recursion",
      "code_snippet": "clearSpecificCache() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 526,
      "description": "Recursive async function \"getCacheStats\" - potential infinite recursion",
      "code_snippet": "getCacheStats() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 555,
      "description": "Recursive async function \"initializeBackgroundSync\" - potential infinite recursion",
      "code_snippet": "initializeBackgroundSync() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 570,
      "description": "Recursive async function \"handleBackgroundSync\" - potential infinite recursion",
      "code_snippet": "handleBackgroundSync() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "public/sw-performance.js",
      "line": 589,
      "description": "Recursive async function \"syncCachedData\" - potential infinite recursion",
      "code_snippet": "syncCachedData() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "memory_leak_risk",
      "severity": "medium",
      "file": "public/sw-performance.js",
      "line": 0,
      "description": "Event listeners without cleanup: {'sync', 'install', 'activate', 'message', 'fetch'}",
      "code_snippet": "addEventListener for: sync, install, activate, message, fetch",
      "recommendation": "Add removeEventListener in cleanup/useEffect return"
    },
    {
      "type": "memory_leak_risk",
      "severity": "medium",
      "file": "public/sw.js",
      "line": 0,
      "description": "Event listeners without cleanup: {'sync', 'periodicsync', 'install', 'activate', 'message', 'fetch'}",
      "code_snippet": "addEventListener for: sync, periodicsync, install, activate, message, fetch",
      "recommendation": "Add removeEventListener in cleanup/useEffect return"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "scripts/run-production-e2e-tests.js",
      "line": 202,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const suite of TEST_SUITES) {\n      await this.runTestSuite(suite);\n    }...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "scripts/run-production-e2e-tests.js",
      "line": 363,
      "description": "Recursive async function \"main\" - potential infinite recursion",
      "code_snippet": "main() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "scripts/precompute-analytics.js",
      "line": 630,
      "description": "Recursive async function \"main\" - potential infinite recursion",
      "code_snippet": "main() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "scripts/prepare-static-db.js",
      "line": 264,
      "description": "Recursive async function \"optimizeDatabase\" - potential infinite recursion",
      "code_snippet": "optimizeDatabase() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "scripts/prepare-static-db.js",
      "line": 337,
      "description": "Recursive async function \"prepareDatabase\" - potential infinite recursion",
      "code_snippet": "prepareDatabase() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "scripts/deploy-gh-pages.js",
      "line": 132,
      "description": "Recursive async function \"deployToGhPages\" - potential infinite recursion",
      "code_snippet": "deployToGhPages() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "scripts/verify-deployment.js",
      "line": 135,
      "description": "Recursive async function \"verifyDeployment\" - potential infinite recursion",
      "code_snippet": "verifyDeployment() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "scripts/prepare-db.js",
      "line": 59,
      "description": "Recursive async function \"main\" - potential infinite recursion",
      "code_snippet": "main() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "scripts/run-cross-browser-search-tests.js",
      "line": 333,
      "description": "Recursive async function \"runTestsForBrowser\" - potential infinite recursion",
      "code_snippet": "runTestsForBrowser() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "recursive_async_function",
      "severity": "high",
      "file": "scripts/run-cross-browser-search-tests.js",
      "line": 425,
      "description": "Recursive async function \"main\" - potential infinite recursion",
      "code_snippet": "main() calls itself",
      "recommendation": "Add proper termination conditions and depth limits"
    },
    {
      "type": "blocking_async_loop",
      "severity": "high",
      "file": "tmp/english_search_test.js",
      "line": 166,
      "description": "Await in synchronous loop - blocks execution",
      "code_snippet": "for (const testCase of TEST_CASES) {\n    const result = await simulateSearchTest(testCase);\n    testResults.results.push(result);\n    \n    // Update s...",
      "recommendation": "Use Promise.all() or implement proper async iteration"
    }
  ],
  "performance_issues": [
    {
      "type": "excessive_inline_handlers",
      "severity": "low",
      "file": "temp/ArchitectsPage_Fixed.tsx",
      "line": 0,
      "description": "Multiple inline event handlers (7) - may cause re-renders",
      "code_snippet": "7 inline handlers found",
      "recommendation": "Consider using useCallback for event handlers"
    },
    {
      "type": "multiple_state_updates",
      "severity": "medium",
      "file": "temp/ArchitectsPage_Fixed.tsx",
      "line": 163,
      "description": "Multiple state updates in proximity (11) - may cause re-renders",
      "code_snippet": "11 state updates near line 163",
      "recommendation": "Consider batching state updates or using useReducer"
    },
    {
      "type": "multiple_state_updates",
      "severity": "medium",
      "file": "temp/ArchitectsPage_Fixed.tsx",
      "line": 278,
      "description": "Multiple state updates in proximity (5) - may cause re-renders",
      "code_snippet": "5 state updates near line 278",
      "recommendation": "Consider batching state updates or using useReducer"
    },
    {
      "type": "multiple_state_updates",
      "severity": "medium",
      "file": "temp/ArchitectsPage_Fixed.tsx",
      "line": 303,
      "description": "Multiple state updates in proximity (6) - may cause re-renders",
      "code_snippet": "6 state updates near line 303",
      "recommendation": "Consider batching state updates or using useReducer"
    },
    {
      "type": "multiple_state_updates",
      "severity": "medium",
      "file": "temp/ArchitectsPage_Fixed.tsx",
      "line": 372,
      "description": "Multiple state updates in proximity (10) - may cause re-renders",
      "code_snippet": "10 state updates near line 372",
      "recommendation": "Consider batching state updates or using useReducer"
    },
    {
      "type": "multiple_state_updates",
      "severity": "medium",
      "file": "temp/ArchitectsPage_Fixed.tsx",
      "line": 419,
      "description": "Multiple state updates in proximity (5) - may cause re-renders",
      "code_snippet": "5 state updates near line 419",
      "recommendation": "Consider batching state updates or using useReducer"
    },
    {
      "type": "multiple_state_updates",
      "severity": "medium",
      "file": "src/App.tsx",
      "line": 69,
      "description": "Multiple state updates in proximity (4) - may cause re-renders",
      "code_snippet": "4 state updates near line 69",
      "recommendation": "Consider batching state updates or using useReducer"
    },
    {
      "type": "multiple_state_updates",
      "severity": "medium",
      "file": "src/components/MobileOptimizedImage.tsx",
      "line": 119,
      "description": "Multiple state updates in proximity (4) - may cause re-renders",
      "code_snippet": "4 state updates near line 119",
      "recommendation": "Consider batching state updates or using useReducer"
    },
    {
      "type": "excessive_inline_handlers",
      "severity": "low",
      "file": "src/components/ArchitectureTimelineVisualization.tsx",
      "line": 0,
      "description": "Multiple inline event handlers (10) - may cause re-renders",
      "code_snippet": "10 inline handlers found",
      "recommendation": "Consider using useCallback for event handlers"
    },
    {
      "type": "excessive_inline_handlers",
      "severity": "low",
      "file": "src/components/ArchitectureAnalyticsDashboard.tsx",
      "line": 0,
      "description": "Multiple inline event handlers (10) - may cause re-renders",
      "code_snippet": "10 inline handlers found",
      "recommendation": "Consider using useCallback for event handlers"
    },
    {
      "type": "excessive_inline_handlers",
      "severity": "low",
      "file": "src/components/TouchOptimizedSearchBar.tsx",
      "line": 0,
      "description": "Multiple inline event handlers (8) - may cause re-renders",
      "code_snippet": "8 inline handlers found",
      "recommendation": "Consider using useCallback for event handlers"
    },
    {
      "type": "multiple_state_updates",
      "severity": "medium",
      "file": "src/components/ProgressiveImage.tsx",
      "line": 259,
      "description": "Multiple state updates in proximity (6) - may cause re-renders",
      "code_snippet": "6 state updates near line 259",
      "recommendation": "Consider batching state updates or using useReducer"
    },
    {
      "type": "multiple_state_updates",
      "severity": "medium",
      "file": "src/components/ProgressiveImage.tsx",
      "line": 293,
      "description": "Multiple state updates in proximity (5) - may cause re-renders",
      "code_snippet": "5 state updates near line 293",
      "recommendation": "Consider batching state updates or using useReducer"
    },
    {
      "type": "excessive_inline_handlers",
      "severity": "low",
      "file": "src/components/OptimizedAnalyticsDashboard.tsx",
      "line": 0,
      "description": "Multiple inline event handlers (8) - may cause re-renders",
      "code_snippet": "8 inline handlers found",
      "recommendation": "Consider using useCallback for event handlers"
    },
    {
      "type": "multiple_state_updates",
      "severity": "medium",
      "file": "src/components/OptimizedAnalyticsDashboard.tsx",
      "line": 223,
      "description": "Multiple state updates in proximity (4) - may cause re-renders",
      "code_snippet": "4 state updates near line 223",
      "recommendation": "Consider batching state updates or using useReducer"
    },
    {
      "type": "excessive_inline_handlers",
      "severity": "low",
      "file": "src/components/ProgressiveDisclosure.tsx",
      "line": 0,
      "description": "Multiple inline event handlers (8) - may cause re-renders",
      "code_snippet": "8 inline handlers found",
      "recommendation": "Consider using useCallback for event handlers"
    },
    {
      "type": "excessive_inline_handlers",
      "severity": "low",
      "file": "src/components/AdvancedFilterSystem.tsx",
      "line": 0,
      "description": "Multiple inline event handlers (10) - may cause re-renders",
      "code_snippet": "10 inline handlers found",
      "recommendation": "Consider using useCallback for event handlers"
    },
    {
      "type": "excessive_inline_handlers",
      "severity": "low",
      "file": "src/components/DataExportSystem.tsx",
      "line": 0,
      "description": "Multiple inline event handlers (10) - may cause re-renders",
      "code_snippet": "10 inline handlers found",
      "recommendation": "Consider using useCallback for event handlers"
    },
    {
      "type": "excessive_inline_handlers",
      "severity": "low",
      "file": "src/components/MobileSearchInterface.tsx",
      "line": 0,
      "description": "Multiple inline event handlers (10) - may cause re-renders",
      "code_snippet": "10 inline handlers found",
      "recommendation": "Consider using useCallback for event handlers"
    },
    {
      "type": "multiple_state_updates",
      "severity": "medium",
      "file": "src/components/ui/ProgressiveLoader.tsx",
      "line": 164,
      "description": "Multiple state updates in proximity (4) - may cause re-renders",
      "code_snippet": "4 state updates near line 164",
      "recommendation": "Consider batching state updates or using useReducer"
    },
    {
      "type": "multiple_state_updates",
      "severity": "medium",
      "file": "src/components/ui/ProgressiveLoader.tsx",
      "line": 259,
      "description": "Multiple state updates in proximity (4) - may cause re-renders",
      "code_snippet": "4 state updates near line 259",
      "recommendation": "Consider batching state updates or using useReducer"
    },
    {
      "type": "excessive_inline_handlers",
      "severity": "low",
      "file": "src/components/search/FacetedSearch.tsx",
      "line": 0,
      "description": "Multiple inline event handlers (16) - may cause re-renders",
      "code_snippet": "16 inline handlers found",
      "recommendation": "Consider using useCallback for event handlers"
    },
    {
      "type": "multiple_state_updates",
      "severity": "medium",
      "file": "src/components/accessibility/HighContrastToggle.tsx",
      "line": 57,
      "description": "Multiple state updates in proximity (5) - may cause re-renders",
      "code_snippet": "5 state updates near line 57",
      "recommendation": "Consider batching state updates or using useReducer"
    },
    {
      "type": "excessive_inline_handlers",
      "severity": "low",
      "file": "src/pages/ResearchPage.tsx",
      "line": 0,
      "description": "Multiple inline event handlers (19) - may cause re-renders",
      "code_snippet": "19 inline handlers found",
      "recommendation": "Consider using useCallback for event handlers"
    },
    {
      "type": "excessive_inline_handlers",
      "severity": "low",
      "file": "src/pages/ArchitectsPage.tsx",
      "line": 0,
      "description": "Multiple inline event handlers (6) - may cause re-renders",
      "code_snippet": "6 inline handlers found",
      "recommendation": "Consider using useCallback for event handlers"
    },
    {
      "type": "multiple_state_updates",
      "severity": "medium",
      "file": "src/pages/ArchitectsPage.tsx",
      "line": 137,
      "description": "Multiple state updates in proximity (11) - may cause re-renders",
      "code_snippet": "11 state updates near line 137",
      "recommendation": "Consider batching state updates or using useReducer"
    },
    {
      "type": "multiple_state_updates",
      "severity": "medium",
      "file": "src/pages/ArchitectsPage.tsx",
      "line": 243,
      "description": "Multiple state updates in proximity (5) - may cause re-renders",
      "code_snippet": "5 state updates near line 243",
      "recommendation": "Consider batching state updates or using useReducer"
    },
    {
      "type": "multiple_state_updates",
      "severity": "medium",
      "file": "src/pages/ArchitectsPage.tsx",
      "line": 268,
      "description": "Multiple state updates in proximity (6) - may cause re-renders",
      "code_snippet": "6 state updates near line 268",
      "recommendation": "Consider batching state updates or using useReducer"
    },
    {
      "type": "multiple_state_updates",
      "severity": "medium",
      "file": "src/pages/ArchitectsPage.tsx",
      "line": 337,
      "description": "Multiple state updates in proximity (10) - may cause re-renders",
      "code_snippet": "10 state updates near line 337",
      "recommendation": "Consider batching state updates or using useReducer"
    },
    {
      "type": "multiple_state_updates",
      "severity": "medium",
      "file": "src/pages/ArchitectsPage.tsx",
      "line": 384,
      "description": "Multiple state updates in proximity (5) - may cause re-renders",
      "code_snippet": "5 state updates near line 384",
      "recommendation": "Consider batching state updates or using useReducer"
    },
    {
      "type": "excessive_inline_handlers",
      "severity": "low",
      "file": "src/pages/ArchitecturePage.tsx",
      "line": 0,
      "description": "Multiple inline event handlers (10) - may cause re-renders",
      "code_snippet": "10 inline handlers found",
      "recommendation": "Consider using useCallback for event handlers"
    },
    {
      "type": "multiple_state_updates",
      "severity": "medium",
      "file": "src/pages/ArchitecturePage.tsx",
      "line": 457,
      "description": "Multiple state updates in proximity (4) - may cause re-renders",
      "code_snippet": "4 state updates near line 457",
      "recommendation": "Consider batching state updates or using useReducer"
    },
    {
      "type": "excessive_inline_handlers",
      "severity": "low",
      "file": "src/pages/ArchitectSinglePage.tsx",
      "line": 0,
      "description": "Multiple inline event handlers (6) - may cause re-renders",
      "code_snippet": "6 inline handlers found",
      "recommendation": "Consider using useCallback for event handlers"
    },
    {
      "type": "multiple_state_updates",
      "severity": "medium",
      "file": "src/pages/HomePage.tsx",
      "line": 67,
      "description": "Multiple state updates in proximity (4) - may cause re-renders",
      "code_snippet": "4 state updates near line 67",
      "recommendation": "Consider batching state updates or using useReducer"
    },
    {
      "type": "multiple_state_updates",
      "severity": "medium",
      "file": "src/utils/mobileGestures.ts",
      "line": 240,
      "description": "Multiple state updates in proximity (4) - may cause re-renders",
      "code_snippet": "4 state updates near line 240",
      "recommendation": "Consider batching state updates or using useReducer"
    },
    {
      "type": "multiple_state_updates",
      "severity": "medium",
      "file": "src/hooks/useDatabase.ts",
      "line": 24,
      "description": "Multiple state updates in proximity (5) - may cause re-renders",
      "code_snippet": "5 state updates near line 24",
      "recommendation": "Consider batching state updates or using useReducer"
    },
    {
      "type": "multiple_state_updates",
      "severity": "medium",
      "file": "src/hooks/useDatabase.ts",
      "line": 41,
      "description": "Multiple state updates in proximity (4) - may cause re-renders",
      "code_snippet": "4 state updates near line 41",
      "recommendation": "Consider batching state updates or using useReducer"
    },
    {
      "type": "multiple_state_updates",
      "severity": "medium",
      "file": "public/sqlite.worker.js",
      "line": 1,
      "description": "Multiple state updates in proximity (28) - may cause re-renders",
      "code_snippet": "28 state updates near line 1",
      "recommendation": "Consider batching state updates or using useReducer"
    }
  ],
  "recommendations": [
    {
      "priority": "high",
      "category": "performance_blocking",
      "issue": "174 high-severity performance issues",
      "action": "Address useEffect dependency issues and async operation problems",
      "impact": "These issues likely cause the loading to get stuck"
    },
    {
      "priority": "medium",
      "category": "memory_management",
      "issue": "7 potential memory leak sources",
      "action": "Add proper cleanup for event listeners and subscriptions",
      "impact": "Memory leaks cause performance degradation over time"
    }
  ]
}